<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/fts/test/ftsprobe_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>poll_expected_return_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>poll_expected_revents</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>poll</name></cpp:macro> <cpp:value>poll_mock</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>PollFds</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>poll_mock</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>nfds_t</name></type> <name>p2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>poll_expected_return_value</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>PollFds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <name>poll_expected_revents</name></expr>;</expr_stmt></block_content></block></for>
	<return>return <expr><name>poll_expected_return_value</name></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<comment type="block">/* Actual function body */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ftsprobe.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>InitFtsProbeInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>FtsProbeInfo</name></type> <name>fts_info</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>ftsProbeInfo</name> <operator>=</operator> <operator>&amp;</operator><name>fts_info</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>poll_will_return</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>expected_return_value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>poll_expected_return_value</name> <operator>=</operator> <name>expected_return_value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>poll_expected_revents</name> <operator>=</operator> <name>revents</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Function to help create representation of gp_segment_configuration, for
 * ease of testing different scenarios. Using the same can mock out different
 * configuration layouts.
 *
 * --------------------------------
 * Inputs:
 *    segCnt - number of primary segments the configuration should mock
 *    has_mirrors - controls if mirrors corresponding to primary are created
 * --------------------------------
 *
 * Function always adds master to the configuration. Also, all the segments
 * are by default marked up. Tests leverage to create initial configuration
 * using this and then modify the same as per needs to mock different
 * scenarios like mirror down, primary down, etc...
 */</comment>
<function><type><specifier>static</specifier> <name>CdbComponentDatabases</name> <modifier>*</modifier></type>
<name>InitTestCdb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>segCnt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>has_mirrors</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>default_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>mirror_multiplier</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>has_mirrors</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>mirror_multiplier</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdb</name> <init>=
	<expr><operator>(</operator><name>CdbComponentDatabases</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CdbComponentDatabases</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cdb</name><operator>-&gt;</operator><name>total_entry_dbs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cdb</name><operator>-&gt;</operator><name>total_segment_dbs</name></name> <operator>=</operator> <name>segCnt</name> <operator>*</operator> <name>mirror_multiplier</name></expr>;</expr_stmt>	<comment type="block">/* with mirror? */</comment>
	<expr_stmt><expr><name><name>cdb</name><operator>-&gt;</operator><name>total_segments</name></name> <operator>=</operator> <name>segCnt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cdb</name><operator>-&gt;</operator><name>entry_db_info</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CdbComponentDatabaseInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cdb</name><operator>-&gt;</operator><name>total_entry_dbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cdb</name><operator>-&gt;</operator><name>segment_db_info</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CdbComponentDatabaseInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cdb</name><operator>-&gt;</operator><name>total_segment_dbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="block">/* create the master entry_db_info */</comment>
	<decl_stmt><decl><type><name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type><name>cdbinfo</name> <init>= <expr><operator>&amp;</operator><name><name>cdb</name><operator>-&gt;</operator><name>entry_db_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <operator>(</operator><name>GpSegConfigEntry</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GpSegConfigEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>segindex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>role</name></name> <operator>=</operator> <name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>preferred_role</name></name> <operator>=</operator> <name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr>;</expr_stmt>

	<comment type="block">/* create the segment_db_info entries */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cdb</name><operator>-&gt;</operator><name>total_segment_dbs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type><name>cdbinfo</name> <init>= <expr><operator>&amp;</operator><name><name>cdb</name><operator>-&gt;</operator><name>segment_db_info</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <operator>(</operator><name>GpSegConfigEntry</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GpSegConfigEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>segindex</name></name> <operator>=</operator> <name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>hostip</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>hostip</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>dbid</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>has_mirrors</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>role</name></name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr> ?</condition><then>
				<expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr> </then><else>:
				<expr><name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr></else></ternary></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>preferred_role</name></name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr> ?</condition><then>
				<expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr> </then><else>:
				<expr><name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr></else></ternary></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>role</name></name> <operator>=</operator> <name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>preferred_role</name></name> <operator>=</operator> <name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>default_mode</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>cdb</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Initialize connection and startTime for each primary-mirror pair. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_fts_context</name><parameter_list>(<parameter><decl><type><name>fts_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>FtsMessageState</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_time_t</name></type> <name>now</name> <init>= <expr><operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>context</name><operator>-&gt;</operator><name>num_pairs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>perSegInfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>perSegInfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>startTime</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>perSegInfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>conn</name> <operator>=</operator> <operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGconn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type>
<name>GetSegmentFromCdbComponentDatabases</name><parameter_list>(<parameter><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>dbs</name></decl></parameter>,
									<parameter><decl><type><name>int16</name></type> <name>segindex</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>role</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dbs</name><operator>-&gt;</operator><name>total_segment_dbs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type><name>cdb</name> <init>= <expr><operator>&amp;</operator><name><name>dbs</name><operator>-&gt;</operator><name>segment_db_info</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cdb</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>segindex</name></name> <operator>==</operator> <name>segindex</name> <operator>&amp;&amp;</operator> <name><name>cdb</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>role</name></name> <operator>==</operator> <name>role</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>cdb</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ExpectedPrimaryAndMirrorConfiguration</name><parameter_list>(<parameter><decl><type><name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type><name>primary</name></decl></parameter>,
									  <parameter><decl><type><name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type><name>mirror</name></decl></parameter>,
									  <parameter><decl><type><name>char</name></type> <name>primaryStatus</name></decl></parameter>,
									  <parameter><decl><type><name>char</name></type> <name>mirrorStatus</name></decl></parameter>,
									  <parameter><decl><type><name>char</name></type> <name>mode</name></decl></parameter>,
									  <parameter><decl><type><name>char</name></type> <name>newPrimaryRole</name></decl></parameter>,
									  <parameter><decl><type><name>char</name></type> <name>newMirrorRole</name></decl></parameter>,
									  <parameter><decl><type><name>bool</name></type> <name>willUpdatePrimary</name></decl></parameter>,
									  <parameter><decl><type><name>bool</name></type> <name>willUpdateMirror</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* mock probeWalRepUpdateConfig */</comment>
	<if_stmt><if>if <condition>(<expr><name>willUpdatePrimary</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>probeWalRepUpdateConfig</name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>, <argument><expr><name><name>primary</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>probeWalRepUpdateConfig</name></expr></argument>, <argument><expr><name>segindex</name></expr></argument>, <argument><expr><name><name>primary</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>segindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>probeWalRepUpdateConfig</name></expr></argument>, <argument><expr><name>role</name></expr></argument>, <argument><expr><name>newPrimaryRole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>probeWalRepUpdateConfig</name></expr></argument>, <argument><expr><name>IsSegmentAlive</name></expr></argument>,
					 <argument><expr><ternary><condition><expr><name>primaryStatus</name> <operator>==</operator> <name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>probeWalRepUpdateConfig</name></expr></argument>, <argument><expr><name>IsInSync</name></expr></argument>,
					 <argument><expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>probeWalRepUpdateConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>willUpdateMirror</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>probeWalRepUpdateConfig</name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>, <argument><expr><name><name>mirror</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>probeWalRepUpdateConfig</name></expr></argument>, <argument><expr><name>segindex</name></expr></argument>, <argument><expr><name><name>mirror</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>segindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>probeWalRepUpdateConfig</name></expr></argument>, <argument><expr><name>role</name></expr></argument>, <argument><expr><name>newMirrorRole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>probeWalRepUpdateConfig</name></expr></argument>, <argument><expr><name>IsSegmentAlive</name></expr></argument>,
					 <argument><expr><ternary><condition><expr><name>mirrorStatus</name> <operator>==</operator> <name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>probeWalRepUpdateConfig</name></expr></argument>, <argument><expr><name>IsInSync</name></expr></argument>,
					 <argument><expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>probeWalRepUpdateConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>PrimaryOrMirrorWillBeUpdated</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>StartTransactionCommand</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>GetTransactionSnapshot</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>CommitTransactionCommand</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * One primary segment, connection starts successfully from initial state.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_ftsConnect_FTS_PROBE_SEGMENT</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>primary_conninfo</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_segment_info</name> <modifier>*</modifier></type><name>ftsInfo</name> <init>= <expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>pgconn</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGconn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pgconn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_STARTED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pgconn</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>primary_conninfo</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"host=%s port=%d gpconntype=%s"</literal></expr></argument>,
			 <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>primary_cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>hostip</name></name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>primary_cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
			 <argument><expr><name>GPCONN_TYPE_FTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_string</name><argument_list>(<argument><expr><name>PQconnectStart</name></expr></argument>, <argument><expr><name>conninfo</name></expr></argument>, <argument><expr><name>primary_conninfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQconnectStart</name></expr></argument>, <argument><expr><name>pgconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ftsConnect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>FTS_PROBE_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Successful ftsConnect must set the socket to be polled for writing. */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>poll_events</name></name> <operator>&amp;</operator> <name>POLLOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Successful connections must have their startTime recorded. */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>startTime</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Two primary segments, connection for one segment fails due to libpq
 * returning CONNECTION_BAD.  Connection for the other is in FTS_PROBE_SEGMENT
 * and advances to the next libpq state.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_ftsConnect_one_failure_one_success</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>fts_segment_info</name> <modifier>*</modifier></type><name>success_resp</name> <init>= <expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>success_resp</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_STARTED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>success_resp</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<comment type="block">/* Assume that the successful socket is ready for writing. */</comment>
	<expr_stmt><expr><name><name>success_resp</name><operator>-&gt;</operator><name>poll_revents</name></name> <operator>=</operator> <name>POLLOUT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQconnectPoll</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>success_resp</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQconnectPoll</name></expr></argument>, <argument><expr><name>PGRES_POLLING_READING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Ensure that PQstatus doesn't report that this connection is established. */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQstatus</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>success_resp</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQstatus</name></expr></argument>, <argument><expr><name>CONNECTION_STARTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>fts_segment_info</name> <modifier>*</modifier></type><name>failure_resp</name> <init>= <expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>failure_resp</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>failure_resp</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>primary_conninfo_failure</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>primary_conninfo_failure</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"host=%s port=%d gpconntype=%s"</literal></expr></argument>,
			 <argument><expr><name><name>failure_resp</name><operator>-&gt;</operator><name>primary_cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>hostip</name></name></expr></argument>,
			 <argument><expr><name><name>failure_resp</name><operator>-&gt;</operator><name>primary_cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
			 <argument><expr><name>GPCONN_TYPE_FTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_string</name><argument_list>(<argument><expr><name>PQconnectStart</name></expr></argument>, <argument><expr><name>conninfo</name></expr></argument>, <argument><expr><name>primary_conninfo_failure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>failure_pgconn</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGconn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>failure_pgconn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_BAD</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQconnectStart</name></expr></argument>, <argument><expr><name>failure_pgconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQerrorMessage</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>failure_pgconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQerrorMessage</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ftsConnect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>success_resp</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>FTS_PROBE_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Successful segment's socket must be set to be polled for reading because
	 * we simulated PQconnectPoll() to return PGRES_POLLING_READING.
	 */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>success_resp</name><operator>-&gt;</operator><name>poll_events</name></name> <operator>&amp;</operator>	<name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>failure_resp</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>FTS_PROBE_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Starting with one content (primary-mirrror pair) in FTS_PROBE_SEGMENT, test
 * ftsConnect() followed by ftsPoll().
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_ftsConnect_ftsPoll</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>FTS_PROBE_SEGMENT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>InitPollFds</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>primary_conninfo</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_segment_info</name> <modifier>*</modifier></type><name>ftsInfo</name> <init>= <expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>pgconn</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGconn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pgconn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_STARTED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pgconn</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>primary_conninfo</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"host=%s port=%d gpconntype=%s"</literal></expr></argument>,
			 <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>primary_cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>hostip</name></name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>primary_cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
			 <argument><expr><name>GPCONN_TYPE_FTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_string</name><argument_list>(<argument><expr><name>PQconnectStart</name></expr></argument>, <argument><expr><name>conninfo</name></expr></argument>, <argument><expr><name>primary_conninfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQconnectStart</name></expr></argument>, <argument><expr><name>pgconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ftsConnect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>FTS_PROBE_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>startTime</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Successful ftsConnect must set the socket to be polled for writing. */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>poll_events</name></name> <operator>&amp;</operator> <name>POLLOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQsocket</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQsocket</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQsocket</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQsocket</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Simulate poll() returns write-ready for the only descriptor in
	 * fts_context.
	 */</comment>
	<expr_stmt><expr><call><name>poll_will_return</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>POLLOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ftsPoll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>poll_revents</name></name> <operator>&amp;</operator> <name>POLLOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>poll_events</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * 1 primary-mirror pair, send successful
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_ftsSend_success</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>message</name><index>[<expr><name>FTS_MSG_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>fts_segment_info</name> <modifier>*</modifier></type><name>ftsInfo</name> <init>= <expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>asyncStatus</name></name> <operator>=</operator> <name>PGASYNC_IDLE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>poll_revents</name></name> <operator>=</operator> <name>POLLOUT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>FTS_MSG_MAX_LEN</name></expr></argument>, <argument><expr><name>FTS_MSG_FORMAT</name></expr></argument>,
			 <argument><expr><name>FTS_MSG_PROBE</name></expr></argument>,
			 <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>primary_cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>,
			 <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>primary_cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>segindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQstatus</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQstatus</name></expr></argument>, <argument><expr><name>CONNECTION_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQsendQuery</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_string</name><argument_list>(<argument><expr><name>PQsendQuery</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQsendQuery</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ftsSend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>poll_events</name></name> <operator>&amp;</operator> <name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Receive a response to probe message from one primary segment.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_ftsReceive_success</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>true_value</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>false_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>fts_segment_info</name> <modifier>*</modifier></type><name>ftsInfo</name> <init>= <expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>FTS_PROBE_SEGMENT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGconn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_OK</name></expr>;</expr_stmt>
	<comment type="block">/* Simulate the case that data has arrived on this socket. */</comment>
	<expr_stmt><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>poll_revents</name></name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

	<comment type="block">/* PQstatus is called twice. */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQstatus</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQstatus</name></expr></argument>, <argument><expr><name>CONNECTION_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQstatus</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQstatus</name></expr></argument>, <argument><expr><name>CONNECTION_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Expect async libpq interface to receive is called */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQconsumeInput</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQconsumeInput</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQisBusy</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQisBusy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGresult</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetResult</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQgetResult</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQresultStatus</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQresultStatus</name></expr></argument>, <argument><expr><name>PGRES_TUPLES_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQntuples</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQntuples</name></expr></argument>, <argument><expr><name>FTS_MESSAGE_RESPONSE_NTUPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQnfields</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQnfields</name></expr></argument>, <argument><expr><name>Natts_fts_message_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><name>tup_num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><name>field_num</name></expr></argument>, <argument><expr><name>Anum_fts_message_response_is_mirror_up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>true_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><name>tup_num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><name>field_num</name></expr></argument>, <argument><expr><name>Anum_fts_message_response_is_in_sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>true_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><name>tup_num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><name>field_num</name></expr></argument>, <argument><expr><name>Anum_fts_message_response_is_syncrep_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>true_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><name>tup_num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><name>field_num</name></expr></argument>, <argument><expr><name>Anum_fts_message_response_is_role_mirror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>false_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><name>tup_num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><name>field_num</name></expr></argument>, <argument><expr><name>Anum_fts_message_response_request_retry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQgetvalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>false_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ftsReceive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>isMirrorAlive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>retryRequested</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * No further polling on this socket, until it's time to send the next
	 * message.
	 */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>poll_events</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Scenario: if primary responds FATAL to FTS probe, ftsReceive on master
 * should fail due to PQconsumeInput() failed
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_ftsReceive_when_fts_handler_FATAL</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>fts_segment_info</name> <modifier>*</modifier></type><name>ftsInfo</name> <init>= <expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Simulate that data is available for reading from the socket. */</comment>
	<expr_stmt><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>poll_revents</name></name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQstatus</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQstatus</name></expr></argument>, <argument><expr><name>CONNECTION_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQconsumeInput</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQconsumeInput</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQerrorMessage</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQerrorMessage</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * TEST
	 */</comment>
	<expr_stmt><expr><call><name>ftsReceive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>FTS_PROBE_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Scenario: if primary response ERROR to FTS probe, ftsReceive on master
 * should fail due to PQresultStatus(lastResult) returned PGRES_FATAL_ERROR
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_ftsReceive_when_fts_handler_ERROR</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * As long as it is one of the states in which an FTS message can be sent
	 * and a response be received, the state doesn't matter.  Here we chose
	 * FTS_PROMOTE_SEGMENT, to simulate a response being received for a PROMOTE
	 * message.
	 */</comment>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROMOTE_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>fts_segment_info</name> <modifier>*</modifier></type><name>ftsInfo</name> <init>= <expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Simulate that data is available for reading from the socket. */</comment>
	<expr_stmt><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>poll_revents</name></name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
	<comment type="block">/*
	 * PQstatus is called once before consuming input and once more, after
	 * parsing results.
	 */</comment>
	<expr_stmt><expr><call><name>expect_value_count</name><argument_list>(<argument><expr><name>PQstatus</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>PQstatus</name></expr></argument>, <argument><expr><name>CONNECTION_OK</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQconsumeInput</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQconsumeInput</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQisBusy</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQisBusy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGresult</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQgetResult</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQgetResult</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQresultStatus</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQresultStatus</name></expr></argument>, <argument><expr><name>PGRES_FATAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQresultErrorMessage</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PQresultErrorMessage</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQclear</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQclear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * TEST
	 */</comment>
	<expr_stmt><expr><call><name>ftsReceive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>FTS_PROMOTE_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * 2 primary-mirror pairs: one got a "request retry" response from primary,
 * syncrep_off message failed to get a response from the other primary.
 * Another attempt must be made in both cases after waiting for 1 second.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_processRetry_wait_before_retry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Start with a failure state and retry_count = 0. */</comment>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_SYNCREP_OFF_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* First primary sent a response with requestRetry set. */</comment>
	<decl_stmt><decl><type><name>fts_segment_info</name> <modifier>*</modifier></type><name>ftsInfo1</name> <init>= <expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ftsInfo1</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>FTS_PROBE_SUCCESS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ftsInfo1</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ftsInfo1</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>retryRequested</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Second primary didn't respond to syncrep_off message. */</comment>
	<decl_stmt><decl><type><name>fts_segment_info</name> <modifier>*</modifier></type><name>ftsInfo2</name> <init>= <expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo1</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>ftsInfo2</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>processRetry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We must wait in a retry_wait state with retryStartTime set. */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo1</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>FTS_PROBE_RETRY_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo2</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>FTS_SYNCREP_OFF_RETRY_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo1</name><operator>-&gt;</operator><name>retry_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo1</name><operator>-&gt;</operator><name>poll_events</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo1</name><operator>-&gt;</operator><name>poll_revents</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>pg_time_t</name></type> <name>retryStartTime1</name> <init>= <expr><name><name>ftsInfo1</name><operator>-&gt;</operator><name>retryStartTime</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>retryStartTime1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo2</name><operator>-&gt;</operator><name>retry_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo2</name><operator>-&gt;</operator><name>poll_events</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo2</name><operator>-&gt;</operator><name>poll_revents</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>pg_time_t</name></type> <name>retryStartTime2</name> <init>= <expr><name><name>ftsInfo2</name><operator>-&gt;</operator><name>retryStartTime</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>retryStartTime2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We must continue to wait because 1 second hasn't elapsed since the
	 * failure.
	 */</comment>
	<expr_stmt><expr><call><name>processRetry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo1</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>FTS_PROBE_RETRY_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo2</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>FTS_SYNCREP_OFF_RETRY_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Adjust retryStartTime to 1 second in past so that next processRetry()
	 * should make a retry attempt.
	 */</comment>
	<expr_stmt><expr><name><name>ftsInfo1</name><operator>-&gt;</operator><name>retryStartTime</name></name> <operator>=</operator> <name>retryStartTime1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ftsInfo2</name><operator>-&gt;</operator><name>retryStartTime</name></name> <operator>=</operator> <name>retryStartTime2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>processRetry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* This time, we must be ready to make another retry. */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo1</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>FTS_PROBE_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ftsInfo2</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>FTS_SYNCREP_OFF_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* 0 segments, is_updated is always false */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_processResponse_for_zero_segment</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>num_pairs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>is_updated</name> <init>= <expr><call><name>processResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>is_updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * 1 segment, is_updated is false, because FtsIsActive failed
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_processResponse_for_FtsIsActive_false</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* mock FtsIsActive false */</comment>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>FtsIsActive</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>is_updated</name> <init>= <expr><call><name>processResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>is_updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_PROBE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * 2 segments, is_updated is false, because neither primary nor mirror
 * state changed.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_PrimayUpMirrorUpNotInSync_to_PrimayUpMirrorUpNotInSync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>FtsIsActive</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Primary must block commits as long as it and its mirror are alive. */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* processResponse should not update a probe state */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_updated</name> <init>= <expr><call><name>processResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Active connections must be closed after processing response. */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>is_updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * 2 segments, is_updated is false, because its double fault scenario
 * primary and mirror are not in sync hence cannot promote mirror, hence
 * current primary needs to stay marked as up.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_PrimayUpMirrorUpNotInSync_to_PrimaryDown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>FtsIsActive</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* No response received from first segment */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>FTS_PROBE_FAILED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>retry_count</name> <operator>=</operator> <name>gp_fts_probe_retries</name></expr>;</expr_stmt>

	<comment type="block">/* Response received from second segment */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* No update must happen */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_updated</name> <init>= <expr><call><name>processResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Active connections must be closed after processing response. */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>is_updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * 2 segments, is_updated is true, because content 0 mirror is updated
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_PrimayUpMirrorUpNotInSync_to_PrimaryUpMirrorDownNotInSync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>FtsIsActive</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Test response received from both segments. First primary's mirror is
	 * reported as DOWN.
	 */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* Syncrep must be enabled because mirror is up. */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* the mirror will be updated */</comment>
	<expr_stmt><expr><call><name>PrimaryOrMirrorWillBeUpdated</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExpectedPrimaryAndMirrorConfiguration</name><argument_list>(
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>primary_cdbinfo</name></expr></argument>, <comment type="block">/* primary */</comment>
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mirror_cdbinfo</name></expr></argument>, <comment type="block">/* mirror */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr></argument>, <comment type="block">/* primary status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_DOWN</name></expr></argument>, <comment type="block">/* mirror status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>, <comment type="block">/* mode */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr></argument>, <comment type="block">/* newPrimaryRole */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr></argument>, <comment type="block">/* newMirrorRole */</comment>
		<argument><expr><name>false</name></expr></argument>, <comment type="block">/* willUpdatePrimary */</comment>
		<argument><expr><name>true</name></expr></argument> <comment type="block">/* willUpdateMirror */</comment>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>is_updated</name> <init>= <expr><call><name>processResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>is_updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Active connections must be closed after processing response. */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * 3 segments, is_updated is true, because content 0 mirror is down and
 * probe response is up
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_PrimaryUpMirrorDownNotInSync_to_PrimayUpMirrorUpNotInSync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>FtsIsActive</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set the mirror down in config */</comment>
	<decl_stmt><decl><type><name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type><name>cdbinfo</name> <init>=
		<expr><call><name>GetSegmentFromCdbComponentDatabases</name><argument_list>(
			<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>GP_SEGMENT_CONFIGURATION_STATUS_DOWN</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Response received from all three segments, DOWN mirror is reported UP
	 * for first primary.
	 */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* no change */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* the mirror will be updated */</comment>
	<expr_stmt><expr><call><name>PrimaryOrMirrorWillBeUpdated</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExpectedPrimaryAndMirrorConfiguration</name><argument_list>(
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>primary_cdbinfo</name></expr></argument>, <comment type="block">/* primary */</comment>
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mirror_cdbinfo</name></expr></argument>, <comment type="block">/* primary */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr></argument>, <comment type="block">/* primary status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr></argument>, <comment type="block">/* mirror status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>, <comment type="block">/* mode */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr></argument>, <comment type="block">/* newPrimaryRole */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr></argument>, <comment type="block">/* newMirrorRole */</comment>
		<argument><expr><name>false</name></expr></argument>, <comment type="block">/* willUpdatePrimary */</comment>
		<argument><expr><name>true</name></expr></argument> <comment type="block">/* willUpdateMirror */</comment>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Active connections must be closed after processing response. */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>is_updated</name> <init>= <expr><call><name>processResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>is_updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Assert that connections are closed and the state of the segments is not
	 * changed (no further messages needed from FTS).
	 */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_RESPONSE_PROCESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_RESPONSE_PROCESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_RESPONSE_PROCESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * 5 segments, is_updated is true, as we are changing the state of several
 * segment pairs.  This test also validates that sync-rep off and promotion
 * messages are not blocked by primary retry requests.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_processResponse_multiple_segments</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>FtsIsActive</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Mark the mirror for content 0 down in configuration, probe response
	 * indicates it's up.
	 */</comment>
	<decl_stmt><decl><type><name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type><name>cdbinfo</name> <init>=
		<expr><call><name>GetSegmentFromCdbComponentDatabases</name><argument_list>(
			<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>GP_SEGMENT_CONFIGURATION_STATUS_DOWN</name></expr>;</expr_stmt>

	<comment type="block">/* First segment DOWN mirror, now reported UP */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Mark the primary-mirror pair for content 1 as in-sync in configuration
	 * so that the mirror can be promoted.
	 */</comment>
	<expr_stmt><expr><name>cdbinfo</name> <operator>=</operator> <call><name>GetSegmentFromCdbComponentDatabases</name><argument_list>(
		<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cdbinfo</name> <operator>=</operator> <call><name>GetSegmentFromCdbComponentDatabases</name><argument_list>(
		<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr>;</expr_stmt>

	<comment type="block">/* Second segment no response received, mirror will be promoted */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>FTS_PROBE_FAILED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>retry_count</name> <operator>=</operator> <name>gp_fts_probe_retries</name></expr>;</expr_stmt>

	<comment type="block">/* Third segment UP mirror, now reported DOWN */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* Fourth segment, response received no change */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Fifth segment, probe failed but retries not exhausted */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>FTS_PROBE_RETRY_WAIT</name></expr>;</expr_stmt>

	<comment type="block">/* we are updating three of the five segments */</comment>
	<expr_stmt><expr><call><name>PrimaryOrMirrorWillBeUpdated</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* First segment */</comment>
	<expr_stmt><expr><call><name>ExpectedPrimaryAndMirrorConfiguration</name><argument_list>(
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>primary_cdbinfo</name></expr></argument>, <comment type="block">/* primary */</comment>
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mirror_cdbinfo</name></expr></argument>, <comment type="block">/* mirror */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr></argument>, <comment type="block">/* primary status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr></argument>, <comment type="block">/* mirror status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>, <comment type="block">/* mode */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr></argument>, <comment type="block">/* newPrimaryRole */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr></argument>, <comment type="block">/* newMirrorRole */</comment>
		<argument><expr><name>false</name></expr></argument>, <comment type="block">/* willUpdatePrimary */</comment>
		<argument><expr><name>true</name></expr></argument> <comment type="block">/* willUpdateMirror */</comment>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Second segment should go through mirror promotion.
	 */</comment>
	<expr_stmt><expr><call><name>ExpectedPrimaryAndMirrorConfiguration</name><argument_list>(
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>primary_cdbinfo</name></expr></argument>, <comment type="block">/* primary */</comment>
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mirror_cdbinfo</name></expr></argument>, <comment type="block">/* mirror */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_DOWN</name></expr></argument>, <comment type="block">/* primary status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr></argument>, <comment type="block">/* mirror status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>, <comment type="block">/* mode */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr></argument>, <comment type="block">/* newPrimaryRole */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr></argument>, <comment type="block">/* newMirrorRole */</comment>
		<argument><expr><name>true</name></expr></argument>, <comment type="block">/* willUpdatePrimary */</comment>
		<argument><expr><name>true</name></expr></argument> <comment type="block">/* willUpdateMirror */</comment>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Third segment */</comment>
	<expr_stmt><expr><call><name>ExpectedPrimaryAndMirrorConfiguration</name><argument_list>(
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>primary_cdbinfo</name></expr></argument>, <comment type="block">/* primary */</comment>
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mirror_cdbinfo</name></expr></argument>, <comment type="block">/* mirror */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr></argument>, <comment type="block">/* primary status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_DOWN</name></expr></argument>, <comment type="block">/* mirror status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>, <comment type="block">/* mode */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr></argument>, <comment type="block">/* newPrimaryRole */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr></argument>, <comment type="block">/* newMirrorRole */</comment>
		<argument><expr><name>false</name></expr></argument>, <comment type="block">/* willUpdatePrimary */</comment>
		<argument><expr><name>true</name></expr></argument> <comment type="block">/* willUpdateMirror */</comment>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Fourth segment will not change status */</comment>

	<comment type="block">/* Active connections must be closed after processing response. */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>is_updated</name> <init>= <expr><call><name>processResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>is_updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* mirror found up */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_RESPONSE_PROCESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* mirror promotion should be triggered */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_PROMOTE_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* mirror found down, must turn off syncrep on primary */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_SYNCREP_OFF_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* no change in configuration */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_RESPONSE_PROCESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* retry possible, final state is not yet reached */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_PROBE_RETRY_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * 1 segment, is_updated is true, because primary and mirror will be
 * marked not in sync
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_PrimayUpMirrorUpSync_to_PrimaryUpMirrorUpNotInSync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>FtsIsActive</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Probe responded with Mirror Up and Not In SYNC with syncrep enabled */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isInSync</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* we are updating one segment pair */</comment>
	<expr_stmt><expr><call><name>PrimaryOrMirrorWillBeUpdated</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExpectedPrimaryAndMirrorConfiguration</name><argument_list>(
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>primary_cdbinfo</name></expr></argument>, <comment type="block">/* primary */</comment>
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mirror_cdbinfo</name></expr></argument>, <comment type="block">/* mirror */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr></argument>, <comment type="block">/* primary status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr></argument>, <comment type="block">/* mirror status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>, <comment type="block">/* mode */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr></argument>, <comment type="block">/* newPrimaryRole */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr></argument>, <comment type="block">/* newMirrorRole */</comment>
		<argument><expr><name>true</name></expr></argument>, <comment type="block">/* willUpdatePrimary */</comment>
		<argument><expr><name>true</name></expr></argument> <comment type="block">/* willUpdateMirror */</comment>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Active connections must be closed after processing response. */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>is_updated</name> <init>= <expr><call><name>processResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>is_updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_RESPONSE_PROCESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * 2 segments, is_updated is true, because mirror will be marked down and
 * both will be marked not in sync for first primary mirror pair
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_PrimayUpMirrorUpSync_to_PrimaryUpMirrorDownNotInSync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>FtsIsActive</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Probe responded with one mirror down and not in-sync, and syncrep
	 * enabled on both primaries.
	 */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isInSync</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isInSync</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* we are updating one segment pair */</comment>
	<expr_stmt><expr><call><name>PrimaryOrMirrorWillBeUpdated</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExpectedPrimaryAndMirrorConfiguration</name><argument_list>(
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>primary_cdbinfo</name></expr></argument>, <comment type="block">/* primary */</comment>
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mirror_cdbinfo</name></expr></argument>, <comment type="block">/* mirror */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr></argument>, <comment type="block">/* primary status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_DOWN</name></expr></argument>, <comment type="block">/* mirror status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>, <comment type="block">/* mode */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr></argument>, <comment type="block">/* newPrimaryRole */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr></argument>, <comment type="block">/* newMirrorRole */</comment>
		<argument><expr><name>true</name></expr></argument>, <comment type="block">/* willUpdatePrimary */</comment>
		<argument><expr><name>true</name></expr></argument> <comment type="block">/* willUpdateMirror */</comment>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Active connections must be closed after processing response. */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>is_updated</name> <init>= <expr><call><name>processResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>is_updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* mirror is down but syncrep is enabled, so it must be turned off */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_SYNCREP_OFF_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* no change in config */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_RESPONSE_PROCESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * 1 segment, is_updated is true, because FTS found primary goes down and
 * both will be marked not in sync, then FTS promote mirror
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_PrimayUpMirrorUpSync_to_PrimaryDown_to_MirrorPromote</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>FtsIsActive</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Probe response was not received. */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>FTS_PROBE_FAILED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>retry_count</name> <operator>=</operator> <name>gp_fts_probe_retries</name></expr>;</expr_stmt>
	<comment type="block">/* Store reference to mirror object for validation later. */</comment>
	<decl_stmt><decl><type><name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type><name>mirror</name> <init>= <expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mirror_cdbinfo</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* we are updating one segment pair */</comment>
	<expr_stmt><expr><call><name>PrimaryOrMirrorWillBeUpdated</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExpectedPrimaryAndMirrorConfiguration</name><argument_list>(
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>primary_cdbinfo</name></expr></argument>, <comment type="block">/* primary */</comment>
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mirror_cdbinfo</name></expr></argument>, <comment type="block">/* mirror */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_DOWN</name></expr></argument>, <comment type="block">/* primary status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr></argument>, <comment type="block">/* mirror status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>, <comment type="block">/* mode */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr></argument>, <comment type="block">/* newPrimaryRole */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr></argument>, <comment type="block">/* newMirrorRole */</comment>
		<argument><expr><name>true</name></expr></argument>, <comment type="block">/* willUpdatePrimary */</comment>
		<argument><expr><name>true</name></expr></argument> <comment type="block">/* willUpdateMirror */</comment>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Active connections must be closed after processing response. */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>is_updated</name> <init>= <expr><call><name>processResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>is_updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* the mirror must be marked for promotion */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_PROMOTE_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>primary_cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>, <argument><expr><name><name>mirror</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * 1 segment, is_updated is true, because primary and mirror will be
 * marked in sync
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_PrimayUpMirrorUpNotInSync_to_PrimayUpMirrorUpSync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>FtsIsActive</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Probe responded with Mirror Up and SYNC */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isInSync</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* we are updating one segment pair */</comment>
	<expr_stmt><expr><call><name>PrimaryOrMirrorWillBeUpdated</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExpectedPrimaryAndMirrorConfiguration</name><argument_list>(
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>primary_cdbinfo</name></expr></argument>, <comment type="block">/* primary */</comment>
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mirror_cdbinfo</name></expr></argument>, <comment type="block">/* mirror */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr></argument>, <comment type="block">/* primary status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr></argument>, <comment type="block">/* mirror status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr></argument>, <comment type="block">/* mode */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr></argument>, <comment type="block">/* newPrimaryRole */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr></argument>, <comment type="block">/* newMirrorRole */</comment>
		<argument><expr><name>true</name></expr></argument>, <comment type="block">/* willUpdatePrimary */</comment>
		<argument><expr><name>true</name></expr></argument> <comment type="block">/* willUpdateMirror */</comment>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Active connections must be closed after processing response. */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>is_updated</name> <init>= <expr><call><name>processResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>is_updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_RESPONSE_PROCESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * 1 segment, is_updated is true, because mirror will be marked UP and
 * both primary and mirror should get updated to SYNC
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_PrimaryUpMirrorDownNotInSync_to_PrimayUpMirrorUpSync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>FtsIsActive</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set the mirror down in config */</comment>
	<decl_stmt><decl><type><name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type><name>cdbinfo</name> <init>=
		<expr><call><name>GetSegmentFromCdbComponentDatabases</name><argument_list>(
			<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>GP_SEGMENT_CONFIGURATION_STATUS_DOWN</name></expr>;</expr_stmt>

	<comment type="block">/* Probe responded with Mirror Up and SYNC */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isInSync</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* we are updating one segment pair */</comment>
	<expr_stmt><expr><call><name>PrimaryOrMirrorWillBeUpdated</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExpectedPrimaryAndMirrorConfiguration</name><argument_list>(
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>primary_cdbinfo</name></expr></argument>, <comment type="block">/* primary */</comment>
		<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mirror_cdbinfo</name></expr></argument>, <comment type="block">/* mirror */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr></argument>, <comment type="block">/* primary status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_STATUS_UP</name></expr></argument>, <comment type="block">/* mirror status */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_INSYNC</name></expr></argument>, <comment type="block">/* mode */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_PRIMARY</name></expr></argument>, <comment type="block">/* newPrimaryRole */</comment>
		<argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr></argument>, <comment type="block">/* newMirrorRole */</comment>
		<argument><expr><name>true</name></expr></argument>, <comment type="block">/* willUpdatePrimary */</comment>
		<argument><expr><name>true</name></expr></argument> <comment type="block">/* willUpdateMirror */</comment>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Active connections must be closed after processing response. */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>is_updated</name> <init>= <expr><call><name>processResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>is_updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_RESPONSE_PROCESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * 1 segment, is_updated is false, because there is no status or mode change.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_PrimaryUpMirrorDownNotInSync_to_PrimayUpMirrorDownNotInSync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>FtsIsActive</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set the mirror down in config */</comment>
	<decl_stmt><decl><type><name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type><name>cdbinfo</name> <init>=
		<expr><call><name>GetSegmentFromCdbComponentDatabases</name><argument_list>(
			<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>GP_SEGMENT_CONFIGURATION_STATUS_DOWN</name></expr>;</expr_stmt>

	<comment type="block">/* Probe responded with Mirror Up and SYNC */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isInSync</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>is_updated</name> <init>= <expr><call><name>processResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>is_updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_RESPONSE_PROCESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * 2 segments, is_updated is false, because content 0 mirror is already
 * down and probe response fails. Means double fault scenario.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_PrimaryUpMirrorDownNotInSync_to_PrimaryDown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>FtsIsActive</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set the mirror down in config */</comment>
	<decl_stmt><decl><type><name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type><name>cdbinfo</name> <init>=
		<expr><call><name>GetSegmentFromCdbComponentDatabases</name><argument_list>(
			<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_ROLE_MIRROR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>GP_SEGMENT_CONFIGURATION_STATUS_DOWN</name></expr>;</expr_stmt>

	<comment type="block">/* No response received from segment 1 (content 0 primary) */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>FTS_PROBE_FAILED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>retry_count</name> <operator>=</operator> <name>gp_fts_probe_retries</name></expr>;</expr_stmt>

	<comment type="block">/* No change for segment 2, probe successful */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isSyncRepEnabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Active connections must be closed after processing response. */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>PQfinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>is_updated</name> <init>= <expr><call><name>processResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>is_updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_RESPONSE_PROCESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_RESPONSE_PROCESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * 1 segment, probe times out.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_probeTimeout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name> <init>= <expr><call><name>InitTestCdb</name><argument_list>(
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_fts_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>FTS_PROBE_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>pg_time_t</name></type> <name>now</name> <init>= <expr><operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>startTime</name> <operator>=</operator> <name>now</name> <operator>-</operator> <name>gp_fts_probe_timeout</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ftsCheckTimeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_PROBE_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Timeout should be treated as just another failure and should be
	 * retried.
	 */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>retry_count</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_FtsWalRepInitProbeContext_initial_state</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>fts_context</name></type> <name>context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdb_component_dbs</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cdb_component_dbs</name> <operator>=</operator> <call><name>InitTestCdb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
									<argument><expr><name>true</name></expr></argument>,
									<argument><expr><name>GP_SEGMENT_CONFIGURATION_MODE_NOTINSYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FtsWalRepInitProbeContext</name><argument_list>(<argument><expr><name>cdb_component_dbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>context</name><operator>.</operator><name>num_pairs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>FTS_PROBE_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>retry_count</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>probe_errno</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>dbid</name></name> <operator>==</operator>
					<name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primary_cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isPrimaryAlive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isMirrorAlive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>perSegInfos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>result</name><operator>.</operator><name>isInSync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_ftsConnect_FTS_PROBE_SEGMENT</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_ftsConnect_one_failure_one_success</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_ftsConnect_ftsPoll</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_ftsSend_success</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_ftsReceive_success</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_ftsReceive_when_fts_handler_FATAL</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_ftsReceive_when_fts_handler_ERROR</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_processRetry_wait_before_retry</name></expr></argument>)</argument_list></call></expr>,
		<comment type="block">/* -----------------------------------------------------------------------
		 * Group of tests for processResponse()
		 * -----------------------------------------------------------------------
		 */</comment>
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_processResponse_for_zero_segment</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_processResponse_for_FtsIsActive_false</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_processResponse_multiple_segments</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_PrimayUpMirrorUpSync_to_PrimaryUpMirrorUpNotInSync</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_PrimayUpMirrorUpSync_to_PrimaryUpMirrorDownNotInSync</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_PrimayUpMirrorUpSync_to_PrimaryDown_to_MirrorPromote</name></expr></argument>)</argument_list></call></expr>,

		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_PrimayUpMirrorUpNotInSync_to_PrimayUpMirrorUpSync</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_PrimayUpMirrorUpNotInSync_to_PrimayUpMirrorUpNotInSync</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_PrimayUpMirrorUpNotInSync_to_PrimaryUpMirrorDownNotInSync</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_PrimayUpMirrorUpNotInSync_to_PrimaryDown</name></expr></argument>)</argument_list></call></expr>,

		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_PrimaryUpMirrorDownNotInSync_to_PrimayUpMirrorUpSync</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_PrimaryUpMirrorDownNotInSync_to_PrimayUpMirrorUpNotInSync</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_PrimaryUpMirrorDownNotInSync_to_PrimayUpMirrorDownNotInSync</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_PrimaryUpMirrorDownNotInSync_to_PrimaryDown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_probeTimeout</name></expr></argument>)</argument_list></call></expr>,
		<comment type="block">/*-----------------------------------------------------------------------*/</comment>
		<macro><name>unit_test</name><argument_list>(<argument>test_FtsWalRepInitProbeContext_initial_state</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>InitFtsProbeInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
