<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/fts/test/ftsmessagehandler_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<comment type="block">/* Actual function body */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ftsmessagehandler.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expectSendFtsResponse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expectedMessageType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FtsResponse</name> <modifier>*</modifier></type><name>expectedResponse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>BeginCommand</name></expr></argument>, <argument><expr><name>commandTag</name></expr></argument>, <argument><expr><name>expectedMessageType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>BeginCommand</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>DestRemote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>BeginCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* schema message */</comment>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>pq_beginmessage</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>pq_beginmessage</name></expr></argument>, <argument><expr><name>msgtype</name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>pq_beginmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>pq_endmessage</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>pq_endmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* data message */</comment>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>pq_beginmessage</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>pq_beginmessage</name></expr></argument>, <argument><expr><name>msgtype</name></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>pq_beginmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>pq_endmessage</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>pq_endmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>pq_sendint</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>pq_sendint</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* verify the schema */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>pq_sendint</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Natts_fts_message_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>pq_sendint</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Natts_fts_message_response</name> <operator>*</operator> <literal type="number">6</literal></expr></argument> <comment type="block">/* calls_per_column_for_schema */</comment>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* verify the data */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>pq_sendint</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Natts_fts_message_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>pq_sendint</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>pq_sendint</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>expectedResponse</name><operator>-&gt;</operator><name>IsMirrorUp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>pq_sendint</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>pq_sendint</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>expectedResponse</name><operator>-&gt;</operator><name>IsInSync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>pq_sendint</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>pq_sendint</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>expectedResponse</name><operator>-&gt;</operator><name>IsSyncRepEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>pq_sendint</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>pq_sendint</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>expectedResponse</name><operator>-&gt;</operator><name>IsRoleMirror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>pq_sendint</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>pq_sendint</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>expectedResponse</name><operator>-&gt;</operator><name>RequestRetry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>pq_sendint</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>pq_sendstring</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>pq_sendstring</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>pq_sendstring</name></expr></argument>, <argument><expr><name>Natts_fts_message_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>EndCommand</name></expr></argument>, <argument><expr><name>commandTag</name></expr></argument>, <argument><expr><name>expectedMessageType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>EndCommand</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>DestRemote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>EndCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>socket_flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_HandleFtsWalRepProbePrimary</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FtsResponse</name></type> <name>mockresponse</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsMirrorUp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsInSync</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsSyncRepEnabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsRoleMirror</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>RequestRetry</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>GetMirrorStatus</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_assign_memory</name><argument_list>(<argument><expr><name>GetMirrorStatus</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mockresponse</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FtsResponse</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>GetMirrorStatus</name></expr></argument>, <argument><expr><name>ready_for_syncrep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>GetMirrorStatus</name></expr></argument>, <argument><expr><name>ready_for_syncrep</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>GetMirrorStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* mirror being up does not mean SyncRep should be enabled. */</comment>
	<expr_stmt><expr><call><name>expectSendFtsResponse</name><argument_list>(<argument><expr><name>FTS_MSG_PROBE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mockresponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>HandleFtsWalRepProbe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_HandleFtsWalRepSyncRepOff</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FtsResponse</name></type> <name>mockresponse</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsMirrorUp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsInSync</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>RequestRetry</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<comment type="block">/* unblock primary if FTS requests it */</comment>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsSyncRepEnabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>RequestRetry</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>GetMirrorStatus</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_assign_memory</name><argument_list>(<argument><expr><name>GetMirrorStatus</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mockresponse</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FtsResponse</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>GetMirrorStatus</name></expr></argument>, <argument><expr><name>ready_for_syncrep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>GetMirrorStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>UnsetSyncStandbysDefined</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* since this function doesn't have any logic, the test just verified the message type */</comment>
	<expr_stmt><expr><call><name>expectSendFtsResponse</name><argument_list>(<argument><expr><name>FTS_MSG_SYNCREP_OFF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mockresponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>HandleFtsWalRepSyncRepOff</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_HandleFtsWalRepProbeMirror</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FtsResponse</name></type> <name>mockresponse</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsMirrorUp</name></name>       <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsInSync</name></name>         <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsSyncRepEnabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsRoleMirror</name></name>     <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>RequestRetry</name></name>     <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* expect the IsRoleMirror changed to reflect the global variable */</comment>
	<expr_stmt><expr><name>am_mirror</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsRoleMirror</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expectSendFtsResponse</name><argument_list>(<argument><expr><name>FTS_MSG_PROBE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mockresponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>HandleFtsWalRepProbe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_replication_slot</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ReplicationSlotCtlData</name> <modifier>*</modifier></type><name>repCtl</name> <init>= <expr><operator>(</operator><name>ReplicationSlotCtlData</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>MyReplicationSlot</name> <operator>=</operator> <operator>&amp;</operator><name><name>repCtl</name><operator>-&gt;</operator><name>replication_slots</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<comment type="block">/*
	 * any number except 1 to avoid calling ReplicationSlotReserveWal and
	 * other friends.
	 */</comment>
	<expr_stmt><expr><name><name>MyReplicationSlot</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>restart_lsn</name></name> <operator>=</operator> <literal type="number">8948</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_HandleFtsWalRepPromoteMirror</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ReplicationSlotCtlData</name></type> <name>repCtl</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>ReplicationSlotCtl</name> <operator>=</operator> <operator>&amp;</operator><name>repCtl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>max_replication_slots</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>am_mirror</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>GetCurrentDBState</name></expr></argument>, <argument><expr><name>DB_IN_ARCHIVE_RECOVERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>UnsetSyncStandbysDefined</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>SignalPromote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FtsResponse</name></type> <name>mockresponse</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsMirrorUp</name></name>       <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsInSync</name></name>         <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsSyncRepEnabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsRoleMirror</name></name>     <operator>=</operator> <name>am_mirror</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>RequestRetry</name></name>     <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>ReplicationSlotControlLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>ReplicationSlotControlLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>ReplicationSlotCreate</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>INTERNAL_WAL_REPLICATION_SLOT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>ReplicationSlotCreate</name></expr></argument>, <argument><expr><name>db_specific</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>ReplicationSlotCreate</name></expr></argument>, <argument><expr><name>persistency</name></expr></argument>, <argument><expr><name>RS_PERSISTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called_with_sideeffect</name><argument_list>(<argument><expr><name>ReplicationSlotCreate</name></expr></argument>,
								   <argument><expr><name>set_replication_slot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ReplicationSlotCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* expect SignalPromote() */</comment>
	<expr_stmt><expr><call><name>expectSendFtsResponse</name><argument_list>(<argument><expr><name>FTS_MSG_PROMOTE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mockresponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>HandleFtsWalRepPromote</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_HandleFtsWalRepPromotePrimary</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>am_mirror</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>GetCurrentDBState</name></expr></argument>, <argument><expr><name>DB_IN_PRODUCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FtsResponse</name></type> <name>mockresponse</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsMirrorUp</name></name>       <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsInSync</name></name>         <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsSyncRepEnabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>IsRoleMirror</name></name>     <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mockresponse</name><operator>.</operator><name>RequestRetry</name></name>     <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* expect no SignalPromote() */</comment>
	<expr_stmt><expr><call><name>expectSendFtsResponse</name><argument_list>(<argument><expr><name>FTS_MSG_PROMOTE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mockresponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>HandleFtsWalRepPromote</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_HandleFtsWalRepProbePrimary</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_HandleFtsWalRepSyncRepOff</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_HandleFtsWalRepProbeMirror</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_HandleFtsWalRepPromoteMirror</name></expr></argument>)</argument_list></call></expr>,
		<macro><name>unit_test</name><argument_list>(<argument>test_HandleFtsWalRepPromotePrimary</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
