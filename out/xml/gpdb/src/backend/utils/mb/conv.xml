<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/mb/conv.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 *	  Utility functions for conversion procs.
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/utils/mb/conv.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>


<comment type="block">/*
 * local2local: a generic single byte charset encoding
 * conversion between two ASCII-superset encodings.
 *
 * l points to the source string of length len
 * p is the output area (must be large enough!)
 * src_encoding is the PG identifier for the source encoding
 * dest_encoding is the PG identifier for the target encoding
 * tab holds conversion entries for the source charset
 * starting from 128 (0x80). each entry in the table holds the corresponding
 * code point for the target charset, or 0 if there is no equivalent code.
 */</comment>
<function><type><name>void</name></type>
<name>local2local</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>l</name></decl></parameter>,
			<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>src_encoding</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>dest_encoding</name></decl></parameter>,
			<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name></decl>,
				<decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>l</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>src_encoding</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>l</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>tab</name><index>[<expr><name>c1</name> <operator>-</operator> <name>HIGHBIT</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>c2</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c2</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>report_untranslatable_char</name><argument_list>(<argument><expr><name>src_encoding</name></expr></argument>, <argument><expr><name>dest_encoding</name></expr></argument>,
										   <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>l</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * LATINn ---&gt; MIC when the charset's local codes map directly to MIC
 *
 * l points to the source string of length len
 * p is the output area (must be large enough!)
 * lc is the mule character set id for the local encoding
 * encoding is the PG identifier for the local encoding
 */</comment>
<function><type><name>void</name></type>
<name>latin2mic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
		  <parameter><decl><type><name>int</name></type> <name>lc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>c1</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>l</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>l</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>lc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * MIC ---&gt; LATINn when the charset's local codes map directly to MIC
 *
 * mic points to the source string of length len
 * p is the output area (must be large enough!)
 * lc is the mule character set id for the local encoding
 * encoding is the PG identifier for the local encoding
 */</comment>
<function><type><name>void</name></type>
<name>mic2latin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mic</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
		  <parameter><decl><type><name>int</name></type> <name>lc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>c1</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>mic</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_MULE_INTERNAL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>mic</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* easy for ASCII */</comment>
			<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>mic</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>l</name> <init>= <expr><call><name>pg_mic_mblen</name><argument_list>(<argument><expr><name>mic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_MULE_INTERNAL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>mic</name></expr></argument>,
										<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <name>c1</name> <operator>!=</operator> <name>lc</name> <operator>||</operator> <operator>!</operator><call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name><name>mic</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>report_untranslatable_char</name><argument_list>(<argument><expr><name>PG_MULE_INTERNAL</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>,
										   <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>mic</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>mic</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>mic</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * ASCII ---&gt; MIC
 *
 * While ordinarily SQL_ASCII encoding is forgiving of high-bit-set
 * characters, here we must take a hard line because we don't know
 * the appropriate MIC equivalent.
 */</comment>
<function><type><name>void</name></type>
<name>pg_ascii2mic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>c1</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>l</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_SQL_ASCII</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>l</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * MIC ---&gt; ASCII
 */</comment>
<function><type><name>void</name></type>
<name>pg_mic2ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mic</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>c1</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>mic</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>report_untranslatable_char</name><argument_list>(<argument><expr><name>PG_MULE_INTERNAL</name></expr></argument>, <argument><expr><name>PG_SQL_ASCII</name></expr></argument>,
									   <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>mic</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mic</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * latin2mic_with_table: a generic single byte charset encoding
 * conversion from a local charset to the mule internal code.
 *
 * l points to the source string of length len
 * p is the output area (must be large enough!)
 * lc is the mule character set id for the local encoding
 * encoding is the PG identifier for the local encoding
 * tab holds conversion entries for the local charset
 * starting from 128 (0x80). each entry in the table holds the corresponding
 * code point for the mule encoding, or 0 if there is no equivalent code.
 */</comment>
<function><type><name>void</name></type>
<name>latin2mic_with_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>l</name></decl></parameter>,
					 <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
					 <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
					 <parameter><decl><type><name>int</name></type> <name>lc</name></decl></parameter>,
					 <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name></decl>,
				<decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>l</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>l</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>tab</name><index>[<expr><name>c1</name> <operator>-</operator> <name>HIGHBIT</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>c2</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>lc</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>report_untranslatable_char</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>PG_MULE_INTERNAL</name></expr></argument>,
										   <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>l</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * mic2latin_with_table: a generic single byte charset encoding
 * conversion from the mule internal code to a local charset.
 *
 * mic points to the source string of length len
 * p is the output area (must be large enough!)
 * lc is the mule character set id for the local encoding
 * encoding is the PG identifier for the local encoding
 * tab holds conversion entries for the mule internal code's second byte,
 * starting from 128 (0x80). each entry in the table holds the corresponding
 * code point for the local charset, or 0 if there is no equivalent code.
 */</comment>
<function><type><name>void</name></type>
<name>mic2latin_with_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mic</name></decl></parameter>,
					 <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
					 <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
					 <parameter><decl><type><name>int</name></type> <name>lc</name></decl></parameter>,
					 <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name></decl>,
				<decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>mic</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_MULE_INTERNAL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>mic</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* easy for ASCII */</comment>
			<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>mic</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>l</name> <init>= <expr><call><name>pg_mic_mblen</name><argument_list>(<argument><expr><name>mic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_MULE_INTERNAL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>mic</name></expr></argument>,
										<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <name>c1</name> <operator>!=</operator> <name>lc</name> <operator>||</operator> <operator>!</operator><call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name><name>mic</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator>
				<operator>(</operator><name>c2</name> <operator>=</operator> <name><name>tab</name><index>[<expr><name><name>mic</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>HIGHBIT</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>report_untranslatable_char</name><argument_list>(<argument><expr><name>PG_MULE_INTERNAL</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>,
										   <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>mic</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>			<comment type="block">/* keep compiler quiet */</comment>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>mic</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * comparison routine for bsearch()
 * this routine is intended for combined UTF8 -&gt; local code
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>s1</name></decl>,
				<decl><type ref="prev"/><name>s2</name></decl>,
				<decl><type ref="prev"/><name>d1</name></decl>,
				<decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>p1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>s2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>p1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>d1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>pg_utf_to_local_combined</name> <operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator><operator>-&gt;</operator><name>utf1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>d2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>pg_utf_to_local_combined</name> <operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator><operator>-&gt;</operator><name>utf2</name></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>s1</name> <operator>&gt;</operator> <name>d1</name> <operator>||</operator> <operator>(</operator><name>s1</name> <operator>==</operator> <name>d1</name> <operator>&amp;&amp;</operator> <name>s2</name> <operator>&gt;</operator> <name>d2</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>s1</name> <operator>==</operator> <name>d1</name> <operator>&amp;&amp;</operator> <name>s2</name> <operator>==</operator> <name>d2</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * comparison routine for bsearch()
 * this routine is intended for local code -&gt; combined UTF8
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>v1</name></decl>,
				<decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>p1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>v2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>pg_local_to_utf_combined</name> <operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator><operator>-&gt;</operator><name>code</name></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>v1</name> <operator>&gt;</operator> <name>v2</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>v1</name> <operator>==</operator> <name>v2</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * store 32bit character representation into multibyte stream
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>store_coded_char</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name>code</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name>code</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name>code</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name>code</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert a character using a conversion radix tree.
 *
 * 'l' is the length of the input character in bytes, and b1-b4 are
 * the input character's bytes.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32</name></type>
<name>pg_mb_radix_conv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pg_mb_radix_tree</name> <modifier>*</modifier></type><name>rt</name></decl></parameter>,
				 <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,
				 <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name></decl></parameter>,
				 <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>b2</name></decl></parameter>,
				 <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>b3</name></decl></parameter>,
				 <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>b4</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* 4-byte code */</comment>

		<comment type="block">/* check code validity */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>b1</name> <argument_list type="generic">&lt; <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>b4_1_lower</name></name> <operator>||</operator> <name>b1</name></expr></argument> &gt;</argument_list></name> <name><name>rt</name><operator>-&gt;</operator><name>b4_1_upper</name></name> <operator>||</operator>
			<name><name>b2</name> <argument_list type="generic">&lt; <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>b4_2_lower</name></name> <operator>||</operator> <name>b2</name></expr></argument> &gt;</argument_list></name> <name><name>rt</name><operator>-&gt;</operator><name>b4_2_upper</name></name> <operator>||</operator>
			<name><name>b3</name> <argument_list type="generic">&lt; <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>b4_3_lower</name></name> <operator>||</operator> <name>b3</name></expr></argument> &gt;</argument_list></name> <name><name>rt</name><operator>-&gt;</operator><name>b4_3_upper</name></name> <operator>||</operator>
			<name><name>b4</name> <argument_list type="generic">&lt; <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>b4_4_lower</name></name> <operator>||</operator> <name>b4</name></expr></argument> &gt;</argument_list></name> <name><name>rt</name><operator>-&gt;</operator><name>b4_4_upper</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* perform lookup */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>chars32</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint32</name></type>		<name>idx</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>b4root</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>chars32</name><index>[<expr><name>b1</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b4_1_lower</name></name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>chars32</name><index>[<expr><name>b2</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b4_2_lower</name></name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>chars32</name><index>[<expr><name>b3</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b4_3_lower</name></name></expr>]</index></name></expr>;</expr_stmt>
			<return>return <expr><name><name>rt</name><operator>-&gt;</operator><name>chars32</name><index>[<expr><name>b4</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b4_4_lower</name></name></expr>]</index></name></expr>;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint16</name></type>		<name>idx</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>b4root</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>chars16</name><index>[<expr><name>b1</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b4_1_lower</name></name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>chars16</name><index>[<expr><name>b2</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b4_2_lower</name></name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>chars16</name><index>[<expr><name>b3</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b4_3_lower</name></name></expr>]</index></name></expr>;</expr_stmt>
			<return>return <expr><name><name>rt</name><operator>-&gt;</operator><name>chars16</name><index>[<expr><name>b4</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b4_4_lower</name></name></expr>]</index></name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* 3-byte code */</comment>

		<comment type="block">/* check code validity */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>b2</name> <argument_list type="generic">&lt; <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>b3_1_lower</name></name> <operator>||</operator> <name>b2</name></expr></argument> &gt;</argument_list></name> <name><name>rt</name><operator>-&gt;</operator><name>b3_1_upper</name></name> <operator>||</operator>
			<name><name>b3</name> <argument_list type="generic">&lt; <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>b3_2_lower</name></name> <operator>||</operator> <name>b3</name></expr></argument> &gt;</argument_list></name> <name><name>rt</name><operator>-&gt;</operator><name>b3_2_upper</name></name> <operator>||</operator>
			<name><name>b4</name> <argument_list type="generic">&lt; <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>b3_3_lower</name></name> <operator>||</operator> <name>b4</name></expr></argument> &gt;</argument_list></name> <name><name>rt</name><operator>-&gt;</operator><name>b3_3_upper</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* perform lookup */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>chars32</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint32</name></type>		<name>idx</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>b3root</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>chars32</name><index>[<expr><name>b2</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b3_1_lower</name></name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>chars32</name><index>[<expr><name>b3</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b3_2_lower</name></name></expr>]</index></name></expr>;</expr_stmt>
			<return>return <expr><name><name>rt</name><operator>-&gt;</operator><name>chars32</name><index>[<expr><name>b4</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b3_3_lower</name></name></expr>]</index></name></expr>;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint16</name></type>		<name>idx</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>b3root</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>chars16</name><index>[<expr><name>b2</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b3_1_lower</name></name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>chars16</name><index>[<expr><name>b3</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b3_2_lower</name></name></expr>]</index></name></expr>;</expr_stmt>
			<return>return <expr><name><name>rt</name><operator>-&gt;</operator><name>chars16</name><index>[<expr><name>b4</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b3_3_lower</name></name></expr>]</index></name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* 2-byte code */</comment>

		<comment type="block">/* check code validity - first byte */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>b3</name> <argument_list type="generic">&lt; <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>b2_1_lower</name></name> <operator>||</operator> <name>b3</name></expr></argument> &gt;</argument_list></name> <name><name>rt</name><operator>-&gt;</operator><name>b2_1_upper</name></name> <operator>||</operator>
			<name><name>b4</name> <argument_list type="generic">&lt; <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>b2_2_lower</name></name> <operator>||</operator> <name>b4</name></expr></argument> &gt;</argument_list></name> <name><name>rt</name><operator>-&gt;</operator><name>b2_2_upper</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* perform lookup */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>chars32</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint32</name></type>		<name>idx</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>b2root</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>chars32</name><index>[<expr><name>b3</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b2_1_lower</name></name></expr>]</index></name></expr>;</expr_stmt>
			<return>return <expr><name><name>rt</name><operator>-&gt;</operator><name>chars32</name><index>[<expr><name>b4</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b2_2_lower</name></name></expr>]</index></name></expr>;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint16</name></type>		<name>idx</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>b2root</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>chars16</name><index>[<expr><name>b3</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b2_1_lower</name></name></expr>]</index></name></expr>;</expr_stmt>
			<return>return <expr><name><name>rt</name><operator>-&gt;</operator><name>chars16</name><index>[<expr><name>b4</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b2_2_lower</name></name></expr>]</index></name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* 1-byte code */</comment>

		<comment type="block">/* check code validity - first byte */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>b4</name> <argument_list type="generic">&lt; <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>b1_lower</name></name> <operator>||</operator> <name>b4</name></expr></argument> &gt;</argument_list></name> <name><name>rt</name><operator>-&gt;</operator><name>b1_upper</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* perform lookup */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>chars32</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>rt</name><operator>-&gt;</operator><name>chars32</name><index>[<expr><name>b4</name> <operator>+</operator> <name><name>rt</name><operator>-&gt;</operator><name>b1root</name></name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b1_lower</name></name></expr>]</index></name></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><name><name>rt</name><operator>-&gt;</operator><name>chars16</name><index>[<expr><name>b4</name> <operator>+</operator> <name><name>rt</name><operator>-&gt;</operator><name>b1root</name></name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>b1_lower</name></name></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>					<comment type="block">/* shouldn't happen */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * UTF8 ---&gt; local code
 *
 * utf: input string in UTF8 encoding (need not be null-terminated)
 * len: length of input string (in bytes)
 * iso: pointer to the output area (must be large enough!)
		  (output string will be null-terminated)
 * map: conversion map for single characters
 * cmap: conversion map for combined characters
 *		  (optional, pass NULL if none)
 * cmapsize: number of entries in the conversion map for combined characters
 *		  (optional, pass 0 if none)
 * conv_func: algorithmic encoding conversion function
 *		  (optional, pass NULL if none)
 * encoding: PG identifier for the local encoding
 *
 * For each character, the cmap (if provided) is consulted first; if no match,
 * the map is consulted next; if still no match, the conv_func (if provided)
 * is applied.  An error is raised if no match is found.
 *
 * See pg_wchar.h for more details about the data structures used here.
 */</comment>
<function><type><name>void</name></type>
<name>UtfToLocal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>utf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
		   <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iso</name></decl></parameter>,
		   <parameter><decl><type><specifier>const</specifier> <name>pg_mb_radix_tree</name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
		   <parameter><decl><type><specifier>const</specifier> <name>pg_utf_to_local_combined</name> <modifier>*</modifier></type><name>cmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmapsize</name></decl></parameter>,
		   <parameter><decl><type><name>utf_local_conversion_func</name></type> <name>conv_func</name></decl></parameter>,
		   <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>iutf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>l</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>pg_utf_to_local_combined</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_VALID_ENCODING</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid encoding number: %d"</literal></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>len</name> <operator>-=</operator> <name>l</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* "break" cases all represent errors */</comment>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>utf</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>pg_utf_mblen</name><argument_list>(<argument><expr><name>utf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_utf8_islegal</name><argument_list>(<argument><expr><name>utf</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* ASCII case is easy, assume it's one-to-one conversion */</comment>
			<expr_stmt><expr><operator>*</operator><name>iso</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>utf</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* collect coded char of length l */</comment>
		<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>b3</name> <operator>=</operator> <operator>*</operator><name>utf</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b4</name> <operator>=</operator> <operator>*</operator><name>utf</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>*</operator><name>utf</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b3</name> <operator>=</operator> <operator>*</operator><name>utf</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b4</name> <operator>=</operator> <operator>*</operator><name>utf</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>*</operator><name>utf</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>*</operator><name>utf</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b3</name> <operator>=</operator> <operator>*</operator><name>utf</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b4</name> <operator>=</operator> <operator>*</operator><name>utf</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported character length %d"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>iutf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>			<comment type="block">/* keep compiler quiet */</comment>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>iutf</name> <operator>=</operator> <operator>(</operator><name>b1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <name>b2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>b3</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>b4</name><operator>)</operator></expr>;</expr_stmt>

		<comment type="block">/* First, try with combined map if possible */</comment>
		<if_stmt><if>if <condition>(<expr><name>cmap</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <name>l</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>utf_save</name> <init>= <expr><name>utf</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>len_save</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>l_save</name> <init>= <expr><name>l</name></expr></init></decl>;</decl_stmt>

			<comment type="block">/* collect next character, same as above */</comment>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>pg_utf_mblen</name><argument_list>(<argument><expr><name>utf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_utf8_islegal</name><argument_list>(<argument><expr><name>utf</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<comment type="block">/* We assume ASCII character cannot be in combined map */</comment>
			<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>uint32</name></type>		<name>iutf2</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>uint32</name></type>		<name><name>cutf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>iutf2</name> <operator>=</operator> <operator>*</operator><name>utf</name><operator>++</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>iutf2</name> <operator>|=</operator> <operator>*</operator><name>utf</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>iutf2</name> <operator>=</operator> <operator>*</operator><name>utf</name><operator>++</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>iutf2</name> <operator>|=</operator> <operator>*</operator><name>utf</name><operator>++</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>iutf2</name> <operator>|=</operator> <operator>*</operator><name>utf</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>iutf2</name> <operator>=</operator> <operator>*</operator><name>utf</name><operator>++</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>iutf2</name> <operator>|=</operator> <operator>*</operator><name>utf</name><operator>++</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>iutf2</name> <operator>|=</operator> <operator>*</operator><name>utf</name><operator>++</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>iutf2</name> <operator>|=</operator> <operator>*</operator><name>utf</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported character length %d"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>iutf2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>	<comment type="block">/* keep compiler quiet */</comment>
				</block_content>}</block></else></if_stmt>

				<expr_stmt><expr><name><name>cutf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>iutf</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>cutf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>iutf2</name></expr>;</expr_stmt>

				<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><name>cutf</name></expr></argument>, <argument><expr><name>cmap</name></expr></argument>, <argument><expr><name>cmapsize</name></expr></argument>,
							 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_utf_to_local_combined</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compare3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>cp</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>iso</name> <operator>=</operator> <call><name>store_coded_char</name><argument_list>(<argument><expr><name>iso</name></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* fail, so back up to reprocess second character next time */</comment>
			<expr_stmt><expr><name>utf</name> <operator>=</operator> <name>utf_save</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <name>len_save</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>l</name> <operator>=</operator> <name>l_save</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Now check ordinary map */</comment>
		<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint32</name></type>		<name>converted</name> <init>= <expr><call><name>pg_mb_radix_conv</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>, <argument><expr><name>b4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>converted</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>iso</name> <operator>=</operator> <call><name>store_coded_char</name><argument_list>(<argument><expr><name>iso</name></expr></argument>, <argument><expr><name>converted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* if there's a conversion function, try that */</comment>
		<if_stmt><if>if <condition>(<expr><name>conv_func</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint32</name></type>		<name>converted</name> <init>= <expr><call>(<modifier>*</modifier><name>conv_func</name>) <argument_list>(<argument><expr><name>iutf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>converted</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>iso</name> <operator>=</operator> <call><name>store_coded_char</name><argument_list>(<argument><expr><name>iso</name></expr></argument>, <argument><expr><name>converted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* failed to translate this character */</comment>
		<expr_stmt><expr><call><name>report_untranslatable_char</name><argument_list>(<argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>,
								   <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>utf</name> <operator>-</operator> <name>l</name><operator>)</operator></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* if we broke out of loop early, must be invalid input */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>utf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>iso</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * local code ---&gt; UTF8
 *
 * iso: input string in local encoding (need not be null-terminated)
 * len: length of input string (in bytes)
 * utf: pointer to the output area (must be large enough!)
		  (output string will be null-terminated)
 * map: conversion map for single characters
 * cmap: conversion map for combined characters
 *		  (optional, pass NULL if none)
 * cmapsize: number of entries in the conversion map for combined characters
 *		  (optional, pass 0 if none)
 * conv_func: algorithmic encoding conversion function
 *		  (optional, pass NULL if none)
 * encoding: PG identifier for the local encoding
 *
 * For each character, the map is consulted first; if no match, the cmap
 * (if provided) is consulted next; if still no match, the conv_func
 * (if provided) is applied.  An error is raised if no match is found.
 *
 * See pg_wchar.h for more details about the data structures used here.
 */</comment>
<function><type><name>void</name></type>
<name>LocalToUtf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iso</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
		   <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>utf</name></decl></parameter>,
		   <parameter><decl><type><specifier>const</specifier> <name>pg_mb_radix_tree</name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
		   <parameter><decl><type><specifier>const</specifier> <name>pg_local_to_utf_combined</name> <modifier>*</modifier></type><name>cmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmapsize</name></decl></parameter>,
		   <parameter><decl><type><name>utf_local_conversion_func</name></type> <name>conv_func</name></decl></parameter>,
		   <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>iiso</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>l</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>pg_local_to_utf_combined</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_VALID_ENCODING</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid encoding number: %d"</literal></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>len</name> <operator>-=</operator> <name>l</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* "break" cases all represent errors */</comment>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>iso</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><operator>*</operator><name>iso</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* ASCII case is easy, assume it's one-to-one conversion */</comment>
			<expr_stmt><expr><operator>*</operator><name>utf</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>iso</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>pg_encoding_verifymb</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>iso</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/* collect coded char of length l */</comment>
		<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>b4</name> <operator>=</operator> <operator>*</operator><name>iso</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>b3</name> <operator>=</operator> <operator>*</operator><name>iso</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b4</name> <operator>=</operator> <operator>*</operator><name>iso</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>*</operator><name>iso</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b3</name> <operator>=</operator> <operator>*</operator><name>iso</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b4</name> <operator>=</operator> <operator>*</operator><name>iso</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>*</operator><name>iso</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>*</operator><name>iso</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b3</name> <operator>=</operator> <operator>*</operator><name>iso</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b4</name> <operator>=</operator> <operator>*</operator><name>iso</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported character length %d"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>iiso</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>			<comment type="block">/* keep compiler quiet */</comment>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>iiso</name> <operator>=</operator> <operator>(</operator><name>b1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <name>b2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>b3</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>b4</name><operator>)</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint32</name></type>		<name>converted</name> <init>= <expr><call><name>pg_mb_radix_conv</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>, <argument><expr><name>b4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>converted</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>utf</name> <operator>=</operator> <call><name>store_coded_char</name><argument_list>(<argument><expr><name>utf</name></expr></argument>, <argument><expr><name>converted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* If there's a combined character map, try that */</comment>
			<if_stmt><if>if <condition>(<expr><name>cmap</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iiso</name></expr></argument>, <argument><expr><name>cmap</name></expr></argument>, <argument><expr><name>cmapsize</name></expr></argument>,
							 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_local_to_utf_combined</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compare4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>cp</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>utf</name> <operator>=</operator> <call><name>store_coded_char</name><argument_list>(<argument><expr><name>utf</name></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>utf1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>utf</name> <operator>=</operator> <call><name>store_coded_char</name><argument_list>(<argument><expr><name>utf</name></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>utf2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* if there's a conversion function, try that */</comment>
		<if_stmt><if>if <condition>(<expr><name>conv_func</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint32</name></type>		<name>converted</name> <init>= <expr><call>(<modifier>*</modifier><name>conv_func</name>) <argument_list>(<argument><expr><name>iiso</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>converted</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>utf</name> <operator>=</operator> <call><name>store_coded_char</name><argument_list>(<argument><expr><name>utf</name></expr></argument>, <argument><expr><name>converted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* failed to translate this character */</comment>
		<expr_stmt><expr><call><name>report_untranslatable_char</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>,
								   <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>iso</name> <operator>-</operator> <name>l</name><operator>)</operator></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* if we broke out of loop early, must be invalid input */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>iso</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>utf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
