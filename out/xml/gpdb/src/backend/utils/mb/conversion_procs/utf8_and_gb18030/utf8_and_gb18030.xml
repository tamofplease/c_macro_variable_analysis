<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/mb/conversion_procs/utf8_and_gb18030/utf8_and_gb18030.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 *	  GB18030 &lt;--&gt; UTF8
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/utils/mb/conversion_procs/utf8_and_gb18030/utf8_and_gb18030.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/gb18030_to_utf8.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/utf8_to_gb18030.map"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gb18030_to_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>utf8_to_gb18030</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * Convert 4-byte GB18030 characters to and from a linear code space
 *
 * The first and third bytes can range from 0x81 to 0xfe (126 values),
 * while the second and fourth bytes can range from 0x30 to 0x39 (10 values).
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32</name></type>
<name>gb_linear</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>gb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>b0</name> <init>= <expr><operator>(</operator><name>gb</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>b1</name> <init>= <expr><operator>(</operator><name>gb</name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>b2</name> <init>= <expr><operator>(</operator><name>gb</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>b3</name> <init>= <expr><operator>(</operator><name>gb</name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>b0</name> <operator>*</operator> <literal type="number">12600</literal> <operator>+</operator> <name>b1</name> <operator>*</operator> <literal type="number">1260</literal> <operator>+</operator> <name>b2</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>b3</name> <operator>-</operator>
		<operator>(</operator><literal type="number">0x81</literal> <operator>*</operator> <literal type="number">12600</literal> <operator>+</operator> <literal type="number">0x30</literal> <operator>*</operator> <literal type="number">1260</literal> <operator>+</operator> <literal type="number">0x81</literal> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">0x30</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32</name></type>
<name>gb_unlinear</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>lin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>r0</name> <init>= <expr><literal type="number">0x81</literal> <operator>+</operator> <name>lin</name> <operator>/</operator> <literal type="number">12600</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>r1</name> <init>= <expr><literal type="number">0x30</literal> <operator>+</operator> <operator>(</operator><name>lin</name> <operator>/</operator> <literal type="number">1260</literal><operator>)</operator> <operator>%</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>r2</name> <init>= <expr><literal type="number">0x81</literal> <operator>+</operator> <operator>(</operator><name>lin</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>%</operator> <literal type="number">126</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>r3</name> <init>= <expr><literal type="number">0x30</literal> <operator>+</operator> <name>lin</name> <operator>%</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><name>r0</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r1</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>r3</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert word-formatted UTF8 to and from Unicode code points
 *
 * Probably this should be somewhere else ...
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32</name></type>
<name>unicode_to_utf8word</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>word</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x7F</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>word</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x7FF</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>word</name> <operator>=</operator> <operator>(</operator><literal type="number">0xC0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>word</name> <operator>|=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0xFFFF</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>word</name> <operator>=</operator> <operator>(</operator><literal type="number">0xE0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>word</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>word</name> <operator>|=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>word</name> <operator>=</operator> <operator>(</operator><literal type="number">0xF0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>word</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>word</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>word</name> <operator>|=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>word</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32</name></type>
<name>utf8word_to_unicode</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>ucs</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x7F</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ucs</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0xFFFF</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ucs</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ucs</name> <operator>|=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0xFFFFFF</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ucs</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ucs</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ucs</name> <operator>|=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>ucs</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ucs</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ucs</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ucs</name> <operator>|=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>ucs</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Perform mapping of GB18030 ranges to UTF8
 *
 * The ranges we need to convert are specified in gb-18030-2000.xml.
 * All are ranges of 4-byte GB18030 codes.
 */</comment>
<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>conv_18030_to_utf8</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv18030</name><parameter_list>(<parameter><type><name>minunicode</name></type></parameter>, <parameter><type><name>mincode</name></type></parameter>, <parameter><type><name>maxcode</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>if (code &gt;= mincode &amp;&amp; code &lt;= maxcode) \
		return unicode_to_utf8word(gb_linear(code) - gb_linear(mincode) + minunicode)</cpp:value></cpp:define>

	<expr_stmt><expr><call><name>conv18030</name><argument_list>(<argument><expr><literal type="number">0x0452</literal></expr></argument>, <argument><expr><literal type="number">0x8130D330</literal></expr></argument>, <argument><expr><literal type="number">0x8136A531</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>conv18030</name><argument_list>(<argument><expr><literal type="number">0x2643</literal></expr></argument>, <argument><expr><literal type="number">0x8137A839</literal></expr></argument>, <argument><expr><literal type="number">0x8138FD38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>conv18030</name><argument_list>(<argument><expr><literal type="number">0x361B</literal></expr></argument>, <argument><expr><literal type="number">0x8230A633</literal></expr></argument>, <argument><expr><literal type="number">0x8230F237</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>conv18030</name><argument_list>(<argument><expr><literal type="number">0x3CE1</literal></expr></argument>, <argument><expr><literal type="number">0x8231D438</literal></expr></argument>, <argument><expr><literal type="number">0x8232AF32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>conv18030</name><argument_list>(<argument><expr><literal type="number">0x4160</literal></expr></argument>, <argument><expr><literal type="number">0x8232C937</literal></expr></argument>, <argument><expr><literal type="number">0x8232F837</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>conv18030</name><argument_list>(<argument><expr><literal type="number">0x44D7</literal></expr></argument>, <argument><expr><literal type="number">0x8233A339</literal></expr></argument>, <argument><expr><literal type="number">0x8233C931</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>conv18030</name><argument_list>(<argument><expr><literal type="number">0x478E</literal></expr></argument>, <argument><expr><literal type="number">0x8233E838</literal></expr></argument>, <argument><expr><literal type="number">0x82349638</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>conv18030</name><argument_list>(<argument><expr><literal type="number">0x49B8</literal></expr></argument>, <argument><expr><literal type="number">0x8234A131</literal></expr></argument>, <argument><expr><literal type="number">0x8234E733</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>conv18030</name><argument_list>(<argument><expr><literal type="number">0x9FA6</literal></expr></argument>, <argument><expr><literal type="number">0x82358F33</literal></expr></argument>, <argument><expr><literal type="number">0x8336C738</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>conv18030</name><argument_list>(<argument><expr><literal type="number">0xE865</literal></expr></argument>, <argument><expr><literal type="number">0x8336D030</literal></expr></argument>, <argument><expr><literal type="number">0x84308534</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>conv18030</name><argument_list>(<argument><expr><literal type="number">0xFA2A</literal></expr></argument>, <argument><expr><literal type="number">0x84309C38</literal></expr></argument>, <argument><expr><literal type="number">0x84318537</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>conv18030</name><argument_list>(<argument><expr><literal type="number">0xFFE6</literal></expr></argument>, <argument><expr><literal type="number">0x8431A234</literal></expr></argument>, <argument><expr><literal type="number">0x8431A439</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>conv18030</name><argument_list>(<argument><expr><literal type="number">0x10000</literal></expr></argument>, <argument><expr><literal type="number">0x90308130</literal></expr></argument>, <argument><expr><literal type="number">0xE3329A35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* No mapping exists */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Perform mapping of UTF8 ranges to GB18030
 */</comment>
<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>conv_utf8_to_18030</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>ucs</name> <init>= <expr><call><name>utf8word_to_unicode</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>convutf8</name><parameter_list>(<parameter><type><name>minunicode</name></type></parameter>, <parameter><type><name>maxunicode</name></type></parameter>, <parameter><type><name>mincode</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>if (ucs &gt;= minunicode &amp;&amp; ucs &lt;= maxunicode) \
		return gb_unlinear(ucs - minunicode + gb_linear(mincode))</cpp:value></cpp:define>

	<expr_stmt><expr><call><name>convutf8</name><argument_list>(<argument><expr><literal type="number">0x0452</literal></expr></argument>, <argument><expr><literal type="number">0x200F</literal></expr></argument>, <argument><expr><literal type="number">0x8130D330</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convutf8</name><argument_list>(<argument><expr><literal type="number">0x2643</literal></expr></argument>, <argument><expr><literal type="number">0x2E80</literal></expr></argument>, <argument><expr><literal type="number">0x8137A839</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convutf8</name><argument_list>(<argument><expr><literal type="number">0x361B</literal></expr></argument>, <argument><expr><literal type="number">0x3917</literal></expr></argument>, <argument><expr><literal type="number">0x8230A633</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convutf8</name><argument_list>(<argument><expr><literal type="number">0x3CE1</literal></expr></argument>, <argument><expr><literal type="number">0x4055</literal></expr></argument>, <argument><expr><literal type="number">0x8231D438</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convutf8</name><argument_list>(<argument><expr><literal type="number">0x4160</literal></expr></argument>, <argument><expr><literal type="number">0x4336</literal></expr></argument>, <argument><expr><literal type="number">0x8232C937</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convutf8</name><argument_list>(<argument><expr><literal type="number">0x44D7</literal></expr></argument>, <argument><expr><literal type="number">0x464B</literal></expr></argument>, <argument><expr><literal type="number">0x8233A339</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convutf8</name><argument_list>(<argument><expr><literal type="number">0x478E</literal></expr></argument>, <argument><expr><literal type="number">0x4946</literal></expr></argument>, <argument><expr><literal type="number">0x8233E838</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convutf8</name><argument_list>(<argument><expr><literal type="number">0x49B8</literal></expr></argument>, <argument><expr><literal type="number">0x4C76</literal></expr></argument>, <argument><expr><literal type="number">0x8234A131</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convutf8</name><argument_list>(<argument><expr><literal type="number">0x9FA6</literal></expr></argument>, <argument><expr><literal type="number">0xD7FF</literal></expr></argument>, <argument><expr><literal type="number">0x82358F33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convutf8</name><argument_list>(<argument><expr><literal type="number">0xE865</literal></expr></argument>, <argument><expr><literal type="number">0xF92B</literal></expr></argument>, <argument><expr><literal type="number">0x8336D030</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convutf8</name><argument_list>(<argument><expr><literal type="number">0xFA2A</literal></expr></argument>, <argument><expr><literal type="number">0xFE2F</literal></expr></argument>, <argument><expr><literal type="number">0x84309C38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convutf8</name><argument_list>(<argument><expr><literal type="number">0xFFE6</literal></expr></argument>, <argument><expr><literal type="number">0xFFFF</literal></expr></argument>, <argument><expr><literal type="number">0x8431A234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convutf8</name><argument_list>(<argument><expr><literal type="number">0x10000</literal></expr></argument>, <argument><expr><literal type="number">0x10FFFF</literal></expr></argument>, <argument><expr><literal type="number">0x90308130</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* No mapping exists */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------
 * conv_proc(
 *		INTEGER,	-- source encoding id
 *		INTEGER,	-- destination encoding id
 *		CSTRING,	-- source string (null terminated C string)
 *		CSTRING,	-- destination string (null terminated C string)
 *		INTEGER		-- source string length
 * ) returns VOID;
 * ----------
 */</comment>
<function><type><name>Datum</name></type>
<name>gb18030_to_utf8</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ENCODING_CONVERSION_ARGS</name><argument_list>(<argument><expr><name>PG_GB18030</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LocalToUtf</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>,
			   <argument><expr><operator>&amp;</operator><name>gb18030_to_unicode_tree</name></expr></argument>,
			   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			   <argument><expr><name>conv_18030_to_utf8</name></expr></argument>,
			   <argument><expr><name>PG_GB18030</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>utf8_to_gb18030</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ENCODING_CONVERSION_ARGS</name><argument_list>(<argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>PG_GB18030</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>UtfToLocal</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>,
			   <argument><expr><operator>&amp;</operator><name>gb18030_from_unicode_tree</name></expr></argument>,
			   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			   <argument><expr><name>conv_utf8_to_18030</name></expr></argument>,
			   <argument><expr><name>PG_GB18030</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
