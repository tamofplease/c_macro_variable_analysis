<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/gdd/test/gdddetector_test.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gdddetector_test.c
 *	  Unit tests for GDD.
 *
 * NOTES
 *    Tests in this file may serve two purposes:
 *    1) Unit-test individual internal functions in GDD.
 *    2) Construct artificial wait graphs and test if the GDD functions
 *       behave as expected. Comparing to those tests in isolation2/gdd,
 *       tests presented here can cover large-scale scenarios and has
 *       finer-grained control over how GDD executes. For example, here
 *       we can simulate a scenario with hundreds of transactions running
 *       on hundreds of segments. It would be quite challenging to do so
 *       with isolation2 test framework.
 *       As another example, we can force the reduce procedure to start
 *       from a particular vertex and check if GDD ends up with the right
 *       conclusion. Again, this is not easy to do with isolation2 test
 *       framework, as the order of vertices stored in GddCtx is determined
 *       by the order of tuples returned from gp_dist_wait_status(), which
 *       is non-deterministic.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<comment type="block">/* Actual function body */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../gdddetector.c"</cpp:file></cpp:include>

<comment type="block">/*
 * This struct defines a wait relation between two transactions.
 * It represents all the information related to a GddEdge.
 *
 * One can specify an arbitrary wait graph with an array of
 * TestWaitRelations, and call loadTestWaitRelations() to initialize
 * a GddCtx. This way, we can exercise GDD functions without running a
 * real GPDB cluster.
 */</comment>
<typedef>typedef <type><struct>struct <name>TestWaitRelation</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type> 		<name>seg_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistributedTransactionId</name></type>	<name>waiter_xid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistributedTransactionId</name></type>	<name>holder_xid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>solid_edge</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>waiter_pid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>holder_pid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LOCKMETHODID</name></type>	<name>lock_methodid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LOCKMODE</name></type> 	<name>lock_mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LockTagType</name></type>	<name>lock_tagtype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>waiter_sessionid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>holder_sessionid</name></decl>;</decl_stmt>
}</block></struct></type> <name>TestWaitRelation</name>;</typedef>

<comment type="block">/*
 * Data structures and variables copied from gddbackend.c.
 */</comment>
<typedef>typedef <type><struct>struct <name>VertSatelliteData</name>
<block>{
  <decl_stmt><decl><type><name>int</name></type>   <name>pid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>sessionid</name></decl>;</decl_stmt>
}</block></struct></type> <name>VertSatelliteData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>EdgeSatelliteData</name>
<block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lockmode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>locktype</name></decl>;</decl_stmt>
}</block></struct></type> <name>EdgeSatelliteData</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>gddContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>

<comment type="block">/*
 * Initialize a GddCtx with the given wait relations.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>loadTestWaitRelations</name><parameter_list>(<parameter><decl><type><name>GddCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>TestWaitRelation</name> <modifier>*</modifier></type><name>wait_relations</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>wait_relations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Add each edge into GddCtx.
	 * The code below mimics buildWaitGraph() and gp_dist_wait_status().
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DistributedTransactionId</name></type>  <name>waiter_xid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DistributedTransactionId</name></type>  <name>holder_xid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		   <name>solidedge</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			   <name>segid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GddEdge</name>       <modifier>*</modifier></type><name>edge</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>VertSatelliteData</name> <modifier>*</modifier></type><name>waiter_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>VertSatelliteData</name> <modifier>*</modifier></type><name>holder_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>EdgeSatelliteData</name> <modifier>*</modifier></type><name>edge_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>waiter_data</name> <operator>=</operator> <operator>(</operator><name>VertSatelliteData</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VertSatelliteData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>holder_data</name> <operator>=</operator> <operator>(</operator><name>VertSatelliteData</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VertSatelliteData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>edge_data</name> <operator>=</operator> <operator>(</operator><name>EdgeSatelliteData</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EdgeSatelliteData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>segid</name> <operator>=</operator> <name><name>wait_relations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>seg_id</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>waiter_xid</name> <operator>=</operator> <name><name>wait_relations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>waiter_xid</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>holder_xid</name> <operator>=</operator> <name><name>wait_relations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>holder_xid</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>solidedge</name> <operator>=</operator> <name><name>wait_relations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>solid_edge</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>waiter_data</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>wait_relations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>waiter_pid</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>holder_data</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>wait_relations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>holder_pid</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>edge_data</name><operator>-&gt;</operator><name>lockmode</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>GetLockmodeName</name><argument_list>(<argument><expr><name><name>wait_relations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lock_methodid</name></expr></argument>, <argument><expr><name><name>wait_relations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lock_mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>edge_data</name><operator>-&gt;</operator><name>locktype</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>GetLockNameFromTagType</name><argument_list>(<argument><expr><name><name>wait_relations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lock_tagtype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>waiter_data</name><operator>-&gt;</operator><name>sessionid</name></name> <operator>=</operator> <name><name>wait_relations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>waiter_sessionid</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>holder_data</name><operator>-&gt;</operator><name>sessionid</name></name> <operator>=</operator> <name><name>wait_relations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>holder_sessionid</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>edge</name> <operator>=</operator> <call><name>GddCtxAddEdge</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>segid</name></expr></argument>, <argument><expr><name>waiter_xid</name></expr></argument>, <argument><expr><name>holder_xid</name></expr></argument>, <argument><expr><name>solidedge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>edge</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>edge_data</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>edge</name><operator>-&gt;</operator><name>from</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>waiter_data</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>edge</name><operator>-&gt;</operator><name>to</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>holder_data</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Test case #1: test_reduce_simple_graph_no_deadlock
 *
 * - 1 segment
 * - 4 transactions (gxids are 10, 20, 30, and 40)
 * - Wait relations:
 *   - solid edge from txn 20 to txn 10
 *   - solid edge from txn 30 to txn 20
 *   - solid edge from txn 40 to txn 20
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_reduce_simple_graph_no_deadlock</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TestWaitRelation</name></type> <name><name>wait_relations</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
		<comment type="block">/* solid edge from txn 20 to txn 10 */</comment>
		<expr><block>{
			<expr><operator>.</operator><name>seg_id</name> <operator>=</operator> <literal type="number">0</literal></expr>,
			<expr><operator>.</operator><name>waiter_xid</name> <operator>=</operator> <literal type="number">20</literal></expr>,
			<expr><operator>.</operator><name>holder_xid</name> <operator>=</operator> <literal type="number">10</literal></expr>,
			<expr><operator>.</operator><name>solid_edge</name> <operator>=</operator> <name>true</name></expr>,
			<expr><operator>.</operator><name>waiter_pid</name> <operator>=</operator> <literal type="number">200</literal></expr>,
			<expr><operator>.</operator><name>holder_pid</name> <operator>=</operator> <literal type="number">100</literal></expr>,
			<expr><operator>.</operator><name>lock_methodid</name> <operator>=</operator> <name>DEFAULT_LOCKMETHOD</name></expr>,
			<expr><operator>.</operator><name>lock_mode</name> <operator>=</operator> <name>AccessExclusiveLock</name></expr>,
			<expr><operator>.</operator><name>lock_tagtype</name> <operator>=</operator> <name>LOCKTAG_RELATION</name></expr>,
			<expr><operator>.</operator><name>waiter_sessionid</name> <operator>=</operator> <literal type="number">3000</literal></expr>,
			<expr><operator>.</operator><name>holder_sessionid</name> <operator>=</operator> <literal type="number">1000</literal></expr>
		}</block></expr>,
		<comment type="block">/* solid edge from txn 30 to txn 20 */</comment>
		<expr><block>{
			<expr><operator>.</operator><name>seg_id</name> <operator>=</operator> <literal type="number">0</literal></expr>,
			<expr><operator>.</operator><name>waiter_xid</name> <operator>=</operator> <literal type="number">30</literal></expr>,
			<expr><operator>.</operator><name>holder_xid</name> <operator>=</operator> <literal type="number">20</literal></expr>,
			<expr><operator>.</operator><name>solid_edge</name> <operator>=</operator> <name>true</name></expr>,
			<expr><operator>.</operator><name>waiter_pid</name> <operator>=</operator> <literal type="number">300</literal></expr>,
			<expr><operator>.</operator><name>holder_pid</name> <operator>=</operator> <literal type="number">200</literal></expr>,
			<expr><operator>.</operator><name>lock_methodid</name> <operator>=</operator> <name>DEFAULT_LOCKMETHOD</name></expr>,
			<expr><operator>.</operator><name>lock_mode</name> <operator>=</operator> <name>AccessExclusiveLock</name></expr>,
			<expr><operator>.</operator><name>lock_tagtype</name> <operator>=</operator> <name>LOCKTAG_RELATION</name></expr>,
			<expr><operator>.</operator><name>waiter_sessionid</name> <operator>=</operator> <literal type="number">3000</literal></expr>,
			<expr><operator>.</operator><name>holder_sessionid</name> <operator>=</operator> <literal type="number">2000</literal></expr>
		}</block></expr>,
		<comment type="block">/* solid edge from txn 40 to txn 20 */</comment>
		<expr><block>{
			<expr><operator>.</operator><name>seg_id</name> <operator>=</operator> <literal type="number">0</literal></expr>,
			<expr><operator>.</operator><name>waiter_xid</name> <operator>=</operator> <literal type="number">40</literal></expr>,
			<expr><operator>.</operator><name>holder_xid</name> <operator>=</operator> <literal type="number">20</literal></expr>,
			<expr><operator>.</operator><name>solid_edge</name> <operator>=</operator> <name>true</name></expr>,
			<expr><operator>.</operator><name>waiter_pid</name> <operator>=</operator> <literal type="number">400</literal></expr>,
			<expr><operator>.</operator><name>holder_pid</name> <operator>=</operator> <literal type="number">200</literal></expr>,
			<expr><operator>.</operator><name>lock_methodid</name> <operator>=</operator> <name>DEFAULT_LOCKMETHOD</name></expr>,
			<expr><operator>.</operator><name>lock_mode</name> <operator>=</operator> <name>AccessExclusiveLock</name></expr>,
			<expr><operator>.</operator><name>lock_tagtype</name> <operator>=</operator> <name>LOCKTAG_RELATION</name></expr>,
			<expr><operator>.</operator><name>waiter_sessionid</name> <operator>=</operator> <literal type="number">4000</literal></expr>,
			<expr><operator>.</operator><name>holder_sessionid</name> <operator>=</operator> <literal type="number">2000</literal></expr>
		}</block></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GddCtx</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>gddContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>GddCtxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>loadTestWaitRelations</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>wait_relations</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GddCtxReduce</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* There should be no deadlock and hence no vertex left. */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_empty</name> <init>= <expr><call><name>GddCtxEmpty</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name>gddContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>is_empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Test case #2: test_reduce_large_graph_pair_deadlocks
 *
 * - 100 segments
 * - 200 transactions (gxids are from 1 to 200)
 * - Wait relations:
 *   - The i-th transaction and (i+100)-th transaction form a pair,
 *     and they wait for each other with solid edges on segments i-1
 *     and i. E.g., txn 1 waits for txn 101 on segment 0, and txn 101
 *     waits for txn 1 on segment 1, both with solid edges.
 *   - In total, there are 200 solid edges and 100 cycles (i.e., deadlocks).
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_reduce_large_graph_pair_deadlocks</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_transactions</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TestWaitRelation</name> <modifier>*</modifier></type><name>wait_relations</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>num_transactions</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestWaitRelation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Build the wait relations programmatically.
	 *
	 * txn 1 waits for txn 101 on segment 0; txn 101 waits for txn 2 on segment 1;
	 * txn 2 waits for txn 101 on segment 2; txn 101 waits for txn 2 on segment 3;
	 * ...
	 * txn 100 waits for txn 200 on segment 98; txn 200 waits for txn 100 on segment 99.
	 *
	 * All edges are solid.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_transactions</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TestWaitRelation</name> <modifier>*</modifier></type><name>r1</name> <init>= <expr><operator>&amp;</operator><name><name>wait_relations</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TestWaitRelation</name> <modifier>*</modifier></type><name>r2</name> <init>= <expr><operator>&amp;</operator><name><name>wait_relations</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>DistributedTransactionId</name></type> <name>gxid1</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Valid gxids start with 1. */</comment>
		<decl_stmt><decl><type><name>DistributedTransactionId</name></type> <name>gxid2</name> <init>= <expr><name>gxid1</name> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>segment1</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt> <comment type="block">/* segment id starts with 0. */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>segment2</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Make up pids and session ids. */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>pid1_segment1</name> <init>= <expr><name>segment1</name> <operator>*</operator> <name>num_transactions</name> <operator>+</operator> <name>gxid1</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pid2_segment1</name> <init>= <expr><name>segment1</name> <operator>*</operator> <name>num_transactions</name> <operator>+</operator> <name>gxid2</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pid1_segment2</name> <init>= <expr><name>segment1</name> <operator>*</operator> <name>num_transactions</name> <operator>+</operator> <name>gxid1</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pid2_segment2</name> <init>= <expr><name>segment1</name> <operator>*</operator> <name>num_transactions</name> <operator>+</operator> <name>gxid2</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>sessionid1</name> <init>= <expr><name>gxid1</name> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>sessionid2</name> <init>= <expr><name>gxid2</name> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* r1: gxid1 waits for gxid2 on segment1 with solid edge. */</comment>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>seg_id</name></name> <operator>=</operator> <name>segment1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>waiter_xid</name></name> <operator>=</operator> <name>gxid1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>holder_xid</name></name> <operator>=</operator> <name>gxid2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>solid_edge</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>waiter_pid</name></name> <operator>=</operator> <name>pid1_segment1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>holder_pid</name></name> <operator>=</operator> <name>pid2_segment1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>lock_methodid</name></name> <operator>=</operator> <name>DEFAULT_LOCKMETHOD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>lock_mode</name></name> <operator>=</operator> <name>AccessExclusiveLock</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>lock_tagtype</name></name> <operator>=</operator> <name>LOCKTAG_RELATION</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>waiter_sessionid</name></name> <operator>=</operator> <name>sessionid1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>holder_sessionid</name></name> <operator>=</operator> <name>sessionid2</name></expr>;</expr_stmt>

		<comment type="block">/* r2: gxid2 waits for gxid1 on segment2 with solid edge. */</comment>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>seg_id</name></name> <operator>=</operator> <name>segment2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>waiter_xid</name></name> <operator>=</operator> <name>gxid2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>holder_xid</name></name> <operator>=</operator> <name>gxid1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>solid_edge</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>waiter_pid</name></name> <operator>=</operator> <name>pid2_segment2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>holder_pid</name></name> <operator>=</operator> <name>pid1_segment2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>lock_methodid</name></name> <operator>=</operator> <name>DEFAULT_LOCKMETHOD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>lock_mode</name></name> <operator>=</operator> <name>AccessExclusiveLock</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>lock_tagtype</name></name> <operator>=</operator> <name>LOCKTAG_RELATION</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>waiter_sessionid</name></name> <operator>=</operator> <name>sessionid2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>holder_sessionid</name></name> <operator>=</operator> <name>sessionid1</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<decl_stmt><decl><type><name>GddCtx</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>gddContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>GddCtxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>loadTestWaitRelations</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>wait_relations</name></expr></argument>, <argument><expr><name>num_transactions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GddCtxReduce</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>indeg_count</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>topstat</name><operator>.</operator><name>indeg</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>outdeg_count</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>topstat</name><operator>.</operator><name>outdeg</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name>gddContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>wait_relations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>indeg_count</name></expr></argument>, <argument><expr><name>num_transactions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>outdeg_count</name></expr></argument>, <argument><expr><name>num_transactions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Test case #3: test_reduce_large_graph_no_deadlock1
 *
 * - 100 segments
 * - 200 transactions (gxids are from 1 to 200)
 * - Wait relations:
 *   - The i-th transaction and (i+100)-th transaction form a pair,
 *     and they wait for each other with solid edges on segments i-1
 *     and i. E.g., txn 1 waits for txn 101 on segment 0, and txn 101
 *     waits for txn 1 on segment 1, both with dotted edges.
 *   - In total, there are 200 dotted edges and no deadlock.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_reduce_large_graph_no_deadlock1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_transactions</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TestWaitRelation</name> <modifier>*</modifier></type><name>wait_relations</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>num_transactions</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestWaitRelation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Build the wait relations programmatically.
	 *
	 * txn 1 waits for txn 101 on segment 0; txn 101 waits for txn 2 on segment 1;
	 * txn 2 waits for txn 101 on segment 2; txn 101 waits for txn 2 on segment 3;
	 * ...
	 * txn 100 waits for txn 200 on segment 98; txn 200 waits for txn 100 on segment 99.
	 *
	 * All edges are dotted.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_transactions</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TestWaitRelation</name> <modifier>*</modifier></type><name>r1</name> <init>= <expr><operator>&amp;</operator><name><name>wait_relations</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TestWaitRelation</name> <modifier>*</modifier></type><name>r2</name> <init>= <expr><operator>&amp;</operator><name><name>wait_relations</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>DistributedTransactionId</name></type> <name>gxid1</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Valid gxids start with 1. */</comment>
		<decl_stmt><decl><type><name>DistributedTransactionId</name></type> <name>gxid2</name> <init>= <expr><name>gxid1</name> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>segment1</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt> <comment type="block">/* segment id starts with 0. */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>segment2</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Make up pids and session ids. */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>pid1_segment1</name> <init>= <expr><name>segment1</name> <operator>*</operator> <name>num_transactions</name> <operator>+</operator> <name>gxid1</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pid2_segment1</name> <init>= <expr><name>segment1</name> <operator>*</operator> <name>num_transactions</name> <operator>+</operator> <name>gxid2</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pid1_segment2</name> <init>= <expr><name>segment1</name> <operator>*</operator> <name>num_transactions</name> <operator>+</operator> <name>gxid1</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pid2_segment2</name> <init>= <expr><name>segment1</name> <operator>*</operator> <name>num_transactions</name> <operator>+</operator> <name>gxid2</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>sessionid1</name> <init>= <expr><name>gxid1</name> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>sessionid2</name> <init>= <expr><name>gxid2</name> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* r1: gxid1 waits for gxid2 on segment1 with dotted edge. */</comment>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>seg_id</name></name> <operator>=</operator> <name>segment1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>waiter_xid</name></name> <operator>=</operator> <name>gxid1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>holder_xid</name></name> <operator>=</operator> <name>gxid2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>solid_edge</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>waiter_pid</name></name> <operator>=</operator> <name>pid1_segment1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>holder_pid</name></name> <operator>=</operator> <name>pid2_segment1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>lock_methodid</name></name> <operator>=</operator> <name>DEFAULT_LOCKMETHOD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>lock_mode</name></name> <operator>=</operator> <name>AccessExclusiveLock</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>lock_tagtype</name></name> <operator>=</operator> <name>LOCKTAG_TUPLE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>waiter_sessionid</name></name> <operator>=</operator> <name>sessionid1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>holder_sessionid</name></name> <operator>=</operator> <name>sessionid2</name></expr>;</expr_stmt>

		<comment type="block">/* r2: gxid2 waits for gxid1 on segment2 with dotted edge. */</comment>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>seg_id</name></name> <operator>=</operator> <name>segment2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>waiter_xid</name></name> <operator>=</operator> <name>gxid2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>holder_xid</name></name> <operator>=</operator> <name>gxid1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>solid_edge</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>waiter_pid</name></name> <operator>=</operator> <name>pid2_segment2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>holder_pid</name></name> <operator>=</operator> <name>pid1_segment2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>lock_methodid</name></name> <operator>=</operator> <name>DEFAULT_LOCKMETHOD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>lock_mode</name></name> <operator>=</operator> <name>AccessExclusiveLock</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>lock_tagtype</name></name> <operator>=</operator> <name>LOCKTAG_TUPLE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>waiter_sessionid</name></name> <operator>=</operator> <name>sessionid2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>holder_sessionid</name></name> <operator>=</operator> <name>sessionid1</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<decl_stmt><decl><type><name>GddCtx</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>gddContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>GddCtxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>loadTestWaitRelations</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>wait_relations</name></expr></argument>, <argument><expr><name>num_transactions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GddCtxReduce</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* There should be no deadlock and hence no vertex left. */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_empty</name> <init>= <expr><call><name>GddCtxEmpty</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name>gddContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>is_empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Test case #4: test_reduce_large_graph_single_deadlock
 *
 * - 101 segments
 * - 100 transactions (gxids are from 1 to 100)
 * - Wait relations:
 *   - The i-th transaction waits for the (i+1)-th transaction on segments i-1
 *     and i. E.g., txn 1 waits for txn 2 on segment 0, and txn 2
 *     waits for txn 3 on segment 1, ..., and txn 100 waits for txn 1 on
 *     segment 100, all on solid edges.
 *   - In total, there are 101 solid edges and a single cycle with all txns in it.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_reduce_large_graph_single_deadlock</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_transactions</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TestWaitRelation</name> <modifier>*</modifier></type><name>wait_relations</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><name>num_transactions</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestWaitRelation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Build the wait relations programmatically.
	 *
	 * txn 1 waits for txn 2 on segment 0;
	 * txn 2 waits for txn 3 on segment 1;
	 * ...
	 * txn 100 waits for txn 1 on segment 100.
	 *
	 * All edges are solid.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num_transactions</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TestWaitRelation</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name><name>wait_relations</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>DistributedTransactionId</name></type> <name>gxid1</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Valid gxids start with 1. */</comment>
		<decl_stmt><decl><type><name>DistributedTransactionId</name></type> <name>gxid2</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>gxid1</name> <operator>&lt;</operator> <name>num_transactions</name><operator>)</operator></expr> ?</condition><then> <expr><name>gxid1</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>segment</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt> <comment type="block">/* segment id starts with 0. */</comment>

		<comment type="block">/* Make up pids and session ids. */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>pid1</name> <init>= <expr><name>segment</name> <operator>*</operator> <name>num_transactions</name> <operator>+</operator> <name>gxid1</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pid2</name> <init>= <expr><name>segment</name> <operator>*</operator> <name>num_transactions</name> <operator>+</operator> <name>gxid2</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>sessionid1</name> <init>= <expr><name>gxid1</name> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>sessionid2</name> <init>= <expr><name>gxid2</name> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* r: gxid1 waits for gxid2 on segment with solid edge. */</comment>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>seg_id</name></name> <operator>=</operator> <name>segment</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>waiter_xid</name></name> <operator>=</operator> <name>gxid1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>holder_xid</name></name> <operator>=</operator> <name>gxid2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>solid_edge</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>waiter_pid</name></name> <operator>=</operator> <name>pid1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>holder_pid</name></name> <operator>=</operator> <name>pid2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>lock_methodid</name></name> <operator>=</operator> <name>DEFAULT_LOCKMETHOD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>lock_mode</name></name> <operator>=</operator> <name>AccessExclusiveLock</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>lock_tagtype</name></name> <operator>=</operator> <name>LOCKTAG_RELATION</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>waiter_sessionid</name></name> <operator>=</operator> <name>sessionid1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>holder_sessionid</name></name> <operator>=</operator> <name>sessionid2</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<decl_stmt><decl><type><name>GddCtx</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>gddContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>GddCtxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>loadTestWaitRelations</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>wait_relations</name></expr></argument>, <argument><expr><name>num_transactions</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GddCtxReduce</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>indeg_count</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>topstat</name><operator>.</operator><name>indeg</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>outdeg_count</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>topstat</name><operator>.</operator><name>outdeg</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name>gddContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>wait_relations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>indeg_count</name></expr></argument>, <argument><expr><name>num_transactions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>outdeg_count</name></expr></argument>, <argument><expr><name>num_transactions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Test case #5: test_reduce_large_graph_no_deadlock2
 *
 * - 101 segments
 * - 100 transactions (gxids are from 1 to 100)
 * - Wait relations:
 *   - The i-th transaction waits for the (i+1)-th transaction on segments i-1
 *     and i. E.g., txn 1 waits for txn 2 on segment 0, and txn 2
 *     waits for txn 3 on segment 1, ..., and txn 99 waits for txn 100 on
 *     segment 99, all on solid edges.
 *   - txn 100 waits for txn 1 on segment 100, with a dotted edge.
 *   - In total, there are 100 solid edges plus 1 dotted edge, and no deadlock.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_reduce_large_graph_no_deadlock2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_transactions</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TestWaitRelation</name> <modifier>*</modifier></type><name>wait_relations</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><name>num_transactions</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestWaitRelation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Build the wait relations programmatically.
	 *
	 * txn 1 waits for txn 2 on segment 0;
	 * txn 2 waits for txn 3 on segment 1;
	 * ...
	 * txn 99 waits for txn 100 on segment 99;
	 * txn 100 waits for txn 1 on segment 100.
	 *
	 * All but the last edge are solid.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num_transactions</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TestWaitRelation</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name><name>wait_relations</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>DistributedTransactionId</name></type> <name>gxid1</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Valid gxids start with 1. */</comment>
		<decl_stmt><decl><type><name>DistributedTransactionId</name></type> <name>gxid2</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>gxid1</name> <operator>&lt;</operator> <name>num_transactions</name><operator>)</operator></expr> ?</condition><then> <expr><name>gxid1</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>segment</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt> <comment type="block">/* segment id starts with 0. */</comment>

		<comment type="block">/* Make up pids and session ids. */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>pid1</name> <init>= <expr><name>segment</name> <operator>*</operator> <name>num_transactions</name> <operator>+</operator> <name>gxid1</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pid2</name> <init>= <expr><name>segment</name> <operator>*</operator> <name>num_transactions</name> <operator>+</operator> <name>gxid2</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>sessionid1</name> <init>= <expr><name>gxid1</name> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>sessionid2</name> <init>= <expr><name>gxid2</name> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* r: gxid1 waits for gxid2 on segment with solid edge, except the last one. */</comment>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>seg_id</name></name> <operator>=</operator> <name>segment</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>waiter_xid</name></name> <operator>=</operator> <name>gxid1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>holder_xid</name></name> <operator>=</operator> <name>gxid2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>solid_edge</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>gxid1</name> <operator>&lt;</operator> <name>num_transactions</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>waiter_pid</name></name> <operator>=</operator> <name>pid1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>holder_pid</name></name> <operator>=</operator> <name>pid2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>lock_methodid</name></name> <operator>=</operator> <name>DEFAULT_LOCKMETHOD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>lock_mode</name></name> <operator>=</operator> <name>AccessExclusiveLock</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>lock_tagtype</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>gxid1</name> <operator>&lt;</operator> <name>num_transactions</name><operator>)</operator></expr> ?</condition><then> <expr><name>LOCKTAG_RELATION</name></expr> </then><else>: <expr><name>LOCKTAG_TUPLE</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>waiter_sessionid</name></name> <operator>=</operator> <name>sessionid1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>holder_sessionid</name></name> <operator>=</operator> <name>sessionid2</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<decl_stmt><decl><type><name>GddCtx</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>gddContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>GddCtxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>loadTestWaitRelations</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>wait_relations</name></expr></argument>, <argument><expr><name>num_transactions</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GddCtxReduce</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* There should be no deadlock and hence no vertex left. */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_empty</name> <init>= <expr><call><name>GddCtxEmpty</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name>gddContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>wait_relations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>is_empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_reduce_simple_graph_no_deadlock</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_reduce_large_graph_pair_deadlocks</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_reduce_large_graph_no_deadlock1</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_reduce_large_graph_single_deadlock</name></expr></argument>)</argument_list></call></expr>,
		<macro><name>unit_test</name><argument_list>(<argument>test_reduce_large_graph_no_deadlock2</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>gddContext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
									   <argument><expr><literal type="string">"GddContext"</literal></expr></argument>,
									   <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
									   <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
									   <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
