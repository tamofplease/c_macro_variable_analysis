<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/session_state.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * session_state.c
 *	 Implementation of the session state manager. Session state contains
 *	 session specific information such as memory usage of the session, number
 *	 of active processes in the session and so on. It is also used to indicate
 *	 if a session is runaway and therefore needs to cleanup its resources.
 *
 * Copyright (c) 2014-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/utils/session_state.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/atomics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/session_state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/vmem_tracker.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_SESSION_ID</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHMEM_SESSION_STATE_ARRAY</name></cpp:macro> <cpp:value>"Session State Array"</cpp:value></cpp:define>

<comment type="block">/* Pointer to SessionStateArray instance in shared memory */</comment>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>SessionStateArray</name> <modifier>*</modifier></type><name>AllSessionStateEntries</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<comment type="block">/* Number of entries in the SessionStateArray */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SessionStateArrayEntryCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="block">/*
 * A pointer to the entry in the array of SessionState that corresponds
 * to the SessionState of this session.
 */</comment>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>SessionState</name> <modifier>*</modifier></type><name>MySessionState</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<comment type="block">/* Have we initialized the sessionState pointer */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>sessionStateInited</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* For checking if the process is deactivated before calling SessionState_Release */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>isProcessActive</name></decl>;</decl_stmt>

<comment type="block">/* Returns the size of the shared memory to allocate SessionStateArray */</comment>
<comment type="block">/*
 * Grabs one entry in the sessionStateArray for current session.
 * If the current session already has an entry, it just returns the
 * pointer to the previously grabbed entry.
 */</comment>
<function><type><specifier>static</specifier> <name>SessionState</name><modifier>*</modifier></type>
<name>SessionState_Acquire</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sessionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>SessionStateLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>usedList</name></name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>!=</operator> <name>sessionId</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>INVALID_SESSION_ID</name> <operator>!=</operator> <name><name>cur</name><operator>-&gt;</operator><name>sessionId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>cur</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>freeList</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SessionStateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TOO_MANY_CONNECTIONS</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"too many sessions"</literal></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Could not acquire resources for additional sessions."</literal></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Disconnect some sessions and try again."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>acquired</name> <init>= <expr><name>cur</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Nothing was acquired for this session from any other processes. Therefore,
	 * acquire a new entry, and reset its properties.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>acquired</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>acquired</name> <operator>=</operator> <name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>freeList</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>freeList</name></name> <operator>=</operator> <name><name>acquired</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>usedList</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>usedList</name></name> <operator>=</operator> <name>acquired</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>numSession</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>numSession</name></name> <operator>&lt;=</operator> <name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>maxSession</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>=</operator> <name>sessionId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>=</operator> <name>RunawayStatus_NotRunaway</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>sessionVmemRunaway</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>commandCountRunaway</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>pinCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>sessionVmem</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>=</operator> <name>CLEANUP_COUNTDOWN_BEFORE_RUNAWAY</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>idle_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>latestCursorCommandId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>resGroupSlot</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>isModifiedSessionId</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/*
		 * Make sure that the lock is reset to released. Note: this doesn't
		 * have a matching SpinLockAcquire. We are just resetting the lock
		 * as part of initialization
		 */</comment>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acquired</name><operator>-&gt;</operator><name>spinLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>acquired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pinCount</name> <init>= <expr><call><name>pg_atomic_add_fetch_u32</name><argument_list>(<argument><expr><operator>(</operator><name>pg_atomic_uint32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>acquired</name><operator>-&gt;</operator><name>pinCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>gp_sessionstate_loglevel</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SessionState_Acquire: pinCount: %d, activeProcessCount: %d"</literal></expr></argument>,
			<argument><expr><name>pinCount</name></expr></argument>, <argument><expr><name><name>acquired</name><operator>-&gt;</operator><name>activeProcessCount</name></name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errprintstack</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SessionStateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>acquired</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Releases the pinCount of a SessionState entry. If the pinCount
 * drops to 0, it puts the entry back to the freeList for reuse.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>SessionState_Release</name><parameter_list>(<parameter><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>acquired</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sessionStateInited</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>==</operator> <name>acquired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>acquired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>acquired</name><operator>-&gt;</operator><name>pinCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>acquired</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>==</operator> <name>gp_session_id</name> <operator>||</operator> <name><name>acquired</name><operator>-&gt;</operator><name>isModifiedSessionId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>SessionStateLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isProcessActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>acquired</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>&lt;</operator> <name><name>acquired</name><operator>-&gt;</operator><name>pinCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>pinCount</name> <init>= <expr><call><name>pg_atomic_sub_fetch_u32</name><argument_list>(<argument><expr><operator>(</operator><name>pg_atomic_uint32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>acquired</name><operator>-&gt;</operator><name>pinCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>gp_sessionstate_loglevel</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SessionState_Release: pinCount: %d, activeProcessCount: %d"</literal></expr></argument>,
			<argument><expr><name>pinCount</name></expr></argument>, <argument><expr><name><name>acquired</name><operator>-&gt;</operator><name>activeProcessCount</name></name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errprintstack</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* Before this point the process should have been deactivated */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>acquired</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>&lt;=</operator> <name><name>acquired</name><operator>-&gt;</operator><name>pinCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name><name>acquired</name><operator>-&gt;</operator><name>pinCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>acquired</name><operator>-&gt;</operator><name>pinCount</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RunawayCleaner_RunawayCleanupDoneForSession</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>=</operator> <name>INVALID_SESSION_ID</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>acquired</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>==</operator> <name>RunawayStatus_NotRunaway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CLEANUP_COUNTDOWN_BEFORE_RUNAWAY</name> <operator>==</operator> <name><name>acquired</name><operator>-&gt;</operator><name>cleanupCountdown</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <name><name>acquired</name><operator>-&gt;</operator><name>activeProcessCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>sessionVmem</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>=</operator> <name>RunawayStatus_NotRunaway</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>sessionVmemRunaway</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>commandCountRunaway</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>=</operator> <name>CLEANUP_COUNTDOWN_BEFORE_RUNAWAY</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>idle_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>latestCursorCommandId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>resGroupSlot</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>isModifiedSessionId</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>usedList</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>acquired</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>cur</name> <operator>==</operator> <name>acquired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* grabbed is at the head of used list */</comment>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>prev</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>usedList</name></name> <operator>==</operator> <name>acquired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>usedList</name></name> <operator>=</operator> <name><name>acquired</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>acquired</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>freeList</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>freeList</name></name> <operator>=</operator> <name>acquired</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>numSession</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>numSession</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SessionStateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Returns the size of the SessionState array */</comment>
<function><type><name>Size</name></type>
<name>SessionState_ShmemSize</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>SessionStateArrayEntryCount</name> <operator>=</operator> <name>MaxBackends</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Size</name></type> <name>size</name> <init>= <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>SessionStateArray</name></expr></argument>, <argument><expr><name>sessions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SessionState</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><name>SessionStateArrayEntryCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Allocates the shared memory SessionStateArray */</comment>
<function><type><name>void</name></type>
<name>SessionState_ShmemInit</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>	<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Size</name></type> <name>shmemSize</name> <init>= <expr><call><name>SessionState_ShmemSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>AllSessionStateEntries</name> <operator>=</operator> <operator>(</operator><name>SessionStateArray</name> <operator>*</operator><operator>)</operator>
				<call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>SHMEM_SESSION_STATE_ARRAY</name></expr></argument>, <argument><expr><name>shmemSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name> <operator>||</operator> <operator>!</operator><name>IsUnderPostmaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>AllSessionStateEntries</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>shmemSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * We're the first - initialize.
		 */</comment>
		<expr_stmt><expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>numSession</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>maxSession</name></name> <operator>=</operator> <name>SessionStateArrayEntryCount</name></expr>;</expr_stmt>

		<comment type="block">/* Every entry of the array is free at this time */</comment>
		<expr_stmt><expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>freeList</name></name> <operator>=</operator> <operator>(</operator><name>SessionState</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>sessions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>usedList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Set all the entries' sessionId to invalid. Also, set the next pointer
		 * to point to the next entry in the array.
		 */</comment>
		<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><operator>(</operator><name>SessionState</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>sessions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>=</operator> <name>INVALID_SESSION_ID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>=</operator> <name>CLEANUP_COUNTDOWN_BEFORE_RUNAWAY</name></expr>;</expr_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>maxSession</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>(</operator><name>SessionState</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>sessions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>=</operator> <name>INVALID_SESSION_ID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>=</operator> <name>CLEANUP_COUNTDOWN_BEFORE_RUNAWAY</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Initialize the SessionState for current session */</comment>
<function><type><name>void</name></type>
<name>SessionState_Init</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>==</operator> <name>MySessionState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>INVALID_SESSION_ID</name> <operator>==</operator> <name>gp_session_id</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>sessionStateInited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>MySessionState</name> <operator>=</operator> <call><name>SessionState_Acquire</name><argument_list>(<argument><expr><name>gp_session_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>MySessionState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sessionStateInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Shutdown the SessionState for current session */</comment>
<function><type><name>void</name></type>
<name>SessionState_Shutdown</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>INVALID_SESSION_ID</name> <operator>==</operator> <name>gp_session_id</name> <operator>||</operator> <name>NULL</name> <operator>!=</operator> <name>MySessionState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>INVALID_SESSION_ID</name> <operator>==</operator> <name>gp_session_id</name> <operator>||</operator> <name>sessionStateInited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SessionState_Release</name><argument_list>(<argument><expr><operator>(</operator><name>SessionState</name> <operator>*</operator><operator>)</operator><name>MySessionState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>MySessionState</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>sessionStateInited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Returns true if the SessionState entry is acquired by a session
 */</comment>
<function><type><name>bool</name></type>
<name>SessionState_IsAcquired</name><parameter_list>(<parameter><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>sessionState</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>sessionState</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>!=</operator> <name>INVALID_SESSION_ID</name></expr>;</return>
</block_content>}</block></function>
</unit>
