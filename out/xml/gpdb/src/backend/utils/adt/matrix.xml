<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/adt/matrix.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMESIGN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(((a) &lt; 0) == ((b) &lt; 0))</cpp:value></cpp:define>

<comment type="block">/*
 * check to see if a float4/8 val has underflowed or overflowed
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECKFLOATVAL</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>inf_is_valid</name></type></parameter>, <parameter><type><name>zero_is_valid</name></type></parameter>)</parameter_list></cpp:macro>			\
<cpp:value>do {															\
	if (isinf(val) &amp;&amp; !(inf_is_valid))							\
		ereport(ERROR,											\
				(errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE),	\
		  errmsg("value out of range: overflow")));				\
																\
	if ((val) == 0.0 &amp;&amp; !(zero_is_valid))						\
		ereport(ERROR,											\
				(errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE),	\
		 errmsg("value out of range: underflow")));				\
} while(0)</cpp:value></cpp:define>


<comment type="block">/*
 * check to see if a int16/32/64 val has overflow in addition
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECKINTADD</name><parameter_list>(<parameter><type><name>result</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro>							\
<cpp:value>do {															\
	if (SAMESIGN(arg1, arg2) &amp;&amp; !SAMESIGN(result, arg1))		\
		ereport(ERROR,											\
				(errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE),	\
		  errmsg("int value out of range: overflow")));				\
} while(0)</cpp:value></cpp:define>

<comment type="block">/*
 * matrix_add - array summation over two input arrays
 */</comment>
<function><type><name>Datum</name></type>
<name>matrix_add</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>mtype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>ntype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ndim</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>transition_function</name></decl>;</decl_stmt>
	
	<comment type="block">/* If we're in a transition function we can be smarter */</comment>
	<expr_stmt><expr><name>transition_function</name> <operator>=</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>context</name></name> <operator>&amp;&amp;</operator> <call><name>IsA</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>AggState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Validate arguments */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> 
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"matrix_add called with %d arguments"</literal></expr></argument>, <argument><expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<comment type="block">/* 
	 * This function is sometimes strict, and sometimes not in order to deal
	 * with needing to upconvert datatypes in an aggregate function.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_strict</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * When we are upconverting we always upconvert to the datatype of the
	 * first argument, so the first argument is a safe return value 
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_ARRAYTYPE_P</name><argument_list>(<argument><expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ndim</name>  <operator>=</operator> <call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ntype</name> <operator>=</operator> <call><name>ARR_ELEMTYPE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ndim</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_ARRAYTYPE_P</name><argument_list>(<argument><expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Typecheck the input arrays, we only handle fixed length numeric data. */</comment>
	<if_stmt><if>if <condition>(<expr><name>ntype</name> <operator>!=</operator> <name>INT2OID</name>   <operator>&amp;&amp;</operator> <name>ntype</name> <operator>!=</operator> <name>INT4OID</name> <operator>&amp;&amp;</operator> <name>ntype</name> <operator>!=</operator> <name>INT8OID</name> <operator>&amp;&amp;</operator> 
		<name>ntype</name> <operator>!=</operator> <name>FLOAT4OID</name> <operator>&amp;&amp;</operator> <name>ntype</name> <operator>!=</operator> <name>FLOAT8OID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"matrix_add: unsupported datatype"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* count total number of elements */</comment>
	<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ndim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>len</name> <operator>*=</operator> <call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>

	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>       <name>size</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>       <name>elsize</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type>       <name>returntype</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl>;</decl_stmt>
		
		<comment type="block">/* Determine what our return type should be */</comment>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>returntype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name>returntype</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>INT2ARRAYOID</name></expr>:</case>
				<expr_stmt><expr><name>mtype</name> <operator>=</operator> <name>INT2OID</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>elsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>INT4ARRAYOID</name></expr>:</case>
				<expr_stmt><expr><name>mtype</name> <operator>=</operator> <name>INT4OID</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>elsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>INT8ARRAYOID</name></expr>:</case>
				<expr_stmt><expr><name>mtype</name> <operator>=</operator> <name>INT8OID</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>elsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>FLOAT4ARRAYOID</name></expr>:</case>
				<expr_stmt><expr><name>mtype</name> <operator>=</operator> <name>FLOAT4OID</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>elsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float4</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>FLOAT8ARRAYOID</name></expr>:</case>
				<expr_stmt><expr><name>mtype</name> <operator>=</operator> <name>FLOAT8OID</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>elsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float8</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, 
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"matrix_add: return datatype lookup failure"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Completely useless code that fixes compiler warnings */</comment>
				<expr_stmt><expr><name>mtype</name> <operator>=</operator> <name>INT2OID</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>elsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		</block_content>}</block></switch>

		<comment type="block">/* Allocate the state matrix */</comment>
		<expr_stmt><expr><name>size</name>  <operator>=</operator> <call><name>ARR_OVERHEAD_NONULLS</name><argument_list>(<argument><expr><name>ndim</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name> <operator>*</operator> <name>elsize</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>ArrayType</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>ndim</name></name> <operator>=</operator> <name>ndim</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>dataoffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>elemtype</name></name> <operator>=</operator> <name>mtype</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ndim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ARR_LBOUND</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <name>elsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mtype</name> <operator>=</operator> <call><name>ARR_ELEMTYPE</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ndim</name> <operator>!=</operator> <call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"matrix_add: Dimensionality of both arrays must match"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ndim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>!=</operator> <call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"matrix_add: non-conformable arrays"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><call><name>ARR_NULLBITMAP</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ARR_NULLBITMAP</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"matrix_add: null array element not allowed in this context"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Typecheck the input arrays, we only handle fixed length numeric data. */</comment>
		<if_stmt><if>if <condition>(<expr><name>ntype</name> <operator>!=</operator> <name>INT2OID</name>   <operator>&amp;&amp;</operator> <name>ntype</name> <operator>!=</operator> <name>INT4OID</name> <operator>&amp;&amp;</operator> <name>ntype</name> <operator>!=</operator> <name>INT8OID</name> <operator>&amp;&amp;</operator> 
			<name>ntype</name> <operator>!=</operator> <name>FLOAT4OID</name> <operator>&amp;&amp;</operator> <name>ntype</name> <operator>!=</operator> <name>FLOAT8OID</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"matrix_add: unsupported datatype"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	
	<comment type="block">/*
	 * Overflow check.	If the sign of inputs are different, then their sum
	 * cannot overflow.  If the inputs are of the same sign, their sum had
	 * better be that sign too.
	 */</comment>
	<comment type="block">/* Transition function updates in place, otherwise allocate result */</comment>
	<if_stmt><if>if <condition>(<expr><name>transition_function</name></expr>)</condition> 
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>mtype</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>INT2OID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>data_m</name> <init>= <expr><operator>(</operator><name>int16</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<comment type="block">/*	plus result, need to check overflow*/</comment>
				<decl_stmt><decl><type><name>int16</name></type> <name>result</name></decl>;</decl_stmt>
				<switch>switch <condition>(<expr><name>ntype</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>INT2OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int16</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<comment type="block">/*
							 * return type of plus of two int16 is int32,
							 * we should cast to int16 explicitly
							 */</comment>
							<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int16</name><operator>)</operator> <operator>(</operator><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
							<comment type="block">/* overflow checking*/</comment>
							<expr_stmt><expr><call><name>CHECKINTADD</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<default>default:</default>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"matrix_add: can not downconvert state"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></switch>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>INT4OID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int32</name> <modifier>*</modifier></type><name>data_m</name> <init>= <expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<comment type="block">/*	plus result, need to check overflow*/</comment>
				<decl_stmt><decl><type><name>int32</name></type> <name>result</name></decl>;</decl_stmt>
				<switch>switch <condition>(<expr><name>ntype</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>INT2OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int16</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<comment type="block">/* overflow checking */</comment>
							<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>CHECKINTADD</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT4OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int32</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<comment type="block">/* overflow checking */</comment>
							<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>CHECKINTADD</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<default>default:</default>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"matrix_add: can not downconvert state"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></switch>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>INT8OID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>data_m</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<comment type="block">/*	plus result, need to check overflow*/</comment>
				<decl_stmt><decl><type><name>int64</name></type> <name>result</name></decl>;</decl_stmt>
				<switch>switch <condition>(<expr><name>ntype</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>INT2OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int16</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<comment type="block">/* overflow checking */</comment>
							<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>CHECKINTADD</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT4OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int32</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<comment type="block">/* overflow checking */</comment>
							<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>CHECKINTADD</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT8OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<comment type="block">/* overflow checking */</comment>
							<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>CHECKINTADD</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<default>default:</default>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"matrix_add: can not downconvert state"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></switch>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>FLOAT4OID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data_m</name> <init>= <expr><operator>(</operator><name>float4</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>float4</name></type> <name>add_r</name></decl>;</decl_stmt>
				<switch>switch <condition>(<expr><name>ntype</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>INT2OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int16</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<comment type="block">/* explicit upcasting */</comment>
							<expr_stmt><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>float4</name><operator>)</operator><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT4OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int32</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<comment type="block">/* explicit upcasting */</comment>
							<expr_stmt><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>float4</name><operator>)</operator><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT8OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<comment type="block">/* explicit upcasting */</comment>
							<expr_stmt><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>float4</name><operator>)</operator><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>FLOAT4OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>float4</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<comment type="block">/* overflow checking */</comment>
							<expr_stmt><expr><name>add_r</name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>CHECKFLOATVAL</name><argument_list>(<argument><expr><name>add_r</name></expr></argument>, <argument><expr><call><name>isinf</name><argument_list>(<argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>add_r</name></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<default>default:</default>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"matrix_add: can not downconvert state"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></switch>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>FLOAT8OID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>float8</name> <modifier>*</modifier></type><name>data_m</name> <init>= <expr><operator>(</operator><name>float8</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>float8</name></type> <name>add_r</name></decl>;</decl_stmt>
				<switch>switch <condition>(<expr><name>ntype</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>INT2OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int16</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT4OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int32</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT8OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<comment type="block">/* explicit upcasting */</comment>
							<expr_stmt><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>float8</name><operator>)</operator><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>FLOAT4OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>float4</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>FLOAT8OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>float8</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>float8</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<comment type="block">/* overflow checking */</comment>
							<expr_stmt><expr><name>add_r</name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>CHECKFLOATVAL</name><argument_list>(<argument><expr><name>add_r</name></expr></argument>, <argument><expr><call><name>isinf</name><argument_list>(<argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>add_r</name></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<default>default:</default>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"matrix_add: can not downconvert state"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></switch>
				<break>break;</break>
			</block_content>}</block>
			<default>default:</default>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
		<expr_stmt><expr><call><name>PG_RETURN_ARRAYTYPE_P</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type>        <name>rtype</name>  <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>        <name>elsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>        <name>size</name></decl>;</decl_stmt>

		<comment type="block">/* Result type for non-transition function is the higher of the two input types */</comment>
		<if_stmt><if>if <condition>(<expr><name>ntype</name> <operator>==</operator> <name>FLOAT8OID</name> <operator>||</operator> <name>mtype</name> <operator>==</operator> <name>FLOAT8OID</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>rtype</name>  <operator>=</operator> <name>FLOAT8OID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float8</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>ntype</name> <operator>==</operator> <name>FLOAT4OID</name> <operator>||</operator> <name>mtype</name> <operator>==</operator> <name>FLOAT4OID</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>rtype</name>  <operator>=</operator> <name>FLOAT4OID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float4</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>ntype</name> <operator>==</operator> <name>INT8OID</name> <operator>||</operator> <name>mtype</name> <operator>==</operator> <name>INT8OID</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>rtype</name>  <operator>=</operator> <name>INT8OID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>ntype</name> <operator>==</operator> <name>INT4OID</name> <operator>||</operator> <name>mtype</name> <operator>==</operator> <name>INT4OID</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>rtype</name>  <operator>=</operator> <name>INT4OID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>ntype</name> <operator>==</operator> <name>INT2OID</name> <operator>||</operator> <name>mtype</name> <operator>==</operator> <name>INT2OID</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>rtype</name>  <operator>=</operator> <name>INT2OID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>!=</operator> <name>InvalidOid</name> <operator>&amp;&amp;</operator> <name>elsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ARR_OVERHEAD_NONULLS</name><argument_list>(<argument><expr><name>ndim</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name> <operator>*</operator> <name>elsize</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>ArrayType</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>ndim</name></name> <operator>=</operator> <name>ndim</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>dataoffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>          <comment type="block">/* We dissallowed arrays with NULLS */</comment>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>elemtype</name></name> <operator>=</operator> <name>rtype</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ndim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ARR_LBOUND</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
		<switch>switch <condition>(<expr><name>mtype</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>INT2OID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>data_m</name> <init>= <expr><operator>(</operator><name>int16</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<switch>switch <condition>(<expr><name>ntype</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>INT2OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int16</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>int16</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>INT2OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16</name><operator>)</operator> <operator>(</operator><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
							<comment type="block">/* overflow checking */</comment>
							<expr_stmt><expr><call><name>CHECKINTADD</name><argument_list>(<argument><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT4OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int32</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int32</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>INT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<comment type="block">/* overflow checking */</comment>
							<expr_stmt><expr><call><name>CHECKINTADD</name><argument_list>(<argument><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT8OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>INT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<comment type="block">/* overflow checking */</comment>
							<expr_stmt><expr><call><name>CHECKINTADD</name><argument_list>(<argument><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>FLOAT4OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>float4</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>float4</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>FLOAT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float4</name><operator>)</operator><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>FLOAT8OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>float8</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>float8</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>float8</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>float8</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>FLOAT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<default>default:</default>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></switch>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>INT4OID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int32</name> <modifier>*</modifier></type><name>data_m</name> <init>= <expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<switch>switch <condition>(<expr><name>ntype</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>INT2OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int16</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int32</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>INT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<comment type="block">/* overflow checking */</comment>
							<expr_stmt><expr><call><name>CHECKINTADD</name><argument_list>(<argument><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT4OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int32</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int32</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>INT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<comment type="block">/* overflow checking */</comment>
							<expr_stmt><expr><call><name>CHECKINTADD</name><argument_list>(<argument><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT8OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>INT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<comment type="block">/* overflow checking */</comment>
							<expr_stmt><expr><call><name>CHECKINTADD</name><argument_list>(<argument><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>FLOAT4OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>float4</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>float4</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>FLOAT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float4</name><operator>)</operator><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>FLOAT8OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>float8</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>float8</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>float8</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>float8</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>FLOAT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<default>default:</default>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></switch>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>INT8OID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>data_m</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<switch>switch <condition>(<expr><name>ntype</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>INT2OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int16</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>INT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<comment type="block">/* overflow checking */</comment>
							<expr_stmt><expr><call><name>CHECKINTADD</name><argument_list>(<argument><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT4OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int32</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>INT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<comment type="block">/* overflow checking */</comment>
							<expr_stmt><expr><call><name>CHECKINTADD</name><argument_list>(<argument><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT8OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>INT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<comment type="block">/* overflow checking */</comment>
							<expr_stmt><expr><call><name>CHECKINTADD</name><argument_list>(<argument><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>FLOAT4OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>float4</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>float4</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>FLOAT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float4</name><operator>)</operator><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>FLOAT8OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>float8</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>float8</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>float8</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>float8</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>FLOAT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float4</name><operator>)</operator><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<default>default:</default>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></switch>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>FLOAT4OID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data_m</name> <init>= <expr><operator>(</operator><name>float4</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<switch>switch <condition>(<expr><name>ntype</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>INT2OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int16</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>float4</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>FLOAT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>float4</name><operator>)</operator><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT4OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int32</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>float4</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>FLOAT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>float4</name><operator>)</operator><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT8OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>float4</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>FLOAT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>float4</name><operator>)</operator><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>FLOAT4OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>float4</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>float4</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>FLOAT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<comment type="block">/* flow checking */</comment>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>CHECKFLOATVAL</name><argument_list>(<argument><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>isinf</name><argument_list>(<argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>FLOAT8OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>float8</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>float8</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>float8</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>float8</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>FLOAT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<comment type="block">/* flow checking */</comment>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>CHECKFLOATVAL</name><argument_list>(<argument><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>isinf</name><argument_list>(<argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<default>default:</default>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></switch>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>FLOAT8OID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>float8</name> <modifier>*</modifier></type><name>data_m</name> <init>= <expr><operator>(</operator><name>float8</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>float8</name> <modifier>*</modifier></type><name>data_r</name> <init>= <expr><operator>(</operator><name>float8</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rtype</name> <operator>==</operator> <name>FLOAT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<switch>switch <condition>(<expr><name>ntype</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>INT2OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int16</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT4OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int32</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>INT8OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>float4</name><operator>)</operator><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>FLOAT4OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>float4</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>float4</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<break>break;</break>
					</block_content>}</block>
					<case>case <expr><name>FLOAT8OID</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>float8</name> <modifier>*</modifier></type><name>data_n</name> <init>= <expr><operator>(</operator><name>float8</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
							<comment type="block">/* flow checking */</comment>
							<expr_stmt><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>CHECKFLOATVAL</name><argument_list>(<argument><expr><name><name>data_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>isinf</name><argument_list>(<argument><expr><name><name>data_m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name><name>data_n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></for>
						<break>break;</break>
					</block_content>}</block>
					<default>default:</default>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></switch>
				<break>break;</break>
			</block_content>}</block>
			<default>default:</default>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
		<expr_stmt><expr><call><name>PG_RETURN_ARRAYTYPE_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt> 
</block_content>}</block></function>
</unit>
