<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/adt/tsgistidx.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * tsgistidx.c
 *	  GiST support functions for tsvector_ops
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/adt/tsgistidx.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/gist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tuptoaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/pg_bitutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/pg_crc.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGLENINT</name></cpp:macro>  <cpp:value>31</cpp:value></cpp:define>			<comment type="block">/* &gt;121 =&gt; key will toast, so it will not work
								 * !!! */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGLEN</name></cpp:macro>	<cpp:value>( sizeof(int32) * SIGLENINT )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGLENBIT</name></cpp:macro> <cpp:value>(SIGLEN * BITS_PER_BYTE)</cpp:value></cpp:define>

<typedef>typedef <type><name>char</name></type> <name><name>BITVEC</name><index>[<expr><name>SIGLEN</name></expr>]</index></name>;</typedef>
<typedef>typedef <type><name>char</name> <modifier>*</modifier></type><name>BITVECP</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOPBYTE</name></cpp:macro> \
			<cpp:value>for(i=0;i&lt;SIGLEN;i++)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETBYTE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( *( (BITVECP)(x) + (int)( (i) / BITS_PER_BYTE ) ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETBITBYTE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ((char)(x)) &gt;&gt; (i) &amp; 0x01 )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLRBIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>GETBYTE(x,i) &amp;= ~( 0x01 &lt;&lt; ( (i) % BITS_PER_BYTE ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETBIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>GETBYTE(x,i) |=  ( 0x01 &lt;&lt; ( (i) % BITS_PER_BYTE ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETBIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (GETBYTE(x,i) &gt;&gt; ( (i) % BITS_PER_BYTE )) &amp; 0x01 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASHVAL</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned int)(val)) % SIGLENBIT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH</name><parameter_list>(<parameter><type><name>sign</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SETBIT((sign), HASHVAL(val))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETENTRY</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>,<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((SignTSVector *) DatumGetPointer((vec)-&gt;vector[(pos)].key))</cpp:value></cpp:define>

<comment type="block">/*
 * type of GiST index key
 */</comment>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int32</name></type>		<name>vl_len_</name></decl>;</decl_stmt>		<comment type="block">/* varlena header (do not touch directly!) */</comment>
	<decl_stmt><decl><type><name>int32</name></type>		<name>flag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>data</name><index>[<expr><name>FLEXIBLE_ARRAY_MEMBER</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SignTSVector</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRKEY</name></cpp:macro>		<cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNKEY</name></cpp:macro>		<cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLISTRUE</name></cpp:macro>	<cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISARRKEY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ((SignTSVector*)(x))-&gt;flag &amp; ARRKEY )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSIGNKEY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>( ((SignTSVector*)(x))-&gt;flag &amp; SIGNKEY )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISALLTRUE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>( ((SignTSVector*)(x))-&gt;flag &amp; ALLISTRUE )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTHDRSIZE</name></cpp:macro>	<cpp:value>( VARHDRSZ + sizeof(int32) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALCGTSIZE</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( GTHDRSIZE + ( ( (flag) &amp; ARRKEY ) ? ((len)*sizeof(int32)) : (((flag) &amp; ALLISTRUE) ? 0 : SIGLEN) ) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETSIGN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>( (BITVECP)( (char*)(x)+GTHDRSIZE ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETARR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>( (int32*)( (char*)(x)+GTHDRSIZE ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRNELEM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ( VARSIZE(x) - GTHDRSIZE )/sizeof(int32) )</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>sizebitvec</name><parameter_list>(<parameter><decl><type><name>BITVECP</name></type> <name>sign</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>Datum</name></type>
<name>gtsvectorin</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"gtsvector_in not implemented"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SINGOUTSTR</name></cpp:macro>	<cpp:value>"%d true bits, %d false bits"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARROUTSTR</name></cpp:macro>	<cpp:value>"%d unique words"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRALEN</name></cpp:macro>	<cpp:value>( 2*13 )</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>outbuf_maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>Datum</name></type>
<name>gtsvectorout</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>outbuf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>outbuf_maxlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>outbuf_maxlen</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>EXTRALEN</name> <operator>+</operator> <call><name>Max</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>SINGOUTSTR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ARROUTSTR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>outbuf</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>outbuf_maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ISARRKEY</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>ARROUTSTR</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ARRNELEM</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>cnttrue</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>SIGLENBIT</name></expr> </then><else>: <expr><call><name>sizebitvec</name><argument_list>(<argument><expr><call><name>GETSIGN</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>SINGOUTSTR</name></expr></argument>, <argument><expr><name>cnttrue</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>SIGLENBIT</name> <operator>-</operator> <name>cnttrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compareint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>a</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int32</name> <operator>*</operator><operator>)</operator> <name>va</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>b</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int32</name> <operator>*</operator><operator>)</operator> <name>vb</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name> <operator>&gt;</operator> <name>b</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Removes duplicates from an array of int32. 'l' is
 * size of the input array. Returns the new size of the array.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>uniqueint</name><parameter_list>(<parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>ptr</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>l</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>res</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compareint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>ptr</name> <operator>-</operator> <name>a</name> <operator>&lt;</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <operator>*</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>++</operator><name>res</name><operator>)</operator> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></while>
	<return>return <expr><name>res</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>makesign</name><parameter_list>(<parameter><decl><type><name>BITVECP</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>k</name></decl>,
				<decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>ARRNELEM</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>GETARR</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sign</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BITVEC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>HASH</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>gtsvector_compress</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>retval</name> <init>= <expr><name>entry</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>leafkey</name></name></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* tsvector */</comment>
		<decl_stmt><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TSVector</name></type>	<name>val</name> <init>= <expr><call><name>DatumGetTSVector</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>arr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>WordEntry</name>  <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>words</name> <init>= <expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>CALCGTSIZE</name><argument_list>(<argument><expr><name>ARRKEY</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>ARRKEY</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>arr</name> <operator>=</operator> <call><name>GETARR</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>pg_crc32</name></type>	<name>c</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>INIT_LEGACY_CRC32</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>COMP_LEGACY_CRC32</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>words</name> <operator>+</operator> <name><name>ptr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FIN_LEGACY_CRC32</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><operator>*</operator><name>arr</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>arr</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>uniqueint</name><argument_list>(<argument><expr><call><name>GETARR</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name><name>val</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * there is a collision of hash-function; len is always less than
			 * val-&gt;size
			 */</comment>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>CALCGTSIZE</name><argument_list>(<argument><expr><name>ARRKEY</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>res</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* make signature, if array is too long */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TOAST_INDEX_TARGET</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>ressign</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>CALCGTSIZE</name><argument_list>(<argument><expr><name>SIGNKEY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ressign</name> <operator>=</operator> <operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>ressign</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ressign</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>SIGNKEY</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>makesign</name><argument_list>(<argument><expr><call><name>GETSIGN</name><argument_list>(<argument><expr><name>ressign</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>ressign</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GISTENTRY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gistentryinit</name><argument_list>(<argument><expr><operator>*</operator><name>retval</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>page</name></name></expr></argument>,
					  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>ISSIGNKEY</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>!</operator><call><name>ISALLTRUE</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>i</name></decl>,
					<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BITVECP</name></type>		<name>sign</name> <init>= <expr><call><name>GETSIGN</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<macro><name>LOOPBYTE</name></macro>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sign</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block>

		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>CALCGTSIZE</name><argument_list>(<argument><expr><name>SIGNKEY</name> <operator>|</operator> <name>ALLISTRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>SIGNKEY</name> <operator>|</operator> <name>ALLISTRUE</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GISTENTRY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gistentryinit</name><argument_list>(<argument><expr><operator>*</operator><name>retval</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>page</name></name></expr></argument>,
					  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>gtsvector_decompress</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We need to detoast the stored value, because the other gtsvector
	 * support functions don't cope with toasted values.
	 */</comment>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>retval</name> <init>= <expr><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GISTENTRY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>gistentryinit</name><argument_list>(<argument><expr><operator>*</operator><name>retval</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>page</name></name></expr></argument>,
					  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>arrb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>arre</name></decl>;</decl_stmt>
}</block></struct></type> <name>CHKVAL</name>;</typedef>

<comment type="block">/*
 * is there value 'val' in array or not ?
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>checkcondition_arr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checkval</name></decl></parameter>, <parameter><decl><type><name>QueryOperand</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>ExecPhraseData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>StopLow</name> <init>= <expr><operator>(</operator><operator>(</operator><name>CHKVAL</name> <operator>*</operator><operator>)</operator> <name>checkval</name><operator>)</operator><operator>-&gt;</operator><name>arrb</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>StopHigh</name> <init>= <expr><operator>(</operator><operator>(</operator><name>CHKVAL</name> <operator>*</operator><operator>)</operator> <name>checkval</name><operator>)</operator><operator>-&gt;</operator><name>arre</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>StopMiddle</name></decl>;</decl_stmt>

	<comment type="block">/* Loop invariant: StopLow &lt;= val &lt; StopHigh */</comment>

	<comment type="block">/*
	 * we are not able to find a prefix by hash value
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>prefix</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>StopLow</name> <operator>&lt;</operator> <name>StopHigh</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>StopMiddle</name> <operator>=</operator> <name>StopLow</name> <operator>+</operator> <operator>(</operator><name>StopHigh</name> <operator>-</operator> <name>StopLow</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>StopMiddle</name> <operator>==</operator> <name><name>val</name><operator>-&gt;</operator><name>valcrc</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>*</operator><name>StopMiddle</name> <operator>&lt;</operator> <name><name>val</name><operator>-&gt;</operator><name>valcrc</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>StopLow</name> <operator>=</operator> <name>StopMiddle</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>StopHigh</name> <operator>=</operator> <name>StopMiddle</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>checkcondition_bit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checkval</name></decl></parameter>, <parameter><decl><type><name>QueryOperand</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>ExecPhraseData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * we are not able to find a prefix in signature tree
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>prefix</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>GETBIT</name><argument_list>(<argument><expr><name>checkval</name></expr></argument>, <argument><expr><call><name>HASHVAL</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>valcrc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>gtsvector_consistent</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name> <init>= <expr><call><name>PG_GETARG_TSQUERY</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* StrategyNumber strategy = (StrategyNumber) PG_GETARG_UINT16(2); */</comment>
	<comment type="block">/* Oid		subtype = PG_GETARG_OID(3); */</comment>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>recheck</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* All cases served by this function are inexact */</comment>
	<expr_stmt><expr><operator>*</operator><name>recheck</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>query</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ISSIGNKEY</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* since signature is lossy, cannot specify CALC_NOT here */</comment>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>TS_execute</name><argument_list>(<argument><expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>,
								  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>GETSIGN</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
								  <argument><expr><name>TS_EXEC_PHRASE_NO_POS</name></expr></argument>,
								  <argument><expr><name>checkcondition_bit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>							<comment type="block">/* only leaf pages */</comment>
		<decl_stmt><decl><type><name>CHKVAL</name></type>		<name>chkval</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>chkval</name><operator>.</operator><name>arrb</name></name> <operator>=</operator> <call><name>GETARR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>chkval</name><operator>.</operator><name>arre</name></name> <operator>=</operator> <name><name>chkval</name><operator>.</operator><name>arrb</name></name> <operator>+</operator> <call><name>ARRNELEM</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>TS_execute</name><argument_list>(<argument><expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>,
								  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>chkval</name></expr></argument>,
								  <argument><expr><name>TS_EXEC_PHRASE_NO_POS</name> <operator>|</operator> <name>TS_EXEC_CALC_NOT</name></expr></argument>,
								  <argument><expr><name>checkcondition_arr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32</name></type>
<name>unionkey</name><parameter_list>(<parameter><decl><type><name>BITVECP</name></type> <name>sbase</name></decl></parameter>, <parameter><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>add</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ISSIGNKEY</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BITVECP</name></type>		<name>sadd</name> <init>= <expr><call><name>GETSIGN</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>LOOPBYTE</name>
			<name><name>sbase</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name><name>sadd</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>GETARR</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRNELEM</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>HASH</name><argument_list>(<argument><expr><name>sbase</name></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>gtsvector_union</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GistEntryVector</name> <modifier>*</modifier></type><name>entryvec</name> <init>= <expr><operator>(</operator><name>GistEntryVector</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>size</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BITVEC</name></type>		<name>base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>i</name></decl>,
				<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BITVEC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entryvec</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>unionkey</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><call><name>GETENTRY</name><argument_list>(<argument><expr><name>entryvec</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>ALLISTRUE</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>SIGNKEY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>CALCGTSIZE</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>GETSIGN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>base</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BITVEC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>gtsvector_same</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ISSIGNKEY</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* then b also ISSIGNKEY */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int32</name></type>		<name>i</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>BITVECP</name></type>		<name>sa</name> <init>= <expr><call><name>GETSIGN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>,
						<decl><type ref="prev"/><name>sb</name> <init>= <expr><call><name>GETSIGN</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<macro><name>LOOPBYTE</name></macro>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>sa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>sb</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>							<comment type="block">/* a and b ISARRKEY */</comment>
		<decl_stmt><decl><type><name>int32</name></type>		<name>lena</name> <init>= <expr><call><name>ARRNELEM</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>,
					<decl><type ref="prev"/><name>lenb</name> <init>= <expr><call><name>ARRNELEM</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>lena</name> <operator>!=</operator> <name>lenb</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>ptra</name> <init>= <expr><call><name>GETARR</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>,
					   <decl><type ref="prev"><modifier>*</modifier></type><name>ptrb</name> <init>= <expr><call><name>GETARR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int32</name></type>		<name>i</name></decl>;</decl_stmt>

			<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lena</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<if_stmt><if>if <condition>(<expr><name><name>ptra</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>ptrb</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt></block_content></block></for>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32</name></type>
<name>sizebitvec</name><parameter_list>(<parameter><decl><type><name>BITVECP</name></type> <name>sign</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>pg_popcount</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>SIGLEN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hemdistsign</name><parameter_list>(<parameter><decl><type><name>BITVECP</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>BITVECP</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>diff</name></decl>,
				<decl><type ref="prev"/><name>dist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<macro><name>LOOPBYTE</name></macro>
	<block>{<block_content>
		<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		<comment type="block">/* Using the popcount functions here isn't likely to win */</comment>
		<expr_stmt><expr><name>dist</name> <operator>+=</operator> <name><name>pg_number_of_ones</name><index>[<expr><name>diff</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block>
	<return>return <expr><name>dist</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hemdist</name><parameter_list>(<parameter><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><name>SIGLENBIT</name> <operator>-</operator> <call><name>sizebitvec</name><argument_list>(<argument><expr><call><name>GETSIGN</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SIGLENBIT</name> <operator>-</operator> <call><name>sizebitvec</name><argument_list>(<argument><expr><call><name>GETSIGN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>hemdistsign</name><argument_list>(<argument><expr><call><name>GETSIGN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GETSIGN</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>gtsvector_penalty</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>origentry</name> <init>= <expr><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* always ISSIGNKEY */</comment>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>newentry</name> <init>= <expr><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name>	   <modifier>*</modifier></type><name>penalty</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>origval</name> <init>= <expr><operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>origentry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>newval</name> <init>= <expr><operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>newentry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BITVECP</name></type>		<name>orig</name> <init>= <expr><call><name>GETSIGN</name><argument_list>(<argument><expr><name>origval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>penalty</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ISARRKEY</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BITVEC</name></type>		<name>sign</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>makesign</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>origval</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>penalty</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>SIGLENBIT</name> <operator>-</operator> <call><name>sizebitvec</name><argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>SIGLENBIT</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>penalty</name> <operator>=</operator> <call><name>hemdistsign</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>penalty</name> <operator>=</operator> <call><name>hemdist</name><argument_list>(<argument><expr><name>origval</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>penalty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>bool</name></type>		<name>allistrue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BITVEC</name></type>		<name>sign</name></decl>;</decl_stmt>
}</block></struct></type> <name>CACHESIGN</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fillcache</name><parameter_list>(<parameter><decl><type><name>CACHESIGN</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>allistrue</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ISARRKEY</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>makesign</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>sign</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>allistrue</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>sign</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>GETSIGN</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BITVEC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WISH_F</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(double)( -(double)(((a)-(b))*((a)-(b))*((a)-(b)))*(c) )</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>cost</name></decl>;</decl_stmt>
}</block></struct></type> <name>SPLITCOST</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>comparecost</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>SPLITCOST</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SPLITCOST</name> <operator>*</operator><operator>)</operator> <name>va</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>SPLITCOST</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SPLITCOST</name> <operator>*</operator><operator>)</operator> <name>vb</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>cost</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>cost</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>cost</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>cost</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>hemdistcache</name><parameter_list>(<parameter><decl><type><name>CACHESIGN</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>CACHESIGN</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>allistrue</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>allistrue</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><name>SIGLENBIT</name> <operator>-</operator> <call><name>sizebitvec</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>sign</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>allistrue</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SIGLENBIT</name> <operator>-</operator> <call><name>sizebitvec</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sign</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>hemdistsign</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>sign</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>sign</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>gtsvector_picksplit</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GistEntryVector</name> <modifier>*</modifier></type><name>entryvec</name> <init>= <expr><operator>(</operator><name>GistEntryVector</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GIST_SPLITVEC</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><name>GIST_SPLITVEC</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>k</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SignTSVector</name> <modifier>*</modifier></type><name>datum_l</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>datum_r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BITVECP</name></type>		<name>union_l</name></decl>,
				<decl><type ref="prev"/><name>union_r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>size_alpha</name></decl>,
				<decl><type ref="prev"/><name>size_beta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>size_waste</name></decl>,
				<decl><type ref="prev"/><name>waste</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>nbytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>seed_1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>seed_2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OffsetNumber</name> <modifier>*</modifier></type><name>left</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>right</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>maxoff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BITVECP</name></type>		<name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHESIGN</name>  <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SPLITCOST</name>  <modifier>*</modifier></type><name>costvector</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>maxoff</name> <operator>=</operator> <name><name>entryvec</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <operator>(</operator><name>maxoff</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OffsetNumber</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_left</name></name> <operator>=</operator> <operator>(</operator><name>OffsetNumber</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_right</name></name> <operator>=</operator> <operator>(</operator><name>OffsetNumber</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>(</operator><name>CACHESIGN</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CACHESIGN</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>maxoff</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fillcache</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><index>[<expr><name>FirstOffsetNumber</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>GETENTRY</name><argument_list>(<argument><expr><name>entryvec</name></expr></argument>, <argument><expr><name>FirstOffsetNumber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>FirstOffsetNumber</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>maxoff</name></expr>;</condition> <incr><expr><name>k</name> <operator>=</operator> <call><name>OffsetNumberNext</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <call><name>OffsetNumberNext</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>maxoff</name></expr>;</condition> <incr><expr><name>j</name> <operator>=</operator> <call><name>OffsetNumberNext</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>FirstOffsetNumber</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fillcache</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>GETENTRY</name><argument_list>(<argument><expr><name>entryvec</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>size_waste</name> <operator>=</operator> <call><name>hemdistcache</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cache</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>size_waste</name> <operator>&gt;</operator> <name>waste</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>waste</name> <operator>=</operator> <name>size_waste</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>seed_1</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>seed_2</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>

	<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>spl_left</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nleft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>right</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>spl_right</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nright</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>seed_1</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>seed_2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>seed_1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>seed_2</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* form initial .. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cache</name><index>[<expr><name>seed_1</name></expr>]</index></name><operator>.</operator><name>allistrue</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>datum_l</name> <operator>=</operator> <operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><call><name>CALCGTSIZE</name><argument_list>(<argument><expr><name>SIGNKEY</name> <operator>|</operator> <name>ALLISTRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>datum_l</name></expr></argument>, <argument><expr><call><name>CALCGTSIZE</name><argument_list>(<argument><expr><name>SIGNKEY</name> <operator>|</operator> <name>ALLISTRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>datum_l</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>SIGNKEY</name> <operator>|</operator> <name>ALLISTRUE</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>datum_l</name> <operator>=</operator> <operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><call><name>CALCGTSIZE</name><argument_list>(<argument><expr><name>SIGNKEY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>datum_l</name></expr></argument>, <argument><expr><call><name>CALCGTSIZE</name><argument_list>(<argument><expr><name>SIGNKEY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>datum_l</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>SIGNKEY</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>GETSIGN</name><argument_list>(<argument><expr><name>datum_l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>cache</name><index>[<expr><name>seed_1</name></expr>]</index></name><operator>.</operator><name>sign</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BITVEC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cache</name><index>[<expr><name>seed_2</name></expr>]</index></name><operator>.</operator><name>allistrue</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>datum_r</name> <operator>=</operator> <operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><call><name>CALCGTSIZE</name><argument_list>(<argument><expr><name>SIGNKEY</name> <operator>|</operator> <name>ALLISTRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>datum_r</name></expr></argument>, <argument><expr><call><name>CALCGTSIZE</name><argument_list>(<argument><expr><name>SIGNKEY</name> <operator>|</operator> <name>ALLISTRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>datum_r</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>SIGNKEY</name> <operator>|</operator> <name>ALLISTRUE</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>datum_r</name> <operator>=</operator> <operator>(</operator><name>SignTSVector</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><call><name>CALCGTSIZE</name><argument_list>(<argument><expr><name>SIGNKEY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>datum_r</name></expr></argument>, <argument><expr><call><name>CALCGTSIZE</name><argument_list>(<argument><expr><name>SIGNKEY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>datum_r</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>SIGNKEY</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>GETSIGN</name><argument_list>(<argument><expr><name>datum_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>cache</name><index>[<expr><name>seed_2</name></expr>]</index></name><operator>.</operator><name>sign</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BITVEC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>union_l</name> <operator>=</operator> <call><name>GETSIGN</name><argument_list>(<argument><expr><name>datum_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>union_r</name> <operator>=</operator> <call><name>GETSIGN</name><argument_list>(<argument><expr><name>datum_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>maxoff</name> <operator>=</operator> <call><name>OffsetNumberNext</name><argument_list>(<argument><expr><name>maxoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fillcache</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><index>[<expr><name>maxoff</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>GETENTRY</name><argument_list>(<argument><expr><name>entryvec</name></expr></argument>, <argument><expr><name>maxoff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* sort before ... */</comment>
	<expr_stmt><expr><name>costvector</name> <operator>=</operator> <operator>(</operator><name>SPLITCOST</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPLITCOST</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>maxoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>FirstOffsetNumber</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>maxoff</name></expr>;</condition> <incr><expr><name>j</name> <operator>=</operator> <call><name>OffsetNumberNext</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>costvector</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size_alpha</name> <operator>=</operator> <call><name>hemdistcache</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cache</name><index>[<expr><name>seed_1</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>size_beta</name> <operator>=</operator> <call><name>hemdistcache</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cache</name><index>[<expr><name>seed_2</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>costvector</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <call><name>Abs</name><argument_list>(<argument><expr><name>size_alpha</name> <operator>-</operator> <name>size_beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>costvector</name></expr></argument>, <argument><expr><name>maxoff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPLITCOST</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>comparecost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>maxoff</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>costvector</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>seed_1</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>left</name><operator>++</operator> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nleft</name></name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>j</name> <operator>==</operator> <name>seed_2</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>right</name><operator>++</operator> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nright</name></name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>datum_l</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>allistrue</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>datum_l</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>allistrue</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>size_alpha</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>size_alpha</name> <operator>=</operator> <name>SIGLENBIT</name> <operator>-</operator> <call><name>sizebitvec</name><argument_list>(
													<argument><expr><ternary><condition><expr><operator>(</operator><name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>allistrue</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GETSIGN</name><argument_list>(<argument><expr><name>datum_l</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GETSIGN</name><argument_list>(<argument><expr><name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>
					)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>size_alpha</name> <operator>=</operator> <call><name>hemdistsign</name><argument_list>(<argument><expr><name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name></expr></argument>, <argument><expr><call><name>GETSIGN</name><argument_list>(<argument><expr><name>datum_l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>datum_r</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>allistrue</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>datum_r</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>allistrue</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>size_beta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>size_beta</name> <operator>=</operator> <name>SIGLENBIT</name> <operator>-</operator> <call><name>sizebitvec</name><argument_list>(
												   <argument><expr><ternary><condition><expr><operator>(</operator><name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>allistrue</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GETSIGN</name><argument_list>(<argument><expr><name>datum_r</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GETSIGN</name><argument_list>(<argument><expr><name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>
					)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>size_beta</name> <operator>=</operator> <call><name>hemdistsign</name><argument_list>(<argument><expr><name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name></expr></argument>, <argument><expr><call><name>GETSIGN</name><argument_list>(<argument><expr><name>datum_r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>size_alpha</name> <operator>&lt;</operator> <name>size_beta</name> <operator>+</operator> <call><name>WISH_F</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nleft</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nright</name></name></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>datum_l</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>allistrue</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>datum_l</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>GETSIGN</name><argument_list>(<argument><expr><name>datum_l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BITVEC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>LOOPBYTE</name>
					<name><name>union_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>left</name><operator>++</operator> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nleft</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>datum_r</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>allistrue</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISALLTRUE</name><argument_list>(<argument><expr><name>datum_r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>GETSIGN</name><argument_list>(<argument><expr><name>datum_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BITVEC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>cache</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>LOOPBYTE</name>
					<name><name>union_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>right</name><operator>++</operator> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nright</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>right</name> <operator>=</operator> <operator>*</operator><name>left</name> <operator>=</operator> <name>FirstOffsetNumber</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_ldatum</name></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>datum_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_rdatum</name></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>datum_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Formerly, gtsvector_consistent was declared in pg_proc.h with arguments
 * that did not match the documented conventions for GiST support functions.
 * We fixed that, but we still need a pg_proc entry with the old signature
 * to support reloading pre-9.6 contrib/tsearch2 opclass declarations.
 * This compatibility function should go away eventually.
 */</comment>
<function><type><name>Datum</name></type>
<name>gtsvector_consistent_oldsig</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>gtsvector_consistent</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
