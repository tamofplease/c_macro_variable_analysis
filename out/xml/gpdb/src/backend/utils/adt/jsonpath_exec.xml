<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/adt/jsonpath_exec.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * jsonpath_exec.c
 *	 Routines for SQL/JSON path execution.
 *
 * Jsonpath is executed in the global context stored in JsonPathExecContext,
 * which is passed to almost every function involved into execution.  Entry
 * point for jsonpath execution is executeJsonPath() function, which
 * initializes execution context including initial JsonPathItem and JsonbValue,
 * flags, stack for calculation of @ in filters.
 *
 * The result of jsonpath query execution is enum JsonPathExecResult and
 * if succeeded sequence of JsonbValue, written to JsonValueList *found, which
 * is passed through the jsonpath items.  When found == NULL, we're inside
 * exists-query and we're interested only in whether result is empty.  In this
 * case execution is stopped once first result item is found, and the only
 * execution result is JsonPathExecResult.  The values of JsonPathExecResult
 * are following:
 * - jperOk			-- result sequence is not empty
 * - jperNotFound	-- result sequence is empty
 * - jperError		-- error occurred during execution
 *
 * Jsonpath is executed recursively (see executeItem()) starting form the
 * first path item (which in turn might be, for instance, an arithmetic
 * expression evaluated separately).  On each step single JsonbValue obtained
 * from previous path item is processed.  The result of processing is a
 * sequence of JsonbValue (probably empty), which is passed to the next path
 * item one by one.  When there is no next path item, then JsonbValue is added
 * to the 'found' list.  When found == NULL, then execution functions just
 * return jperOk (see executeNextItem()).
 *
 * Many of jsonpath operations require automatic unwrapping of arrays in lax
 * mode.  So, if input value is array, then corresponding operation is
 * processed not on array itself, but on all of its members one by one.
 * executeItemOptUnwrapTarget() function have 'unwrap' argument, which indicates
 * whether unwrapping of array is needed.  When unwrap == true, each of array
 * members is passed to executeItemOptUnwrapTarget() again but with unwrap == false
 * in order to evade subsequent array unwrapping.
 *
 * All boolean expressions (predicates) are evaluated by executeBoolItem()
 * function, which returns tri-state JsonPathBool.  When error is occurred
 * during predicate execution, it returns jpbUnknown.  According to standard
 * predicates can be only inside filters.  But we support their usage as
 * jsonpath expression.  This helps us to implement @@ operator.  In this case
 * resulting JsonPathBool is transformed into jsonb bool or null.
 *
 * Arithmetic and boolean expression are evaluated recursively from expression
 * tree top down to the leaves.  Therefore, for binary arithmetic expressions
 * we calculate operands first.  Then we check that results are numeric
 * singleton lists, calculate the result and pass it to the next path item.
 *
 * Copyright (c) 2019, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	src/backend/utils/adt/jsonpath_exec.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_collation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex/regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/formatting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/float.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/jsonpath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/varlena.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Represents "base object" and it's "id" for .keyvalue() evaluation.
 */</comment>
<typedef>typedef <type><struct>struct <name>JsonBaseObjectInfo</name>
<block>{
	<decl_stmt><decl><type><name>JsonbContainer</name> <modifier>*</modifier></type><name>jbc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>id</name></decl>;</decl_stmt>
}</block></struct></type> <name>JsonBaseObjectInfo</name>;</typedef>

<comment type="block">/*
 * Context of jsonpath execution.
 */</comment>
<typedef>typedef <type><struct>struct <name>JsonPathExecContext</name>
<block>{
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>vars</name></decl>;</decl_stmt>			<comment type="block">/* variables to substitute into jsonpath */</comment>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>			<comment type="block">/* for $ evaluation */</comment>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>		<comment type="block">/* for @ evaluation */</comment>
	<decl_stmt><decl><type><name>JsonBaseObjectInfo</name></type> <name>baseObject</name></decl>;</decl_stmt>	<comment type="block">/* "base object" for .keyvalue()
									 * evaluation */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>lastGeneratedObjectId</name></decl>;</decl_stmt>	<comment type="block">/* "id" counter for .keyvalue()
										 * evaluation */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>innermostArraySize</name></decl>;</decl_stmt> <comment type="block">/* for LAST array index evaluation */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>laxMode</name></decl>;</decl_stmt>		<comment type="block">/* true for "lax" mode, false for "strict"
								 * mode */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ignoreStructuralErrors</name></decl>;</decl_stmt> <comment type="block">/* with "true" structural errors such
										 * as absence of required json item or
										 * unexpected json item type are
										 * ignored */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>throwErrors</name></decl>;</decl_stmt>	<comment type="block">/* with "false" all suppressible errors are
								 * suppressed */</comment>
}</block></struct></type> <name>JsonPathExecContext</name>;</typedef>

<comment type="block">/* Context for LIKE_REGEX execution. */</comment>
<typedef>typedef <type><struct>struct <name>JsonLikeRegexContext</name>
<block>{
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>regex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cflags</name></decl>;</decl_stmt>
}</block></struct></type> <name>JsonLikeRegexContext</name>;</typedef>

<comment type="block">/* Result of jsonpath predicate evaluation */</comment>
<typedef>typedef <type><enum>enum <name>JsonPathBool</name>
<block>{
	<decl><name>jpbFalse</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>jpbTrue</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
	<decl><name>jpbUnknown</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>JsonPathBool</name>;</typedef>

<comment type="block">/* Result of jsonpath expression evaluation */</comment>
<typedef>typedef <type><enum>enum <name>JsonPathExecResult</name>
<block>{
	<decl><name>jperOk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>jperNotFound</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
	<decl><name>jperError</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>JsonPathExecResult</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jperIsError</name><parameter_list>(<parameter><type><name>jper</name></type></parameter>)</parameter_list></cpp:macro>			<cpp:value>((jper) == jperError)</cpp:value></cpp:define>

<comment type="block">/*
 * List of jsonb values with shortcut for single-value list.
 */</comment>
<typedef>typedef <type><struct>struct <name>JsonValueList</name>
<block>{
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>singleton</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
}</block></struct></type> <name>JsonValueList</name>;</typedef>

<typedef>typedef <type><struct>struct <name>JsonValueListIterator</name>
<block>{
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>JsonValueListIterator</name>;</typedef>

<comment type="block">/* strict/lax flags is decomposed into four [un]wrap/error flags */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jspStrictAbsenseOfErrors</name><parameter_list>(<parameter><type><name>cxt</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(!(cxt)-&gt;laxMode)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jspAutoUnwrap</name><parameter_list>(<parameter><type><name>cxt</name></type></parameter>)</parameter_list></cpp:macro>				<cpp:value>((cxt)-&gt;laxMode)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jspAutoWrap</name><parameter_list>(<parameter><type><name>cxt</name></type></parameter>)</parameter_list></cpp:macro>				<cpp:value>((cxt)-&gt;laxMode)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jspIgnoreStructuralErrors</name><parameter_list>(<parameter><type><name>cxt</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((cxt)-&gt;ignoreStructuralErrors)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jspThrowErrors</name><parameter_list>(<parameter><type><name>cxt</name></type></parameter>)</parameter_list></cpp:macro>				<cpp:value>((cxt)-&gt;throwErrors)</cpp:value></cpp:define>

<comment type="block">/* Convenience macro: return or throw error depending on context */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_ERROR</name><parameter_list>(<parameter><type><name>throw_error</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	if (jspThrowErrors(cxt)) \
		throw_error; \
	else \
		return jperError; \
} while (0)</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>JsonPathBool</name></type> (<modifier>*</modifier><name>JsonPathPredicateCallback</name>) <parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>,
												   <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>larg</name></decl></parameter>,
												   <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>rarg</name></decl></parameter>,
												   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Numeric</name></type> (<modifier>*</modifier><name>BinaryArithmFunc</name>) <parameter_list>(<parameter><decl><type><name>Numeric</name></type> <name>num1</name></decl></parameter>, <parameter><decl><type><name>Numeric</name></type> <name>num2</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><specifier>static</specifier> <name>JsonPathExecResult</name></type> <name>executeJsonPath</name><parameter_list>(<parameter><decl><type><name>JsonPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>vars</name></decl></parameter>,
										  <parameter><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>throwErrors</name></decl></parameter>, <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathExecResult</name></type> <name>executeItem</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
									  <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathExecResult</name></type> <name>executeItemOptUnwrapTarget</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
													 <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>,
													 <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>unwrap</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathExecResult</name></type> <name>executeItemUnwrapTargetArray</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
													   <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>,
													   <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>unwrapElements</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathExecResult</name></type> <name>executeNextItem</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
										  <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>next</name></decl></parameter>,
										  <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>copy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathExecResult</name></type> <name>executeItemOptUnwrapResult</name><parameter_list>(
													 <parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>,
													 <parameter><decl><type><name>bool</name></type> <name>unwrap</name></decl></parameter>, <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathExecResult</name></type> <name>executeItemOptUnwrapResultNoThrow</name><parameter_list>(
															<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>,
															<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>unwrap</name></decl></parameter>, <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathBool</name></type> <name>executeBoolItem</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
									<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>canHaveNext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathBool</name></type> <name>executeNestedBoolItem</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
										  <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathExecResult</name></type> <name>executeAnyItem</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
										 <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbContainer</name> <modifier>*</modifier></type><name>jbc</name></decl></parameter>, <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>,
										 <parameter><decl><type><name>uint32</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>last</name></decl></parameter>,
										 <parameter><decl><type><name>bool</name></type> <name>ignoreStructuralErrors</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>unwrapNext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathBool</name></type> <name>executePredicate</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
									 <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>pred</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>larg</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>rarg</name></decl></parameter>,
									 <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>unwrapRightArg</name></decl></parameter>,
									 <parameter><decl><type><name>JsonPathPredicateCallback</name></type> <name>exec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathExecResult</name></type> <name>executeBinaryArithmExpr</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
												  <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>,
												  <parameter><decl><type><name>BinaryArithmFunc</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathExecResult</name></type> <name>executeUnaryArithmExpr</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
												 <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>PGFunction</name></type> <name>func</name></decl></parameter>,
												 <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathBool</name></type> <name>executeStartsWith</name><parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>,
									  <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>whole</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>initial</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathBool</name></type> <name>executeLikeRegex</name><parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
									 <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>rarg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathExecResult</name></type> <name>executeNumericItemMethod</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
												   <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>unwrap</name></decl></parameter>, <parameter><decl><type><name>PGFunction</name></type> <name>func</name></decl></parameter>,
												   <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathExecResult</name></type> <name>executeKeyValueMethod</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
												<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathExecResult</name></type> <name>appendBoolResult</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
										   <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>, <parameter><decl><type><name>JsonPathBool</name></type> <name>res</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getJsonPathItem</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
							<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getJsonPathVariable</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
								<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>variable</name></decl></parameter>, <parameter><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>vars</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>JsonbArraySize</name><parameter_list>(<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathBool</name></type> <name>executeComparison</name><parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>cmp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>lv</name></decl></parameter>,
									  <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>rv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathBool</name></type> <name>compareItems</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb1</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>compareNumeric</name><parameter_list>(<parameter><decl><type><name>Numeric</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Numeric</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type><name>copyJsonbValue</name><parameter_list>(<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonPathExecResult</name></type> <name>getArrayIndex</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
										<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonBaseObjectInfo</name></type> <name>setBaseObject</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
										<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jbv</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>JsonValueListAppend</name><parameter_list>(<parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>jvl</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jbv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>JsonValueListLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JsonValueList</name> <modifier>*</modifier></type><name>jvl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>JsonValueListIsEmpty</name><parameter_list>(<parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>jvl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type><name>JsonValueListHead</name><parameter_list>(<parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>jvl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>JsonValueListGetList</name><parameter_list>(<parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>jvl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>JsonValueListInitIterator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JsonValueList</name> <modifier>*</modifier></type><name>jvl</name></decl></parameter>,
									  <parameter><decl><type><name>JsonValueListIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type><name>JsonValueListNext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JsonValueList</name> <modifier>*</modifier></type><name>jvl</name></decl></parameter>,
									 <parameter><decl><type><name>JsonValueListIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>JsonbType</name><parameter_list>(<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type><name>JsonbInitBinary</name><parameter_list>(<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jbv</name></decl></parameter>, <parameter><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>JsonbType</name><parameter_list>(<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type><name>getScalar</name><parameter_list>(<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>scalar</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>jbvType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type><name>wrapItemsInArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JsonValueList</name> <modifier>*</modifier></type><name>items</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/****************** User interface to JsonPath executor ********************/</comment>

<comment type="block">/*
 * jsonb_path_exists
 *		Returns true if jsonpath returns at least one item for the specified
 *		jsonb value.  This function and jsonb_path_match() are used to
 *		implement @? and @@ operators, which in turn are intended to have an
 *		index support.  Thus, it's desirable to make it easier to achieve
 *		consistency between index scan results and sequential scan results.
 *		So, we throw as less errors as possible.  Regarding this function,
 *		such behavior also matches behavior of JSON_EXISTS() clause of
 *		SQL/JSON.  Regarding jsonb_path_match(), this function doesn't have
 *		an analogy in SQL/JSON, so we define its behavior on our own.
 */</comment>
<function><type><name>Datum</name></type>
<name>jsonb_path_exists</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>jb</name> <init>= <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPath</name>   <modifier>*</modifier></type><name>jp</name> <init>= <expr><call><name>PG_GETARG_JSONPATH_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPathExecResult</name></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>vars</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>silent</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>vars</name> <operator>=</operator> <call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>silent</name> <operator>=</operator> <call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeJsonPath</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><operator>!</operator><name>silent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>jb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>jperOk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * jsonb_path_exists_opr
 *		Implementation of operator "jsonb @? jsonpath" (2-argument version of
 *		jsonb_path_exists()).
 */</comment>
<function><type><name>Datum</name></type>
<name>jsonb_path_exists_opr</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* just call the other one -- it can handle both cases */</comment>
	<return>return <expr><call><name>jsonb_path_exists</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * jsonb_path_match
 *		Returns jsonpath predicate result item for the specified jsonb value.
 *		See jsonb_path_exists() comment for details regarding error handling.
 */</comment>
<function><type><name>Datum</name></type>
<name>jsonb_path_match</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>jb</name> <init>= <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPath</name>   <modifier>*</modifier></type><name>jp</name> <init>= <expr><call><name>PG_GETARG_JSONPATH_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonValueList</name></type> <name>found</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>vars</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>silent</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>vars</name> <operator>=</operator> <call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>silent</name> <operator>=</operator> <call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>executeJsonPath</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><operator>!</operator><name>silent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>jb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>JsonValueListLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jbv</name> <init>= <expr><call><name>JsonValueListHead</name><argument_list>(<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>jbv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jbvBool</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name><name>jbv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>boolean</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>jbv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jbvNull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SINGLETON_JSON_ITEM_REQUIRED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"single boolean result is expected"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * jsonb_path_match_opr
 *		Implementation of operator "jsonb @@ jsonpath" (2-argument version of
 *		jsonb_path_match()).
 */</comment>
<function><type><name>Datum</name></type>
<name>jsonb_path_match_opr</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* just call the other one -- it can handle both cases */</comment>
	<return>return <expr><call><name>jsonb_path_match</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * jsonb_path_query
 *		Executes jsonpath for given jsonb document and returns result as
 *		rowset.
 */</comment>
<function><type><name>Datum</name></type>
<name>jsonb_path_query</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>JsonPath</name>   <modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>jb</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>vars</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>silent</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>JsonValueList</name></type> <name>found</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>jb</name> <operator>=</operator> <call><name>PG_GETARG_JSONB_P_COPY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>jp</name> <operator>=</operator> <call><name>PG_GETARG_JSONPATH_P_COPY</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>vars</name> <operator>=</operator> <call><name>PG_GETARG_JSONB_P_COPY</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>silent</name> <operator>=</operator> <call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>executeJsonPath</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><operator>!</operator><name>silent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <call><name>JsonValueListGetList</name><argument_list>(<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>found</name> <operator>=</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>list_head</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <call><name>list_delete_first</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><call><name>JsonbPGetDatum</name><argument_list>(<argument><expr><call><name>JsonbValueToJsonb</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * jsonb_path_query_array
 *		Executes jsonpath for given jsonb document and returns result as
 *		jsonb array.
 */</comment>
<function><type><name>Datum</name></type>
<name>jsonb_path_query_array</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>jb</name> <init>= <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPath</name>   <modifier>*</modifier></type><name>jp</name> <init>= <expr><call><name>PG_GETARG_JSONPATH_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonValueList</name></type> <name>found</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>vars</name> <init>= <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>silent</name> <init>= <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>executeJsonPath</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><operator>!</operator><name>silent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_JSONB_P</name><argument_list>(<argument><expr><call><name>JsonbValueToJsonb</name><argument_list>(<argument><expr><call><name>wrapItemsInArray</name><argument_list>(<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * jsonb_path_query_first
 *		Executes jsonpath for given jsonb document and returns first result
 *		item.  If there are no items, NULL returned.
 */</comment>
<function><type><name>Datum</name></type>
<name>jsonb_path_query_first</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>jb</name> <init>= <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPath</name>   <modifier>*</modifier></type><name>jp</name> <init>= <expr><call><name>PG_GETARG_JSONPATH_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonValueList</name></type> <name>found</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>vars</name> <init>= <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>silent</name> <init>= <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>executeJsonPath</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><operator>!</operator><name>silent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>JsonValueListLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_JSONB_P</name><argument_list>(<argument><expr><call><name>JsonbValueToJsonb</name><argument_list>(<argument><expr><call><name>JsonValueListHead</name><argument_list>(<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/********************Execute functions for JsonPath**************************/</comment>

<comment type="block">/*
 * Interface to jsonpath executor
 *
 * 'path' - jsonpath to be executed
 * 'vars' - variables to be substituted to jsonpath
 * 'json' - target document for jsonpath evaluation
 * 'throwErrors' - whether we should throw suppressible errors
 * 'result' - list to store result items into
 *
 * Returns an error if a recoverable error happens during processing, or NULL
 * on no error.
 *
 * Note, jsonb and jsonpath values should be available and untoasted during
 * work because JsonPathItem, JsonbValue and result item could have pointers
 * into input values.  If caller needs to just check if document matches
 * jsonpath, then it doesn't provide a result arg.  In this case executor
 * works till first positive result and does not check the rest if possible.
 * In other case it tries to find all the satisfied result items.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathExecResult</name></type>
<name>executeJsonPath</name><parameter_list>(<parameter><decl><type><name>JsonPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>vars</name></decl></parameter>, <parameter><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>throwErrors</name></decl></parameter>,
				<parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonPathExecContext</name></type> <name>cxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPathExecResult</name></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPathItem</name></type> <name>jsp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>jbv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>jspInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jsp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>JsonbExtractScalar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>JsonbInitBinary</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>vars</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>JsonContainerIsObject</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vars</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"vars\" argument is not an object"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Jsonpath parameters should be encoded as key-value pairs of \"vars\" object."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>cxt</name><operator>.</operator><name>vars</name></name> <operator>=</operator> <name>vars</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cxt</name><operator>.</operator><name>laxMode</name></name> <operator>=</operator> <operator>(</operator><name><name>path</name><operator>-&gt;</operator><name>header</name></name> <operator>&amp;</operator> <name>JSONPATH_LAX</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cxt</name><operator>.</operator><name>ignoreStructuralErrors</name></name> <operator>=</operator> <name><name>cxt</name><operator>.</operator><name>laxMode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cxt</name><operator>.</operator><name>root</name></name> <operator>=</operator> <operator>&amp;</operator><name>jbv</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cxt</name><operator>.</operator><name>current</name></name> <operator>=</operator> <operator>&amp;</operator><name>jbv</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cxt</name><operator>.</operator><name>baseObject</name><operator>.</operator><name>jbc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cxt</name><operator>.</operator><name>baseObject</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cxt</name><operator>.</operator><name>lastGeneratedObjectId</name></name> <operator>=</operator> <ternary><condition><expr><name>vars</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cxt</name><operator>.</operator><name>innermostArraySize</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cxt</name><operator>.</operator><name>throwErrors</name></name> <operator>=</operator> <name>throwErrors</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>jspStrictAbsenseOfErrors</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * In strict mode we must get a complete list of values to check that
		 * there are no errors at all.
		 */</comment>
		<decl_stmt><decl><type><name>JsonValueList</name></type> <name>vals</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeItem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

		<return>return <expr><ternary><condition><expr><call><name>JsonValueListIsEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vals</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>jperNotFound</name></expr> </then><else>: <expr><name>jperOk</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeItem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>throwErrors</name> <operator>||</operator> <operator>!</operator><call><name>jperIsError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Execute jsonpath with automatic unwrapping of current item in lax mode.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathExecResult</name></type>
<name>executeItem</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>,
			<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>executeItemOptUnwrapTarget</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><call><name>jspAutoUnwrap</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Main jsonpath executor function: walks on jsonpath structure, finds
 * relevant parts of jsonb and evaluates expressions over them.
 * When 'unwrap' is true current SQL/JSON item is unwrapped if it is an array.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathExecResult</name></type>
<name>executeItemOptUnwrapTarget</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>,
						   <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>unwrap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonPathItem</name></type> <name>elem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPathExecResult</name></type> <name>res</name> <init>= <expr><name>jperNotFound</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonBaseObjectInfo</name></type> <name>baseObject</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>jsp</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
			<comment type="block">/* all boolean item types: */</comment>
		<case>case <expr><name>jpiAnd</name></expr>:</case>
		<case>case <expr><name>jpiOr</name></expr>:</case>
		<case>case <expr><name>jpiNot</name></expr>:</case>
		<case>case <expr><name>jpiIsUnknown</name></expr>:</case>
		<case>case <expr><name>jpiEqual</name></expr>:</case>
		<case>case <expr><name>jpiNotEqual</name></expr>:</case>
		<case>case <expr><name>jpiLess</name></expr>:</case>
		<case>case <expr><name>jpiGreater</name></expr>:</case>
		<case>case <expr><name>jpiLessOrEqual</name></expr>:</case>
		<case>case <expr><name>jpiGreaterOrEqual</name></expr>:</case>
		<case>case <expr><name>jpiExists</name></expr>:</case>
		<case>case <expr><name>jpiStartsWith</name></expr>:</case>
		<case>case <expr><name>jpiLikeRegex</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>JsonPathBool</name></type> <name>st</name> <init>= <expr><call><name>executeBoolItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>appendBoolResult</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>jpiKey</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>JsonbType</name><argument_list>(<argument><expr><name>jb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>jbvObject</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>key</name></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>jspGetString</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>findJsonbValueFromContainer</name><argument_list>(<argument><expr><name><name>jb</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>binary</name><operator>.</operator><name>data</name></name></expr></argument>,
												<argument><expr><name>JB_FOBJECT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
										  <argument><expr><name>v</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* free value if it was not added to found list */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>jspHasNext</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>jspIgnoreStructuralErrors</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jspThrowErrors</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>jperError</name></expr>;</return></block_content></block></if></if_stmt>

					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_JSON_MEMBER_NOT_FOUND</name></expr></argument>)</argument_list></call><operator>,</operator> \
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"JSON object does not contain key \"%s\""</literal></expr></argument>,
									<argument><expr><call><name>pnstrdup</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>,
											 <argument><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>unwrap</name> <operator>&amp;&amp;</operator> <call><name>JsonbType</name><argument_list>(<argument><expr><name>jb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>jbvArray</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>executeItemUnwrapTargetArray</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>jspIgnoreStructuralErrors</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
									 <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_JSON_MEMBER_NOT_FOUND</name></expr></argument>)</argument_list></call><operator>,</operator>
									  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"jsonpath member accessor can only be applied to an object"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>jpiRoot</name></expr>:</case>
			<expr_stmt><expr><name>jb</name> <operator>=</operator> <name><name>cxt</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>baseObject</name> <operator>=</operator> <call><name>setBaseObject</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>baseObject</name></name> <operator>=</operator> <name>baseObject</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>jpiCurrent</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cxt</name><operator>-&gt;</operator><name>current</name></name></expr></argument>,
								  <argument><expr><name>found</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>jpiAnyArray</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>JsonbType</name><argument_list>(<argument><expr><name>jb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>jbvArray</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>bool</name></type>		<name>hasNext</name> <init>= <expr><call><name>jspGetNext</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeItemUnwrapTargetArray</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><ternary><condition><expr><name>hasNext</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>elem</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
												   <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><call><name>jspAutoUnwrap</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>jspAutoWrap</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>jspIgnoreStructuralErrors</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
									 <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_JSON_ARRAY_NOT_FOUND</name></expr></argument>)</argument_list></call><operator>,</operator>
									  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"jsonpath wildcard array accessor can only be applied to an array"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>jpiIndexArray</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>JsonbType</name><argument_list>(<argument><expr><name>jb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>jbvArray</name> <operator>||</operator> <call><name>jspAutoWrap</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>innermostArraySize</name> <init>= <expr><name><name>cxt</name><operator>-&gt;</operator><name>innermostArraySize</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>size</name> <init>= <expr><call><name>JsonbArraySize</name><argument_list>(<argument><expr><name>jb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type>		<name>singleton</name> <init>= <expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type>		<name>hasNext</name> <init>= <expr><call><name>jspGetNext</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>singleton</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>innermostArraySize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt> <comment type="block">/* for LAST evaluation */</comment>

				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>jsp</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>array</name><operator>.</operator><name>nelems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<decl_stmt><decl><type><name>JsonPathItem</name></type> <name>from</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>JsonPathItem</name></type> <name>to</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int32</name></type>		<name>index</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int32</name></type>		<name>index_from</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int32</name></type>		<name>index_to</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>bool</name></type>		<name>range</name> <init>= <expr><call><name>jspGetArraySubscript</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>,
															 <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>getArrayIndex</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><name>range</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>getArrayIndex</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<break>break;</break></block_content></block></if></if_stmt>
					</block_content>}</block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name>index_to</name> <operator>=</operator> <name>index_from</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jspIgnoreStructuralErrors</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
						<operator>(</operator><name><name>index_from</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator>
						 <name>index_from</name></expr></argument> &gt;</argument_list></name> <name>index_to</name> <operator>||</operator>
						 <name>index_to</name> <operator>&gt;=</operator> <name>size</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
											 <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_JSON_SUBSCRIPT</name></expr></argument>)</argument_list></call><operator>,</operator>
											  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"jsonpath array subscript is out of bounds"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><name>index_from</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>index_from</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><name>index_to</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>index_to</name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>jperNotFound</name></expr>;</expr_stmt>

					<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <name>index_from</name></expr>;</init> <condition><expr><name>index</name> <operator>&lt;=</operator> <name>index_to</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>bool</name></type>		<name>copy</name></decl>;</decl_stmt>

						<if_stmt><if>if <condition>(<expr><name>singleton</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>v</name> <operator>=</operator> <name>jb</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>copy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>getIthJsonbValueFromContainer</name><argument_list>(<argument><expr><name><name>jb</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>binary</name><operator>.</operator><name>data</name></name></expr></argument>,
															  <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

							<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
								<continue>continue;</continue></block_content></block></if></if_stmt>

							<expr_stmt><expr><name>copy</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasNext</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><name>jperOk</name></expr>;</return></block_content></block></if></if_stmt>

						<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>found</name></expr></argument>,
											  <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<break>break;</break></block_content></block></if></if_stmt>

						<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>jperOk</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
							<break>break;</break></block_content></block></if></if_stmt>
					</block_content>}</block></for>

					<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>jperOk</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>
				</block_content>}</block></for>

				<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>innermostArraySize</name></name> <operator>=</operator> <name>innermostArraySize</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>jspIgnoreStructuralErrors</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
									 <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_JSON_ARRAY_NOT_FOUND</name></expr></argument>)</argument_list></call><operator>,</operator>
									  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"jsonpath array accessor can only be applied to an array"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>jpiLast</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>tmpjbv</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>lastjbv</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>last</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type>		<name>hasNext</name> <init>= <expr><call><name>jspGetNext</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>cxt</name><operator>-&gt;</operator><name>innermostArraySize</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"evaluating jsonpath LAST outside of array subscript"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasNext</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>jperOk</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>cxt</name><operator>-&gt;</operator><name>innermostArraySize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

				<expr_stmt><expr><name>lastjbv</name> <operator>=</operator> <ternary><condition><expr><name>hasNext</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>tmpjbv</name></expr> </then><else>: <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lastjbv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>lastjbv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>jbvNumeric</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lastjbv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator>
					<call><name>DatumGetNumeric</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int4_numeric</name></expr></argument>,
														<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>,
									  <argument><expr><name>lastjbv</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>hasNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>jpiAnyKey</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>JsonbType</name><argument_list>(<argument><expr><name>jb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>jbvObject</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>bool</name></type>		<name>hasNext</name> <init>= <expr><call><name>jspGetNext</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>jb</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>jbvBinary</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid jsonb object type: %d"</literal></expr></argument>, <argument><expr><name><name>jb</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<return>return <expr><call><name>executeAnyItem</name>
					<argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><ternary><condition><expr><name>hasNext</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>elem</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
					 <argument><expr><name><name>jb</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>binary</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
					 <argument><expr><name>false</name></expr></argument>, <argument><expr><call><name>jspAutoUnwrap</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>unwrap</name> <operator>&amp;&amp;</operator> <call><name>JsonbType</name><argument_list>(<argument><expr><name>jb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>jbvArray</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>executeItemUnwrapTargetArray</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>jspIgnoreStructuralErrors</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
									 <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_JSON_OBJECT_NOT_FOUND</name></expr></argument>)</argument_list></call><operator>,</operator>
									  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"jsonpath wildcard member accessor can only be applied to an object"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>jpiAdd</name></expr>:</case>
			<return>return <expr><call><name>executeBinaryArithmExpr</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>,
										   <argument><expr><name>numeric_add_opt_error</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>jpiSub</name></expr>:</case>
			<return>return <expr><call><name>executeBinaryArithmExpr</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>,
										   <argument><expr><name>numeric_sub_opt_error</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>jpiMul</name></expr>:</case>
			<return>return <expr><call><name>executeBinaryArithmExpr</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>,
										   <argument><expr><name>numeric_mul_opt_error</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>jpiDiv</name></expr>:</case>
			<return>return <expr><call><name>executeBinaryArithmExpr</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>,
										   <argument><expr><name>numeric_div_opt_error</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>jpiMod</name></expr>:</case>
			<return>return <expr><call><name>executeBinaryArithmExpr</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>,
										   <argument><expr><name>numeric_mod_opt_error</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>jpiPlus</name></expr>:</case>
			<return>return <expr><call><name>executeUnaryArithmExpr</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>jpiMinus</name></expr>:</case>
			<return>return <expr><call><name>executeUnaryArithmExpr</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>numeric_uminus</name></expr></argument>,
										  <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>jpiFilter</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>JsonPathBool</name></type> <name>st</name></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>unwrap</name> <operator>&amp;&amp;</operator> <call><name>JsonbType</name><argument_list>(<argument><expr><name>jb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>jbvArray</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>executeItemUnwrapTargetArray</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>,
														<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>jspGetArg</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>executeNestedBoolItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>st</name> <operator>!=</operator> <name>jpbTrue</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>jperNotFound</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
										  <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>jpiAny</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>bool</name></type>		<name>hasNext</name> <init>= <expr><call><name>jspGetNext</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<comment type="block">/* first try without any intermediate steps */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>jsp</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>bool</name></type>		<name>savedIgnoreStructuralErrors</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>savedIgnoreStructuralErrors</name> <operator>=</operator> <name><name>cxt</name><operator>-&gt;</operator><name>ignoreStructuralErrors</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>ignoreStructuralErrors</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>,
										  <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>ignoreStructuralErrors</name></name> <operator>=</operator> <name>savedIgnoreStructuralErrors</name></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>jperOk</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>jb</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jbvBinary</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeAnyItem</name>
						<argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><ternary><condition><expr><name>hasNext</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>elem</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
						 <argument><expr><name><name>jb</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>binary</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>found</name></expr></argument>,
						 <argument><expr><literal type="number">1</literal></expr></argument>,
						 <argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>first</name></name></expr></argument>,
						 <argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>last</name></name></expr></argument>,
						 <argument><expr><name>true</name></expr></argument>, <argument><expr><call><name>jspAutoUnwrap</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>jpiNull</name></expr>:</case>
		<case>case <expr><name>jpiBool</name></expr>:</case>
		<case>case <expr><name>jpiNumeric</name></expr>:</case>
		<case>case <expr><name>jpiString</name></expr>:</case>
		<case>case <expr><name>jpiVariable</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>vbuf</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type>		<name>hasNext</name> <init>= <expr><call><name>jspGetNext</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasNext</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>jperOk</name></expr>;</expr_stmt>	<comment type="block">/* skip evaluation */</comment>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>hasNext</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>vbuf</name></expr> </then><else>: <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

				<expr_stmt><expr><name>baseObject</name> <operator>=</operator> <name><name>cxt</name><operator>-&gt;</operator><name>baseObject</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getJsonPathItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>,
									  <argument><expr><name>v</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>hasNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>baseObject</name></name> <operator>=</operator> <name>baseObject</name></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>jpiType</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jbv</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>jbv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>jbv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>jbv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>JsonbTypeName</name><argument_list>(<argument><expr><name>jb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>jbv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>jbv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>jbv</name></expr></argument>,
									  <argument><expr><name>found</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>jpiSize</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>size</name> <init>= <expr><call><name>JsonbArraySize</name><argument_list>(<argument><expr><name>jb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jspAutoWrap</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jspIgnoreStructuralErrors</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
												 <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_JSON_ARRAY_NOT_FOUND</name></expr></argument>)</argument_list></call><operator>,</operator>
												  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"jsonpath item method .%s() can only be applied to an array"</literal></expr></argument>,
														 <argument><expr><call><name>jspOperationName</name><argument_list>(<argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name>jb</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>jb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>jb</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>jbvNumeric</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>jb</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator>
					<call><name>DatumGetNumeric</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int4_numeric</name></expr></argument>,
														<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>jpiAbs</name></expr>:</case>
			<return>return <expr><call><name>executeNumericItemMethod</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>unwrap</name></expr></argument>, <argument><expr><name>numeric_abs</name></expr></argument>,
											<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>jpiFloor</name></expr>:</case>
			<return>return <expr><call><name>executeNumericItemMethod</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>unwrap</name></expr></argument>, <argument><expr><name>numeric_floor</name></expr></argument>,
											<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>jpiCeiling</name></expr>:</case>
			<return>return <expr><call><name>executeNumericItemMethod</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>unwrap</name></expr></argument>, <argument><expr><name>numeric_ceil</name></expr></argument>,
											<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>jpiDouble</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>jbv</name></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>unwrap</name> <operator>&amp;&amp;</operator> <call><name>JsonbType</name><argument_list>(<argument><expr><name>jb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>jbvArray</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>executeItemUnwrapTargetArray</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>,
														<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>jb</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jbvNumeric</name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_out</name></expr></argument>,
																		  <argument><expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><name><name>jb</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>bool</name></type>		<name>have_error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>float8in_internal_opt_error</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>,
													   <argument><expr><name>NULL</name></expr></argument>,
													   <argument><expr><literal type="string">"double precision"</literal></expr></argument>,
													   <argument><expr><name>tmp</name></expr></argument>,
													   <argument><expr><operator>&amp;</operator><name>have_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>have_error</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
											 <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NON_NUMERIC_JSON_ITEM</name></expr></argument>)</argument_list></call><operator>,</operator>
											  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"jsonpath item method .%s() can only be applied to a numeric value"</literal></expr></argument>,
													 <argument><expr><call><name>jspOperationName</name><argument_list>(<argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>jperOk</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name><name>jb</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jbvString</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* cast string as double */</comment>
					<decl_stmt><decl><type><name>double</name></type>		<name>val</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>pnstrdup</name><argument_list>(<argument><expr><name><name>jb</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>,
											   <argument><expr><name><name>jb</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>bool</name></type>		<name>have_error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>float8in_internal_opt_error</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>,
													  <argument><expr><name>NULL</name></expr></argument>,
													  <argument><expr><literal type="string">"double precision"</literal></expr></argument>,
													  <argument><expr><name>tmp</name></expr></argument>,
													  <argument><expr><operator>&amp;</operator><name>have_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>have_error</name> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
											 <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NON_NUMERIC_JSON_ITEM</name></expr></argument>)</argument_list></call><operator>,</operator>
											  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"jsonpath item method .%s() can only be applied to a numeric value"</literal></expr></argument>,
													 <argument><expr><call><name>jspOperationName</name><argument_list>(<argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt><expr><name>jb</name> <operator>=</operator> <operator>&amp;</operator><name>jbv</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>jb</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>jbvNumeric</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>jb</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator> <call><name>DatumGetNumeric</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>float8_numeric</name></expr></argument>,
																		  <argument><expr><call><name>Float8GetDatum</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>jperOk</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>jperNotFound</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
										 <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NON_NUMERIC_JSON_ITEM</name></expr></argument>)</argument_list></call><operator>,</operator>
										  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"jsonpath item method .%s() can only be applied to a string or numeric value"</literal></expr></argument>,
												 <argument><expr><call><name>jspOperationName</name><argument_list>(<argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>jpiKeyValue</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>unwrap</name> <operator>&amp;&amp;</operator> <call><name>JsonbType</name><argument_list>(<argument><expr><name>jb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>jbvArray</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>executeItemUnwrapTargetArray</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

			<return>return <expr><call><name>executeKeyValueMethod</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized jsonpath item type: %d"</literal></expr></argument>, <argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Unwrap current array item and execute jsonpath for each of its elements.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathExecResult</name></type>
<name>executeItemUnwrapTargetArray</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>,
							 <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>,
							 <parameter><decl><type><name>bool</name></type> <name>unwrapElements</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>jb</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>jbvBinary</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>jb</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>jbvArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid jsonb array value type: %d"</literal></expr></argument>, <argument><expr><name><name>jb</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>executeAnyItem</name>
		<argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name><name>jb</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>binary</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
		 <argument><expr><name>false</name></expr></argument>, <argument><expr><name>unwrapElements</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Execute next jsonpath item if exists.  Otherwise put "v" to the "found"
 * list if provided.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathExecResult</name></type>
<name>executeNextItem</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
				<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>next</name></decl></parameter>,
				<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>copy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonPathItem</name></type> <name>elem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>hasNext</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>hasNext</name> <operator>=</operator> <name>next</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>hasNext</name> <operator>=</operator> <call><name>jspHasNext</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>&amp;</operator><name>elem</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>hasNext</name> <operator>=</operator> <call><name>jspGetNext</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>hasNext</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>executeItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>JsonValueListAppend</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><ternary><condition><expr><name>copy</name></expr> ?</condition><then> <expr><call><name>copyJsonbValue</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>v</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>jperOk</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Same as executeItem(), but when "unwrap == true" automatically unwraps
 * each array item from the resulting sequence in lax mode.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathExecResult</name></type>
<name>executeItemOptUnwrapResult</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>,
						   <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>unwrap</name></decl></parameter>,
						   <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>unwrap</name> <operator>&amp;&amp;</operator> <call><name>jspAutoUnwrap</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>JsonValueList</name></type> <name>seq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>JsonValueListIterator</name></type> <name>it</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>JsonPathExecResult</name></type> <name>res</name> <init>= <expr><call><name>executeItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>JsonValueListInitIterator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>item</name> <operator>=</operator> <call><name>JsonValueListNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>jbvArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>JsonbType</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>jbvArray</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>executeItemUnwrapTargetArray</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>JsonValueListAppend</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></while>

		<return>return <expr><name>jperOk</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>executeItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Same as executeItemOptUnwrapResult(), but with error suppression.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathExecResult</name></type>
<name>executeItemOptUnwrapResultNoThrow</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>,
								  <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>,
								  <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>unwrap</name></decl></parameter>,
								  <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonPathExecResult</name></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>throwErrors</name> <init>= <expr><name><name>cxt</name><operator>-&gt;</operator><name>throwErrors</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>throwErrors</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeItemOptUnwrapResult</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>unwrap</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>throwErrors</name></name> <operator>=</operator> <name>throwErrors</name></expr>;</expr_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Execute boolean-valued jsonpath expression. */</comment>
<function><type><specifier>static</specifier> <name>JsonPathBool</name></type>
<name>executeBoolItem</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>,
				<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>canHaveNext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonPathItem</name></type> <name>larg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPathItem</name></type> <name>rarg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPathBool</name></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPathBool</name></type> <name>res2</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>canHaveNext</name> <operator>&amp;&amp;</operator> <call><name>jspHasNext</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"boolean jsonpath item cannot have next item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>jsp</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>jpiAnd</name></expr>:</case>
			<expr_stmt><expr><call><name>jspGetLeftArg</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeBoolItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>jpbFalse</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>jpbFalse</name></expr>;</return></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * SQL/JSON says that we should check second arg in case of
			 * jperError
			 */</comment>

			<expr_stmt><expr><call><name>jspGetRightArg</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res2</name> <operator>=</operator> <call><name>executeBoolItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rarg</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><ternary><condition><expr><name>res2</name> <operator>==</operator> <name>jpbTrue</name></expr> ?</condition><then> <expr><name>res</name></expr> </then><else>: <expr><name>res2</name></expr></else></ternary></expr>;</return>

		<case>case <expr><name>jpiOr</name></expr>:</case>
			<expr_stmt><expr><call><name>jspGetLeftArg</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeBoolItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>jpbTrue</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>jpbTrue</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>jspGetRightArg</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res2</name> <operator>=</operator> <call><name>executeBoolItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rarg</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><ternary><condition><expr><name>res2</name> <operator>==</operator> <name>jpbFalse</name></expr> ?</condition><then> <expr><name>res</name></expr> </then><else>: <expr><name>res2</name></expr></else></ternary></expr>;</return>

		<case>case <expr><name>jpiNot</name></expr>:</case>
			<expr_stmt><expr><call><name>jspGetArg</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeBoolItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>jpbUnknown</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>jpbUnknown</name></expr>;</return></block_content></block></if></if_stmt>

			<return>return <expr><ternary><condition><expr><name>res</name> <operator>==</operator> <name>jpbTrue</name></expr> ?</condition><then> <expr><name>jpbFalse</name></expr> </then><else>: <expr><name>jpbTrue</name></expr></else></ternary></expr>;</return>

		<case>case <expr><name>jpiIsUnknown</name></expr>:</case>
			<expr_stmt><expr><call><name>jspGetArg</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeBoolItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><ternary><condition><expr><name>res</name> <operator>==</operator> <name>jpbUnknown</name></expr> ?</condition><then> <expr><name>jpbTrue</name></expr> </then><else>: <expr><name>jpbFalse</name></expr></else></ternary></expr>;</return>

		<case>case <expr><name>jpiEqual</name></expr>:</case>
		<case>case <expr><name>jpiNotEqual</name></expr>:</case>
		<case>case <expr><name>jpiLess</name></expr>:</case>
		<case>case <expr><name>jpiGreater</name></expr>:</case>
		<case>case <expr><name>jpiLessOrEqual</name></expr>:</case>
		<case>case <expr><name>jpiGreaterOrEqual</name></expr>:</case>
			<expr_stmt><expr><call><name>jspGetLeftArg</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jspGetRightArg</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>executePredicate</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rarg</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
									<argument><expr><name>executeComparison</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>jpiStartsWith</name></expr>:</case>		<comment type="block">/* 'whole STARTS WITH initial' */</comment>
			<expr_stmt><expr><call><name>jspGetLeftArg</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 'whole' */</comment>
			<expr_stmt><expr><call><name>jspGetRightArg</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 'initial' */</comment>
			<return>return <expr><call><name>executePredicate</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rarg</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
									<argument><expr><name>executeStartsWith</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>jpiLikeRegex</name></expr>:</case>		<comment type="block">/* 'expr LIKE_REGEX pattern FLAGS flags' */</comment>
			<block>{<block_content>
				<comment type="block">/*
				 * 'expr' is a sequence-returning expression.  'pattern' is a
				 * regex string literal.  SQL/JSON standard requires XQuery
				 * regexes, but we use Postgres regexes here.  'flags' is a
				 * string literal converted to integer flags at compile-time.
				 */</comment>
				<decl_stmt><decl><type><name>JsonLikeRegexContext</name></type> <name>lrcxt</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>jspInitByBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>, <argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>base</name></name></expr></argument>,
								<argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<return>return <expr><call><name>executePredicate</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
										<argument><expr><name>executeLikeRegex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lrcxt</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block>

		<case>case <expr><name>jpiExists</name></expr>:</case>
			<expr_stmt><expr><call><name>jspGetArg</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>jspStrictAbsenseOfErrors</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * In strict mode we must get a complete list of values to
				 * check that there are no errors at all.
				 */</comment>
				<decl_stmt><decl><type><name>JsonValueList</name></type> <name>vals</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>JsonPathExecResult</name></type> <name>res</name> <init>=
				<expr><call><name>executeItemOptUnwrapResultNoThrow</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>,
												  <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vals</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>jpbUnknown</name></expr>;</return></block_content></block></if></if_stmt>

				<return>return <expr><ternary><condition><expr><call><name>JsonValueListIsEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vals</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>jpbFalse</name></expr> </then><else>: <expr><name>jpbTrue</name></expr></else></ternary></expr>;</return>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>JsonPathExecResult</name></type> <name>res</name> <init>=
				<expr><call><name>executeItemOptUnwrapResultNoThrow</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>larg</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>,
												  <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>jpbUnknown</name></expr>;</return></block_content></block></if></if_stmt>

				<return>return <expr><ternary><condition><expr><name>res</name> <operator>==</operator> <name>jperOk</name></expr> ?</condition><then> <expr><name>jpbTrue</name></expr> </then><else>: <expr><name>jpbFalse</name></expr></else></ternary></expr>;</return>
			</block_content>}</block></else></if_stmt>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid boolean jsonpath item type: %d"</literal></expr></argument>, <argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>jpbUnknown</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Execute nested (filters etc.) boolean expression pushing current SQL/JSON
 * item onto the stack.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathBool</name></type>
<name>executeNestedBoolItem</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>,
					  <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPathBool</name></type> <name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>cxt</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>jb</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeBoolItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Implementation of several jsonpath nodes:
 *  - jpiAny (.** accessor),
 *  - jpiAnyKey (.* accessor),
 *  - jpiAnyArray ([*] accessor)
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathExecResult</name></type>
<name>executeAnyItem</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbContainer</name> <modifier>*</modifier></type><name>jbc</name></decl></parameter>,
			   <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>last</name></decl></parameter>,
			   <parameter><decl><type><name>bool</name></type> <name>ignoreStructuralErrors</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>unwrapNext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonPathExecResult</name></type> <name>res</name> <init>= <expr><name>jperNotFound</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbIterator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>v</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>JsonbIteratorInit</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Recursively iterate over jsonb objects/arrays
	 */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WJB_DONE</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>WJB_KEY</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <name>WJB_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>WJB_VALUE</name> <operator>||</operator> <name>r</name> <operator>==</operator> <name>WJB_ELEM</name></expr>)</condition>
		<block>{<block_content>

			<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>first</name> <operator>||</operator>
				<operator>(</operator><name>first</name> <operator>==</operator> <name>PG_UINT32_MAX</name> <operator>&amp;&amp;</operator> <name>last</name> <operator>==</operator> <name>PG_UINT32_MAX</name> <operator>&amp;&amp;</operator>
				 <name><name>v</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>jbvBinary</name><operator>)</operator></expr>)</condition>	<comment type="block">/* leaves only requested */</comment>
			<block>{<block_content>
				<comment type="block">/* check expression */</comment>
				<if_stmt><if>if <condition>(<expr><name>jsp</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>ignoreStructuralErrors</name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>bool</name></type>		<name>savedIgnoreStructuralErrors</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>savedIgnoreStructuralErrors</name> <operator>=</operator> <name><name>cxt</name><operator>-&gt;</operator><name>ignoreStructuralErrors</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>ignoreStructuralErrors</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeItemOptUnwrapTarget</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>unwrapNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>ignoreStructuralErrors</name></name> <operator>=</operator> <name>savedIgnoreStructuralErrors</name></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeItemOptUnwrapTarget</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>unwrapNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>jperOk</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>JsonValueListAppend</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><call><name>copyJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<return>return <expr><name>jperOk</name></expr>;</return></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <name>last</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>jbvBinary</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeAnyItem</name>
					<argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>val</name><operator>.</operator><name>binary</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>found</name></expr></argument>,
					 <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>,
					 <argument><expr><name>ignoreStructuralErrors</name></expr></argument>, <argument><expr><name>unwrapNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>jperOk</name> <operator>&amp;&amp;</operator> <name>found</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Execute unary or binary predicate.
 *
 * Predicates have existence semantics, because their operands are item
 * sequences.  Pairs of items from the left and right operand's sequences are
 * checked.  TRUE returned only if any pair satisfying the condition is found.
 * In strict mode, even if the desired pair has already been found, all pairs
 * still need to be examined to check the absence of errors.  If any error
 * occurs, UNKNOWN (analogous to SQL NULL) is returned.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathBool</name></type>
<name>executePredicate</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>pred</name></decl></parameter>,
				 <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>larg</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>rarg</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>,
				 <parameter><decl><type><name>bool</name></type> <name>unwrapRightArg</name></decl></parameter>, <parameter><decl><type><name>JsonPathPredicateCallback</name></type> <name>exec</name></decl></parameter>,
				 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonPathExecResult</name></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonValueListIterator</name></type> <name>lseqit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonValueList</name></type> <name>lseq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonValueList</name></type> <name>rseq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>lval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Left argument is always auto-unwrapped. */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeItemOptUnwrapResultNoThrow</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>larg</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lseq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>jpbUnknown</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>rarg</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Right argument is conditionally auto-unwrapped. */</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeItemOptUnwrapResultNoThrow</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>rarg</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>,
												<argument><expr><name>unwrapRightArg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rseq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>jpbUnknown</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>JsonValueListInitIterator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lseq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lseqit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>lval</name> <operator>=</operator> <call><name>JsonValueListNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lseq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lseqit</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>JsonValueListIterator</name></type> <name>rseqit</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>rval</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>JsonValueListInitIterator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rseq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rseqit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rarg</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>JsonValueListNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rseq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rseqit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>rval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* Loop over right arg sequence or do single pass otherwise */</comment>
		<while>while <condition>(<expr><ternary><condition><expr><name>rarg</name></expr> ?</condition><then> <expr><operator>(</operator><name>rval</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> </then><else>: <expr><name>first</name></expr></else></ternary></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>JsonPathBool</name></type> <name>res</name> <init>= <expr><call><name>exec</name><argument_list>(<argument><expr><name>pred</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>jpbUnknown</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>jspStrictAbsenseOfErrors</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>jpbUnknown</name></expr>;</return></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>res</name> <operator>==</operator> <name>jpbTrue</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jspStrictAbsenseOfErrors</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>jpbTrue</name></expr>;</return></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>rarg</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>JsonValueListNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rseq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rseqit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>					<comment type="block">/* possible only in strict mode */</comment>
		<return>return <expr><name>jpbTrue</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>					<comment type="block">/* possible only in lax mode */</comment>
		<return>return <expr><name>jpbUnknown</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>jpbFalse</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Execute binary arithmetic expression on singleton numeric operands.
 * Array operands are automatically unwrapped in lax mode.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathExecResult</name></type>
<name>executeBinaryArithmExpr</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>,
						<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>BinaryArithmFunc</name></type> <name>func</name></decl></parameter>,
						<parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonPathExecResult</name></type> <name>jper</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPathItem</name></type> <name>elem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonValueList</name></type> <name>lseq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonValueList</name></type> <name>rseq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>lval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>rval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Numeric</name></type>		<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>jspGetLeftArg</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * XXX: By standard only operands of multiplicative expressions are
	 * unwrapped.  We extend it to other binary arithmetic expressions too.
	 */</comment>
	<expr_stmt><expr><name>jper</name> <operator>=</operator> <call><name>executeItemOptUnwrapResult</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lseq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>jper</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>jper</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>jspGetRightArg</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>jper</name> <operator>=</operator> <call><name>executeItemOptUnwrapResult</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rseq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>jper</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>jper</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>JsonValueListLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lseq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
		<operator>!</operator><operator>(</operator><name>lval</name> <operator>=</operator> <call><name>getScalar</name><argument_list>(<argument><expr><call><name>JsonValueListHead</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lseq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>jbvNumeric</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							 <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SINGLETON_JSON_ITEM_REQUIRED</name></expr></argument>)</argument_list></call><operator>,</operator>
							  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"left operand of jsonpath operator %s is not a single numeric value"</literal></expr></argument>,
									 <argument><expr><call><name>jspOperationName</name><argument_list>(<argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>JsonValueListLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rseq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
		<operator>!</operator><operator>(</operator><name>rval</name> <operator>=</operator> <call><name>getScalar</name><argument_list>(<argument><expr><call><name>JsonValueListHead</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rseq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>jbvNumeric</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							 <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SINGLETON_JSON_ITEM_REQUIRED</name></expr></argument>)</argument_list></call><operator>,</operator>
							  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"right operand of jsonpath operator %s is not a single numeric value"</literal></expr></argument>,
									 <argument><expr><call><name>jspOperationName</name><argument_list>(<argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>jspThrowErrors</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name><name>lval</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>, <argument><expr><name><name>rval</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name><name>lval</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>, <argument><expr><name><name>rval</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>jperError</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jspGetNext</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>jperOk</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>lval</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lval</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>jbvNumeric</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lval</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

	<return>return <expr><call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Execute unary arithmetic expression for each numeric item in its operand's
 * sequence.  Array operand is automatically unwrapped in lax mode.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathExecResult</name></type>
<name>executeUnaryArithmExpr</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>,
					   <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>PGFunction</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonPathExecResult</name></type> <name>jper</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPathExecResult</name></type> <name>jper2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPathItem</name></type> <name>elem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonValueList</name></type> <name>seq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonValueListIterator</name></type> <name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>hasNext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>jspGetArg</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>jper</name> <operator>=</operator> <call><name>executeItemOptUnwrapResult</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>jper</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>jper</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>jper</name> <operator>=</operator> <name>jperNotFound</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>hasNext</name> <operator>=</operator> <call><name>jspGetNext</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>JsonValueListInitIterator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>val</name> <operator>=</operator> <call><name>JsonValueListNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>=</operator> <call><name>getScalar</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>jbvNumeric</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hasNext</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>jperOk</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hasNext</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>		<comment type="block">/* skip non-numerics processing */</comment>

			<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								 <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_JSON_NUMBER_NOT_FOUND</name></expr></argument>)</argument_list></call><operator>,</operator>
								  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operand of unary jsonpath operator %s is not a numeric value"</literal></expr></argument>,
										 <argument><expr><call><name>jspOperationName</name><argument_list>(<argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>func</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator>
				<call><name>DatumGetNumeric</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>func</name></expr></argument>,
													<argument><expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>jper2</name> <operator>=</operator> <call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>jper2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>jper2</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>jper2</name> <operator>==</operator> <name>jperOk</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>jperOk</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>jper</name> <operator>=</operator> <name>jperOk</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>jper</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * STARTS_WITH predicate callback.
 *
 * Check if the 'whole' string starts from 'initial' string.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathBool</name></type>
<name>executeStartsWith</name><parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>whole</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>initial</name></decl></parameter>,
				  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>whole</name> <operator>=</operator> <call><name>getScalar</name><argument_list>(<argument><expr><name>whole</name></expr></argument>, <argument><expr><name>jbvString</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>jpbUnknown</name></expr>;</return></block_content></block></if></if_stmt>		<comment type="block">/* error */</comment>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>initial</name> <operator>=</operator> <call><name>getScalar</name><argument_list>(<argument><expr><name>initial</name></expr></argument>, <argument><expr><name>jbvString</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>jpbUnknown</name></expr>;</return></block_content></block></if></if_stmt>		<comment type="block">/* error */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>whole</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>&gt;=</operator> <name><name>initial</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>whole</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>,
				<argument><expr><name><name>initial</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>,
				<argument><expr><name><name>initial</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>jpbTrue</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>jpbFalse</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * LIKE_REGEX predicate callback.
 *
 * Check if the string matches regex pattern.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathBool</name></type>
<name>executeLikeRegex</name><parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>rarg</name></decl></parameter>,
				 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonLikeRegexContext</name> <modifier>*</modifier></type><name>cxt</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>str</name> <operator>=</operator> <call><name>getScalar</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>jbvString</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>jpbUnknown</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Cache regex text and converted flags. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cxt</name><operator>-&gt;</operator><name>regex</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>flags</name> <init>= <expr><name><name>jsp</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>regex</name></name> <operator>=</operator>
			<call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>pattern</name></name></expr></argument>,
									 <argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>patternlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Convert regex flags. */</comment>
		<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>cflags</name></name> <operator>=</operator> <name>REG_ADVANCED</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>JSP_REGEX_ICASE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>cflags</name></name> <operator>|=</operator> <name>REG_ICASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>JSP_REGEX_MLINE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>cflags</name></name> <operator>|=</operator> <name>REG_NEWLINE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>JSP_REGEX_SLINE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REG_NEWLINE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>JSP_REGEX_WSPACE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>cflags</name></name> <operator>|=</operator> <name>REG_EXPANDED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * 'q' flag can work together only with 'i'.  When other is specified,
		 * then 'q' has no effect.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>JSP_REGEX_QUOTE</name><operator>)</operator> <operator>&amp;&amp;</operator>
			<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>JSP_REGEX_MLINE</name> <operator>|</operator> <name>JSP_REGEX_SLINE</name> <operator>|</operator> <name>JSP_REGEX_WSPACE</name><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REG_ADVANCED</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>cflags</name></name> <operator>|=</operator> <name>REG_QUOTE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>RE_compile_and_execute</name><argument_list>(<argument><expr><name><name>cxt</name><operator>-&gt;</operator><name>regex</name></name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>,
							   <argument><expr><name><name>str</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>,
							   <argument><expr><name><name>cxt</name><operator>-&gt;</operator><name>cflags</name></name></expr></argument>, <argument><expr><name>DEFAULT_COLLATION_OID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>jpbTrue</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>jpbFalse</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Execute numeric item methods (.abs(), .floor(), .ceil()) using the specified
 * user function 'func'.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathExecResult</name></type>
<name>executeNumericItemMethod</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>,
						 <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>unwrap</name></decl></parameter>, <parameter><decl><type><name>PGFunction</name></type> <name>func</name></decl></parameter>,
						 <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonPathItem</name></type> <name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>datum</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>unwrap</name> <operator>&amp;&amp;</operator> <call><name>JsonbType</name><argument_list>(<argument><expr><name>jb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>jbvArray</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>executeItemUnwrapTargetArray</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>jb</name> <operator>=</operator> <call><name>getScalar</name><argument_list>(<argument><expr><name>jb</name></expr></argument>, <argument><expr><name>jbvNumeric</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							 <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NON_NUMERIC_JSON_ITEM</name></expr></argument>)</argument_list></call><operator>,</operator>
							  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"jsonpath item method .%s() can only be applied to a numeric value"</literal></expr></argument>,
									 <argument><expr><call><name>jspOperationName</name><argument_list>(<argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><name><name>jb</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jspGetNext</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>jperOk</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>jb</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>jb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jb</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>jbvNumeric</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jb</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator> <call><name>DatumGetNumeric</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Implementation of .keyvalue() method.
 *
 * .keyvalue() method returns a sequence of object's key-value pairs in the
 * following format: '{ "key": key, "value": value, "id": id }'.
 *
 * "id" field is an object identifier which is constructed from the two parts:
 * base object id and its binary offset in base object's jsonb:
 * id = 10000000000 * base_object_id + obj_offset_in_base_object
 *
 * 10000000000 (10^10) -- is a first round decimal number greater than 2^32
 * (maximal offset in jsonb).  Decimal multiplier is used here to improve the
 * readability of identifiers.
 *
 * Base object is usually a root object of the path: context item '$' or path
 * variable '$var', literals can't produce objects for now.  But if the path
 * contains generated objects (.keyvalue() itself, for example), then they
 * become base object for the subsequent .keyvalue().
 *
 * Id of '$' is 0. Id of '$var' is its ordinal (positive) number in the list
 * of variables (see getJsonPathVariable()).  Ids for generated objects
 * are assigned using global counter JsonPathExecContext.lastGeneratedObjectId.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathExecResult</name></type>
<name>executeKeyValueMethod</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>,
					  <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonPathExecResult</name></type> <name>res</name> <init>= <expr><name>jperNotFound</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPathItem</name></type> <name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbContainer</name> <modifier>*</modifier></type><name>jbc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>idval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>keystr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>valstr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>idstr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbIterator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbIteratorToken</name></type> <name>tok</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>hasNext</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>JsonbType</name><argument_list>(<argument><expr><name>jb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>jbvObject</name> <operator>||</operator> <name><name>jb</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>jbvBinary</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							 <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_JSON_OBJECT_NOT_FOUND</name></expr></argument>)</argument_list></call><operator>,</operator>
							  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"jsonpath item method .%s() can only be applied to an object"</literal></expr></argument>,
									 <argument><expr><call><name>jspOperationName</name><argument_list>(<argument><expr><name><name>jsp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>jbc</name> <operator>=</operator> <name><name>jb</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>binary</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>JsonContainerSize</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>jperNotFound</name></expr>;</return></block_content></block></if></if_stmt>	<comment type="block">/* no key-value pairs */</comment>

	<expr_stmt><expr><name>hasNext</name> <operator>=</operator> <call><name>jspGetNext</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>keystr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>keystr</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <literal type="string">"key"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>keystr</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>valstr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>valstr</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <literal type="string">"value"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>valstr</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>idstr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>idstr</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <literal type="string">"id"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>idstr</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<comment type="block">/* construct object id from its base object and offset inside that */</comment>
	<expr_stmt><expr><name>id</name> <operator>=</operator> <ternary><condition><expr><name><name>jb</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>jbvBinary</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:
		<expr><operator>(</operator><name>int64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>jbc</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>cxt</name><operator>-&gt;</operator><name>baseObject</name><operator>.</operator><name>jbc</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>id</name> <operator>+=</operator> <operator>(</operator><name>int64</name><operator>)</operator> <name><name>cxt</name><operator>-&gt;</operator><name>baseObject</name><operator>.</operator><name>id</name></name> <operator>*</operator> <call><name>INT64CONST</name><argument_list>(<argument><expr><literal type="number">10000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>idval</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvNumeric</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>idval</name><operator>.</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator> <call><name>DatumGetNumeric</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int8_numeric</name></expr></argument>,
															<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>JsonbIteratorInit</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>tok</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WJB_DONE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>JsonBaseObjectInfo</name></type> <name>baseObject</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>obj</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>keyval</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>jsonb</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <name>WJB_KEY</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>jperOk</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasNext</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tok</name> <operator>==</operator> <name>WJB_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ps</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>, <argument><expr><name>WJB_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>, <argument><expr><name>WJB_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>, <argument><expr><name>WJB_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>keyval</name> <operator>=</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>jsonb</name> <operator>=</operator> <call><name>JsonbValueToJsonb</name><argument_list>(<argument><expr><name>keyval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>JsonbInitBinary</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>jsonb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>baseObject</name> <operator>=</operator> <call><name>setBaseObject</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name><name>cxt</name><operator>-&gt;</operator><name>lastGeneratedObjectId</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>baseObject</name></name> <operator>=</operator> <name>baseObject</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>jperOk</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert boolean execution status 'res' to a boolean JSON item and execute
 * next jsonpath.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathExecResult</name></type>
<name>appendBoolResult</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>,
				 <parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>found</name></decl></parameter>, <parameter><decl><type><name>JsonPathBool</name></type> <name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonPathItem</name></type> <name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>jbv</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jspGetNext</name><argument_list>(<argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>jperOk</name></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* found singleton boolean value */</comment>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>jpbUnknown</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>jbv</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvNull</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>jbv</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvBool</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jbv</name><operator>.</operator><name>val</name><operator>.</operator><name>boolean</name></name> <operator>=</operator> <name>res</name> <operator>==</operator> <name>jpbTrue</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><call><name>executeNextItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert jsonpath's scalar or variable node to actual jsonb value.
 *
 * If node is a variable then its id returned, otherwise 0 returned.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>getJsonPathItem</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
				<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>jpiNull</name></expr>:</case>
			<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>jbvNull</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiBool</name></expr>:</case>
			<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>jbvBool</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>boolean</name></name> <operator>=</operator> <call><name>jspGetBool</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiNumeric</name></expr>:</case>
			<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>jbvNumeric</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator> <call><name>jspGetNumeric</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiString</name></expr>:</case>
			<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>jspGetString</name><argument_list>(<argument><expr><name>item</name></expr></argument>,
												 <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiVariable</name></expr>:</case>
			<expr_stmt><expr><call><name>getJsonPathVariable</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>cxt</name><operator>-&gt;</operator><name>vars</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected jsonpath item type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Get the value of variable passed to jsonpath executor
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>getJsonPathVariable</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>variable</name></decl></parameter>,
					<parameter><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>vars</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>varName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>varNameLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vars</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>jbvNull</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>variable</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiVariable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>varName</name> <operator>=</operator> <call><name>jspGetString</name><argument_list>(<argument><expr><name>variable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varNameLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>varName</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>varNameLength</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>findJsonbValueFromContainer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vars</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>JB_FOBJECT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <operator>*</operator><name>v</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not find jsonpath variable \"%s\""</literal></expr></argument>,
						<argument><expr><call><name>pnstrdup</name><argument_list>(<argument><expr><name>varName</name></expr></argument>, <argument><expr><name>varNameLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>JsonbInitBinary</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setBaseObject</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**************** Support functions for JsonPath execution *****************/</comment>

<comment type="block">/*
 * Returns the size of an array item, or -1 if item is not an array.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>JsonbArraySize</name><parameter_list>(<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>jb</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>jbvArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>jb</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jbvBinary</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>JsonbContainer</name> <modifier>*</modifier></type><name>jbc</name> <init>= <expr><name><name>jb</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>binary</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>JsonContainerIsArray</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>JsonContainerIsScalar</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>JsonContainerSize</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Comparison predicate callback. */</comment>
<function><type><specifier>static</specifier> <name>JsonPathBool</name></type>
<name>executeComparison</name><parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>cmp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>lv</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>rv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>compareItems</name><argument_list>(<argument><expr><name><name>cmp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compare two SQL/JSON items using comparison operation 'op'.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathBool</name></type>
<name>compareItems</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb1</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>jb1</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>jb2</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>jb1</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jbvNull</name> <operator>||</operator> <name><name>jb2</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jbvNull</name></expr>)</condition><block type="pseudo"><block_content>

			<comment type="block">/*
			 * Equality and order comparison of nulls to non-nulls returns
			 * always false, but inequality comparison returns true.
			 */</comment>
			<return>return <expr><ternary><condition><expr><name>op</name> <operator>==</operator> <name>jpiNotEqual</name></expr> ?</condition><then> <expr><name>jpbTrue</name></expr> </then><else>: <expr><name>jpbFalse</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* Non-null items of different types are not comparable. */</comment>
		<return>return <expr><name>jpbUnknown</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>jb1</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>jbvNull</name></expr>:</case>
			<expr_stmt><expr><name>cmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jbvBool</name></expr>:</case>
			<expr_stmt><expr><name>cmp</name> <operator>=</operator> <ternary><condition><expr><name><name>jb1</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>boolean</name></name> <operator>==</operator> <name><name>jb2</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>boolean</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:
				<expr><ternary><condition><expr><name><name>jb1</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>boolean</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jbvNumeric</name></expr>:</case>
			<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>compareNumeric</name><argument_list>(<argument><expr><name><name>jb1</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>, <argument><expr><name><name>jb2</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jbvString</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>jpiEqual</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><ternary><condition><expr><name><name>jb1</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name><name>jb2</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>||</operator>
					<call><name>memcmp</name><argument_list>(<argument><expr><name><name>jb1</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>,
						   <argument><expr><name><name>jb2</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>,
						   <argument><expr><name><name>jb1</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>jpbFalse</name></expr> </then><else>: <expr><name>jpbTrue</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>varstr_cmp</name><argument_list>(<argument><expr><name><name>jb1</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>jb1</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>,
							 <argument><expr><name><name>jb2</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>jb2</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>,
							 <argument><expr><name>DEFAULT_COLLATION_OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>jbvBinary</name></expr>:</case>
		<case>case <expr><name>jbvArray</name></expr>:</case>
		<case>case <expr><name>jbvObject</name></expr>:</case>
			<return>return <expr><name>jpbUnknown</name></expr>;</return>	<comment type="block">/* non-scalars are not comparable */</comment>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid jsonb value type %d"</literal></expr></argument>, <argument><expr><name><name>jb1</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<switch>switch <condition>(<expr><name>op</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>jpiEqual</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>cmp</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiNotEqual</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiLess</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiGreater</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiLessOrEqual</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>cmp</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiGreaterOrEqual</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>cmp</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized jsonpath operation: %d"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>jpbUnknown</name></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><ternary><condition><expr><name>res</name></expr> ?</condition><then> <expr><name>jpbTrue</name></expr> </then><else>: <expr><name>jpbFalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Compare two numerics */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compareNumeric</name><parameter_list>(<parameter><decl><type><name>Numeric</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Numeric</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_cmp</name></expr></argument>,
											 <argument><expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>copyJsonbValue</name><parameter_list>(<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>

	<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Execute array subscript expression and convert resulting numeric item to
 * the integer type with truncation.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonPathExecResult</name></type>
<name>getArrayIndex</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>jsp</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>,
			  <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jbv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonValueList</name></type> <name>found</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPathExecResult</name></type> <name>res</name> <init>= <expr><call><name>executeItem</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>jsp</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>numeric_index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>have_error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>jperIsError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>JsonValueListLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
		<operator>!</operator><operator>(</operator><name>jbv</name> <operator>=</operator> <call><name>getScalar</name><argument_list>(<argument><expr><call><name>JsonValueListHead</name><argument_list>(<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>jbvNumeric</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							 <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_JSON_SUBSCRIPT</name></expr></argument>)</argument_list></call><operator>,</operator>
							  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"jsonpath array subscript is not a single numeric value"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>numeric_index</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_trunc</name></expr></argument>,
										<argument><expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><name><name>jbv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>index</name> <operator>=</operator> <call><name>numeric_int4_opt_error</name><argument_list>(<argument><expr><call><name>DatumGetNumeric</name><argument_list>(<argument><expr><name>numeric_index</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>have_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>have_error</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							 <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_JSON_SUBSCRIPT</name></expr></argument>)</argument_list></call><operator>,</operator>
							  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"jsonpath array subscript is out of integer range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>jperOk</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Save base object and its id needed for the execution of .keyvalue(). */</comment>
<function><type><specifier>static</specifier> <name>JsonBaseObjectInfo</name></type>
<name>setBaseObject</name><parameter_list>(<parameter><decl><type><name>JsonPathExecContext</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jbv</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonBaseObjectInfo</name></type> <name>baseObject</name> <init>= <expr><name><name>cxt</name><operator>-&gt;</operator><name>baseObject</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>baseObject</name><operator>.</operator><name>jbc</name></name> <operator>=</operator> <ternary><condition><expr><name><name>jbv</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>jbvBinary</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>:
		<expr><operator>(</operator><name>JsonbContainer</name> <operator>*</operator><operator>)</operator> <name><name>jbv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>binary</name><operator>.</operator><name>data</name></name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>baseObject</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

	<return>return <expr><name>baseObject</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>JsonValueListAppend</name><parameter_list>(<parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>jvl</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jbv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>jvl</name><operator>-&gt;</operator><name>singleton</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>jvl</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name><name>jvl</name><operator>-&gt;</operator><name>singleton</name></name></expr></argument>, <argument><expr><name>jbv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jvl</name><operator>-&gt;</operator><name>singleton</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>jvl</name><operator>-&gt;</operator><name>list</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>jvl</name><operator>-&gt;</operator><name>singleton</name></name> <operator>=</operator> <name>jbv</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>jvl</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>jvl</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>jbv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>JsonValueListLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JsonValueList</name> <modifier>*</modifier></type><name>jvl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><name><name>jvl</name><operator>-&gt;</operator><name>singleton</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>jvl</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>JsonValueListIsEmpty</name><parameter_list>(<parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>jvl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>!</operator><name><name>jvl</name><operator>-&gt;</operator><name>singleton</name></name> <operator>&amp;&amp;</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>jvl</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>JsonValueListHead</name><parameter_list>(<parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>jvl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><name><name>jvl</name><operator>-&gt;</operator><name>singleton</name></name></expr> ?</condition><then> <expr><name><name>jvl</name><operator>-&gt;</operator><name>singleton</name></name></expr> </then><else>: <expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>jvl</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>JsonValueListGetList</name><parameter_list>(<parameter><decl><type><name>JsonValueList</name> <modifier>*</modifier></type><name>jvl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>jvl</name><operator>-&gt;</operator><name>singleton</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>list_make1</name><argument_list>(<argument><expr><name><name>jvl</name><operator>-&gt;</operator><name>singleton</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name><name>jvl</name><operator>-&gt;</operator><name>list</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>JsonValueListInitIterator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JsonValueList</name> <modifier>*</modifier></type><name>jvl</name></decl></parameter>, <parameter><decl><type><name>JsonValueListIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>jvl</name><operator>-&gt;</operator><name>singleton</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>jvl</name><operator>-&gt;</operator><name>singleton</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>list_head</name><argument_list>(<argument><expr><name><name>jvl</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>JsonbValue</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>jvl</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><call><name>list_head</name><argument_list>(<argument><expr><name><name>jvl</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get the next item from the sequence advancing iterator.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>JsonValueListNext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JsonValueList</name> <modifier>*</modifier></type><name>jvl</name></decl></parameter>, <parameter><decl><type><name>JsonValueListIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize a binary JsonbValue with the given jsonb container.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>JsonbInitBinary</name><parameter_list>(<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jbv</name></decl></parameter>, <parameter><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>jbv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>jbvBinary</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jbv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>binary</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>jb</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jbv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>binary</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>jb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>jbv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns jbv* type of of JsonbValue. Note, it never returns jbvBinary as is.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>JsonbType</name><parameter_list>(<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>type</name> <init>= <expr><name><name>jb</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>jb</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jbvBinary</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>JsonbContainer</name> <modifier>*</modifier></type><name>jbc</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>jb</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>binary</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Scalars should be always extracted during jsonpath execution. */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>JsonContainerIsScalar</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>JsonContainerIsObject</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>type</name> <operator>=</operator> <name>jbvObject</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>JsonContainerIsArray</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>type</name> <operator>=</operator> <name>jbvArray</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid jsonb container type: 0x%08x"</literal></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get scalar of given type or NULL on type mismatch */</comment>
<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>getScalar</name><parameter_list>(<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>scalar</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>jbvType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Scalars should be always extracted during jsonpath execution. */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>scalar</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>jbvBinary</name> <operator>||</operator>
		   <operator>!</operator><call><name>JsonContainerIsScalar</name><argument_list>(<argument><expr><name><name>scalar</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>binary</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><ternary><condition><expr><name><name>scalar</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr> ?</condition><then> <expr><name>scalar</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Construct a JSON array from the item list */</comment>
<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>wrapItemsInArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JsonValueList</name> <modifier>*</modifier></type><name>items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonValueListIterator</name></type> <name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jbv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>, <argument><expr><name>WJB_BEGIN_ARRAY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>JsonValueListInitIterator</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>jbv</name> <operator>=</operator> <call><name>JsonValueListNext</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>, <argument><expr><name>WJB_ELEM</name></expr></argument>, <argument><expr><name>jbv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

	<return>return <expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>, <argument><expr><name>WJB_END_ARRAY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
