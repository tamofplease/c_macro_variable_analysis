<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/adt/interpolate.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * interpolate.c
 *
 * Portions Copyright (c) 2012, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/utils/adt/interpolate.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/interpolate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>

<comment type="block">/* 
 * linterp_abscissa
 *
 * Common code that checks arguments.  The result is a floating point value
 * representing what fraction of the distance x lies along the interval from
 * x0 to x1.  It can be negative or greater than one (extrapolation) though
 * this isn't the intended use.  If x0 == x1, then the fraction is not
 * determined and the function returns 0 and sets *notnull false.  In all
 * other cases (except error exits) *notnull is set to true.  An additional
 * flag indicates whether the abscissa value is equal to the lower boundary
 * value.
 */</comment>
<function><type><specifier>static</specifier> <name>float8</name></type>
<name>linterp_abscissa</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_eq_bounds</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_eq_abscissas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>         <name>x_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>         <name>x0_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>         <name>x1_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>y0_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>y1_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type>		<name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>eq_bounds</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>eq_abscissas</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	
	<comment type="block">/* The abscissa (x) arguments are nominally declared anyelement.
	 * All the type checking is up to us.  We insist that the types
	 * are exactly alike.  Explicit casts may be needed.
	 */</comment>
	<expr_stmt><expr><name>x_type</name> <operator>=</operator> <call><name>get_fn_expr_argtype</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>x0_type</name> <operator>=</operator> <call><name>get_fn_expr_argtype</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1_type</name> <operator>=</operator> <call><name>get_fn_expr_argtype</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>x_type</name></expr></argument>)</argument_list></call><operator>||</operator><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>x0_type</name></expr></argument>)</argument_list></call><operator>||</operator><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>x1_type</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not determine argument data types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>( <expr><name>x_type</name><operator>!=</operator><name>x0_type</name> <operator>||</operator> <name>x_type</name><operator>!=</operator><name>x1_type</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"abscissa types unequal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<comment type="block">/* The ordinate (y) arguments are specifically declared in the SQL
	 * function declaration.  Here we just check and insist they are
	 * identical.
	 */</comment>
	<expr_stmt><expr><name>y0_type</name> <operator>=</operator> <call><name>get_fn_expr_argtype</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1_type</name> <operator>=</operator> <call><name>get_fn_expr_argtype</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>( <expr><name>y0_type</name> <operator>!=</operator>  <name>y1_type</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"mismatched ordinate types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name>x_type</name></expr>)</condition>
	<block>{<block_content>
	<case>case <expr><name>INT8OID</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>float8</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>float8</name></type> <name>x0</name> <init>= <expr><operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>float8</name></type> <name>x1</name> <init>= <expr><operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>( <expr><name>x1</name> <operator>==</operator> <name>x0</name></expr> )</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>eq_bounds</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>eq_abscissas</name> <operator>=</operator> <operator>(</operator> <name>x</name> <operator>==</operator> <name>x0</name> <operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>-</operator><name>x0</name><operator>)</operator><operator>/</operator><operator>(</operator><name>x1</name><operator>-</operator><name>x0</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block>
		<break>break;</break>
	<case>case <expr><name>INT4OID</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>float8</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>float8</name></type> <name>x0</name> <init>= <expr><operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>float8</name></type> <name>x1</name> <init>= <expr><operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>( <expr><name>x1</name> <operator>==</operator> <name>x0</name></expr> )</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>eq_bounds</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>eq_abscissas</name> <operator>=</operator> <operator>(</operator> <name>x</name> <operator>==</operator> <name>x0</name> <operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>-</operator><name>x0</name><operator>)</operator><operator>/</operator><operator>(</operator><name>x1</name><operator>-</operator><name>x0</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block>
		<break>break;</break>
	<case>case <expr><name>INT2OID</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>float8</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_INT16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>float8</name></type> <name>x0</name> <init>= <expr><operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_INT16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>float8</name></type> <name>x1</name> <init>= <expr><operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_INT16</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if_stmt><if>if <condition>( <expr><name>x1</name> <operator>==</operator> <name>x0</name></expr> )</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>eq_bounds</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>eq_abscissas</name> <operator>=</operator> <operator>(</operator> <name>x</name> <operator>==</operator> <name>x0</name> <operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>-</operator><name>x0</name><operator>)</operator><operator>/</operator><operator>(</operator><name>x1</name><operator>-</operator><name>x0</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block>
		<break>break;</break>
	<case>case <expr><name>FLOAT4OID</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>float8</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_FLOAT4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>float8</name></type> <name>x0</name> <init>= <expr><operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_FLOAT4</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>float8</name></type> <name>x1</name> <init>= <expr><operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_FLOAT4</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if_stmt><if>if <condition>( <expr><name>x1</name> <operator>==</operator> <name>x0</name></expr> )</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>eq_bounds</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>eq_abscissas</name> <operator>=</operator> <operator>(</operator> <name>x</name> <operator>==</operator> <name>x0</name> <operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>-</operator><name>x0</name><operator>)</operator><operator>/</operator><operator>(</operator><name>x1</name><operator>-</operator><name>x0</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block>
		<break>break;</break>
	<case>case <expr><name>FLOAT8OID</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>float8</name></type> <name>x</name> <init>= <expr><call><name>PG_GETARG_FLOAT8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>float8</name></type> <name>x0</name> <init>= <expr><call><name>PG_GETARG_FLOAT8</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>float8</name></type> <name>x1</name> <init>= <expr><call><name>PG_GETARG_FLOAT8</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if_stmt><if>if <condition>( <expr><name>x1</name> <operator>==</operator> <name>x0</name></expr> )</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>eq_bounds</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>eq_abscissas</name> <operator>=</operator> <operator>(</operator> <name>x</name> <operator>==</operator> <name>x0</name> <operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>-</operator><name>x0</name><operator>)</operator><operator>/</operator><operator>(</operator><name>x1</name><operator>-</operator><name>x0</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block>
		<break>break;</break>
	<case>case <expr><name>DATEOID</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>DateADT</name></type> <name>x</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>DateADT</name></type> <name>x0</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>DateADT</name></type> <name>x1</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int32</name></type> <name>x_x0</name> <init>= <expr><call><name>date_diff</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int32</name></type> <name>x1_x0</name> <init>= <expr><call><name>date_diff</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if_stmt><if>if <condition>( <expr><name>x1</name> <operator>==</operator> <name>x0</name></expr> )</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>eq_bounds</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>eq_abscissas</name> <operator>=</operator> <operator>(</operator> <name>x_x0</name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float8</name><operator>)</operator><name>x_x0</name><operator>)</operator><operator>/</operator><operator>(</operator><operator>(</operator><name>float8</name><operator>)</operator><name>x1_x0</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block>
		<break>break;</break>
	<case>case <expr><name>TIMEOID</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>TimeADT</name></type> <name>x</name> <init>= <expr><call><name>PG_GETARG_TIMEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>TimeADT</name></type> <name>x0</name> <init>= <expr><call><name>PG_GETARG_TIMEADT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>TimeADT</name></type> <name>x1</name> <init>= <expr><call><name>PG_GETARG_TIMEADT</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>time_li_fraction</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_abscissas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>
	<case>case <expr><name>TIMESTAMPOID</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Timestamp</name></type> <name>x</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Timestamp</name></type> <name>x0</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Timestamp</name></type> <name>x1</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMP</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>timestamp_li_fraction</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_abscissas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>
	<case>case <expr><name>TIMESTAMPTZOID</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>TimestampTz</name></type> <name>x</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMPTZ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>TimestampTz</name></type> <name>x0</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMPTZ</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>TimestampTz</name></type> <name>x1</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMPTZ</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>timestamptz_li_fraction</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_abscissas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>
	<case>case <expr><name>INTERVALOID</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type> <name>x</name> <init>= <expr><call><name>PG_GETARG_INTERVAL_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type> <name>x0</name> <init>= <expr><call><name>PG_GETARG_INTERVAL_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type> <name>x1</name> <init>= <expr><call><name>PG_GETARG_INTERVAL_P</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>interval_li_fraction</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_abscissas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>
	<case>case <expr><name>NUMERICOID</name></expr>:</case>    
		<block>{<block_content>
			<decl_stmt><decl><type><name>Numeric</name></type> <name>x</name> <init>= <expr><call><name>PG_GETARG_NUMERIC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Numeric</name></type> <name>x0</name> <init>= <expr><call><name>PG_GETARG_NUMERIC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Numeric</name></type> <name>x1</name> <init>= <expr><call><name>PG_GETARG_NUMERIC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>numeric_li_fraction</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_abscissas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"abscissa type not supported"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>( <expr><name>p_eq_bounds</name></expr> )</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>p_eq_bounds</name> <operator>=</operator> <name>eq_bounds</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<if_stmt><if>if <condition>( <expr><name>p_eq_abscissas</name></expr> )</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>p_eq_abscissas</name> <operator>=</operator> <name>eq_abscissas</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>




<comment type="block">/*
 * The anticipated declaration is as follows:
 *
    CREATE FUNCTION linear_interpolate(
            x anyelement,
            x0 anyelement,
            y0 T,
            x1 anyelement,
            y1 T
            ) 
        RETURNS T
        LANGUAGE internal IMMUTABLE STRICT;
        AS 'linterp_T'; 
 * 
 * We check this in the common code included in each linear 
 * interpolation function.  The common code eliminates duplication 
 * and deals with multiple data types (under the anyelement
 * declaration) to avoid the need to define a different function for 
 * each abscissa type.  The ordinate-type specific linear interpolation
 * functions follow.  Each is of the form
 *
	PG_FUNCTION_INFO_V1(linterp_T);
	Datum
	linterp_T(PG_FUNCTION_ARGS)
	{
		float8		p;
		T			result;
		
		// Common 
		p = linterp_abscissa(fcinfo, ...); // declared in PG_FUNCTION_ARGS
		
		// Ordinate type specific code
	
		PG_RETURN_T(result);
	}
 *
 * The Python script src/include/catalog/li_extras.py generates
 * declarations appropriate for src/include/catalog/pg_proc.sql
 * and the upgrade script upg2_catupgrade_XXX.sql as well as human-
 * readable and terse regression tests for make installcheck.
 */</comment>
 
<function><type><name>Datum</name></type>
<name>linterp_int64</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float8</name></type> <name>y0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>y1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_bounds</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_abscissas</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	
	<comment type="block">/* Common */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>linterp_abscissa</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_abscissas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Ordinate type specific code*/</comment>
	<expr_stmt><expr><name>y0</name> <operator>=</operator> <operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>( <expr><name>eq_bounds</name></expr> )</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>eq_abscissas</name> <operator>&amp;&amp;</operator> <name>y0</name> <operator>==</operator> <name>y1</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> 
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else 
	<block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><name>y0</name><operator>+</operator><name>p</name><operator>*</operator><operator>(</operator><name>y1</name><operator>-</operator><name>y0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><name><name>r</name> <argument_list type="generic">&lt; <argument><expr><name>LONG_MIN</name> <operator>||</operator> <name>r</name></expr></argument> &gt;</argument_list></name> <name>LONG_MAX</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"value \"%f\" is out of range for type bigint"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int64</name><operator>)</operator><name>r</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT64</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>linterp_int32</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float8</name></type> <name>y0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>y1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_bounds</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_abscissas</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	
	<comment type="block">/* Common */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>linterp_abscissa</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_abscissas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Ordinate type specific code*/</comment>
	<expr_stmt><expr><name>y0</name> <operator>=</operator> <operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>( <expr><name>eq_bounds</name></expr> )</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>eq_abscissas</name> <operator>&amp;&amp;</operator> <name>y0</name> <operator>==</operator> <name>y1</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> 
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else 
	<block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><name>y0</name><operator>+</operator><name>p</name><operator>*</operator><operator>(</operator><name>y1</name><operator>-</operator><name>y0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><name><name>r</name> <argument_list type="generic">&lt; <argument><expr><name>INT_MIN</name> <operator>||</operator> <name>r</name></expr></argument> &gt;</argument_list></name> <name>INT_MAX</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"value \"%f\" is out of range for type integer"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	
	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>linterp_int16</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float8</name></type> <name>y0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>y1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_bounds</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_abscissas</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	
	<comment type="block">/* Common */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>linterp_abscissa</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_abscissas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Ordinate type specific code*/</comment>
	<expr_stmt><expr><name>y0</name> <operator>=</operator> <operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_INT16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_INT16</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>( <expr><name>eq_bounds</name></expr> )</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>eq_abscissas</name> <operator>&amp;&amp;</operator> <name>y0</name> <operator>==</operator> <name>y1</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> 
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else 
	<block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><name>y0</name><operator>+</operator><name>p</name><operator>*</operator><operator>(</operator><name>y1</name><operator>-</operator><name>y0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><name><name>r</name> <argument_list type="generic">&lt; <argument><expr><name>SHRT_MIN</name> <operator>||</operator> <name>r</name></expr></argument> &gt;</argument_list></name> <name>SHRT_MAX</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"value \"%f\" is out of range for type smallint"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>	
	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int16</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_INT16</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>linterp_float8</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float8</name></type> <name>y0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>y1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_bounds</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_abscissas</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	
	<comment type="block">/* Common */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>linterp_abscissa</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_abscissas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Ordinate type specific code*/</comment>
	<expr_stmt><expr><name>y0</name> <operator>=</operator> <operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_FLOAT8</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_FLOAT8</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>( <expr><name>eq_bounds</name></expr> )</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>eq_abscissas</name> <operator>&amp;&amp;</operator> <name>y0</name> <operator>==</operator> <name>y1</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> 
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else 
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>float8</name><operator>)</operator><operator>(</operator><name>y0</name><operator>+</operator><name>p</name><operator>*</operator><operator>(</operator><name>y1</name><operator>-</operator><name>y0</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_FLOAT8</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>linterp_float4</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float8</name></type> <name>y0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>y1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float4</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_bounds</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_abscissas</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	
	<comment type="block">/* Common */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>linterp_abscissa</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_abscissas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Ordinate type specific code*/</comment>
	<expr_stmt><expr><name>y0</name> <operator>=</operator> <operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_FLOAT4</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <operator>(</operator><name>float8</name><operator>)</operator><call><name>PG_GETARG_FLOAT4</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>( <expr><name>eq_bounds</name></expr> )</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>eq_abscissas</name> <operator>&amp;&amp;</operator> <name>y0</name> <operator>==</operator> <name>y1</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> 
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else 
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>float4</name><operator>)</operator><operator>(</operator><name>y0</name><operator>+</operator><name>p</name><operator>*</operator><operator>(</operator><name>y1</name><operator>-</operator><name>y0</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	
	<expr_stmt><expr><call><name>PG_RETURN_FLOAT4</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>linterp_DateADT</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DateADT</name></type> <name>y0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DateADT</name></type> <name>y1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>dy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DateADT</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_bounds</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_abscissas</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	
	<comment type="block">/* Common */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>linterp_abscissa</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_abscissas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Ordinate type specific code*/</comment>
	<expr_stmt><expr><name>y0</name> <operator>=</operator> <call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dy</name> <operator>=</operator> <call><name>date_diff</name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>( <expr><name>eq_bounds</name></expr> )</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>eq_abscissas</name> <operator>&amp;&amp;</operator> <name>dy</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> 
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else 
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>date_pl_days</name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <operator>(</operator><name>p</name> <operator>*</operator> <operator>(</operator><name>float8</name><operator>)</operator> <name>dy</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATEADT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>linterp_TimeADT</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TimeADT</name></type>	<name>y0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeADT</name></type>	<name>y1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type>	<name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeADT</name></type>	<name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_bounds</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_abscissas</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	
	<comment type="block">/* Common */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>linterp_abscissa</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_abscissas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Ordinate type specific code*/</comment>
	<expr_stmt><expr><name>y0</name> <operator>=</operator> <call><name>PG_GETARG_TIMEADT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <call><name>PG_GETARG_TIMEADT</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>( <expr><name>eq_bounds</name></expr> )</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>eq_abscissas</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>y0</name> <operator>==</operator> <name>y1</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else 
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>time_li_value</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TIMEADT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>linterp_Timestamp</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float8</name></type>	<name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Timestamp</name></type> <name>y0</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Timestamp</name></type> <name>y1</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMP</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Timestamp</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_bounds</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_abscissas</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	
	<comment type="block">/* Common */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>linterp_abscissa</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_abscissas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Ordinate type specific code*/</comment>
	<if_stmt><if>if <condition>( <expr><name>eq_bounds</name></expr> )</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>eq_abscissas</name> <operator>&amp;&amp;</operator> <call><name>timestamp_cmp_internal</name><argument_list>(<argument><expr><name>y0</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else 
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>timestamp_li_value</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TIMESTAMP</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>linterp_TimestampTz</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float8</name></type>	<name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimestampTz</name></type>	<name>y0</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimestampTz</name></type>	<name>y1</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMP</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimestampTz</name></type>	<name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_bounds</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_abscissas</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	
	<comment type="block">/* Common */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>linterp_abscissa</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_abscissas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Ordinate type specific code*/</comment>
	<if_stmt><if>if <condition>( <expr><name>eq_bounds</name></expr> )</condition>
	<block>{<block_content>
		<comment type="block">/* Internally, TSTZ is like TS, UTC is stored. */</comment>
		<if_stmt><if>if <condition>( <expr><name>eq_abscissas</name> <operator>&amp;&amp;</operator> <call><name>timestamp_cmp_internal</name><argument_list>(<argument><expr><name>y0</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else 
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>timestamptz_li_value</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	
	<expr_stmt><expr><call><name>PG_RETURN_TIMESTAMPTZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>linterp_Interval</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float8</name></type>	<name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type><name>y0</name> <init>= <expr><call><name>PG_GETARG_INTERVAL_P</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type><name>y1</name> <init>= <expr><call><name>PG_GETARG_INTERVAL_P</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_bounds</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_abscissas</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	
	<comment type="block">/* Common */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>linterp_abscissa</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_abscissas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Ordinate type specific code*/</comment>
	<if_stmt><if>if <condition>( <expr><name>eq_bounds</name></expr> )</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>eq_abscissas</name> <operator>&amp;&amp;</operator> <call><name>interval_cmp_internal</name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else 
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>interval_li_value</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	
	<expr_stmt><expr><call><name>PG_RETURN_INTERVAL_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>linterp_Numeric</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float8</name></type> <name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Numeric</name></type>	<name>y0</name> <init>= <expr><call><name>PG_GETARG_NUMERIC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Numeric</name></type>	<name>y1</name> <init>= <expr><call><name>PG_GETARG_NUMERIC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Numeric</name></type>	<name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_bounds</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq_abscissas</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	
	<comment type="block">/* Common */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>linterp_abscissa</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_bounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eq_abscissas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Ordinate type specific code*/</comment>
	<if_stmt><if>if <condition>( <expr><name>eq_bounds</name></expr> )</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>eq_abscissas</name> <operator>&amp;&amp;</operator> <call><name>cmp_numerics</name><argument_list>(<argument><expr><name>y0</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else 
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>numeric_li_value</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	
	<expr_stmt><expr><call><name>PG_RETURN_NUMERIC</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


</unit>
