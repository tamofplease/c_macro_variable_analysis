<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/adt/jsonpath.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * jsonpath.c
 *	 Input/output and supporting routines for jsonpath
 *
 * jsonpath expression is a chain of path items.  First path item is $, $var,
 * literal or arithmetic expression.  Subsequent path items are accessors
 * (.key, .*, [subscripts], [*]), filters (? (predicate)) and methods (.type(),
 * .size() etc).
 *
 * For instance, structure of path items for simple expression:
 *
 *		$.a[*].type()
 *
 * is pretty evident:
 *
 *		$ =&gt; .a =&gt; [*] =&gt; .type()
 *
 * Some path items such as arithmetic operations, predicates or array
 * subscripts may comprise subtrees.  For instance, more complex expression
 *
 *		($.a + $[1 to 5, 7] ? (@ &gt; 3).double()).type()
 *
 * have following structure of path items:
 *
 *			  +  =&gt;  .type()
 *		  ___/ \___
 *		 /		   \
 *		$ =&gt; .a 	$  =&gt;  []  =&gt;	?  =&gt;  .double()
 *						  _||_		|
 *						 /	  \ 	&gt;
 *						to	  to   / \
 *					   / \	  /   @   3
 *					  1   5  7
 *
 * Binary encoding of jsonpath constitutes a sequence of 4-bytes aligned
 * variable-length path items connected by links.  Every item has a header
 * consisting of item type (enum JsonPathItemType) and offset of next item
 * (zero means no next item).  After the header, item may have payload
 * depending on item type.  For instance, payload of '.key' accessor item is
 * length of key name and key name itself.  Payload of '&gt;' arithmetic operator
 * item is offsets of right and left operands.
 *
 * So, binary representation of sample expression above is:
 * (bottom arrows are next links, top lines are argument links)
 *
 *								  _____
 *		 _____				  ___/____ \				__
 *	  _ /_	  \ 		_____/__/____ \ \	   __    _ /_ \
 *	 / /  \    \	   /	/  /	 \ \ \ 	  /  \  / /  \ \
 * +(LR)  $ .a	$  [](* to *, * to *) 1 5 7 ?(A)  &gt;(LR)   @ 3 .double() .type()
 * |	  |  ^	|  ^|						 ^|					  ^		   ^
 * |	  |__|	|__||________________________||___________________|		   |
 * |_______________________________________________________________________|
 *
 * Copyright (c) 2019, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	src/backend/utils/adt/jsonpath.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/jsonpath.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>jsonPathFromCstring</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>jsonPathToCstring</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>JsonPath</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
							   <parameter><decl><type><name>int</name></type> <name>estimated_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>flattenJsonPathParseItem</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>JsonPathParseItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
									 <parameter><decl><type><name>int</name></type> <name>nestingLevel</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>insideArraySubscript</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>alignStringInfoInt</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>reserveSpaceForItemPointer</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>printJsonPathItem</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inKey</name></decl></parameter>,
							  <parameter><decl><type><name>bool</name></type> <name>printBracketes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>operationPriority</name><parameter_list>(<parameter><decl><type><name>JsonPathItemType</name></type> <name>op</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block" format="doxygen">/**************************** INPUT/OUTPUT ********************************/</comment>

<comment type="block">/*
 * jsonpath type input function
 */</comment>
<function><type><name>Datum</name></type>
<name>jsonpath_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>jsonPathFromCstring</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * jsonpath type recv function
 *
 * The type is sent as text in binary mode, so this is almost the same
 * as the input function, but it's prefixed with a version number so we
 * can change the binary format sent in future if necessary. For now,
 * only version 1 is supported.
 */</comment>
<function><type><name>Datum</name></type>
<name>jsonpath_recv</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type>	<name>buf</name> <init>= <expr><operator>(</operator><name>StringInfo</name><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>version</name> <init>= <expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nbytes</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <name>JSONPATH_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>pq_getmsgtext</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported jsonpath version number: %d"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><call><name>jsonPathFromCstring</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * jsonpath type output function
 */</comment>
<function><type><name>Datum</name></type>
<name>jsonpath_out</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonPath</name>   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_JSONPATH_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_CSTRING</name><argument_list>(<argument><expr><call><name>jsonPathToCstring</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * jsonpath type send function
 *
 * Just send jsonpath as a version number, then a string of text
 */</comment>
<function><type><name>Datum</name></type>
<name>jsonpath_send</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonPath</name>   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_JSONPATH_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>jtext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>version</name> <init>= <expr><name>JSONPATH_VERSION</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>jsonPathToCstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jtext</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pq_begintypsend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendint8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendtext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>jtext</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>jtext</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>jtext</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BYTEA_P</name><argument_list>(<argument><expr><call><name>pq_endtypsend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Converts C-string to a jsonpath value.
 *
 * Uses jsonpath parser to turn string into an AST, then
 * flattenJsonPathParseItem() does second pass turning AST into binary
 * representation of jsonpath.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>jsonPathFromCstring</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonPathParseResult</name> <modifier>*</modifier></type><name>jsonpath</name> <init>= <expr><call><name>parsejsonpath</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPath</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enlargeStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>len</name></expr></argument> <comment type="block">/* estimation */</comment> )</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>appendStringInfoSpaces</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>JSONPATH_HDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jsonpath</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid input syntax for type %s: \"%s\""</literal></expr></argument>, <argument><expr><literal type="string">"jsonpath"</literal></expr></argument>,
						<argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>flattenJsonPathParseItem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>jsonpath</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>JsonPath</name> <operator>*</operator><operator>)</operator> <name><name>buf</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>JSONPATH_VERSION</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>jsonpath</name><operator>-&gt;</operator><name>lax</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>header</name></name> <operator>|=</operator> <name>JSONPATH_LAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_JSONPATH_P</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Converts jsonpath value to a C-string.
 *
 * If 'out' argument is non-null, the resulting C-string is stored inside the
 * StringBuffer.  The resulting string is always returned.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>jsonPathToCstring</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>JsonPath</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>estimated_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonPathItem</name></type> <name>v</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>&amp;</operator><name>buf</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>enlargeStringInfo</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>estimated_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>header</name></name> <operator>&amp;</operator> <name>JSONPATH_LAX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"strict "</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>jspInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printJsonPathItem</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Recursive function converting given jsonpath parse item and all its
 * children into a binary representation.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>flattenJsonPathParseItem</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>JsonPathParseItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
						 <parameter><decl><type><name>int</name></type> <name>nestingLevel</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>insideArraySubscript</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* position from beginning of jsonpath data */</comment>
	<decl_stmt><decl><type><name>int32</name></type>		<name>pos</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>JSONPATH_HDRSZ</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>chld</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>argNestingLevel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We align buffer to int32 because a series of int32 values often goes
	 * after the header, and we want to read them directly by dereferencing
	 * int32 pointer (see jspInitByBuffer()).
	 */</comment>
	<expr_stmt><expr><call><name>alignStringInfoInt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Reserve space for next item pointer.  Actual value will be recorded
	 * later, after next and children items processing.
	 */</comment>
	<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>reserveSpaceForItemPointer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>jpiString</name></expr>:</case>
		<case>case <expr><name>jpiVariable</name></expr>:</case>
		<case>case <expr><name>jpiKey</name></expr>:</case>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>,
								   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>,
								   <argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiNumeric</name></expr>:</case>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>numeric</name></name></expr></argument>,
								   <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>numeric</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiBool</name></expr>:</case>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>boolean</name></name></expr></argument>,
								   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>boolean</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiAnd</name></expr>:</case>
		<case>case <expr><name>jpiOr</name></expr>:</case>
		<case>case <expr><name>jpiEqual</name></expr>:</case>
		<case>case <expr><name>jpiNotEqual</name></expr>:</case>
		<case>case <expr><name>jpiLess</name></expr>:</case>
		<case>case <expr><name>jpiGreater</name></expr>:</case>
		<case>case <expr><name>jpiLessOrEqual</name></expr>:</case>
		<case>case <expr><name>jpiGreaterOrEqual</name></expr>:</case>
		<case>case <expr><name>jpiAdd</name></expr>:</case>
		<case>case <expr><name>jpiSub</name></expr>:</case>
		<case>case <expr><name>jpiMul</name></expr>:</case>
		<case>case <expr><name>jpiDiv</name></expr>:</case>
		<case>case <expr><name>jpiMod</name></expr>:</case>
		<case>case <expr><name>jpiStartsWith</name></expr>:</case>
			<block>{<block_content>
				<comment type="block">/*
				 * First, reserve place for left/right arg's positions, then
				 * record both args and sets actual position in reserved
				 * places.
				 */</comment>
				<decl_stmt><decl><type><name>int32</name></type>		<name>left</name> <init>= <expr><call><name>reserveSpaceForItemPointer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int32</name></type>		<name>right</name> <init>= <expr><call><name>reserveSpaceForItemPointer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>chld</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>args</name><operator>.</operator><name>left</name></name></expr> ?</condition><then> <expr><name>pos</name></expr> </then><else>:
					<expr><call><name>flattenJsonPathParseItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>args</name><operator>.</operator><name>left</name></name></expr></argument>,
											 <argument><expr><name>nestingLevel</name> <operator>+</operator> <name>argNestingLevel</name></expr></argument>,
											 <argument><expr><name>insideArraySubscript</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>left</name><operator>)</operator> <operator>=</operator> <name>chld</name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>

				<expr_stmt><expr><name>chld</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>args</name><operator>.</operator><name>right</name></name></expr> ?</condition><then> <expr><name>pos</name></expr> </then><else>:
					<expr><call><name>flattenJsonPathParseItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>args</name><operator>.</operator><name>right</name></name></expr></argument>,
											 <argument><expr><name>nestingLevel</name> <operator>+</operator> <name>argNestingLevel</name></expr></argument>,
											 <argument><expr><name>insideArraySubscript</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>right</name><operator>)</operator> <operator>=</operator> <name>chld</name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>jpiLikeRegex</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int32</name></type>		<name>offs</name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
									   <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>flags</name></name></expr></argument>,
									   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>offs</name> <operator>=</operator> <call><name>reserveSpaceForItemPointer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
									   <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>patternlen</name></name></expr></argument>,
									   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>patternlen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>pattern</name></name></expr></argument>,
									   <argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>patternlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>chld</name> <operator>=</operator> <call><name>flattenJsonPathParseItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>expr</name></name></expr></argument>,
												<argument><expr><name>nestingLevel</name></expr></argument>,
												<argument><expr><name>insideArraySubscript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offs</name><operator>)</operator> <operator>=</operator> <name>chld</name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>jpiFilter</name></expr>:</case>
			<expr_stmt><expr><name>argNestingLevel</name><operator>++</operator></expr>;</expr_stmt>
			<comment type="block">/* FALLTHROUGH */</comment>
		<case>case <expr><name>jpiIsUnknown</name></expr>:</case>
		<case>case <expr><name>jpiNot</name></expr>:</case>
		<case>case <expr><name>jpiPlus</name></expr>:</case>
		<case>case <expr><name>jpiMinus</name></expr>:</case>
		<case>case <expr><name>jpiExists</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int32</name></type>		<name>arg</name> <init>= <expr><call><name>reserveSpaceForItemPointer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>chld</name> <operator>=</operator> <call><name>flattenJsonPathParseItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>arg</name></name></expr></argument>,
												<argument><expr><name>nestingLevel</name> <operator>+</operator> <name>argNestingLevel</name></expr></argument>,
												<argument><expr><name>insideArraySubscript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>arg</name><operator>)</operator> <operator>=</operator> <name>chld</name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>jpiNull</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>jpiRoot</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>jpiAnyArray</name></expr>:</case>
		<case>case <expr><name>jpiAnyKey</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>jpiCurrent</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>nestingLevel</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"@ is not allowed in root expressions"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiLast</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>insideArraySubscript</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"LAST is allowed only in array subscripts"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiIndexArray</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int32</name></type>		<name>nelems</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>array</name><operator>.</operator><name>nelems</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>offset</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>nelems</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nelems</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>appendStringInfoSpaces</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>nelems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nelems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>ppos</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int32</name></type>		<name>topos</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int32</name></type>		<name>frompos</name> <init>=
					<expr><call><name>flattenJsonPathParseItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
											 <argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>array</name><operator>.</operator><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></argument>,
											 <argument><expr><name>nestingLevel</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pos</name></expr></init></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>array</name><operator>.</operator><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>topos</name> <operator>=</operator> <call><name>flattenJsonPathParseItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
														 <argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>array</name><operator>.</operator><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></argument>,
														 <argument><expr><name>nestingLevel</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name>topos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<expr_stmt><expr><name>ppos</name> <operator>=</operator> <operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>ppos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>frompos</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>ppos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>topos</name></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>jpiAny</name></expr>:</case>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
								   <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>first</name></name></expr></argument>,
								   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
								   <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>last</name></name></expr></argument>,
								   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>last</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiType</name></expr>:</case>
		<case>case <expr><name>jpiSize</name></expr>:</case>
		<case>case <expr><name>jpiAbs</name></expr>:</case>
		<case>case <expr><name>jpiFloor</name></expr>:</case>
		<case>case <expr><name>jpiCeiling</name></expr>:</case>
		<case>case <expr><name>jpiDouble</name></expr>:</case>
		<case>case <expr><name>jpiKeyValue</name></expr>:</case>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized jsonpath item type: %d"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>chld</name> <operator>=</operator> <call><name>flattenJsonPathParseItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>nestingLevel</name></expr></argument>,
										<argument><expr><name>insideArraySubscript</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>next</name><operator>)</operator> <operator>=</operator> <name>chld</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Align StringInfo to int by adding zero padding bytes
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>alignStringInfoInt</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><call><name>INTALIGN</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">3</literal></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoCharMacro</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* FALLTHROUGH */</comment>
		<case>case <expr><literal type="number">2</literal></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoCharMacro</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* FALLTHROUGH */</comment>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoCharMacro</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* FALLTHROUGH */</comment>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Reserve space for int32 JsonPathItem pointer.  Now zero pointer is written,
 * actual value will be recorded at '(int32 *) &amp;buf-&gt;data[pos]' later.
 */</comment>
<function><type><specifier>static</specifier> <name>int32</name></type>
<name>reserveSpaceForItemPointer</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>pos</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Prints text representation of given jsonpath item and all its children.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>printJsonPathItem</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inKey</name></decl></parameter>,
				  <parameter><decl><type><name>bool</name></type> <name>printBracketes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonPathItem</name></type> <name>elem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>jpiNull</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiKey</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>inKey</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>escape_json</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>jspGetString</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiString</name></expr>:</case>
			<expr_stmt><expr><call><name>escape_json</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>jspGetString</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiVariable</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>escape_json</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>jspGetString</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiNumeric</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
								   <argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_out</name></expr></argument>,
																	   <argument><expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><call><name>jspGetNumeric</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiBool</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>jspGetBool</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiAnd</name></expr>:</case>
		<case>case <expr><name>jpiOr</name></expr>:</case>
		<case>case <expr><name>jpiEqual</name></expr>:</case>
		<case>case <expr><name>jpiNotEqual</name></expr>:</case>
		<case>case <expr><name>jpiLess</name></expr>:</case>
		<case>case <expr><name>jpiGreater</name></expr>:</case>
		<case>case <expr><name>jpiLessOrEqual</name></expr>:</case>
		<case>case <expr><name>jpiGreaterOrEqual</name></expr>:</case>
		<case>case <expr><name>jpiAdd</name></expr>:</case>
		<case>case <expr><name>jpiSub</name></expr>:</case>
		<case>case <expr><name>jpiMul</name></expr>:</case>
		<case>case <expr><name>jpiDiv</name></expr>:</case>
		<case>case <expr><name>jpiMod</name></expr>:</case>
		<case>case <expr><name>jpiStartsWith</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>printBracketes</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>jspGetLeftArg</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printJsonPathItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
							  <argument><expr><call><name>operationPriority</name><argument_list>(<argument><expr><name><name>elem</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator>
							  <call><name>operationPriority</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>jspOperationName</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jspGetRightArg</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printJsonPathItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
							  <argument><expr><call><name>operationPriority</name><argument_list>(<argument><expr><name><name>elem</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator>
							  <call><name>operationPriority</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>printBracketes</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiLikeRegex</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>printBracketes</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>jspInitByBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printJsonPathItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
							  <argument><expr><call><name>operationPriority</name><argument_list>(<argument><expr><name><name>elem</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator>
							  <call><name>operationPriority</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" like_regex "</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>escape_json</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>flags</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" flag \""</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>JSP_REGEX_ICASE</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>JSP_REGEX_SLINE</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>JSP_REGEX_MLINE</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>JSP_REGEX_WSPACE</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>JSP_REGEX_QUOTE</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>printBracketes</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiPlus</name></expr>:</case>
		<case>case <expr><name>jpiMinus</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>printBracketes</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiPlus</name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jspGetArg</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printJsonPathItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
							  <argument><expr><call><name>operationPriority</name><argument_list>(<argument><expr><name><name>elem</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator>
							  <call><name>operationPriority</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>printBracketes</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiFilter</name></expr>:</case>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"?("</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jspGetArg</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printJsonPathItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiNot</name></expr>:</case>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"!("</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jspGetArg</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printJsonPathItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiIsUnknown</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jspGetArg</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printJsonPathItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">") is unknown"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiExists</name></expr>:</case>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"exists ("</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jspGetArg</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printJsonPathItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiCurrent</name></expr>:</case>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>inKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiRoot</name></expr>:</case>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>inKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiLast</name></expr>:</case>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"last"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiAnyArray</name></expr>:</case>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"[*]"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiAnyKey</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>inKey</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiIndexArray</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>array</name><operator>.</operator><name>nelems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>JsonPathItem</name></type> <name>from</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>JsonPathItem</name></type> <name>to</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type>		<name>range</name> <init>= <expr><call><name>jspGetArraySubscript</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>printJsonPathItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>range</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" to "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>printJsonPathItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiAny</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>inKey</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
				<name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>last</name></name> <operator>==</operator> <name>PG_UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"**"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>first</name></name> <operator>==</operator> <name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>last</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>first</name></name> <operator>==</operator> <name>PG_UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"**{last}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"**{%u}"</literal></expr></argument>,
									 <argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>first</name></name> <operator>==</operator> <name>PG_UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"**{last to %u}"</literal></expr></argument>,
								 <argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>last</name></name> <operator>==</operator> <name>PG_UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"**{%u to last}"</literal></expr></argument>,
								 <argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"**{%u to %u}"</literal></expr></argument>,
								 <argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>first</name></name></expr></argument>,
								 <argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiType</name></expr>:</case>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">".type()"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiSize</name></expr>:</case>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">".size()"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiAbs</name></expr>:</case>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">".abs()"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiFloor</name></expr>:</case>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">".floor()"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiCeiling</name></expr>:</case>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">".ceiling()"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiDouble</name></expr>:</case>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">".double()"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiKeyValue</name></expr>:</case>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">".keyvalue()"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized jsonpath item type: %d"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><call><name>jspGetNext</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printJsonPathItem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>jspOperationName</name><parameter_list>(<parameter><decl><type><name>JsonPathItemType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>jpiAnd</name></expr>:</case>
			<return>return <expr><literal type="string">"&amp;&amp;"</literal></expr>;</return>
		<case>case <expr><name>jpiOr</name></expr>:</case>
			<return>return <expr><literal type="string">"||"</literal></expr>;</return>
		<case>case <expr><name>jpiEqual</name></expr>:</case>
			<return>return <expr><literal type="string">"=="</literal></expr>;</return>
		<case>case <expr><name>jpiNotEqual</name></expr>:</case>
			<return>return <expr><literal type="string">"!="</literal></expr>;</return>
		<case>case <expr><name>jpiLess</name></expr>:</case>
			<return>return <expr><literal type="string">"&lt;"</literal></expr>;</return>
		<case>case <expr><name>jpiGreater</name></expr>:</case>
			<return>return <expr><literal type="string">"&gt;"</literal></expr>;</return>
		<case>case <expr><name>jpiLessOrEqual</name></expr>:</case>
			<return>return <expr><literal type="string">"&lt;="</literal></expr>;</return>
		<case>case <expr><name>jpiGreaterOrEqual</name></expr>:</case>
			<return>return <expr><literal type="string">"&gt;="</literal></expr>;</return>
		<case>case <expr><name>jpiPlus</name></expr>:</case>
		<case>case <expr><name>jpiAdd</name></expr>:</case>
			<return>return <expr><literal type="string">"+"</literal></expr>;</return>
		<case>case <expr><name>jpiMinus</name></expr>:</case>
		<case>case <expr><name>jpiSub</name></expr>:</case>
			<return>return <expr><literal type="string">"-"</literal></expr>;</return>
		<case>case <expr><name>jpiMul</name></expr>:</case>
			<return>return <expr><literal type="string">"*"</literal></expr>;</return>
		<case>case <expr><name>jpiDiv</name></expr>:</case>
			<return>return <expr><literal type="string">"/"</literal></expr>;</return>
		<case>case <expr><name>jpiMod</name></expr>:</case>
			<return>return <expr><literal type="string">"%"</literal></expr>;</return>
		<case>case <expr><name>jpiStartsWith</name></expr>:</case>
			<return>return <expr><literal type="string">"starts with"</literal></expr>;</return>
		<case>case <expr><name>jpiLikeRegex</name></expr>:</case>
			<return>return <expr><literal type="string">"like_regex"</literal></expr>;</return>
		<case>case <expr><name>jpiType</name></expr>:</case>
			<return>return <expr><literal type="string">"type"</literal></expr>;</return>
		<case>case <expr><name>jpiSize</name></expr>:</case>
			<return>return <expr><literal type="string">"size"</literal></expr>;</return>
		<case>case <expr><name>jpiKeyValue</name></expr>:</case>
			<return>return <expr><literal type="string">"keyvalue"</literal></expr>;</return>
		<case>case <expr><name>jpiDouble</name></expr>:</case>
			<return>return <expr><literal type="string">"double"</literal></expr>;</return>
		<case>case <expr><name>jpiAbs</name></expr>:</case>
			<return>return <expr><literal type="string">"abs"</literal></expr>;</return>
		<case>case <expr><name>jpiFloor</name></expr>:</case>
			<return>return <expr><literal type="string">"floor"</literal></expr>;</return>
		<case>case <expr><name>jpiCeiling</name></expr>:</case>
			<return>return <expr><literal type="string">"ceiling"</literal></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized jsonpath item type: %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>operationPriority</name><parameter_list>(<parameter><decl><type><name>JsonPathItemType</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>op</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>jpiOr</name></expr>:</case>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		<case>case <expr><name>jpiAnd</name></expr>:</case>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		<case>case <expr><name>jpiEqual</name></expr>:</case>
		<case>case <expr><name>jpiNotEqual</name></expr>:</case>
		<case>case <expr><name>jpiLess</name></expr>:</case>
		<case>case <expr><name>jpiGreater</name></expr>:</case>
		<case>case <expr><name>jpiLessOrEqual</name></expr>:</case>
		<case>case <expr><name>jpiGreaterOrEqual</name></expr>:</case>
		<case>case <expr><name>jpiStartsWith</name></expr>:</case>
			<return>return <expr><literal type="number">2</literal></expr>;</return>
		<case>case <expr><name>jpiAdd</name></expr>:</case>
		<case>case <expr><name>jpiSub</name></expr>:</case>
			<return>return <expr><literal type="number">3</literal></expr>;</return>
		<case>case <expr><name>jpiMul</name></expr>:</case>
		<case>case <expr><name>jpiDiv</name></expr>:</case>
		<case>case <expr><name>jpiMod</name></expr>:</case>
			<return>return <expr><literal type="number">4</literal></expr>;</return>
		<case>case <expr><name>jpiPlus</name></expr>:</case>
		<case>case <expr><name>jpiMinus</name></expr>:</case>
			<return>return <expr><literal type="number">5</literal></expr>;</return>
		<default>default:</default>
			<return>return <expr><literal type="number">6</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************* Support functions for JsonPath *************************/</comment>

<comment type="block">/*
 * Support macros to read stored values
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_byte</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {			\
	(v) = *(uint8*)((b) + (p));			\
	(p) += 1;							\
} while(0)								\

#define read_int32(v, b, p) do {		\
	(v) = *(uint32*)((b) + (p));		\
	(p) += sizeof(int32);				\
} while(0)								\

#define read_int32_n(v, b, p, n) do {	\
	(v) = (void *)((b) + (p));			\
	(p) += sizeof(int32) * (n);			\
} while(0)</cpp:value></cpp:define>								\

<comment type="block">/*
 * Read root node and fill root node representation
 */</comment>
<function><type><name>void</name></type>
<name>jspInit</name><parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>JsonPath</name> <modifier>*</modifier></type><name>js</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>js</name><operator>-&gt;</operator><name>header</name></name> <operator>&amp;</operator> <operator>~</operator><name>JSONPATH_LAX</name><operator>)</operator> <operator>==</operator> <name>JSONPATH_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jspInitByBuffer</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>js</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read node from buffer and fill its representation
 */</comment>
<function><type><name>void</name></type>
<name>jspInitByBuffer</name><parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name> <operator>+</operator> <name>pos</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>read_byte</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>INTALIGN</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator> <operator>(</operator><name>base</name> <operator>+</operator> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>base</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>read_int32</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nextPos</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>jpiNull</name></expr>:</case>
		<case>case <expr><name>jpiRoot</name></expr>:</case>
		<case>case <expr><name>jpiCurrent</name></expr>:</case>
		<case>case <expr><name>jpiAnyArray</name></expr>:</case>
		<case>case <expr><name>jpiAnyKey</name></expr>:</case>
		<case>case <expr><name>jpiType</name></expr>:</case>
		<case>case <expr><name>jpiSize</name></expr>:</case>
		<case>case <expr><name>jpiAbs</name></expr>:</case>
		<case>case <expr><name>jpiFloor</name></expr>:</case>
		<case>case <expr><name>jpiCeiling</name></expr>:</case>
		<case>case <expr><name>jpiDouble</name></expr>:</case>
		<case>case <expr><name>jpiKeyValue</name></expr>:</case>
		<case>case <expr><name>jpiLast</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>jpiKey</name></expr>:</case>
		<case>case <expr><name>jpiString</name></expr>:</case>
		<case>case <expr><name>jpiVariable</name></expr>:</case>
			<expr_stmt><expr><call><name>read_int32</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>value</name><operator>.</operator><name>datalen</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* FALLTHROUGH */</comment>
		<case>case <expr><name>jpiNumeric</name></expr>:</case>
		<case>case <expr><name>jpiBool</name></expr>:</case>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>value</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>base</name> <operator>+</operator> <name>pos</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiAnd</name></expr>:</case>
		<case>case <expr><name>jpiOr</name></expr>:</case>
		<case>case <expr><name>jpiAdd</name></expr>:</case>
		<case>case <expr><name>jpiSub</name></expr>:</case>
		<case>case <expr><name>jpiMul</name></expr>:</case>
		<case>case <expr><name>jpiDiv</name></expr>:</case>
		<case>case <expr><name>jpiMod</name></expr>:</case>
		<case>case <expr><name>jpiEqual</name></expr>:</case>
		<case>case <expr><name>jpiNotEqual</name></expr>:</case>
		<case>case <expr><name>jpiLess</name></expr>:</case>
		<case>case <expr><name>jpiGreater</name></expr>:</case>
		<case>case <expr><name>jpiLessOrEqual</name></expr>:</case>
		<case>case <expr><name>jpiGreaterOrEqual</name></expr>:</case>
		<case>case <expr><name>jpiStartsWith</name></expr>:</case>
			<expr_stmt><expr><call><name>read_int32</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>args</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>read_int32</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>args</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiLikeRegex</name></expr>:</case>
			<expr_stmt><expr><call><name>read_int32</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>flags</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>read_int32</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>expr</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>read_int32</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>patternlen</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>like_regex</name><operator>.</operator><name>pattern</name></name> <operator>=</operator> <name>base</name> <operator>+</operator> <name>pos</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiNot</name></expr>:</case>
		<case>case <expr><name>jpiExists</name></expr>:</case>
		<case>case <expr><name>jpiIsUnknown</name></expr>:</case>
		<case>case <expr><name>jpiPlus</name></expr>:</case>
		<case>case <expr><name>jpiMinus</name></expr>:</case>
		<case>case <expr><name>jpiFilter</name></expr>:</case>
			<expr_stmt><expr><call><name>read_int32</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>arg</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiIndexArray</name></expr>:</case>
			<expr_stmt><expr><call><name>read_int32</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>array</name><operator>.</operator><name>nelems</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>read_int32_n</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>array</name><operator>.</operator><name>elems</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>,
						 <argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>array</name><operator>.</operator><name>nelems</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>jpiAny</name></expr>:</case>
			<expr_stmt><expr><call><name>read_int32</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>read_int32</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>anybounds</name><operator>.</operator><name>last</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized jsonpath item type: %d"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>jspGetArg</name><parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiFilter</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiNot</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiIsUnknown</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiExists</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiPlus</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiMinus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>jspInitByBuffer</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>jspGetNext</name><parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>jspHasNext</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiString</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiNumeric</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiBool</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiNull</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiKey</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiAny</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiAnyArray</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiAnyKey</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiIndexArray</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiFilter</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiCurrent</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiExists</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiRoot</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiVariable</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiLast</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiAdd</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiSub</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiMul</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiDiv</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiMod</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiPlus</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiMinus</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiEqual</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiNotEqual</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiGreater</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiGreaterOrEqual</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiLess</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiLessOrEqual</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiAnd</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiOr</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiNot</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiIsUnknown</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiType</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiSize</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiAbs</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiFloor</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiCeiling</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiDouble</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiKeyValue</name> <operator>||</operator>
			   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiStartsWith</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>jspInitByBuffer</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>nextPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>jspGetLeftArg</name><parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiAnd</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiOr</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiEqual</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiNotEqual</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiLess</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiGreater</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiLessOrEqual</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiGreaterOrEqual</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiAdd</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiSub</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiMul</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiDiv</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiMod</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiStartsWith</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>jspInitByBuffer</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>args</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>jspGetRightArg</name><parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiAnd</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiOr</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiEqual</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiNotEqual</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiLess</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiGreater</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiLessOrEqual</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiGreaterOrEqual</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiAdd</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiSub</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiMul</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiDiv</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiMod</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiStartsWith</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>jspInitByBuffer</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>args</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>jspGetBool</name><parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiBool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>bool</name><operator>)</operator> <operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>value</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Numeric</name></type>
<name>jspGetNumeric</name><parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiNumeric</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Numeric</name><operator>)</operator> <name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>value</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>jspGetString</name><parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiKey</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiString</name> <operator>||</operator>
		   <name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiVariable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>value</name><operator>.</operator><name>datalen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>value</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>jspGetArraySubscript</name><parameter_list>(<parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>JsonPathItem</name> <modifier>*</modifier></type><name>to</name></decl></parameter>,
					 <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jpiIndexArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>jspInitByBuffer</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>array</name><operator>.</operator><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>array</name><operator>.</operator><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>jspInitByBuffer</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>array</name><operator>.</operator><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
