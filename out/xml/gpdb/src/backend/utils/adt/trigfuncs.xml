<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/adt/trigfuncs.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * trigfuncs.c
 *	  Builtin functions for useful trigger support.
 *
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/backend/utils/adt/trigfuncs.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>


<comment type="block">/*
 * suppress_redundant_updates_trigger
 *
 * This trigger function will inhibit an update from being done
 * if the OLD and NEW records are identical.
 */</comment>
<function><type><name>Datum</name></type>
<name>suppress_redundant_updates_trigger</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TriggerData</name> <modifier>*</modifier></type><name>trigdata</name> <init>= <expr><operator>(</operator><name>TriggerData</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>newtuple</name></decl>,
				<decl><type ref="prev"/><name>oldtuple</name></decl>,
				<decl><type ref="prev"/><name>rettuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTupleHeader</name></type> <name>newheader</name></decl>,
				<decl><type ref="prev"/><name>oldheader</name></decl>;</decl_stmt>

	<comment type="block">/* make sure it's called as a trigger */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CALLED_AS_TRIGGER</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_E_R_I_E_TRIGGER_PROTOCOL_VIOLATED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"suppress_redundant_updates_trigger: must be called as trigger"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* and that it's called on update */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TRIGGER_FIRED_BY_UPDATE</name><argument_list>(<argument><expr><name><name>trigdata</name><operator>-&gt;</operator><name>tg_event</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_E_R_I_E_TRIGGER_PROTOCOL_VIOLATED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"suppress_redundant_updates_trigger: must be called on update"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* and that it's called before update */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TRIGGER_FIRED_BEFORE</name><argument_list>(<argument><expr><name><name>trigdata</name><operator>-&gt;</operator><name>tg_event</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_E_R_I_E_TRIGGER_PROTOCOL_VIOLATED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"suppress_redundant_updates_trigger: must be called before update"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* and that it's called for each row */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TRIGGER_FIRED_FOR_ROW</name><argument_list>(<argument><expr><name><name>trigdata</name><operator>-&gt;</operator><name>tg_event</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_E_R_I_E_TRIGGER_PROTOCOL_VIOLATED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"suppress_redundant_updates_trigger: must be called for each row"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* get tuple data, set default result */</comment>
	<expr_stmt><expr><name>rettuple</name> <operator>=</operator> <name>newtuple</name> <operator>=</operator> <name><name>trigdata</name><operator>-&gt;</operator><name>tg_newtuple</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldtuple</name> <operator>=</operator> <name><name>trigdata</name><operator>-&gt;</operator><name>tg_trigtuple</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>newheader</name> <operator>=</operator> <name><name>newtuple</name><operator>-&gt;</operator><name>t_data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldheader</name> <operator>=</operator> <name><name>oldtuple</name><operator>-&gt;</operator><name>t_data</name></name></expr>;</expr_stmt>

	<comment type="block">/* if the tuple payload is the same ... */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>newtuple</name><operator>-&gt;</operator><name>t_len</name></name> <operator>==</operator> <name><name>oldtuple</name><operator>-&gt;</operator><name>t_len</name></name> <operator>&amp;&amp;</operator>
		<name><name>newheader</name><operator>-&gt;</operator><name>t_hoff</name></name> <operator>==</operator> <name><name>oldheader</name><operator>-&gt;</operator><name>t_hoff</name></name> <operator>&amp;&amp;</operator>
		<operator>(</operator><call><name>HeapTupleHeaderGetNatts</name><argument_list>(<argument><expr><name>newheader</name></expr></argument>)</argument_list></call> <operator>==</operator>
		 <call><name>HeapTupleHeaderGetNatts</name><argument_list>(<argument><expr><name>oldheader</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
		<operator>(</operator><operator>(</operator><name><name>newheader</name><operator>-&gt;</operator><name>t_infomask</name></name> <operator>&amp;</operator> <operator>~</operator><name>HEAP_XACT_MASK</name><operator>)</operator> <operator>==</operator>
		 <operator>(</operator><name><name>oldheader</name><operator>-&gt;</operator><name>t_infomask</name></name> <operator>&amp;</operator> <operator>~</operator><name>HEAP_XACT_MASK</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
		<call><name>memcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>newheader</name><operator>)</operator> <operator>+</operator> <name>SizeofHeapTupleHeader</name></expr></argument>,
			   <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>oldheader</name><operator>)</operator> <operator>+</operator> <name>SizeofHeapTupleHeader</name></expr></argument>,
			   <argument><expr><name><name>newtuple</name><operator>-&gt;</operator><name>t_len</name></name> <operator>-</operator> <name>SizeofHeapTupleHeader</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* ... then suppress the update */</comment>
		<expr_stmt><expr><name>rettuple</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>rettuple</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
