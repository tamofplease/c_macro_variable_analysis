<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/adt/pivot.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>

<comment type="block">/* array primitives for looping that should have already existed */</comment>
<typedef>typedef <type><struct>struct <name>_array_iter</name> <block>{
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>       <name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>       <name>max</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type>       <name>typlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>typbyval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>        <name>typalign</name></decl>;</decl_stmt>
}</block></struct></type> <name>array_iter</name>;</typedef>
<function_decl><type><name>void</name></type> <name>array_loop</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>array_iter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>array_next</name><parameter_list>(<parameter><decl><type><name>array_iter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isna</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* Internal static helper functions */</comment>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>oid_pivot_accum</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * External facing wrapper functions to allow for proper type extraction
 */</comment>
<function><type><name>Datum</name></type> 
<name>int4_pivot_accum</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>oid_pivot_accum</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>Datum</name></type> 
<name>int8_pivot_accum</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>oid_pivot_accum</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>Datum</name></type> 
<name>float8_pivot_accum</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>oid_pivot_accum</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>FLOAT8OID</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>array_loop</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>array_iter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>array</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name>   <operator>=</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>max</name></name>   <operator>=</operator> <call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>get_typlenbyvalalign</name><argument_list>(<argument><expr><call><name>ARR_ELEMTYPE</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></argument>, 
						 <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>typlen</name></name></expr></argument>,
						 <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>typbyval</name></name></expr></argument>,
						 <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>typalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If we are starting in the middle of the array, then scan forward */</comment>
	<expr_stmt><expr><name>start</name> <operator>=</operator> <name>start</name> <operator>-</operator> <call><name>ARR_LBOUND</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* 
		 * could probably be more efficient for fixed length arrays, but
		 * they would still require adjustments for nulls.
		 */</comment>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>start</name><operator>--</operator></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Datum</name></type> <name>d</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>  <name>isna</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>array_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isna</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>array_next</name><parameter_list>(<parameter><decl><type><name>array_iter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isna</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bits8</name> <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <name><name>iter</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>isna</name>  <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>isna</name>  <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><name>nulls</name> <operator>=</operator> <call><name>ARR_NULLBITMAP</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>nulls</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>nulls</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>index</name></name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>isna</name>  <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>isna</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>typlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content> <comment type="block">/* fixed length */</comment>

		<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>typlen</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition>
		<block>{<block_content>
			<switch>switch <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>typlen</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><literal type="number">1</literal></expr>:</case>
					<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>Int8GetDatum</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int8</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="number">2</literal></expr>:</case>
					<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int16</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="number">4</literal></expr>:</case>
					<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int16</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="number">8</literal></expr>:</case>
					<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int16</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
					
				<default>default:</default>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected data type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+=</operator> <name><name>iter</name><operator>-&gt;</operator><name>typlen</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content> <comment type="block">/* variable length */</comment>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>att_align_nominal</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>typalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



<comment type="block">/* 
 * pivot_find() - Searchs an array of labels for a matching value.
 *
 * Returns: index of found value, or -1 if not found
 *
 * It may eventually do something smarter than a linear scan, but
 * for now this is sufficient given that we don't know anything about the
 * order of 'labels'.
 *
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>pivot_find</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>labels</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>labelsp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>      <name>i</name></decl>, <decl><type ref="prev"/><name>nelem</name></decl>, <decl><type ref="prev"/><name>asize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type>    <name>typlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>     <name>typbyval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>     <name>typalign</name></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>ARR_ELEMTYPE</name><argument_list>(<argument><expr><name>labels</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TEXTOID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, 
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"pivot_accum: labels are not type text"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Text alignment properties */</comment>
	<expr_stmt><expr><call><name>get_typlenbyvalalign</name><argument_list>(<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typbyval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typalign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Get the size of the input attribute, we'll use this for fast compares */</comment>
	<expr_stmt><expr><name>asize</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* The labels array is an array of varying length text, scan it adding
	   the length of the previous entry until we are done or we have found
	   a match. */</comment>
	<expr_stmt><expr><name>labelsp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>labels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nelem</name> <operator>=</operator> <call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>labels</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nelem</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>lsize</name> <init>= <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>labelsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>asize</name> <operator>==</operator> <name>lsize</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>labelsp</name></expr></argument>, <argument><expr><name>lsize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Found */</comment>
		<expr_stmt><expr><name>labelsp</name>  <operator>=</operator> <name>labelsp</name> <operator>+</operator> <name>lsize</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>labelsp</name>  <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>att_align_nominal</name><argument_list>(<argument><expr><name>labelsp</name></expr></argument>, <argument><expr><name>typalign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>  <comment type="block">/* Not found */</comment>
</block_content>}</block></function>


<comment type="block">/*
 * pivot_accum() - Pivot and accumulate
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type> <name>oid_pivot_accum</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>labels</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>i</name></decl>;</decl_stmt>
	
	<comment type="block">/* Simple argument validation */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, 
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"pivot_accum called with %d input arguments"</literal></expr></argument>,
						<argument><expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_ARRAYTYPE_P</name><argument_list>(<argument><expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>labels</name> <operator>=</operator> <call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>attr</name>   <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Do nothing if the attr isn't in the labels array. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>pivot_find</name><argument_list>(<argument><expr><name>labels</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_ARRAYTYPE_P</name><argument_list>(<argument><expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<comment type="block">/* Get the data array, or make it if null */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>labels</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>elsize</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>nelem</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>eltype</name> <init>= <expr><name>type</name></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>INT4OID</name></expr>:</case>
				<comment type="block">/* addition of two int4 should be int8, otherwise it may cause overflow in addition*/</comment>
				<expr_stmt><expr><name>elsize</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>eltype</name> <operator>=</operator> <name>INT8OID</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>INT8OID</name></expr>:</case>
			<case>case <expr><name>FLOAT8OID</name></expr>:</case>
				<expr_stmt><expr><name>elsize</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><name>elsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* Fixes complier warnings */</comment>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
		<expr_stmt><expr><name>nelem</name> <operator>=</operator> <call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>labels</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <name>nelem</name> <operator>*</operator> <name>elsize</name> <operator>+</operator> <call><name>ARR_OVERHEAD_NONULLS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>ArrayType</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ndim</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>dataoffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>elemtype</name></name> <operator>=</operator> <name>eltype</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name>nelem</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ARR_LBOUND</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nelem</name> <operator>*</operator> <name>elsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	
	
	<comment type="block">/*   
	 * Should we think about upconverting the arrays? Or is the assumption that 
	 * the pivot isn't usually doing much aggregation?
	 */</comment>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>INT4OID</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>datap</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int32</name></type>  <name>value</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>datap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>INT8OID</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>datap</name> <init>= <expr><operator>(</operator><name>int64</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int64</name></type>  <name>value</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>datap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>FLOAT8OID</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>float8</name> <modifier>*</modifier></type><name>datap</name> <init>= <expr><operator>(</operator><name>float8</name><operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>float8</name></type>  <name>value</name> <init>= <expr><call><name>PG_GETARG_FLOAT8</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>datap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>
		<default>default:</default>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>PG_RETURN_ARRAYTYPE_P</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
