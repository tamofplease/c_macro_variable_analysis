<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/error/assert.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * assert.c
 *	  Assert code.
 *
 * Portions Copyright (c) 2005-2009, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/error/assert.c
 *
 * NOTE
 *	  This should eventually work with elog()
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqsignal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>                <comment type="block">/* gp_reraise_signal */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
 * ExceptionalCondition - Handles the failure of an Assert()
 */</comment>
<function><type><name>void</name></type>
<name>ExceptionalCondition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conditionName</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errorType</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>,
					 <parameter><decl><type><name>int</name></type> <name>lineNumber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* CDB: Try to tell the QD or client what happened. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PointerIsValid</name><argument_list>(<argument><expr><name>conditionName</name></expr></argument>)</argument_list></call>
		<operator>||</operator> <operator>!</operator><call><name>PointerIsValid</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call>
		<operator>||</operator> <operator>!</operator><call><name>PointerIsValid</name><argument_list>(<argument><expr><name>errorType</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><call><name>errFatalReturn</name><argument_list>(<argument><expr><name>gp_reraise_signal</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"TRAP: ExceptionalCondition: bad arguments"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><call><name>errFatalReturn</name><argument_list>(<argument><expr><name>gp_reraise_signal</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unexpected internal error"</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"%s(\"%s\", File: \"%s\", Line: %d)\n"</literal></expr></argument>,
						  <argument><expr><name>errorType</name></expr></argument>, <argument><expr><name>conditionName</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>lineNumber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				
	<comment type="block">/* Usually this shouldn't be needed, but make sure the msg went out */</comment>
	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SLEEP_ON_ASSERT</name></cpp:ifdef>

	<comment type="block">/*
	 * It would be nice to use pg_usleep() here, but only does 2000 sec or 33
	 * minutes, which seems too short.
	 */</comment>
	<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
