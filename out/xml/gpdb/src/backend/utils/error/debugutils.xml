<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/error/debugutils.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * debugutils.c
 *	  Routines for debugging Greenplum DB
 * 
 * Portions Copyright (c) 2007-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/utils/error/debugutils.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/plannodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/debugutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>printatt</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>attributeId</name></decl></parameter>,
		 <parameter><decl><type><name>Form_pg_attribute</name></type> <name>attributeP</name></decl></parameter>,
		 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
			 <argument><expr><literal type="string">"\t%2d: %s%s%s%s\t(typeid = %u, len = %d, typmod = %d, byval = %c)|"</literal></expr></argument>,
		   <argument><expr><name>attributeId</name></expr></argument>,
		   <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>attributeP</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><ternary><condition><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">" = \""</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
		   <argument><expr><ternary><condition><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>value</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
		   <argument><expr><ternary><condition><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"\""</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
		   <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name><name>attributeP</name><operator>-&gt;</operator><name>atttypid</name></name><operator>)</operator></expr></argument>,
		   <argument><expr><name><name>attributeP</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>,
		   <argument><expr><name><name>attributeP</name><operator>-&gt;</operator><name>atttypmod</name></name></expr></argument>,
		   <argument><expr><ternary><condition><expr><name><name>attributeP</name><operator>-&gt;</operator><name>attbyval</name></name></expr> ?</condition><then> <expr><literal type="char">'t'</literal></expr> </then><else>: <expr><literal type="char">'f'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Return a human readable string representation of a tuple. The returned
 * string must be pfree()d by the caller.
 */</comment>

<function><type><name>char</name> <modifier>*</modifier></type> 
<name>tup2str</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>typeinfo</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>natts</name> <init>= <expr><name><name>typeinfo</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>origattr</name></decl>,
				<decl><type ref="prev"/><name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>typoutput</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>typisvarlena</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>typeinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>origattr</name> <operator>=</operator> <call><name>slot_getattr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>getTypeOutputInfo</name><argument_list>(<argument><expr><name><name>att</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name>typoutput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typisvarlena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If we have a toasted datum, forcibly detoast it here to avoid
		 * memory leakage inside the type's output routine.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>typisvarlena</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name>origattr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>attr</name> <operator>=</operator> <name>origattr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>OidOutputFunctionCall</name><argument_list>(<argument><expr><name>typoutput</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>printatt</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>att</name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Clean up detoasted copy, if any */</comment>
		<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <name>origattr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>plannode_type</name><parameter_list>(<parameter><decl><type><name>Plan</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>drawnode</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>ofile</name></decl></parameter>, <parameter><decl><type><name>Plan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>nodelist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>plan</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* print out the node */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"\"Node_0x%p\" [\n"</literal></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"label=\"%s %p flow %p\"\n"</literal></expr></argument>, <argument><expr><call><name>plannode_type</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"];\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>Append</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Append</name> <modifier>*</modifier></type><name>app</name> <init>= <expr><operator>(</operator><name>Append</name> <operator>*</operator><operator>)</operator> <name>plan</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
		<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>app-&gt;appendplans</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Plan</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>list_member_ptr</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>nodelist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>drawnode</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"\"Node_0x%p\" -&gt; \"Node_0x%p\" [\n"</literal></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"];\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>SubqueryScan</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SubqueryScan</name> <modifier>*</modifier></type><name>subq</name> <init>= <expr><operator>(</operator><name>SubqueryScan</name> <operator>*</operator><operator>)</operator> <name>plan</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Plan</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>subq</name><operator>-&gt;</operator><name>subplan</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>list_member_ptr</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>nodelist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>drawnode</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"\"Node_0x%p\" -&gt; \"Node_0x%p\" [\n"</literal></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"];\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>Plan</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>plan</name><operator>-&gt;</operator><name>lefttree</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>child</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>list_member_ptr</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>nodelist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>drawnode</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"\"Node_0x%p\" -&gt; \"Node_0x%p\" [\n"</literal></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"];\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>plan</name><operator>-&gt;</operator><name>righttree</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>child</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>list_member_ptr</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>nodelist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>drawnode</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"\"Node_0x%p\" -&gt; \"Node_0x%p\" [\n"</literal></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"];\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Write out a plan to be interpretted by dot(1). Tools available at
 * http://www.graphviz.org
 */</comment>
<function><type><name>void</name></type>
<name>dotnode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>nodelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>ofile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"w+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Print dot header */</comment>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"digraph g {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"graph [\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"];\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"node [\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"fontsize = \"14\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"shape = \"box\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"];\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"edge [\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"fontsize = \"14\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"];\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>node</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>nodelist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>drawnode</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>, <argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* 
 * dump a tupledesc
 */</comment>
<function><type><name>void</name></type> <name>dump_tupdesc</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>ofile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"w+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"TupleDesc: natts %d\n"</literal></expr></argument>, <argument><expr><name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"Name\t\tattlen\tattbyval\tattalign\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"==================================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"%s, %d, %s, %c\n"</literal></expr></argument>, 
                    <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attname</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>,
                    <argument><expr><ternary><condition><expr><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,
                    <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>
               )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* 
 * dump a memtuple binding 
 */</comment>
<function><type><name>void</name></type> <name>dump_mt_bind</name><parameter_list>(<parameter><decl><type><name>MemTupleBinding</name> <modifier>*</modifier></type><name>mt_bind</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>ofile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"w+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"Mt_bind: column_align %d, nbm_extra_size %d\n"</literal></expr></argument>,
            <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>column_align</name></name></expr></argument>, <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>null_bitmap_extra_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"TupleDesc: natts %d\n"</literal></expr></argument>,
                    <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">" Small binding: vastart %d\n"</literal></expr></argument>, <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>bind</name><operator>.</operator><name>var_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"Name\t\tattlen\tattbyval\tattalign\toffset\tlen\tflag\tnb\tnm\tns\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"==================================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>mt_bind</name><operator>-&gt;</operator><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"%s, %d, %s, %c, %d, %d, %d, %d, %d, %d\n"</literal></expr></argument>, 
                    <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attname</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>,
                    <argument><expr><ternary><condition><expr><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,
                    <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>,
                    <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>bind</name><operator>.</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>,
                    <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>bind</name><operator>.</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, 
                    <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>bind</name><operator>.</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name></expr></argument>, 
                    <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>bind</name><operator>.</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>null_byte</name></expr></argument>, 
                    <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>bind</name><operator>.</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>null_mask</name></expr></argument>, 
                    <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>bind</name><operator>.</operator><name>null_saves</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>
               )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"\n\n Large binding: vastart %d\n"</literal></expr></argument>, <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>large_bind</name><operator>.</operator><name>var_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"Name\t\tattlen\tattbyval\tattalign\toffset\tlen\tflag\tnb\tnm\tns\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"==================================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>mt_bind</name><operator>-&gt;</operator><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>, <argument><expr><literal type="string">"%s, %d, %s, %c, %d, %d, %d, %d, %d, %d\n"</literal></expr></argument>, 
                    <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attname</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>,
                    <argument><expr><ternary><condition><expr><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,
                    <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>,
                    <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>large_bind</name><operator>.</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>,
                    <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>large_bind</name><operator>.</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, 
                    <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>large_bind</name><operator>.</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name></expr></argument>, 
                    <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>large_bind</name><operator>.</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>null_byte</name></expr></argument>, 
                    <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>large_bind</name><operator>.</operator><name>bindings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>null_mask</name></expr></argument>, 
                    <argument><expr><name><name>mt_bind</name><operator>-&gt;</operator><name>large_bind</name><operator>.</operator><name>null_saves</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>
               )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>ofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
<comment type="block">/*
 * Debugging - create/overwrite named file with contents of string.
 *
 * Use, e.g., with gdb to save debugging output.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>debug_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>( <expr><operator>!</operator><name>file</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"debug_write: can't open \"%s\" for output"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>( <expr><call><name>fprintf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>output_string</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr> )</condition>
	<block>{<block_content>
	    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"debug_write: can't write to \"%s\""</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    
    
    
</unit>
