<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/misc/bitstream.c"><comment type="block">/*------------------------------------------------------------------------------
 *
 * bitstream.c
 *	  A in-memory bitstream implementation.
 *
 * Useful for reading and writing individual bits from a char buffer
 * 
 * Copyright (c) 2013-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/utils/misc/bitstream.c
 *
 *------------------------------------------------------------------------------
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/bitstream.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>Bitstream_PutBit</name><parameter_list>(<parameter><decl><type><name>Bitstream</name><modifier>*</modifier></type> <name>bitstream</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>Bitstream_GetBit</name><parameter_list>(<parameter><decl><type><name>Bitstream</name><modifier>*</modifier></type> <name>bitstream</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> 
<name>Bitstream_CheckForError</name><parameter_list>(<parameter><decl><type><name>Bitstream</name> <modifier>*</modifier></type><name>bitstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>bitstream</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>bitstream</name><operator>-&gt;</operator><name>byteOffset</name></name> <operator>&gt;=</operator> <name><name>bitstream</name><operator>-&gt;</operator><name>dataSize</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>bitstream</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bitstream</name><operator>-&gt;</operator><name>byteOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initializes a new bitstream.
 *
 * The bitstream assumes that the data is zero-initialized. 
 * The bitstream does not allocate memory and does not need a cleanup operation.
 */</comment> 
<function><type><name>void</name></type>
<name>Bitstream_Init</name><parameter_list>(<parameter><decl><type><name>Bitstream</name> <modifier>*</modifier></type><name>bitstream</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dataSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>bitstream</name><operator>-&gt;</operator><name>bitOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bitstream</name><operator>-&gt;</operator><name>byteOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bitstream</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bitstream</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>=</operator> <name>dataSize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bitstream</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>Bitstream_GetBit</name><parameter_list>(<parameter><decl><type><name>Bitstream</name><modifier>*</modifier></type> <name>bitstream</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>mask</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_CheckForError</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>bitstream</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>bitstream</name><operator>-&gt;</operator><name>byteOffset</name></name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name><name>bitstream</name><operator>-&gt;</operator><name>bitOffset</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>v</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bitstream</name><operator>-&gt;</operator><name>bitOffset</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>bitstream</name><operator>-&gt;</operator><name>bitOffset</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>bitstream</name><operator>-&gt;</operator><name>bitOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bitstream</name><operator>-&gt;</operator><name>byteOffset</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Skips the given number of bits in the bitstream.
 * Advances the bitstream cursor.
 *
 * Returns false iff the function call could not succeed.
 */</comment>
<function><type><name>bool</name></type> 
<name>Bitstream_Skip</name><parameter_list>(<parameter><decl><type><name>Bitstream</name><modifier>*</modifier></type> <name>bitstream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skipBitCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>newBitOffset</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_CheckForError</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>newBitOffset</name> <operator>=</operator> <name><name>bitstream</name><operator>-&gt;</operator><name>bitOffset</name></name> <operator>+</operator> <name>skipBitCount</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bitstream</name><operator>-&gt;</operator><name>bitOffset</name></name> <operator>=</operator> <name>newBitOffset</name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bitstream</name><operator>-&gt;</operator><name>byteOffset</name></name> <operator>+=</operator> <name>newBitOffset</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Aligns the bitstream at the given alignment.
 * The alignment needs to be a multiple of 8.
 * Advances the bitstream cursor.
 */</comment>
<function><type><name>bool</name></type> 
<name>Bitstream_Align</name><parameter_list>(<parameter><decl><type><name>Bitstream</name> <modifier>*</modifier></type><name>bitstream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alignment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>forAlignment</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>alignment</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>forAlignment</name> <operator>=</operator> <call><name>Bitstream_GetOffset</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>alignment</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>forAlignment</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_Skip</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>, <argument><expr><name>alignment</name> <operator>-</operator> <name>forAlignment</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns a pointer to the data aligned to the next given alignment.
 * The pointer can be used to put raw data into the bit stream.
 * However, the caller is then required to ensure that the
 * bitstream has a sufficient size.
 *
 * Advances the bitstream cursor.
 */</comment> 
<function><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> 
<name>Bitstream_GetAlignedData</name><parameter_list>(<parameter><decl><type><name>Bitstream</name> <modifier>*</modifier></type><name>bitstream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alignment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Bitstream_Align</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>bitstream</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>bitstream</name><operator>-&gt;</operator><name>byteOffset</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> 
<name>Bitstream_PutBit</name><parameter_list>(<parameter><decl><type><name>Bitstream</name><modifier>*</modifier></type> <name>bitstream</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>mask</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_CheckForError</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name><name>bitstream</name><operator>-&gt;</operator><name>bitOffset</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bitstream</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>bitstream</name><operator>-&gt;</operator><name>byteOffset</name></name></expr>]</index></name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>bitstream</name><operator>-&gt;</operator><name>bitOffset</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>bitstream</name><operator>-&gt;</operator><name>bitOffset</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>bitstream</name><operator>-&gt;</operator><name>bitOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bitstream</name><operator>-&gt;</operator><name>byteOffset</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>	

<comment type="block">/*
 * returns n bits from the bitstream.
 * Advances the bitstream cursor.
 *
 * Conents of value is undefined if bitstream error flag is true.
 */</comment> 
<function><type><name>bool</name></type>
<name>Bitstream_Get</name><parameter_list>(<parameter><decl><type><name>Bitstream</name> <modifier>*</modifier></type><name>bitstream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>v</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_GetBit</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>v</name> <operator>|=</operator> <name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Writes n bits to the bitstream.
 * Advances the bitstream cursor.
 */</comment> 
<function><type><name>bool</name></type>
<name>Bitstream_Put</name><parameter_list>(<parameter><decl><type><name>Bitstream</name> <modifier>*</modifier></type><name>bitstream</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>bitValue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>bitCount</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>bitCount</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bitCount</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bitCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>bitValue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>bitValue</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_PutBit</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>, <argument><expr><name>bitValue</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>mask</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * returns true iff an error (usually an out of buffer space condition) occurred.
 * If true the content of the bitstream is undefined. However, the bitstream
 * ensures that no read/write outside the provided buffer occurs.
 */</comment> 
<function><type><name>bool</name></type> 
<name>Bitstream_HasError</name><parameter_list>(<parameter><decl><type><name>Bitstream</name> <modifier>*</modifier></type><name>bitstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>bitstream</name><operator>-&gt;</operator><name>error</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns the current offset in the bitstream in bits
 */</comment> 
<function><type><name>int</name></type>
<name>Bitstream_GetOffset</name><parameter_list>(<parameter><decl><type><name>Bitstream</name> <modifier>*</modifier></type><name>bitstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>bitstream</name><operator>-&gt;</operator><name>byteOffset</name></name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>bitstream</name><operator>-&gt;</operator><name>bitOffset</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns the remaining number of bits in the bitstream.
 */</comment> 
<function><type><name>int</name></type> 
<name>Bitstream_GetRemaining</name><parameter_list>(<parameter><decl><type><name>Bitstream</name> <modifier>*</modifier></type><name>bitstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>bitstream</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <call><name>Bitstream_GetOffset</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * returns the number of bytes the bitstream has written data to.
 * The bitstream length can be used to copy the correct part of 
 * the bitstream data.
 *
 * Doesn't advance the bitstream cursor.
 */</comment> 
<function><type><name>int</name></type> 
<name>Bitstream_GetLength</name><parameter_list>(<parameter><decl><type><name>Bitstream</name> <modifier>*</modifier></type><name>bitstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>bitstream</name><operator>-&gt;</operator><name>bitOffset</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name><name>bitstream</name><operator>-&gt;</operator><name>byteOffset</name></name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<return>return <expr><name><name>bitstream</name><operator>-&gt;</operator><name>byteOffset</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
