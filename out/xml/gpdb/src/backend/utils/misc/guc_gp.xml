<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/misc/guc_gp.c"><comment type="block">/*--------------------------------------------------------------------
 * guc_gp.c
 *
 * Additional Greenplum-specific GUCs are defined in this file, to
 * avoid adding so much stuff to guc.c. This makes it easier to diff
 * and merge with upstream.
 *
 * Portions Copyright (c) 2005-2010, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 * Copyright (c) 2000-2009, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/utils/misc/guc_gp.c
 *
 *--------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/reloptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlyam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbendpoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbdisp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbdisp_query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbhash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbsreh.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/memquota.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/vacuum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/cost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/planmain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/scansup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/syslogger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/fts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/walsender.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/gdd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resscheduler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resgroup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resource_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/varlena.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/vmem_tracker.h"</cpp:file></cpp:include>

<comment type="block">/*
 * These constants are copied from guc.c. They should not bitrot when we
 * merge guc.c with upstream, as these are natural constants that never
 * change. guc.c might acquire more of these, though. In that case, we'll
 * just copy the new ones too, as needed.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KB_PER_MB</name></cpp:macro> <cpp:value>(1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KB_PER_GB</name></cpp:macro> <cpp:value>(1024*1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_PER_S</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_PER_MIN</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_PER_MIN</name></cpp:macro> <cpp:value>(1000 * 60)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_PER_H</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_PER_H</name></cpp:macro> <cpp:value>(60 * 60)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_PER_H</name></cpp:macro> <cpp:value>(1000 * 60 * 60)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_PER_D</name></cpp:macro> <cpp:value>(60 * 24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_PER_D</name></cpp:macro> <cpp:value>(60 * 60 * 24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_PER_D</name></cpp:macro> <cpp:value>(1000 * 60 * 60 * 24)</cpp:value></cpp:define>

<comment type="block">/*
 * Assign/Show hook functions defined in this module
 */</comment>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_optimizer</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_verify_gpfdists_cert</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_dispatch_log_stats</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_gp_hashagg_default_nbatches</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_gp_workfile_compression</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Helper function for guc setter */</comment>
<function_decl><type><name>bool</name></type> <name>gpvars_check_gp_resqueue_priority_default_value</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newval</name></decl></parameter>,
													<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>,
													<parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_gp_default_storage_options</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>assign_gp_default_storage_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_pljava_classpath_insecure</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>assign_pljava_classpath_insecure</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_gp_resource_group_bypass</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>guc_array_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>config_generic</name></name> <modifier>*</modifier></type><name>find_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>create_placeholders</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elevel</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>listenerBacklog</name></decl>;</decl_stmt>

<comment type="block">/* GUC lists for gp_guc_list_init().  (List of struct config_generic) */</comment>
<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>gp_guc_list_for_explain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>gp_guc_list_for_no_plan</name></decl>;</decl_stmt>

<comment type="block">/* For synchronized GUC value is cache in HashTable,
 * dispatch value along with query when some guc changed
 */</comment>
<decl_stmt><decl><type><name>List</name>       <modifier>*</modifier></type><name>gp_guc_restore_list</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>        <name>gp_guc_need_restore</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>Debug_dtm_action_sql_command_tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_print_full_dtm</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_print_snapshot_dtm</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_disable_distributed_snapshot</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_abort_after_distributed_prepared</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_appendonly_print_insert</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_appendonly_print_insert_tuple</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_appendonly_print_scan</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_appendonly_print_scan_tuple</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_appendonly_print_delete</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_appendonly_print_storage_headers</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_appendonly_print_verify_write_block</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_appendonly_use_no_toast</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_appendonly_print_blockdirectory</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_appendonly_print_read_block</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_appendonly_print_append_block</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_appendonly_print_segfile_choice</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>        <name>test_AppendOnlyHash_eviction_vs_just_marking_not_inuse</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_appendonly_print_datumstream</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_appendonly_print_visimap</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_appendonly_print_compaction</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_bitmap_print_insert</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Test_print_direct_dispatch_info</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>        <name>Test_print_prefetch_joinqual</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Test_copy_qd_qe_split</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_permit_relation_node_change</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>gp_max_local_distributed_cache</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_appendonly_verify_block_checksums</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_appendonly_verify_write_block</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_appendonly_compaction</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>gp_appendonly_compaction_threshold</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_heap_require_relhasoids_match</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_local_distributed_cache_stats</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>debug_xlog_record_read</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_cancel_print</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_datumstream_write_print_small_varlena_info</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_datumstream_write_print_large_varlena_info</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_datumstream_read_check_large_varlena_integrity</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_datumstream_block_read_check_integrity</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_datumstream_block_write_check_integrity</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_datumstream_read_print_varlena_info</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_datumstream_write_use_small_initial_buffers</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_create_table_random_default_distribution</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_allow_non_uniform_partitioning_ddl</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_print_create_gang_time</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>dtx_phase2_retry_second</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>gp_log_suboverflow_statement</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type>		<name>log_dispatch_stats</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>			<name>explain_memory_verbosity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>memory_profiler_run_id</name> <init>= <expr><literal type="string">"none"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>memory_profiler_dataset_id</name> <init>= <expr><literal type="string">"none"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>memory_profiler_query_id</name> <init>= <expr><literal type="string">"none"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>memory_profiler_dataset_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* WAL based replication debug GUCs */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>debug_walrepl_snd</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>debug_walrepl_syncrep</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>debug_walrepl_rcv</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>debug_basebackup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rep_lag_avoidance_threshold</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_DTM_ACTION_PRIMARY_DEFAULT</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<decl_stmt><decl><type><name>bool</name></type>		<name>Debug_dtm_action_primary</name> <init>= <expr><name>DEBUG_DTM_ACTION_PRIMARY_DEFAULT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type>		<name>gp_log_optimization_time</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>			<name>Debug_dtm_action</name> <init>= <expr><name>DEBUG_DTM_ACTION_NONE</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_DTM_ACTION_TARGET_DEFAULT</name></cpp:macro> <cpp:value>DEBUG_DTM_ACTION_TARGET_NONE</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type>			<name>Debug_dtm_action_target</name> <init>= <expr><name>DEBUG_DTM_ACTION_TARGET_DEFAULT</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_DTM_ACTION_PROTOCOL_DEFAULT</name></cpp:macro> <cpp:value>DTX_PROTOCOL_COMMAND_COMMIT_PREPARED</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type>			<name>Debug_dtm_action_protocol</name> <init>= <expr><name>DEBUG_DTM_ACTION_PROTOCOL_DEFAULT</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_DTM_ACTION_SEGMENT_DEFAULT</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_DTM_ACTION_NESTINGLEVEL_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type>			<name>Debug_dtm_action_segment</name> <init>= <expr><name>DEBUG_DTM_ACTION_SEGMENT_DEFAULT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>Debug_dtm_action_nestinglevel</name> <init>= <expr><name>DEBUG_DTM_ACTION_NESTINGLEVEL_DEFAULT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>			<name>gp_connection_send_timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>create_restartpoint_on_ckpt_record_replay</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * This variable is a dummy that doesn't do anything, except in some
 * cases provide the value for SHOW to display.  The real state is elsewhere
 * and is kept in sync by assign_hooks.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>gp_resource_manager_str</name></decl>;</decl_stmt>

<comment type="block">/* Backoff-related GUCs */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_enable_resqueue_priority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>gp_resqueue_priority_local_interval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>gp_resqueue_priority_sweeper_interval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>gp_resqueue_priority_inactivity_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>gp_resqueue_priority_grouping_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>gp_resqueue_priority_cpucores_per_segment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>gp_resqueue_priority_default_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_debug_resqueue_priority</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Resource group GUCs */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>gp_resource_group_cpu_priority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>gp_resource_group_cpu_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>gp_resource_group_memory_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_resource_group_bypass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_resource_group_cpu_ceiling_enforcement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_resource_group_enable_recalculate_query_mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_resource_group_enable_cgroup_version_two</name></decl>;</decl_stmt>

<comment type="block">/* Metrics collector debug GUC */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>vmem_process_interrupt</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>execute_pruned_plan</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Upgrade &amp; maintenance GUCs */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_maintenance_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_maintenance_conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>allow_segment_DML</name></decl>;</decl_stmt>

<comment type="block">/* Time based authentication GUC */</comment>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>gp_auth_time_override_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* include file/line information to stack traces */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_log_stack_trace_lines</name></decl>;</decl_stmt>

<comment type="block">/* ignore INTO error-table clauses for backwards compatibility */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_ignore_error_table</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * If set to true, we will silently insert into the correct leaf
 * part even if the user specifies a wrong leaf part as a insert target
 */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>dml_ignore_target_partition_check</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Planner gucs */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_enable_hashjoin_size_heuristic</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_enable_predicate_propagation</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_enable_minmax_optimization</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_enable_multiphase_agg</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_enable_preunique</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_enable_agg_distinct</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_enable_dqa_pruning</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_dynamic_partition_pruning</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_log_dynamic_partition_pruning</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_cte_sharing</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_enable_relsize_collection</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_recursive_cte</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_eager_two_phase_agg</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Optimizer related gucs */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>optimizer_log_failure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_control</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_trace_fallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_partition_selection_log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>optimizer_minidump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>optimizer_cost_model</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_metadata_caching</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>optimizer_mdcache_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_use_gpdb_allocators</name></decl>;</decl_stmt>

<comment type="block">/* Optimizer debugging GUCs */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_print_query</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_print_plan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_print_xform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_print_memo_after_exploration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_print_memo_after_implementation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_print_memo_after_optimization</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_print_job_scheduler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_print_expression_properties</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_print_group_properties</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_print_optimization_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_print_optimization_stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_print_xform_results</name></decl>;</decl_stmt>

<comment type="block">/* array of xforms disable flags */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name><name>optimizer_xforms</name><index>[<expr><name>OPTIMIZER_XFORMS_COUNT</name></expr>]</index></name> <init>= <expr><block>{<expr><index>[<expr><literal type="number">0</literal> <operator>...</operator> <name>OPTIMIZER_XFORMS_COUNT</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>optimizer_search_strategy_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* GUCs to tell Optimizer to enable a physical operator */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_nljoin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_indexjoin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_motions_masteronly_queries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_motions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_motion_broadcast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_motion_gather</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_motion_redistribute</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_sort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_materialize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_partition_propagation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_partition_selection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_outerjoin_rewrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_multiple_distinct_aggs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_direct_dispatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_hashjoin_redistribute_broadcast_children</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_broadcast_nestloop_outer_child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_streaming_material</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_gather_on_segment_for_dml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_assert_maxonerow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_constant_expression_evaluation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_bitmapscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_outerjoin_to_unionall_rewrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_ctas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_dml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_dml_constraints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_master_only_queries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_hashjoin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_dynamictablescan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_indexscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_indexonlyscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_tablescan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_hashagg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_groupagg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_expand_fulljoin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_mergejoin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_prune_unused_columns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_redistribute_nestloop_loj_inner_child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_force_comprehensive_join_implementation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_replicated_table</name></decl>;</decl_stmt>

<comment type="block">/* Optimizer plan enumeration related GUCs */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enumerate_plans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_sample_plans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>optimizer_plan_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>optimizer_samples_number</name></decl>;</decl_stmt>

<comment type="block">/* Cardinality estimation related GUCs used by the Optimizer */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_extract_dxl_stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_extract_dxl_stats_all_nodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_print_missing_stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>optimizer_damping_factor_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>optimizer_damping_factor_join</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>optimizer_damping_factor_groupby</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_dpe_stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_derive_stats_all_groups</name></decl>;</decl_stmt>

<comment type="block">/* Costing related GUCs used by the Optimizer */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>optimizer_segments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>optimizer_penalize_broadcast_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>optimizer_cost_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>optimizer_nestloop_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>optimizer_sort_factor</name></decl>;</decl_stmt>

<comment type="block">/* Optimizer hints */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>optimizer_join_arity_for_associativity_commutativity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>         <name>optimizer_array_expansion_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>         <name>optimizer_join_order_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>optimizer_join_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>optimizer_cte_inlining_bound</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>optimizer_push_group_by_below_setop_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>optimizer_xform_bind_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>optimizer_skew_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_force_multistage_agg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_force_three_stage_scalar_dqa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_force_expanded_distinct_aggs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_force_agg_skew_avoidance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_penalize_skew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_prune_computed_columns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_push_requirements_from_consumer_to_producer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enforce_subplans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_use_external_constant_expression_evaluation_for_ints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_apply_left_outer_to_union_all_disregarding_stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_remove_order_below_dml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_multilevel_partitioning</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> 		<name>optimizer_parallel_union</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_array_constraints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_cte_inlining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_space_pruning</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_associativity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_eageragg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_enable_range_predicate_dpe</name></decl>;</decl_stmt>

<comment type="block">/* Analyze related GUCs for Optimizer */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_analyze_root_partition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_analyze_midlevel_partition</name></decl>;</decl_stmt>

<comment type="block">/* GUCs for replicated table */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>optimizer_replicated_table_insert</name></decl>;</decl_stmt>

<comment type="block">/* GUCs for slice table*/</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>gp_max_slices</name></decl>;</decl_stmt>

<comment type="block">/* System Information */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>gp_server_version_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>gp_server_version_string</name></decl>;</decl_stmt>

<comment type="block">/* Query Metrics */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_enable_query_metrics</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>gp_instrument_shmem_size</name> <init>= <expr><literal type="number">5120</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Security */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_reject_internal_tcp_conn</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* copy */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_enable_segment_copy_checking</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<comment type="block">/*
 * Default storage options GUC.  Value is comma-separated name=value
 * pairs.  E.g. "appendonly=true,orientation=column"
 */</comment>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>gp_default_storage_options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>			<name>writable_external_table_bufsize</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type>		<name>gp_external_enable_filter_pushdown</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Enable GDD */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_enable_global_deadlock_detector</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type>		<name>gp_log_endpoints</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* optional reject to  parse ambigous 5-digits date in YYYMMDD format */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>gp_allow_date_field_width_5digits</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>gp_log_format_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"text"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"csv"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>debug_dtm_action_protocol_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"none"</literal></expr>, <expr><name>DTX_PROTOCOL_COMMAND_NONE</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"abort_no_prepared"</literal></expr>, <expr><name>DTX_PROTOCOL_COMMAND_ABORT_NO_PREPARED</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"prepare"</literal></expr>, <expr><name>DTX_PROTOCOL_COMMAND_PREPARE</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"abort_some_prepared"</literal></expr>, <expr><name>DTX_PROTOCOL_COMMAND_ABORT_SOME_PREPARED</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"commit_onephase"</literal></expr>, <expr><name>DTX_PROTOCOL_COMMAND_COMMIT_ONEPHASE</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"commit_prepared"</literal></expr>, <expr><name>DTX_PROTOCOL_COMMAND_COMMIT_PREPARED</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"abort_prepared"</literal></expr>, <expr><name>DTX_PROTOCOL_COMMAND_ABORT_PREPARED</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"retry_commit_prepared"</literal></expr>, <expr><name>DTX_PROTOCOL_COMMAND_RETRY_COMMIT_PREPARED</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"retry_abort_prepared"</literal></expr>, <expr><name>DTX_PROTOCOL_COMMAND_RETRY_ABORT_PREPARED</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"recovery_commit_prepared"</literal></expr>, <expr><name>DTX_PROTOCOL_COMMAND_RECOVERY_COMMIT_PREPARED</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"recovery_abort_prepared"</literal></expr>, <expr><name>DTX_PROTOCOL_COMMAND_RECOVERY_ABORT_PREPARED</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"subtransaction_begin"</literal></expr>, <expr><name>DTX_PROTOCOL_COMMAND_SUBTRANSACTION_BEGIN_INTERNAL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"subtransaction_release"</literal></expr>, <expr><name>DTX_PROTOCOL_COMMAND_SUBTRANSACTION_RELEASE_INTERNAL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"subtransaction_rollback"</literal></expr>, <expr><name>DTX_PROTOCOL_COMMAND_SUBTRANSACTION_ROLLBACK_INTERNAL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>optimizer_log_failure_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"all"</literal></expr>, <expr><name>OPTIMIZER_ALL_FAIL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"unexpected"</literal></expr>, <expr><name>OPTIMIZER_UNEXPECTED_FAIL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"expected"</literal></expr>, <expr><name>OPTIMIZER_EXPECTED_FAIL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>optimizer_minidump_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"onerror"</literal></expr>, <expr><name>OPTIMIZER_MINIDUMP_FAIL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"always"</literal></expr>, <expr><name>OPTIMIZER_MINIDUMP_ALWAYS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>optimizer_cost_model_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"legacy"</literal></expr>, <expr><name>OPTIMIZER_GPDB_LEGACY</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"calibrated"</literal></expr>, <expr><name>OPTIMIZER_GPDB_CALIBRATED</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"experimental"</literal></expr>, <expr><name>OPTIMIZER_GPDB_EXPERIMENTAL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>explain_memory_verbosity_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"suppress"</literal></expr>, <expr><name>EXPLAIN_MEMORY_VERBOSITY_SUPPRESS</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"summary"</literal></expr>, <expr><name>EXPLAIN_MEMORY_VERBOSITY_SUMMARY</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"detail"</literal></expr>, <expr><name>EXPLAIN_MEMORY_VERBOSITY_DETAIL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>debug_dtm_action_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"none"</literal></expr>, <expr><name>DEBUG_DTM_ACTION_NONE</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"delay"</literal></expr>, <expr><name>DEBUG_DTM_ACTION_DELAY</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"fail_begin_command"</literal></expr>, <expr><name>DEBUG_DTM_ACTION_FAIL_BEGIN_COMMAND</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"fail_end_command"</literal></expr>, <expr><name>DEBUG_DTM_ACTION_FAIL_END_COMMAND</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"panic_begin_command"</literal></expr>, <expr><name>DEBUG_DTM_ACTION_PANIC_BEGIN_COMMAND</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>debug_dtm_action_target_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"none"</literal></expr>, <expr><name>DEBUG_DTM_ACTION_TARGET_NONE</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"protocol"</literal></expr>, <expr><name>DEBUG_DTM_ACTION_TARGET_PROTOCOL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"sql"</literal></expr>, <expr><name>DEBUG_DTM_ACTION_TARGET_SQL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>gp_autostats_modes</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"none"</literal></expr>, <expr><name>GP_AUTOSTATS_NONE</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"on_change"</literal></expr>, <expr><name>GP_AUTOSTATS_ON_CHANGE</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"onchange"</literal></expr>, <expr><name>GP_AUTOSTATS_ON_CHANGE</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"on_no_stats"</literal></expr>, <expr><name>GP_AUTOSTATS_ON_NO_STATS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>gp_interconnect_fc_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"loss"</literal></expr>, <expr><name>INTERCONNECT_FC_METHOD_LOSS</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"capacity"</literal></expr>, <expr><name>INTERCONNECT_FC_METHOD_CAPACITY</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>gp_interconnect_types</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"udpifc"</literal></expr>, <expr><name>INTERCONNECT_TYPE_UDPIFC</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"tcp"</literal></expr>, <expr><name>INTERCONNECT_TYPE_TCP</name></expr>}</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_IC_PROXY</name></cpp:ifdef>
	<expr><block>{<expr><literal type="string">"proxy"</literal></expr>, <expr><name>INTERCONNECT_TYPE_PROXY</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* ENABLE_IC_PROXY */</comment>
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>gp_interconnect_address_types</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"wildcard"</literal></expr>, <expr><name>INTERCONNECT_ADDRESS_TYPE_WILDCARD</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"unicast"</literal></expr>, <expr><name>INTERCONNECT_ADDRESS_TYPE_UNICAST</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>gp_log_verbosity</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"terse"</literal></expr>, <expr><name>GPVARS_VERBOSITY_TERSE</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"off"</literal></expr>, <expr><name>GPVARS_VERBOSITY_OFF</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"verbose"</literal></expr>, <expr><name>GPVARS_VERBOSITY_VERBOSE</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"debug"</literal></expr>, <expr><name>GPVARS_VERBOSITY_DEBUG</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>gp_resqueue_memory_policies</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"none"</literal></expr>, <expr><name>RESMANAGER_MEMORY_POLICY_NONE</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"auto"</literal></expr>, <expr><name>RESMANAGER_MEMORY_POLICY_AUTO</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"eager_free"</literal></expr>, <expr><name>RESMANAGER_MEMORY_POLICY_EAGER_FREE</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>optimizer_join_order_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"query"</literal></expr>, <expr><name>JOIN_ORDER_IN_QUERY</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"greedy"</literal></expr>, <expr><name>JOIN_ORDER_GREEDY_SEARCH</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"exhaustive"</literal></expr>, <expr><name>JOIN_ORDER_EXHAUSTIVE_SEARCH</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"exhaustive2"</literal></expr>, <expr><name>JOIN_ORDER_EXHAUSTIVE2_SEARCH</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IndexCheckType</name></type> <name>gp_indexcheck_insert</name> <init>= <expr><name>INDEX_CHECK_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>config_bool</name></name></type> <name><name>ConfigureNamesBool_gp</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{
		<expr><block>{<expr><literal type="string">"maintenance_mode"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>CUSTOM_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maintenance Mode"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_maintenance_mode</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_maintenance_conn"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>CUSTOM_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maintenance Connection"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_maintenance_conn</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_use_legacy_hashops"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>COMPAT_OPTIONS_PREVIOUS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"If set, new tables will use legacy distribution hashops by default"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_use_legacy_hashops</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"allow_segment_DML"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>CUSTOM_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allow DML on segments"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>allow_segment_DML</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"enable_groupagg"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the planner's use of grouping aggregation plans."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>enable_groupagg</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_hashjoin_size_heuristic"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"In hash join plans, the smaller of the two inputs "</literal>
						 <literal type="string">"(as estimated) is used to build the hash table."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"If false, either input could be used to build the "</literal>
					  <literal type="string">"hash table; the choice depends on the estimated hash "</literal>
						 <literal type="string">"join cost, which the planner computes for both "</literal>
						 <literal type="string">"alternatives.  Has no effect on outer or adaptive "</literal>
						 <literal type="string">"joins."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_hashjoin_size_heuristic</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_direct_dispatch"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable dispatch for single-row-insert targeted mirror-pairs."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"Don't involve the whole cluster if it isn't needed."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_direct_dispatch</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_predicate_propagation"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When two expressions are equivalent (such as with "</literal>
					  <literal type="string">"equijoined keys) then the planner applies predicates "</literal>
						 <literal type="string">"on one expression to the other expression."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"If false, planner does not copy predicates."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_predicate_propagation</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_print_prelim_plan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints the preliminary execution plan to server log."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_print_prelim_plan</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_print_slice_table"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints the slice table to server log."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_print_slice_table</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"log_dispatch_stats"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>STATS_MONITORING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Writes dispatcher performance statistics to the server log."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>log_dispatch_stats</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>check_dispatch_log_stats</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_minmax_optimization"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the planner's use of index scans with limit to implement MIN/MAX."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_minmax_optimization</name></expr>,
		<expr><name>true</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_multiphase_agg"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the planner's use of two- or three-stage parallel aggregation plans."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"Allows partial aggregation before motion."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_multiphase_agg</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_preunique"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable 2-phase duplicate removal."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"If true, planner may choose to remove duplicates in "</literal>
						 <literal type="string">"two phases--before and after redistribution."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_preunique</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_agg_distinct"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable 2-phase aggregation to compute a single distinct-qualified aggregate."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_agg_distinct</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_agg_distinct_pruning"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable 3-phase aggregation and join to compute distinct-qualified aggregates."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_dqa_pruning</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_explain_allstat"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>CLIENT_CONN_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Experimental feature: dump stats for all segments in EXPLAIN ANALYZE."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_explain_allstat</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_sort_limit"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable LIMIT operation to be performed while sorting."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"Sort more efficiently when plan requires the first &lt;n&gt; rows at most."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_sort_limit</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_explain_jit"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables JIT instrumentation output for EXPLAIN"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_explain_jit</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_motion_deadlock_sanity"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable verbose check at planning time."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_RESET_ALL</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_motion_deadlock_sanity</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_adjust_selectivity_for_outerjoins"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Adjust selectivity of null tests over outer joins."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_adjust_selectivity_for_outerjoins</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_selectivity_damping_for_scans"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Damping of selectivities for clauses over the same base relation."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_selectivity_damping_for_scans</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_selectivity_damping_for_joins"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Damping of selectivities in join clauses."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_selectivity_damping_for_joins</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_selectivity_damping_sigsort"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sort selectivities by ascending significance, i.e. smallest first"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_selectivity_damping_sigsort</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_interconnect_aggressive_retry"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable application-level fast-track interconnect retries"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_RESET_ALL</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_interconnect_aggressive_retry</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_select_invisible"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Use dummy snapshot for MVCC visibility calculation."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_select_invisible</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_slow_writer_testmode"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Slow down writer gangs -- to facilitate race-condition testing."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_slow_writer_testmode</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_debug_pgproc"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print debug info relevant to PGPROC."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr> <comment type="block">/* long description */</comment> ,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_debug_pgproc</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_appendonly_verify_block_checksums"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Verify the append-only block checksum when reading."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_appendonly_verify_block_checksums</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_appendonly_verify_write_block"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Verify the append-only block as it is being written."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_appendonly_verify_write_block</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_appendonly_compaction"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>APPENDONLY_TABLES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Perform append-only compaction instead of eof truncation on vacuum."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_appendonly_compaction</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_heap_require_relhasoids_match"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Issue an error on discovery of a mismatch between relhasoids and a tuple header."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_heap_require_relhasoids_match</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_burn_xids"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Consume a lot of XIDs, for testing purposes."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_burn_xids</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_retrieve_conn"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>GP_WORKER_IDENTITY</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify this is a connection for parallel cursor retrieve"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>am_cursor_retrieve_handler</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,


	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_cost_hashjoin_chainwalk"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_COST</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable the cost for walking the chain in the hash join"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_cost_hashjoin_chainwalk</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_set_proc_affinity"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_KERNEL</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"On postmaster startup, attempt to bind postmaster to a processor"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_set_proc_affinity</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_is_writer"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>GP_WORKER_IDENTITY</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"True in a worker process which can directly update its local database segment."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Gp_is_writer</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_write_shared_snapshot"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Forces the writer gang to set the shared snapshot."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Gp_write_shared_snapshot</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>assign_gp_write_shared_snapshot</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_workfile_compression"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>RESOURCES_DISK</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables compression of temporary files."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_workfile_compression</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>check_gp_workfile_compression</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_reraise_signal"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Do we attempt to dump core when a serious problem occurs."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_RESET_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_reraise_signal</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_external_enable_exec"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>EXTERNAL_TABLES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable selecting from an external table with an EXECUTE clause."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_external_enable_exec</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_fast_sri"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable single-slice single-row inserts."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_fast_sri</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_full_crc"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sanity check incoming data stream."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_interconnect_full_crc</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_log_stats"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Emit statistics from the UDP-IC at the end of every statement."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_interconnect_log_stats</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_cache_future_packets"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Control whether future packets are cached."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_interconnect_cache_future_packets</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"resource_scheduler"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable resource scheduling."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>ResourceScheduler</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"resource_select_only"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable resource locking of SELECT only."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>ResourceSelectOnly</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"resource_cleanup_gangs_on_wait"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable idle gang cleanup before resource lockwait."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>ResourceCleanupIdleGangs</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_debug_resqueue_priority"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print out debugging information about backoff calls."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_debug_resqueue_priority</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_print_full_dtm"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints full DTM information to server log."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_print_full_dtm</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_print_snapshot_dtm"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints snapshot DTM information to server log."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_print_snapshot_dtm</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_disable_distributed_snapshot"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Disables distributed snapshots."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_disable_distributed_snapshot</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_abort_after_distributed_prepared"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Cause an abort after all segments are prepared but before the distributed commit is written."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_abort_after_distributed_prepared</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_appendonly_print_blockdirectory"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print log messages for append-only block directory."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_appendonly_print_blockdirectory</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"Debug_appendonly_print_read_block"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print log messages for append-only reads."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_appendonly_print_read_block</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"Debug_appendonly_print_append_block"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print log messages for append-only writes."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_appendonly_print_append_block</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_appendonly_print_visimap"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print log messages for append-only visibility bitmap information."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_appendonly_print_visimap</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_appendonly_print_compaction"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print log messages about append-only visibility compactions."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_appendonly_print_compaction</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_appendonly_print_insert"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print log messages for append-only insert."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_appendonly_print_insert</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_appendonly_print_insert_tuple"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print log messages for append-only insert tuples (caution -- generates a lot of log!)."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_appendonly_print_insert_tuple</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_appendonly_print_scan"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print log messages for append-only scan."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_appendonly_print_scan</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_appendonly_print_scan_tuple"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print log messages for append-only scan tuples (caution -- generates a lot of log!)."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_appendonly_print_scan_tuple</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_appendonly_print_delete"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print log messages for append-only delete."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_appendonly_print_delete</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_appendonly_print_storage_headers"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print log messages for append-only storage headers."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_appendonly_print_storage_headers</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_appendonly_print_verify_write_block"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print log messages for append-only verify block during write."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_appendonly_print_verify_write_block</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_appendonly_use_no_toast"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Use no toast for an append-only table.  Store the large row inline."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_appendonly_use_no_toast</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_appendonly_print_segfile_choice"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print log messages for append-only writers about their choice for AO segment file."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_appendonly_print_segfile_choice</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"test_AppendOnlyHash_eviction_vs_just_marking_not_inuse"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Helps to test evicting the entry for AppendOnlyHash as soon as its usage is done instead of just marking it not inuse."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>test_AppendOnlyHash_eviction_vs_just_marking_not_inuse</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_appendonly_print_datumstream"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print log messages for append-only datum stream content."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_appendonly_print_datumstream</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_xlog_record_read"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print debug information for xlog record read."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>debug_xlog_record_read</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_cancel_print"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print cancel detail information."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_cancel_print</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_datumstream_write_print_small_varlena_info"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print datum stream write small varlena information."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_datumstream_write_print_small_varlena_info</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_datumstream_write_print_large_varlena_info"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print datum stream write large varlena information."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_datumstream_write_print_large_varlena_info</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_datumstream_read_check_large_varlena_integrity"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Check datum stream large object integrity."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_datumstream_read_check_large_varlena_integrity</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_datumstream_block_read_check_integrity"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Check datum stream block read integrity."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_datumstream_block_read_check_integrity</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_datumstream_block_write_check_integrity"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Check datum stream block write integrity."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_datumstream_block_write_check_integrity</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_datumstream_read_print_varlena_info"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print datum stream read varlena information."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_datumstream_read_print_varlena_info</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_datumstream_write_use_small_initial_buffers"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Use small datum stream write buffers to stress growing logic."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_datumstream_write_use_small_initial_buffers</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"test_print_direct_dispatch_info"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"For testing purposes, print information about direct dispatch decisions."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Test_print_direct_dispatch_info</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"test_print_prefetch_joinqual"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"For testing purposes, print information about if we prefetch join qual."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Test_print_prefetch_joinqual</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"test_copy_qd_qe_split"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"For testing purposes, print information about which columns are parsed in QD and which in QE."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Test_copy_qd_qe_split</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_bitmap_print_insert"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print log messages for bitmap index insert routines (caution-- generate a lot of logs!)"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_bitmap_print_insert</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_dtm_action_primary"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify if the primary or mirror segment is the target of the debug DTM action."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_dtm_action_primary</name></expr>,
		<expr><name>DEBUG_DTM_ACTION_PRIMARY_DEFAULT</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_disable_tuple_hints"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify if hint bits on tuples should be deferred."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<comment type="block">/*
		 * If gp_disable_tuple_hints is off, always mark buffer dirty.
		 * If gp_disable_tuple_hints is on, defer marking the buffer dirty
		 * until after transaction is identified as old.
		 * (unless it is a catalog table) See: markDirty
		 */</comment>
		<expr><operator>&amp;</operator><name>gp_disable_tuple_hints</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_local_distributed_cache_stats"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints local-distributed cache statistics at end of commit / prepare."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_local_distributed_cache_stats</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_query_metrics"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable all query metrics collection."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_query_metrics</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"coredump_on_memerror"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Generate core dump on memory error."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>coredump_on_memerror</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"log_autostats"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Logs details of auto-stats issued ANALYZEs."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>log_autostats</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_statistics_pullup_from_child_partition"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc enables the planner to utilize statistics from partitions in planning queries on the parent."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_statistics_pullup_from_child_partition</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_statistics_use_fkeys"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc enables the planner to utilize statistics derived from foreign key relationships."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_statistics_use_fkeys</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resqueue_priority"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables priority scheduling."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_resqueue_priority</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_resource_group"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints resource groups debug logs."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_resource_group</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_walrepl_snd"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print debug messages for WAL sender in WAL based replication (Master Mirroring)."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>debug_walrepl_snd</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_walrepl_syncrep"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print debug messages for synchronous behavior in WAL based replication (Master Mirroring)."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>debug_walrepl_syncrep</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_walrepl_rcv"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print debug messages for WAL receiver in WAL based replication (Master Mirroring)."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>debug_walrepl_rcv</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_basebackup"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print debug messages for basebackup mechanism (Master Mirroring)."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>debug_basebackup</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_encoding_check_locale_compatibility"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>CLIENT_CONN_LOCALE</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable check for compatibility of encoding and locale in createdb"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_encoding_check_locale_compatibility</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<comment type="block">/* for pljava */</comment>
	<expr><block>{
		<expr><block>{<expr><literal type="string">"pljava_release_lingering_savepoints"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>CUSTOM_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"If true, lingering savepoints will be released on function exit; if false, they will be rolled back"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_SUPERUSER_ONLY</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>pljava_release_lingering_savepoints</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"pljava_debug"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Stop the backend to attach a debugger"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_SUPERUSER_ONLY</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>pljava_debug</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_log_stack_trace_lines"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Control if file/line information is included in stack traces"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_log_stack_trace_lines</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{

		<expr><block>{<expr><literal type="string">"gp_log_resqueue_memory"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints out messages related to resource queue's memory management."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_log_resqueue_memory</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{

		<expr><block>{<expr><literal type="string">"gp_log_resgroup_memory"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints out messages related to resource group's memory management."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_log_resgroup_memory</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resqueue_print_operator_memory_limits"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints out the memory limit for operators (in explain) assigned by resource queue's "</literal>
						 <literal type="string">"memory management."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resqueue_print_operator_memory_limits</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resgroup_print_operator_memory_limits"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints out the memory limit for operators (in explain) assigned by resource group's "</literal>
						 <literal type="string">"memory management."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resgroup_print_operator_memory_limits</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resgroup_debug_wait_queue"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable the debugging check on the wait queue of resource group."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resgroup_debug_wait_queue</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_dynamic_partition_pruning"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc enables plans that can dynamically eliminate scanning of partitions."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_dynamic_partition_pruning</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_cte_sharing"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc enables sharing of plan fragments for common table expressions."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_cte_sharing</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_relsize_collection"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc enables relsize collection when stats are not present. If disabled and stats are not present a default "</literal>
					     <literal type="string">"value is used."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_relsize_collection</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_log_dynamic_partition_pruning"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc enables debug messages related to dynamic partition pruning."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_log_dynamic_partition_pruning</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_create_table_random_default_distribution"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>COMPAT_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the default distribution of a table to RANDOM."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_create_table_random_default_distribution</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_allow_non_uniform_partitioning_ddl"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>COMPAT_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allow DDL that will create multi-level partition table with non-uniform hierarchy."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_allow_non_uniform_partitioning_ddl</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_print_create_gang_time"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>CUSTOM_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allow print information about create gang time."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_print_create_gang_time</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_recursive_cte_prototype"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEPRECATED_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable RECURSIVE clauses in CTE queries (deprecated option, use \"gp_recursive_cte\" instead)."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_recursive_cte</name></expr>,
		<expr><name>true</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_recursive_cte"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable RECURSIVE clauses in CTE queries."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_recursive_cte</name></expr>,
		<expr><name>true</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_eager_two_phase_agg"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Eager two stage agg."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_eager_two_phase_agg</name></expr>,
		<expr><name>false</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable GPORCA."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ORCA</name></cpp:ifdef>
		<expr><name>true</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr><name>false</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr><name>check_optimizer</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_log"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Log optimizer messages."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_log</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_trace_fallback"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print a message at INFO level, whenever GPORCA falls back."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_trace_fallback</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_partition_selection_log"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Log optimizer partition selection."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_partition_selection_log</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_print_query"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints the optimizer's input query expression tree."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_print_query</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_print_plan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints the plan expression tree produced by the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_print_plan</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_print_xform"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints optimizer transformation information."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_print_xform</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_metadata_caching"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc enables the optimizer to cache and reuse metadata."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_metadata_caching</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_print_missing_stats"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print columns with missing statistics."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_print_missing_stats</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_print_xform_results"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print the input and output of optimizer transformations."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_print_xform_results</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_print_memo_after_exploration"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print optimizer memo structure after the exploration phase."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_print_memo_after_exploration</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_print_memo_after_implementation"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print optimizer memo structure after the implementation phase."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_print_memo_after_implementation</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_print_memo_after_optimization"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print optimizer memo structure after optimization."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_print_memo_after_optimization</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_print_job_scheduler"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print the jobs in the scheduler on each job completion."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_print_job_scheduler</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_print_expression_properties"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print expression properties."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_print_expression_properties</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_print_group_properties"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print group properties."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_print_group_properties</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_print_optimization_context"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print the optimization context."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_print_optimization_context</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_print_optimization_stats"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print optimization stats."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_print_optimization_stats</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_extract_dxl_stats"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Extract plan stats in dxl."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_extract_dxl_stats</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_extract_dxl_stats_all_nodes"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Extract plan stats for all physical dxl nodes."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_extract_dxl_stats_all_nodes</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_dpe_stats"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable statistics derivation for partitioned tables with dynamic partition elimination."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_dpe_stats</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_nljoin"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable nested loops join plans in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_nljoin</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_indexjoin"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable index nested loops join plans in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_indexjoin</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_motions_masteronly_queries"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Motion operators in the optimizer for queries with no distributed tables."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_motions_masteronly_queries</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_motions"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Motion operators in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_motions</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_motion_broadcast"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Motion Broadcast operators in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_motion_broadcast</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_motion_gather"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Motion Gather operators in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_motion_gather</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_motion_redistribute"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Motion Redistribute operators in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_motion_redistribute</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_sort"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Sort operators in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_sort</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_materialize"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Materialize operators in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_materialize</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_partition_propagation"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Partition Propagation operators in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_partition_propagation</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_partition_selection"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Partition Selection operators in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_partition_selection</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_outerjoin_rewrite"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable outer join to inner join rewrite in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_outerjoin_rewrite</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_direct_dispatch"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable direct dispatch in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_direct_dispatch</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_control"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allow/disallow turning the optimizer on or off."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_control</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_space_pruning"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable space pruning in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_space_pruning</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_master_only_queries"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Process master only queries via the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_master_only_queries</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_hashjoin"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the optimizer's use of hash join plans."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_hashjoin</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_dynamictablescan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the optimizer's use of plans with dynamic table scan."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_dynamictablescan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_indexscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the optimizer's use of plans with index scan."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_indexscan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_indexonlyscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the optimizer's use of plans with index only scan."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_indexonlyscan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_tablescan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the optimizer's use of plans with table scan."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_tablescan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_hashagg"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables Pivotal Optimizer (GPORCA) to use hash aggregates."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_hashagg</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_groupagg"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables Pivotal Optimizer (GPORCA) to use group aggregates."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_groupagg</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_force_agg_skew_avoidance"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Always pick a plan for aggregate distinct that minimizes skew."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_force_agg_skew_avoidance</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_penalize_skew"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Penalize operators with skewed hash redistribute below it."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_penalize_skew</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_multilevel_partitioning"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable optimization of queries on multilevel partitioned tables."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_multilevel_partitioning</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_derive_stats_all_groups"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable stats derivation for all groups after exploration."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_derive_stats_all_groups</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_force_multistage_agg"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Force optimizer to always pick multistage aggregates when such a plan alternative is generated."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_force_multistage_agg</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_multiple_distinct_aggs"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with multiple distinct aggregates in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_multiple_distinct_aggs</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_force_expanded_distinct_aggs"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Always pick plans that expand multiple distinct aggregates into join of single distinct aggregate in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_force_expanded_distinct_aggs</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_prune_computed_columns"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prune unused computed columns when pre-processing query"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_prune_computed_columns</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_push_requirements_from_consumer_to_producer"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Optimize CTE producer plan on requirements enforced on top of CTE consumer in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_push_requirements_from_consumer_to_producer</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_hashjoin_redistribute_broadcast_children"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable hash join plans with, Redistribute outer child and Broadcast inner child, in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_hashjoin_redistribute_broadcast_children</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_broadcast_nestloop_outer_child"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable nested loops join plans with replicated outer child in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_broadcast_nestloop_outer_child</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_expand_fulljoin"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the optimizer's support of expanding full outer joins using union all."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_expand_fulljoin</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_mergejoin"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the optimizer's support of merge joins."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_mergejoin</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_streaming_material"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with a streaming material node in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_streaming_material</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_gather_on_segment_for_dml"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable DML optimization by enforcing a non-master gather in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_gather_on_segment_for_dml</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enforce_subplans"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enforce correlated execution in the optimizer"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enforce_subplans</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_assert_maxonerow"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable Assert MaxOneRow plans to check number of rows at runtime."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_assert_maxonerow</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enumerate_plans"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plan enumeration"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enumerate_plans</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_sample_plans"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plan sampling"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_sample_plans</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_cte_inlining"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable CTE inlining"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_cte_inlining</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_analyze_root_partition"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>STATS_ANALYZE</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable statistics collection on root partitions during ANALYZE"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_analyze_root_partition</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_analyze_midlevel_partition"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>STATS_ANALYZE</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable statistics collection on intermediate partitions during ANALYZE"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_analyze_midlevel_partition</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_constant_expression_evaluation"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable constant expression evaluation in the optimizer"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_constant_expression_evaluation</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_use_external_constant_expression_evaluation_for_ints"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Use external constant expression evaluation in the optimizer for all integer types"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_use_external_constant_expression_evaluation_for_ints</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_bitmapscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable bitmap plans in the optimizer"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_bitmapscan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_outerjoin_to_unionall_rewrite"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable rewriting Left Outer Join to UnionAll"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_outerjoin_to_unionall_rewrite</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_apply_left_outer_to_union_all_disregarding_stats"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Always apply Left Outer Join to Inner Join UnionAll Left Anti Semi Join without looking at stats."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_apply_left_outer_to_union_all_disregarding_stats</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_ctas"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable CTAS plans in the optimizer"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_ctas</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_remove_order_below_dml"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Remove OrderBy below a DML operation"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_remove_order_below_dml</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_dml"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable DML plans in Pivotal Optimizer (GPORCA)."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_dml</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_dml_constraints"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Support DML with CHECK constraints and NOT NULL constraints."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_dml_constraints</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_log_optimization_time"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Writes time spent producing a plan to the server log"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_log_optimization_time</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_reject_internal_tcp_connection"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>,
			<expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Permit internal TCP connections to the master."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_reject_internal_tcp_conn</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_force_three_stage_scalar_dqa"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Force optimizer to always pick 3 stage aggregate plan for scalar distinct qualified aggregate."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_force_three_stage_scalar_dqa</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_parallel_union"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable parallel execution for UNION/UNION ALL queries."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_parallel_union</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_array_constraints"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allows the optimizer's constraint framework to derive array constraints."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_array_constraints</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_use_gpdb_allocators"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable ORCA to use GPDB Memory Contexts"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_use_gpdb_allocators</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"vmem_process_interrupt"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Checks for interrupts before reserving VMEM"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>vmem_process_interrupt</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"execute_pruned_plan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prune plan to discard unwanted plan nodes for each slice before execution"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>execute_pruned_plan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"pljava_classpath_insecure"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>CUSTOM_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allow pljava_classpath to be set by user per session"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>pljava_classpath_insecure</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>check_pljava_classpath_insecure</name></expr>, <expr><name>assign_pljava_classpath_insecure</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_segment_copy_checking"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>CUSTOM_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable check the distribution key restriction on segment for command \"COPY FROM ON SEGMENT\"."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_segment_copy_checking</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_ignore_error_table"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>COMPAT_OPTIONS_PREVIOUS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Ignore INTO error-table in external table and COPY (Deprecated)."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_ignore_error_table</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_associativity"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables Join Associativity in optimizer"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_associativity</name></expr>,
		<expr><name>false</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_replicated_table_insert"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>STATS_ANALYZE</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Omit broadcast motion when inserting into replicated table"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Only when source is SegmentGeneral or General locus"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_replicated_table_insert</name></expr>,
		<expr><name>true</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"verify_gpfdists_cert"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>EXTERNAL_TABLES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Verifies the authenticity of the gpfdist's certificate"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>verify_gpfdists_cert</name></expr>,
		<expr><name>true</name></expr>, <expr><name>check_verify_gpfdists_cert</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_external_enable_filter_pushdown"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>EXTERNAL_TABLES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable passing of query constraints to external table providers"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_external_enable_filter_pushdown</name></expr>,
		<expr><name>true</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resource_group_bypass"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>RESOURCES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"If the value is true, the query in this session will not be limited by resource group."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resource_group_bypass</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>check_gp_resource_group_bypass</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resource_group_cpu_ceiling_enforcement"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"If the value is true, ceiling enforcement of CPU usage will be enabled"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resource_group_cpu_ceiling_enforcement</name></expr>,
		<expr><name>false</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resource_group_enable_recalculate_query_mem"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>RESOURCES</name></expr>,
		 	<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable resource group re-calculate the query_mem on QE"</literal></expr></argument>)</argument_list></call></expr>,
		 	<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resource_group_enable_recalculate_query_mem</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resource_group_enable_cgroup_version_two"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable linux cgroup version 2"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resource_group_enable_cgroup_version_two</name></expr>,
		<expr><name>false</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"stats_queue_level"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>STATS_COLLECTOR</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Collects resource queue-level statistics on database activity."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>pgstat_collect_queuelevel</name></expr>,
		<expr><name>false</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"create_restartpoint_on_ckpt_record_replay"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Creates a restartpoint only on mirror immediately after replaying a checkpoint record."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>create_restartpoint_on_ckpt_record_replay</name></expr>,
		<expr><name>false</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_enable_global_deadlock_detector"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>CUSTOM_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the Global Deadlock Detector."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_enable_global_deadlock_detector</name></expr>,
		<expr><name>false</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
    }</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_log_endpoints"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints endpoints information to server log."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_log_endpoints</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_allow_date_field_width_5digits"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>COMPAT_OPTIONS_PREVIOUS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allow parsing input date field with exactly continous 5 digits in non-standard YYYMMDD timeformat (follow pg12+ behave)"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_allow_date_field_width_5digits</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_eageragg"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable Eager Agg transform for pushing aggregate below an innerjoin."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_eageragg</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_prune_unused_columns"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prune unused table columns during query optimization."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_prune_unused_columns</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_range_predicate_dpe"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable range predicates for dynamic partition elimination."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_range_predicate_dpe</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_pause_on_restore_point_replay"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Pause recovery when a restore point is replayed."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>,
		 <expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_pause_on_restore_point_replay</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_autostats_allow_nonowner"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allow automatic stats collection on tables even for users who are not the owner of the relation."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"If disabled, table statistics will be updated only when tables are modified by the owners of the relations."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_autostats_allow_nonowner</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_redistribute_nestloop_loj_inner_child"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable nested loops left join plans with redistributed inner child in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_enable_redistribute_nestloop_loj_inner_child</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_force_comprehensive_join_implementation"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Explore a nested loop join even if a hash join is possible"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_force_comprehensive_join_implementation</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_enable_replicated_table"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable replicated tables."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>,
		 <expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		 }</block></expr>,
		 <expr><operator>&amp;</operator><name>optimizer_enable_replicated_table</name></expr>,
		 <expr><name>true</name></expr>,
		 <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_log_suboverflow_statement"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable logging of statements that cause subtransaction overflow."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>,
		 }</block></expr>,
		 <expr><operator>&amp;</operator><name>gp_log_suboverflow_statement</name></expr>,
		 <expr><name>false</name></expr>,
		 <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<comment type="block">/* End-of-list marker */</comment>
	<expr><block>{
		<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><name>false</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>config_int</name></name></type> <name><name>ConfigureNamesInt_gp</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{
		<expr><block>{<expr><literal type="string">"readable_external_table_timeout"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>EXTERNAL_TABLES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Cancel the query if no data read within N seconds."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"A value of 0 turns off the timeout."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_S</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>readable_external_table_timeout</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gpfdist_retry_timeout"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>EXTERNAL_TABLES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Timeout (in seconds) for writing data to gpfdist server."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Default value is 300."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_S</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gpfdist_retry_timeout</name></expr>,
		<expr><literal type="number">300</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7200</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"writable_external_table_bufsize"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>EXTERNAL_TABLES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Buffer size in kilobytes for writable external table before writing data to gpfdist."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid value is between 32K and 128M: [32, 131072]."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_KB</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>writable_external_table_bufsize</name></expr>,
		<expr><literal type="number">64</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">131072</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_max_local_distributed_cache"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the number of local-distributed transactions to cache for optimizing visibility processing by backends."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_max_local_distributed_cache</name></expr>,
		<expr><literal type="number">1024</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_dtm_action_segment"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the debug DTM action segment."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_dtm_action_segment</name></expr>,
		<expr><name>DEBUG_DTM_ACTION_SEGMENT_DEFAULT</name></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">1000</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_dtm_action_nestinglevel"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the debug DTM action transaction nesting level."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_dtm_action_nestinglevel</name></expr>,
		<expr><name>DEBUG_DTM_ACTION_NESTINGLEVEL_DEFAULT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1000</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_safefswritesize"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>RESOURCES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Minimum FS safe write size."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_safefswritesize</name></expr>,
		<expr><name>DEFAULT_FS_SAFE_WRITE_SIZE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"planner_work_mem"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum memory to be used for query workspaces, "</literal>
						 <literal type="string">"used in the planner only."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"The planner considers this much memory may be used by each internal "</literal>
						 <literal type="string">"sort operation and hash table before switching to "</literal>
						 <literal type="string">"temporary disk files."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_KB</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>planner_work_mem</name></expr>,
		<expr><literal type="number">32768</literal></expr>, <expr><literal type="number">2</literal> <operator>*</operator> <name>BLCKSZ</name> <operator>/</operator> <literal type="number">1024</literal></expr>, <expr><name>MAX_KILOBYTES</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"statement_mem"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the memory to be reserved for a statement."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_KB</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>statement_mem</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
		<comment type="block" format="doxygen">/** Allow lower values for testing */</comment>
		<expr><literal type="number">128000</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><name>INT_MAX</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr><literal type="number">128000</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><name>INT_MAX</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr><name>gpvars_check_statement_mem</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"memory_spill_ratio"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the memory_spill_ratio for resource group."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>memory_spill_ratio</name></expr>,
		<expr><literal type="number">20</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resource_group_cpu_priority"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the cpu priority for postgres processes when resource group is enabled."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resource_group_cpu_priority</name></expr>,
		<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">50</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"max_statement_mem"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum value for statement_mem setting."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_KB</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>max_statement_mem</name></expr>,
		<expr><literal type="number">2048000</literal></expr>, <expr><literal type="number">32768</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_vmem_limit_per_query"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum allowed memory per-statement on each segment."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_KB</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_vmem_limit_per_query</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_max_plan_size"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum size of a plan to be dispatched."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_KB</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_max_plan_size</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_KILOBYTES</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_appendonly_compaction_threshold"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>APPENDONLY_TABLES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Threshold of the ratio of dirty data in a segment file over which the file"</literal>
						 <literal type="string">" will be compacted during lazy vacuum."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_appendonly_compaction_threshold</name></expr>,
		<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_workfile_max_entries"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum number of entries that can be stored in the workfile directory"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_workfile_max_entries</name></expr>,
		<expr><literal type="number">8192</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_workfile_limit_files_per_query"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>RESOURCES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum number of workfiles allowed per query per segment."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"0 for no limit. Current query is terminated when limit is exceeded."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_workfile_limit_files_per_query</name></expr>,
		<expr><literal type="number">100000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_workfile_limit_per_segment"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum disk space (in KB) used for workfiles per segment."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"0 for no limit. Current query is terminated when limit is exceeded."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_KB</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_workfile_limit_per_segment</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_workfile_limit_per_query"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>RESOURCES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum disk space (in KB) used for workfiles per query per segment."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"0 for no limit. Current query is terminated when limit is exceeded."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_KB</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_workfile_limit_per_query</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_vmem_idle_resource_timeout"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>CLIENT_CONN_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the time a session can be idle (in milliseconds) before we release gangs on the segment DBs to free resources."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"A value of 0 turns off the timeout."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_MS</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>IdleSessionGangTimeout</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
		<expr><literal type="number">600000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,	<comment type="block">/* 10 minutes by default on debug
										 * builds. */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr><literal type="number">18000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"xid_stop_limit"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>WAL</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the number of XIDs before XID wraparound at which we will no longer allow the system to be started."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>xid_stop_limit</name></expr>,
		<expr><literal type="number">100000000</literal></expr>, <expr><literal type="number">10000000</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"xid_warn_limit"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>WAL</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the number of XIDs before xid_stop_limit at which we will begin emitting warnings regarding XID wraparound."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>xid_warn_limit</name></expr>,
		<expr><literal type="number">500000000</literal></expr>, <expr><literal type="number">10000000</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_gxid_prefetch_num"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>WAL</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"how many gxid is prefetched in each bumping batch."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_gxid_prefetch_num</name></expr>,
		<expr><literal type="number">8192</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_dbid"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>PRESET_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"The dbid used by this server."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name><name>GpIdentity</name><operator>.</operator><name>dbid</name></name></expr>,
		<expr><name>UNINITIALIZED_GP_IDENTITY_VALUE</name></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_contentid"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>PRESET_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"The contentid used by this server."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name></expr>,
		<expr><name>UNINITIALIZED_GP_IDENTITY_VALUE</name></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<comment type="block">/*
	 * Solaris doesn't support setting SO_SNDTIMEO, so setting this won't work
	 * on Solaris (MPP-22526)
	 */</comment>
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_connection_send_timeout"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>CLIENT_CONN_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Timeout for sending data to unresponsive clients (seconds)"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"A value of 0 uses the system default."</literal></expr></argument>)</argument_list></call></expr>,
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_connection_send_timeout</name></expr>,
		<expr><literal type="number">3600</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"max_resource_queues"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum number of resource queues."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>MaxResourceQueues</name></expr>,
		<expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"max_resource_portals_per_transaction"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum number of resource queues."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>MaxResourcePortalsPerXact</name></expr>,
		<expr><literal type="number">64</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_external_max_segs"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>EXTERNAL_TABLES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum number of segments that connect to a single gpfdist URL."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_external_max_segs</name></expr>,
		<expr><literal type="number">64</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_max_packet_size"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the max packet size for the Interconnect."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Gp_max_packet_size</name></expr>,
		<expr><name>DEFAULT_PACKET_SIZE</name></expr>, <expr><name>MIN_PACKET_SIZE</name></expr>, <expr><name>MAX_PACKET_SIZE</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_queue_depth"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum size of the receive queue for each connection in the UDP interconnect"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Gp_interconnect_queue_depth</name></expr>,
		<expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4096</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_snd_queue_depth"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum size of the send queue for each connection in the UDP interconnect"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Gp_interconnect_snd_queue_depth</name></expr>,
		<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4096</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_timer_period"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the timer period (in ms) for UDP interconnect"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_MS</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Gp_interconnect_timer_period</name></expr>,
		<expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">100</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_timer_checking_period"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the timer checking period (in ms) for UDP interconnect"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_MS</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Gp_interconnect_timer_checking_period</name></expr>,
		<expr><literal type="number">20</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">100</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_default_rtt"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the default rtt (in ms) for UDP interconnect"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_MS</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Gp_interconnect_default_rtt</name></expr>,
		<expr><literal type="number">20</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1000</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_min_rto"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the min rto (in ms) for UDP interconnect"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_MS</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Gp_interconnect_min_rto</name></expr>,
		<expr><literal type="number">20</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1000</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_transmit_timeout"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Timeout (in seconds) on interconnect to transmit a packet"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Used by Interconnect to timeout packet transmission."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_S</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Gp_interconnect_transmit_timeout</name></expr>,
		<expr><literal type="number">3600</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7200</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_min_retries_before_timeout"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the min retries before reporting a transmit timeout in the interconnect."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Gp_interconnect_min_retries_before_timeout</name></expr>,
		<expr><literal type="number">100</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4096</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_debug_retry_interval"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the interval by retry times to record a debug message for retry."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Gp_interconnect_debug_retry_interval</name></expr>,
		<expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4096</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_udp_bufsize_k"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets recv buf size of UDP interconnect, for testing."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Gp_udp_bufsize_k</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32768</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_udpic_dropseg"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specifies a segment to which the dropacks, and dropxmit settings will be applied, for testing. (The default is to apply the dropacks and dropxmit settings to all segments)"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_udpic_dropseg</name></expr>,
		<expr><name>UNDEF_SEGMENT</name></expr>, <expr><name>UNDEF_SEGMENT</name></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_udpic_dropacks_percent"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the percentage of correctly-received acknowledgment packets to synthetically drop, for testing. (affected by gp_udpic_dropseg)"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_udpic_dropacks_percent</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_udpic_dropxmit_percent"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the percentage of correctly-received data packets to synthetically drop, for testing. (affected by gp_udpic_dropseg)"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_udpic_dropxmit_percent</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_udpic_fault_inject_percent"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the percentage of fault injected into system calls, for testing. (affected by gp_udpic_dropseg)"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_udpic_fault_inject_percent</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_udpic_fault_inject_bitmap"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the bitmap for faults injection, for testing. (affected by gp_udpic_dropseg)"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_udpic_fault_inject_bitmap</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_udpic_network_disable_ipv6"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the address info hint to disable the ipv6, for testing. (affected by gp_udpic_dropseg)"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_udpic_network_disable_ipv6</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_command_count"</literal></expr>, <expr><name>PGC_INTERNAL</name></expr>, <expr><name>CLIENT_CONN_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Shows the number of commands received from the client in this session."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_command_count</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_subtrans_warn_limit"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the warning limit on number of subtransactions in a transaction."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_subtrans_warn_limit</name></expr>,
		<expr><literal type="number">16777216</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_cached_segworkers_threshold"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum number of segment workers to cache between statements."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_cached_gang_threshold</name></expr>,
		<expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,


	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_debug_linger"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Number of seconds for QD/QE process to linger upon fatal internal error."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allows an opportunity to debug the backend process before it terminates."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name> <operator>|</operator> <name>GUC_UNIT_S</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_debug_linger</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3600</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_qd_port"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>GP_WORKER_IDENTITY</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Shows the Master Postmaster port."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"0 for a session's entry process (qDisp)"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>qdPostmasterPort</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_setup_timeout"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Timeout (in seconds) on interconnect setup that occurs at query start"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Used by Interconnect to timeout the setup of the communication fabric."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_S</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>interconnect_setup_timeout</name></expr>,
		<expr><literal type="number">7200</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7200</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_tcp_listener_backlog"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Size of the listening queue for each TCP interconnect socket"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Cooperate with kernel parameter net.core.somaxconn and net.ipv4.tcp_max_syn_backlog to tune network performance."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>listenerBacklog</name></expr>,
		<comment type="block">/*
		 * GPDB_12_MERGE_FIXME: in order to make case DML_over_joins
		 * pass under tcp interconnect mode, enlarge this GUC's default
		 * value to 256 as a work-around. Without this change, the case
		 * will throw warnings like:
		 *   +HINT:  Try enlarging the gp_interconnect_tcp_listener_backlog GUC value and OS net.core.somaxconn parameter
		 *   +WARNING:  SetupTCPInterconnect: too many expected incoming connections(144), Interconnect setup might possibly fail
		 * This is because the plan fallback from orca to planner, and planner
		 * removes the motion under modifytable plannode by the PR: https://github.com/greenplum-db/gpdb/pull/9183
		 * We should consider to remove the locus check in the PR 9183 and that would fix the case.
		 * Also we should find out why orca fallback to planner for this simple case.
		 */</comment>
		<expr><literal type="number">256</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65535</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_snapshotadd_timeout"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Timeout (in seconds) on setup of new connection snapshot"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Used by the transaction manager."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_UNIT_S</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_snapshotadd_timeout</name></expr>,
		<expr><literal type="number">30</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_segment_connect_timeout"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum time (in seconds) allowed for a new worker process to start or a mirror to respond."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"0 indicates 'wait forever'."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_S</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_segment_connect_timeout</name></expr>,
		<expr><literal type="number">180</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_fts_probe_retries"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Number of retries for FTS to complete probing a segment."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Used by the fts-probe process."</literal></expr></argument>)</argument_list></call></expr>,
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_fts_probe_retries</name></expr>,
		<expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_fts_probe_timeout"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum time (in seconds) allowed for FTS to complete probing a segment."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Used by the fts-probe process."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_S</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_fts_probe_timeout</name></expr>,
		<expr><literal type="number">20</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3600</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_fts_probe_interval"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"A complete probe of all segments starts each time a timer with this period expires."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Used by the fts-probe process. "</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_S</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_fts_probe_interval</name></expr>,
		<expr><literal type="number">60</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3600</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_fts_mark_mirror_down_grace_period"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Time (in seconds) allowed to mirror after disconnection, to reconnect before being marked as down in configuration by FTS."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Used by the fts-probe process."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_S</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_fts_mark_mirror_down_grace_period</name></expr>,
		<expr><literal type="number">30</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3600</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_fts_replication_attempt_count"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Primary-mirror replication connection max continuously attempt count for FTS"</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"Used by the fts-probe process."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_fts_replication_attempt_count</name></expr>,
		<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_dtx_recovery_interval"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"A complete checking in dtx recovery process starts each time a timer with this period expires."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Used by the dtx recovery process. "</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_S</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_dtx_recovery_interval</name></expr>,
		<expr><literal type="number">60</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3600</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_dtx_recovery_prepared_period"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Gather prepared transactions before the time (in seconds) to find potential orphaned ones."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Used by the dtx recovery process. "</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_S</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_dtx_recovery_prepared_period</name></expr>,
		<expr><literal type="number">120</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3600</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_gang_creation_retry_count"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"After a gang-creation fails, retry the number of times if failure is retryable."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"A value of zero disables retries."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_gang_creation_retry_count</name></expr>,
		<expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_gang_creation_retry_timer"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Wait this many milliseconds between gang-creation-retries."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_MS</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_gang_creation_retry_timer</name></expr>,
		<expr><literal type="number">2000</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">120000</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_session_id"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>CLIENT_CONN_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Global ID used to uniquely identify a particular session in an Greenplum Database array"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_session_id</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_segments_for_planner"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_COST</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"If &gt;0, number of segment dbs for the planner to assume in its cost and size estimates."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"If 0, estimates are based on the actual number of segment dbs."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_segments_for_planner</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_hashjoin_tuples_per_bucket"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Target density of hashtable used by Hashjoin during execution"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"A smaller value will tend to produce larger hashtables, which increases join performance"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_hashjoin_tuples_per_bucket</name></expr>,
		<expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">25</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_hashagg_groups_per_bucket"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Target density of hashtable used by Hashagg during execution"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"A smaller value will tend to produce larger hashtables, which increases agg performance"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_hashagg_groups_per_bucket</name></expr>,
		<expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">25</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_hashagg_default_nbatches"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Default number of batches for hashagg's (re-)spilling phases."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Must be a power of two."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_hashagg_default_nbatches</name></expr>,
		<expr><literal type="number">32</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1048576</literal></expr>,
		<expr><name>check_gp_hashagg_default_nbatches</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_motion_slice_noop"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Make motion nodes in certain slices noop"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Make motion nodes noop, to help analyze performance"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_motion_slice_noop</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_reject_percent_threshold"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ERROR_HANDLING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Reject limit in percent starts calculating after this number of rows processed"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_reject_percent_threshold</name></expr>,
		<expr><literal type="number">300</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_instrument_shmem_size"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the size of shmem allocated for instrumentation."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_KB</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_instrument_shmem_size</name></expr>,
		<expr><literal type="number">5120</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">131072</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_vmem_protect_limit"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Virtual memory limit (in MB) of Greenplum memory protection."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_vmem_protect_limit</name></expr>,
		<expr><literal type="number">8192</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"runaway_detector_activation_percent"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"The runaway detector activates if the used vmem exceeds this percentage of the vmem quota. Set to 0 or 100 to disable runaway detection."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
		}</block></expr>,
		<expr><operator>&amp;</operator><name>runaway_detector_activation_percent</name></expr>,
		<expr><literal type="number">90</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_vmem_protect_segworker_cache_limit"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Max virtual memory limit (in MB) for a segworker to be cachable."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_vmem_protect_gang_cache_limit</name></expr>,
		<expr><literal type="number">500</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_autostats_on_change_threshold"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Threshold for number of tuples added to table by CTAS or Insert-to to trigger autostats in on_change mode. See gp_autostats_mode."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_autostats_on_change_threshold</name></expr>,
		<expr><name>INT_MAX</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resqueue_priority_local_interval"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"A measure of how often a backend process must consider backing off."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resqueue_priority_local_interval</name></expr>,
		<expr><literal type="number">100000</literal></expr>, <expr><literal type="number">500</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resqueue_priority_sweeper_interval"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Frequency (in ms) at which sweeper process re-evaluates CPU shares."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resqueue_priority_sweeper_interval</name></expr>,
		<expr><literal type="number">1000</literal></expr>, <expr><literal type="number">500</literal></expr>, <expr><literal type="number">15000</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resqueue_priority_inactivity_timeout"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"If a backend does not report progress in this time (in ms), it is deemed inactive."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resqueue_priority_inactivity_timeout</name></expr>,
		<expr><literal type="number">2000</literal></expr>, <expr><literal type="number">500</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resqueue_priority_grouping_timeout"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"A backend gives up on finding a better group leader after this timeout (in ms)."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resqueue_priority_grouping_timeout</name></expr>,
		<expr><literal type="number">1000</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resource_group_queuing_timeout"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"A transaction gives up on queuing on a resource group after this timeout (in ms)."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_MS</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resource_group_queuing_timeout</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_blockdirectory_entry_min_range"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Minimal range in bytes one block directory entry covers."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Used to reduce the size of a block directory."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_blockdirectory_entry_min_range</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_blockdirectory_minipage_size"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Number of entries one row in a block directory table contains."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Use smaller value in non-bulk load cases."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_blockdirectory_minipage_size</name></expr>,
		<expr><name>NUM_MINIPAGE_ENTRIES</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NUM_MINIPAGE_ENTRIES</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,


	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_segworker_relative_priority"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Priority for the segworkers relative to the postmaster's priority."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_segworker_relative_priority</name></expr>,
		<expr><name>PRIO_MAX</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>PRIO_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<comment type="block">/* for pljava */</comment>
	<expr><block>{
		<expr><block>{<expr><literal type="string">"pljava_statement_cache_size"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>CUSTOM_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Size of the prepared statement MRU cache"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_SUPERUSER_ONLY</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>pljava_statement_cache_size</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">512</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resqueue_memory_policy_auto_fixed_mem"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the fixed amount of memory reserved for non-memory intensive operators in the AUTO policy."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_KB</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resqueue_memory_policy_auto_fixed_mem</name></expr>,
		<expr><literal type="number">100</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resgroup_memory_policy_auto_fixed_mem"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the fixed amount of memory reserved for non-memory intensive operators in the AUTO policy."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_KB</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resgroup_memory_policy_auto_fixed_mem</name></expr>,
		<expr><literal type="number">100</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_global_deadlock_detector_period"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>LOCK_MANAGEMENT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the executing period of global deadlock detector backend."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_S</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_global_deadlock_detector_period</name></expr>,
		<expr><literal type="number">120</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_plan_id"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Choose a plan alternative"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_plan_id</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_samples_number"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the number of plan samples"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_samples_number</name></expr>,
		<expr><literal type="number">1000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_cte_inlining_bound"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the CTE inlining cutoff"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_cte_inlining_bound</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_segments"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Number of segments to be considered by the optimizer during costing, or 0 to take the actual number of segments."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_segments</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_array_expansion_threshold"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Item limit for expansion of arrays in WHERE clause for constraint derivation."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_array_expansion_threshold</name></expr>,
		<expr><literal type="number">20</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_push_group_by_below_setop_threshold"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum number of children setops have to consider pushing group bys below it"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_push_group_by_below_setop_threshold</name></expr>,
		<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_xform_bind_threshold"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum number bindings per xform per group expression"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_xform_bind_threshold</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

    <expr><block>{
            <expr><block>{<expr><literal type="string">"optimizer_skew_factor"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
             <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Coefficient of skew ratio computed from sample stastics. Default 0: skew computation from sample statistics turned off. [1,100]: skew ratio computed from sample statistics. The skewness used for costing is the product of the optimizer_skew_factor and the skew ratio."</literal></expr></argument>)</argument_list></call></expr>,
             <expr><name>NULL</name></expr>,
             <expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
            }</block></expr>,
            <expr><operator>&amp;</operator><name>optimizer_skew_factor</name></expr>,
            <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>,
            <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
    }</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_join_order_threshold"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum number of join children to use dynamic programming based join ordering algorithm."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_join_order_threshold</name></expr>,
		<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_join_arity_for_associativity_commutativity"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum number of children n-ary-join have without disabling commutativity and associativity transform"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_join_arity_for_associativity_commutativity</name></expr>,
		<expr><literal type="number">18</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_penalize_broadcast_threshold"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum number of rows of a relation that can be broadcasted without penalty."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_penalize_broadcast_threshold</name></expr>,
		<expr><literal type="number">100000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_mdcache_size"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the size of MDCache."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_KB</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_mdcache_size</name></expr>,
		<expr><literal type="number">16384</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"memory_profiler_dataset_size"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the size in GB"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>memory_profiler_dataset_size</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"repl_catchup_within_range"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>REPLICATION_STANDBY</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum number of xlog segments allowed to lag"</literal>
					  <literal type="string">" when the backends can start blocking despite the WAL"</literal>
					   <literal type="string">" sender being in catchup phase."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>repl_catchup_within_range</name></expr>,
		<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name> <operator>/</operator> <name>WalSegMaxSize</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"wait_for_replication_threshold"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>REPLICATION_MASTER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum amount of WAL written by a transaction prior to waiting for replication."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This is used just to prevent primary from racing too ahead "</literal>
						 <literal type="string">"and avoid huge replication lag. A value of 0 disables "</literal>
						 <literal type="string">"the behavior"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_KB</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>rep_lag_avoidance_threshold</name></expr>,
		<expr><literal type="number">1024</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_KILOBYTES</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_initial_bad_row_limit"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>EXTERNAL_TABLES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Stops processing when number of the first bad rows exceeding this value"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_initial_bad_row_limit</name></expr>,
		<expr><literal type="number">1000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_indexcheck_insert"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Validate that a unique index does not already have the new tid during insert."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>gp_indexcheck_insert</name></expr>,
		<expr><name>INDEX_CHECK_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INDEX_CHECK_ALL</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"dtx_phase2_retry_second"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum time for which coordinator tries to finish a prepared transaction"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"The timer starts if finising a prepared transaction fails."</literal>
						 <literal type="string">" Coordinator keeps retrying the finish-prepared operation"</literal>
						 <literal type="string">" until this timeout (seconds)."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator>  <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_UNIT_S</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>dtx_phase2_retry_second</name></expr>,
		<expr><literal type="number">60</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,


	<expr><block>{
		<comment type="block">/* Can't be set in postgresql.conf */</comment>
		<expr><block>{<expr><literal type="string">"gp_server_version_num"</literal></expr>, <expr><name>PGC_INTERNAL</name></expr>, <expr><name>PRESET_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Shows the Greenplum server version as an integer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_server_version_num</name></expr>,
		<expr><name>GP_VERSION_NUM</name></expr>, <expr><name>GP_VERSION_NUM</name></expr>, <expr><name>GP_VERSION_NUM</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_max_slices"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PRESET_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum slices for a single query"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_max_slices</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_dispatch_keepalives_idle"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Time between issuing TCP keepalives from GPDB QD to its QEs."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"A value of 0 uses the system default."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_S</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_dispatch_keepalives_idle</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_GP_DISPATCH_KEEPALIVES_IDLE</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_dispatch_keepalives_interval"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Time between TCP keepalive retransmits from GPDB QD to its QEs."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"A value of 0 uses the system default."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_S</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_dispatch_keepalives_interval</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_GP_DISPATCH_KEEPALIVES_INTERVAL</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_dispatch_keepalives_count"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum number of TCP keepalive retransmits from GPDB QD to its QEs."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This controls the number of consecutive keepalive retransmits that can be "</literal>
						 <literal type="string">"lost before a QD/QE connection is considered dead. A value of 0 uses the "</literal>
						 <literal type="string">"system default."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_dispatch_keepalives_count</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_GP_DISPATCH_KEEPALIVES_COUNT</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_max_parallel_cursors"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>RESOURCES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Parallel cursor concurrency control from the source cluster side, -1 means no limit, which is the default"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>, <expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_max_parallel_cursors</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1024</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<comment type="block">/* End-of-list marker */</comment>
	<expr><block>{
		<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>config_real</name></name></type> <name><name>ConfigureNamesReal_gp</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{
		<expr><block>{<expr><literal type="string">"disable_cost"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the planner's cost of a disabled path."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>disable_cost</name></expr>,
		<expr><literal type="number">1.0e10</literal></expr>, <expr><literal type="number">1.0e10</literal></expr>, <expr><literal type="number">1.0e30</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_motion_cost_per_row"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_COST</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the planner's estimate of the cost of "</literal>
						 <literal type="string">"moving a row between worker processes."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"If &gt;0, the planner uses this value -- instead of double the "</literal>
					<literal type="string">"cpu_tuple_cost -- for Motion operator cost estimation."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_motion_cost_per_row</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DBL_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_selectivity_damping_factor"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Factor used in selectivity damping."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Values 1..N, 1 = basic damping, greater values emphasize damping"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_selectivity_damping_factor</name></expr>,
		<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><name>DBL_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resqueue_priority_cpucores_per_segment"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Number of processing units associated with a segment."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resqueue_priority_cpucores_per_segment</name></expr>,
		<expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">0.1</literal></expr>, <expr><literal type="number">512.0</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resource_group_cpu_limit"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum percentage of CPU resources assigned to a cluster."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resource_group_cpu_limit</name></expr>,
		<expr><literal type="number">0.9</literal></expr>, <expr><literal type="number">0.1</literal></expr>, <expr><literal type="number">1.0</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resource_group_memory_limit"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum percentage of memory resources assigned to a cluster."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resource_group_memory_limit</name></expr>,
		<expr><literal type="number">0.7</literal></expr>, <expr><literal type="number">0.0001</literal></expr>, <expr><literal type="number">1.0</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_damping_factor_filter"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"select predicate damping factor in optimizer, 1.0 means no damping"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_damping_factor_filter</name></expr>,
		<expr><literal type="number">0.75</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_damping_factor_join"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"join predicate damping factor in optimizer, 1.0 means no damping, 0.0 means square root method"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_damping_factor_join</name></expr>,
		<expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_damping_factor_groupby"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"groupby operator damping factor in optimizer, 1.0 means no damping"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_damping_factor_groupby</name></expr>,
		<expr><literal type="number">0.75</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_cost_threshold"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the threshold for plan sampling relative to the cost of best plan, 0.0 means unbounded"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_cost_threshold</name></expr>,
		<expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_nestloop_factor"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the nestloop join cost factor in the optimizer"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_nestloop_factor</name></expr>,
		<expr><literal type="number">1024.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><name>DBL_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_sort_factor"</literal></expr>,<expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the sort cost factor in the optimizer, 1.0 means same as default, &gt; 1.0 means more costly than default, &lt; 1.0 means means less costly than default"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_sort_factor</name></expr>,
		<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>DBL_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<comment type="block">/* End-of-list marker */</comment>
	<expr><block>{
		<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>config_string</name></name></type> <name><name>ConfigureNamesString_gp</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{
		<expr><block>{<expr><literal type="string">"memory_profiler_run_id"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the unique run ID for memory profiling"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Any string is acceptable"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>memory_profiler_run_id</name></expr>,
		<expr><literal type="string">"none"</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"memory_profiler_dataset_id"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the dataset ID for memory profiling"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Any string is acceptable"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>memory_profiler_dataset_id</name></expr>,
		<expr><literal type="string">"none"</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"memory_profiler_query_id"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the query ID for memory profiling"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Any string is acceptable"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>memory_profiler_query_id</name></expr>,
		<expr><literal type="string">"none"</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_role"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>GP_WORKER_IDENTITY</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the role for the session."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are DISPATCH, EXECUTE, and UTILITY."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_role_string</name></expr>,
		<expr><literal type="string">"undefined"</literal></expr>,
		<expr><name>check_gp_role</name></expr>, <expr><name>assign_gp_role</name></expr>, <expr><name>show_gp_role</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_qd_hostname"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>GP_WORKER_IDENTITY</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Shows the QD Hostname. Blank when run on the QD"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>qdHostname</name></expr>,
		<expr><literal type="string">""</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_dtm_action_sql_command_tag"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the debug DTM action sql command tag."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_dtm_action_sql_command_tag</name></expr>,
		<expr><literal type="string">""</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resqueue_priority_default_value"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Default weight when one cannot be associated with a statement."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resqueue_priority_default_value</name></expr>,
		<expr><literal type="string">"MEDIUM"</literal></expr>,
		<expr><name>gpvars_check_gp_resqueue_priority_default_value</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resource_manager"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>RESOURCES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the type of resource manager."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"Only support \"queue\" and \"group\" for now."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resource_manager_str</name></expr>,
		<expr><literal type="string">"queue"</literal></expr>,
		<expr><name>gpvars_check_gp_resource_manager_policy</name></expr>,
		<expr><name>gpvars_assign_gp_resource_manager_policy</name></expr>,
		<expr><name>gpvars_show_gp_resource_manager_policy</name></expr>,
	}</block></expr>,

	<comment type="block">/* for pljava */</comment>
	<expr><block>{
		<expr><block>{<expr><literal type="string">"pljava_vmoptions"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>CUSTOM_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Options sent to the JVM when it is created"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_SUPERUSER_ONLY</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>pljava_vmoptions</name></expr>,
		<expr><literal type="string">""</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"pljava_classpath"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>CUSTOM_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"classpath used by the JVM"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>pljava_classpath</name></expr>,
		<expr><literal type="string">""</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_auth_time_override"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"The timestamp used for enforcing time constraints."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"For testing purposes only."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_auth_time_override_str</name></expr>,
		<expr><literal type="string">""</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_search_strategy_path"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the search strategy used by gp optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_search_strategy_path</name></expr>,
		<expr><literal type="string">"default"</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_default_storage_options"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>APPENDONLY_TABLES</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the default options for appendonly storage."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_default_storage_options</name></expr>, <expr><literal type="string">""</literal></expr>,
		<expr><name>check_gp_default_storage_options</name></expr>, <expr><name>assign_gp_default_storage_options</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<comment type="block">/* Can't be set in postgresql.conf */</comment>
		<expr><block>{<expr><literal type="string">"gp_server_version"</literal></expr>, <expr><name>PGC_INTERNAL</name></expr>, <expr><name>PRESET_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Shows the Greenplum server version."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_REPORT</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_server_version_string</name></expr>,
		<expr><name>GP_VERSION</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_IC_PROXY</name></cpp:ifdef>
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_proxy_addresses"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>GP_ARRAY_CONFIGURATION</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the ic-proxy addresses as \"content:ip:port ...\", must be ordered by content, the port is ignored at the moment."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"e.g. \"-1:10.0.0.1:2000 0:10.0.0.2:2000 1:10.0.0.2:2001\""</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_GPDB_NO_SYNC</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_interconnect_proxy_addresses</name></expr>,
		<expr><literal type="string">""</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* ENABLE_IC_PROXY */</comment>

	<comment type="block">/* End-of-list marker */</comment>
	<expr><block>{
		<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>config_enum</name></name></type> <name><name>ConfigureNamesEnum_gp</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_workfile_caching_loglevel"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the logging level for workfile caching debugging messages"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are DEBUG5, DEBUG4, DEBUG3, DEBUG2, "</literal>
						 <literal type="string">"DEBUG1, LOG, NOTICE, WARNING, and ERROR. Each level includes all the "</literal>
						 <literal type="string">"levels that follow it. The later the level, the fewer messages are "</literal>
						 <literal type="string">"sent."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_workfile_caching_loglevel</name></expr>,
		<expr><name>DEBUG1</name></expr>, <expr><name>server_message_level_options</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_sessionstate_loglevel"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the logging level for session state debugging messages"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are DEBUG5, DEBUG4, DEBUG3, DEBUG2, "</literal>
						 <literal type="string">"DEBUG1, LOG, NOTICE, WARNING, and ERROR. Each level includes all the "</literal>
						 <literal type="string">"levels that follow it. The later the level, the fewer messages are "</literal>
						 <literal type="string">"sent."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_sessionstate_loglevel</name></expr>,
		<expr><name>DEBUG1</name></expr>, <expr><name>server_message_level_options</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_log_format"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>LOGGING_WHERE</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the format for log files."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"Valid values are TEXT, CSV."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_log_format</name></expr>,
		<expr><literal type="number">1</literal></expr>, <expr><name>gp_log_format_options</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_dtm_action_protocol"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the debug DTM action protocol."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_dtm_action_protocol</name></expr>,
		<expr><name>DTX_PROTOCOL_COMMAND_NONE</name></expr>, <expr><name>debug_dtm_action_protocol_options</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_log_failure"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHEN</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets which optimizer failures are logged."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are unexpected, expected, all"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_log_failure</name></expr>,
		<expr><name>OPTIMIZER_UNEXPECTED_FAIL</name></expr>, <expr><name>optimizer_log_failure_options</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_minidump"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHEN</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Generate optimizer minidump."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are onerror, always"</literal></expr></argument>)</argument_list></call></expr>,
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_minidump</name></expr>,
		<expr><name>OPTIMIZER_MINIDUMP_FAIL</name></expr>, <expr><name>optimizer_minidump_options</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_cost_model"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set optimizer cost model."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are legacy, calibrated, experimental"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_cost_model</name></expr>,
		<expr><name>OPTIMIZER_GPDB_CALIBRATED</name></expr>, <expr><name>optimizer_cost_model_options</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"explain_memory_verbosity"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Experimental feature: show memory account usage in EXPLAIN ANALYZE."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"Valid values are SUPPRESS, SUMMARY, DETAIL, and DEBUG."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>explain_memory_verbosity</name></expr>,
		<expr><name>EXPLAIN_MEMORY_VERBOSITY_SUPPRESS</name></expr>, <expr><name>explain_memory_verbosity_options</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_dtm_action"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the debug DTM action."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_dtm_action</name></expr>,
		<expr><name>DEBUG_DTM_ACTION_NONE</name></expr>, <expr><name>debug_dtm_action_options</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"debug_dtm_action_target"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the debug DTM action target."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Debug_dtm_action_target</name></expr>,
		<expr><name>DEBUG_DTM_ACTION_TARGET_NONE</name></expr>, <expr><name>debug_dtm_action_target_options</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_autostats_mode"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the autostats mode."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"Valid values are NONE, ON_CHANGE, ON_NO_STATS. ON_CHANGE requires setting gp_autostats_on_change_threshold."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_autostats_mode</name></expr>,
		<expr><name>GP_AUTOSTATS_NONE</name></expr>, <expr><name>gp_autostats_modes</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_autostats_mode_in_functions"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the autostats mode for statements in procedural language functions."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"Valid values are NONE, ON_CHANGE, ON_NO_STATS. ON_CHANGE requires setting gp_autostats_on_change_threshold."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_autostats_mode_in_functions</name></expr>,
		<expr><name>GP_AUTOSTATS_NONE</name></expr>, <expr><name>gp_autostats_modes</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_fc_method"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the flow control method used for UDP interconnect."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"Valid values are \"capacity\" and \"loss\"."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Gp_interconnect_fc_method</name></expr>,
		<expr><name>INTERCONNECT_FC_METHOD_LOSS</name></expr>, <expr><name>gp_interconnect_fc_methods</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_type"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the protocol used for inter-node communication."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"Valid values are \"tcp\", \"udpifc\""</literal>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_IC_PROXY</name></cpp:ifdef>
						 <literal type="string">" and \"proxy\""</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* ENABLE_IC_PROXY */</comment>
						 <literal type="string">"."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Gp_interconnect_type</name></expr>,
		<expr><name>INTERCONNECT_TYPE_UDPIFC</name></expr>, <expr><name>gp_interconnect_types</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_interconnect_address_type"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>GP_ARRAY_TUNING</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the interconnect address type used for inter-node communication."</literal></expr></argument>)</argument_list></call></expr>,
		 <macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"Valid values are \"unicast\" and \"wildcard\""</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>Gp_interconnect_address_type</name></expr>,
		<expr><name>INTERCONNECT_ADDRESS_TYPE_UNICAST</name></expr>, <expr><name>gp_interconnect_address_types</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_log_fts"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the verbosity of logged messages pertaining to fault probing."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are \"off\", \"terse\", \"verbose\" and \"debug\"."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_log_fts</name></expr>,
		<expr><name>GPVARS_VERBOSITY_TERSE</name></expr>, <expr><name>gp_log_verbosity</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_log_gang"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the verbosity of logged messages pertaining to worker process creation and management."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are \"off\", \"terse\", \"verbose\" and \"debug\"."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_log_gang</name></expr>,
		<expr><name>GPVARS_VERBOSITY_OFF</name></expr>, <expr><name>gp_log_verbosity</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_log_interconnect"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the verbosity of logged messages pertaining to connections between worker processes."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are \"off\", \"terse\", \"verbose\" and \"debug\"."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_log_interconnect</name></expr>,
		<expr><name>GPVARS_VERBOSITY_TERSE</name></expr>, <expr><name>gp_log_verbosity</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resqueue_memory_policy"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the policy for memory allocation of queries."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"Valid values are NONE, AUTO, EAGER_FREE."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resqueue_memory_policy</name></expr>,
		<expr><name>RESMANAGER_MEMORY_POLICY_NONE</name></expr>, <expr><name>gp_resqueue_memory_policies</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"gp_resgroup_memory_policy"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>RESOURCES_MGM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the policy for memory allocation of queries."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"Valid values are AUTO, EAGER_FREE."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>gp_resgroup_memory_policy</name></expr>,
		<expr><name>RESMANAGER_MEMORY_POLICY_EAGER_FREE</name></expr>, <expr><name>gp_resqueue_memory_policies</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"optimizer_join_order"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set optimizer join heuristic model."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are query, greedy, exhaustive and exhaustive2"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>optimizer_join_order</name></expr>,
		<expr><name>JOIN_ORDER_EXHAUSTIVE2_SEARCH</name></expr>, <expr><name>optimizer_join_order_options</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<comment type="block">/* End-of-list marker */</comment>
	<expr><block>{
		<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * For system defined GUC must assign a tag either GUC_GPDB_NEED_SYNC
 * or GUC_GPDB_NO_SYNC. We deprecated direct define in guc.c, instead,
 * add into sync_guc_names_array or unsync_guc_names_array.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>sync_guc_names_array</name><index>[]</index></name> <init>=
<expr><block>{
	<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/sync_guc_name.h"</cpp:file></cpp:include>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>unsync_guc_names_array</name><index>[]</index></name> <init>=
<expr><block>{
	<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/unsync_guc_name.h"</cpp:file></cpp:include>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sync_guc_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unsync_guc_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>guc_array_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>namea</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nameb</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>guc_name_compare</name><argument_list>(<argument><expr><name>namea</name></expr></argument>, <argument><expr><name>nameb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gpdb_assign_sync_flag</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_generic</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>guc_variables</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>predefine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>init</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* ordering guc_name_array alphabets */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>sync_guc_num</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sync_guc_names_array</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sync_guc_names_array</name></expr></argument>, <argument><expr><name>sync_guc_num</name></expr></argument>,
		      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>guc_array_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>unsync_guc_num</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsync_guc_names_array</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>unsync_guc_names_array</name></expr></argument>, <argument><expr><name>unsync_guc_num</name></expr></argument>,
		      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>guc_array_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>config_generic</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><name><name>guc_variables</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* if the sync flags is defined in guc variable, skip it */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>GUC_GPDB_NEED_SYNC</name> <operator>|</operator> <name>GUC_GPDB_NO_SYNC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
		                             <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sync_guc_names_array</name></expr></argument>,
		                             <argument><expr><name>sync_guc_num</name></expr></argument>,
		                             <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
		                             <argument><expr><name>guc_array_compare</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
			                             <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>unsync_guc_names_array</name></expr></argument>,
			                             <argument><expr><name>unsync_guc_num</name></expr></argument>,
			                             <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
			                             <argument><expr><name>guc_array_compare</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/* for predefined guc, we force its name in one array.
			 * for the third-part libraries gucs introduced by customer
			 * we assign unsync flags as default.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>&amp;&amp;</operator> <name>predefine</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Neither sync_guc_names_array nor "</literal>
								<literal type="string">"unsync_guc_names_array contains predefined "</literal>
								<literal type="string">"guc name: %s"</literal></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>GUC_GPDB_NO_SYNC</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>GUC_GPDB_NEED_SYNC</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_pljava_classpath_insecure</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>( <expr><operator>*</operator><name>newval</name> <operator>==</operator> <name>true</name></expr> )</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>config_generic</name></name> <modifier>*</modifier></type><name>pljava_cp</name> <init>= <expr><call><name>find_option</name><argument_list>(<argument><expr><literal type="string">"pljava_classpath"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>pljava_cp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>pljava_cp</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>PGC_USERSET</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed to set insecure PLJAVA classpath"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>assign_pljava_classpath_insecure</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>( <expr><name>newval</name> <operator>==</operator> <name>true</name></expr> )</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>config_generic</name></name> <modifier>*</modifier></type><name>pljava_cp</name> <init>= <expr><call><name>find_option</name><argument_list>(<argument><expr><literal type="string">"pljava_classpath"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>pljava_cp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>pljava_cp</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>PGC_USERSET</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_gp_resource_group_bypass</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ResGroupIsAssigned</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>GUC_check_errmsg</name><argument_list>(<argument><expr><literal type="string">"SET gp_resource_group_bypass cannot run inside a transaction block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_optimizer</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_ORCA</name></cpp:ifndef>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>newval</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GUC_check_errmsg</name><argument_list>(<argument><expr><literal type="string">"ORCA is not supported by this build"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>optimizer_control</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>source</name> <operator>&gt;=</operator> <name>PGC_S_INTERACTIVE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>GUC_check_errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot change the value of \"optimizer\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_verify_gpfdists_cert</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>newval</name> <operator>&amp;&amp;</operator> <name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_DISPATCH</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"verify_gpfdists_cert=off. Greenplum Database will stop validating "</literal>
				<literal type="string">"the gpfdists SSL certificate for connections between segments and gpfdists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_dispatch_log_stats</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>newval</name> <operator>&amp;&amp;</operator>
		<operator>(</operator><name>log_parser_stats</name> <operator>||</operator> <name>log_planner_stats</name> <operator>||</operator> <name>log_executor_stats</name> <operator>||</operator> <name>log_statement_stats</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>source</name> <operator>&gt;=</operator> <name>PGC_S_INTERACTIVE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot enable \"log_dispatch_stats\" when "</literal>
							<literal type="string">"\"log_statement_stats\", "</literal>
							<literal type="string">"\"log_parser_stats\", \"log_planner_stats\", "</literal>
							<literal type="string">"or \"log_executor_stats\" is true"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<comment type="block">/* source == PGC_S_OVERRIDE means do it anyway, eg at xact abort */</comment>
		<if type="elseif">else if <condition>(<expr><name>source</name> <operator>!=</operator> <name>PGC_S_OVERRIDE</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>check_gp_hashagg_default_nbatches</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Must be a power of two */</comment>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><operator>*</operator><name>newval</name> <operator>&amp;</operator> <operator>(</operator><operator>*</operator><name>newval</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>GUC_check_errmsg</name><argument_list>(<argument><expr><literal type="string">"gp_hashagg_default_nbatches must be a power of two"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Malloc a new string representing current storage_opts.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>storageOptToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StdRdOptions</name> <modifier>*</modifier></type><name>ao_opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s=%d,"</literal></expr></argument>, <argument><expr><name>SOPT_BLOCKSIZE</name></expr></argument>,
					 <argument><expr><name><name>ao_opts</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ao_opts</name><operator>-&gt;</operator><name>compresstype</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s=%s,"</literal></expr></argument>, <argument><expr><name>SOPT_COMPTYPE</name></expr></argument>,
						 <argument><expr><name><name>ao_opts</name><operator>-&gt;</operator><name>compresstype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s=none,"</literal></expr></argument>, <argument><expr><name>SOPT_COMPTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * MPP-14504: we seem to allow compresslevel &gt; 0 even when compression is
	 * disabled.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ao_opts</name><operator>-&gt;</operator><name>compresslevel</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s=%d,"</literal></expr></argument>, <argument><expr><name>SOPT_COMPLEVEL</name></expr></argument>,
						 <argument><expr><name><name>ao_opts</name><operator>-&gt;</operator><name>compresslevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s=%s"</literal></expr></argument>, <argument><expr><name>SOPT_CHECKSUM</name></expr></argument>,
					 <argument><expr><ternary><condition><expr><name><name>ao_opts</name><operator>-&gt;</operator><name>checksum</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Parse new value of storage options.  Update both, the GUC and
 * global ao_storage_opts object.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_gp_default_storage_options</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Value of "appendonly" option if one is specified. */</comment>
	<decl_stmt><decl><type><name>StdRdOptions</name> <modifier>*</modifier></type><name>newopts</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>newopts</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newopts</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newopts</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>resetAOStorageOpts</name><argument_list>(<argument><expr><name>newopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Perform identical validations as in case of options specified
	 * in a WITH() clause.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>newval</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>newopts_datum</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>newopts_datum</name> <operator>=</operator> <call><name>parseAOStorageOpts</name><argument_list>(<argument><expr><operator>*</operator><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>parse_validate_reloptions</name><argument_list>(<argument><expr><name>newopts</name></expr></argument>, <argument><expr><name>newopts_datum</name></expr></argument>,
								  <comment type="block">/* validate */</comment> <argument><expr><name>true</name></expr></argument>, <argument><expr><name>RELOPT_KIND_APPENDOPTIMIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * All validations succeeded, it is safe to update global
	 * appendonly storage options.
	 */</comment>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>newval</name> <operator>=</operator> <call><name>storageOptToString</name><argument_list>(<argument><expr><name>newopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>extra</name> <operator>=</operator> <name>newopts</name></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>assign_gp_default_storage_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StdRdOptions</name> <modifier>*</modifier></type><name>newopts</name> <init>= <expr><operator>(</operator><name>StdRdOptions</name> <operator>*</operator><operator>)</operator> <name>extra</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>setDefaultAOStorageOpts</name><argument_list>(<argument><expr><name>newopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Set GUC value in GP_REPLICATION_CONFIG_FILENAME.
 *
 * If value is NULL, then this GUC is removed from the configuration.
 *
 * If name exists, its value will be updated.
 * otherwise, the new named GUC will be added.
 */</comment>
<function><type><name>void</name></type>
<name>set_gp_replication_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>A_Const</name></type> <name>aconst</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_A_Const</name></expr>, <expr><operator>.</operator><name>val</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_String</name></expr>, <expr><operator>.</operator><name><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <macro><name>pstrdup</name><argument_list>(<argument>value</argument>)</argument_list></macro></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>list_make1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aconst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VariableSetStmt</name></type> <name>setstmt</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_VariableSetStmt</name></expr>, <expr><operator>.</operator><name>kind</name> <operator>=</operator> <name>VAR_SET_VALUE</name></expr>, <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>args</name> <operator>=</operator> <name>args</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlterSystemStmt</name></type> <name>alterSystemStmt</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_AlterSystemStmt</name></expr>, <expr><operator>.</operator><name>setstmt</name> <operator>=</operator> <operator>&amp;</operator><name>setstmt</name></expr>}</block></expr></init></decl>;</decl_stmt>
    
	<expr_stmt><expr><call><name>AlterSystemSetConfigFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>alterSystemStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * lookup_autostats_mode_by_value
 *
 * Return the string value name for the specified value. This is essentially a
 * specialized version of config_enum_lookup_by_value() for use by autostats.c
 * debugging code.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>lookup_autostats_mode_by_value</name><parameter_list>(<parameter><decl><type><name>GpAutoStatsModeValue</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>entry</name> <operator>=</operator> <name>gp_autostats_modes</name></expr>;</init> <condition><expr><name>entry</name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>entry</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find autostats mode %d"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>				<comment type="block">/* silence compiler */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_gp_workfile_compression</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_ZSTD</name></cpp:ifndef>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>newval</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GUC_check_errmsg</name><argument_list>(<argument><expr><literal type="string">"workfile compresssion is not supported by this build"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>DispatchSyncPGVariable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_generic</name></name> <modifier>*</modifier></type> <name>gconfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buffer</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>!=</operator> <name>GP_ROLE_DISPATCH</name> <operator>||</operator> <call><name>IsBootstrapProcessingMode</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"SET "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>gconfig</name><operator>-&gt;</operator><name>vartype</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGC_BOOL</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>config_bool</name></name> <modifier>*</modifier></type><name>bguc</name> <init>= <expr><operator>(</operator>struct <name>config_bool</name> <operator>*</operator><operator>)</operator> <name>gconfig</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%s TO %s"</literal></expr></argument>, <argument><expr><name><name>gconfig</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><operator>(</operator><name><name>bguc</name><operator>-&gt;</operator><name>variable</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>PGC_INT</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>config_int</name></name> <modifier>*</modifier></type><name>iguc</name> <init>= <expr><operator>(</operator>struct <name>config_int</name> <operator>*</operator><operator>)</operator> <name>gconfig</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%s TO %d"</literal></expr></argument>, <argument><expr><name><name>gconfig</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>iguc</name><operator>-&gt;</operator><name>variable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>PGC_REAL</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>config_real</name></name> <modifier>*</modifier></type><name>rguc</name> <init>= <expr><operator>(</operator>struct <name>config_real</name> <operator>*</operator><operator>)</operator> <name>gconfig</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">" %s TO %f"</literal></expr></argument>, <argument><expr><name><name>gconfig</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>rguc</name><operator>-&gt;</operator><name>variable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>PGC_STRING</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>config_string</name></name> <modifier>*</modifier></type><name>sguc</name> <init>= <expr><operator>(</operator>struct <name>config_string</name> <operator>*</operator><operator>)</operator> <name>gconfig</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>*</operator><name><name>sguc</name><operator>-&gt;</operator><name>variable</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%s TO "</literal></expr></argument>, <argument><expr><name><name>gconfig</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * If it's a list, we need to split the list into elements and
			 * quote the elements individually.
			 * else if it's empty or not a list, we should quote the whole src.
			 *
			 * This is the copied from pg_get_functiondef()'s handling of
			 * proconfig options.
			 * .
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>sguc</name><operator>-&gt;</operator><name>gen</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>GUC_LIST_QUOTE</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>namelist</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

				<comment type="block">/* Parse string into list of identifiers */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SplitGUCList</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>namelist</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* this shouldn't fail really */</comment>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid list syntax in proconfig item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>namelist</argument>)</argument_list></macro>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>curname</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><name>curname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><call><name>lnext</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>PGC_ENUM</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>config_enum</name></name> <modifier>*</modifier></type><name>eguc</name> <init>= <expr><operator>(</operator>struct <name>config_enum</name> <operator>*</operator><operator>)</operator> <name>gconfig</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>value</name> <init>= <expr><operator>*</operator><name><name>eguc</name><operator>-&gt;</operator><name>variable</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>config_enum_lookup_by_value</name><argument_list>(<argument><expr><name>eguc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%s TO "</literal></expr></argument>, <argument><expr><name><name>gconfig</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * All whitespace characters must be escaped. See
			 * pg_split_opts() in the backend. (Not sure if an enum value
			 * can have whitespace, but let's be prepared.)
			 */</comment>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		</block_content>}</block>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>CdbDispatchSetCommand</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
