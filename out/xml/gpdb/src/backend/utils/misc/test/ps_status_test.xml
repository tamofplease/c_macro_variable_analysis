<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/misc/test/ps_status_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ps_status.c"</cpp:file></cpp:include>

<comment type="block">/*
 * Check it won't crash in case the ps_buffer overflows.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__set_ps_display</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>ps_buffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ps_buffer</name></expr></argument>, <argument><expr><literal type="number">0x7F</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ps_buffer_fixed_size</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ps_buffer_size</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>last_status_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>gp_session_id</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>Gp_role</name> <operator>=</operator> <name>GP_ROLE_DISPATCH</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>gp_command_count</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>currentSliceId</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>set_ps_display</name><argument_list>(<argument><expr><literal type="string">"testing activity"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_ps_display</name><argument_list>(<argument><expr><literal type="string">"testing activity"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ps_buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * MPP-220077: real_act_prefix_size should not go beyond ps_buffer_size
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__set_ps_display__real_act_prefix_size_overflow</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>last_status_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ps_buffer_size</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ps_buffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>ps_buffer_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ps_buffer_fixed_size</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ps_buffer</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><name>ps_buffer_fixed_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>gp_session_id</name> <operator>=</operator> <literal type="number">26351</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>Gp_role</name> <operator>=</operator> <name>GP_ROLE_DISPATCH</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>gp_command_count</name> <operator>=</operator> <literal type="number">964</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>currentSliceId</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>set_ps_display</name><argument_list>(<argument><expr><literal type="string">"testing activity"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>real_act_prefix_size</name> <operator>&lt;=</operator> <name>ps_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>get_real_act_ps_display</name><argument_list>(<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Positive case to validate correctly getting the position and length for
 * activity string.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__set_ps_display__real_act_prefix_size</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>activity</name> <init>= <expr><literal type="string">"testing activity"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>last_status_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ps_buffer_size</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ps_buffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>ps_buffer_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ps_buffer_fixed_size</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ps_buffer</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><name>ps_buffer_fixed_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>gp_session_id</name> <operator>=</operator> <literal type="number">26351</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>Gp_role</name> <operator>=</operator> <name>GP_ROLE_DISPATCH</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>gp_command_count</name> <operator>=</operator> <literal type="number">964</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>currentSliceId</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>set_ps_display</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>real_act_prefix_size</name> <operator>&lt;=</operator> <name>ps_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><call><name>get_real_act_ps_display</name><argument_list>(<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
			<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__set_ps_display</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__set_ps_display__real_act_prefix_size_overflow</name></expr></argument>)</argument_list></call></expr>,
			<macro><name>unit_test</name><argument_list>(<argument>test__set_ps_display__real_act_prefix_size</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
