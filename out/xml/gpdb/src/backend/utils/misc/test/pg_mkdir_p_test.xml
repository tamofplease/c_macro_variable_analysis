<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/misc/test/pg_mkdir_p_test.c"><comment type="block">/*
 * Validate a race condition issue in pg_mkdir_p().
 *
 * pg_mkdir_p() is used by tablespace, initdb and pg_basebackup to create a
 * directory as well as its parent directories.  The logic used to be like
 * below:
 *
 *     if (stat(path) &lt; 0)
 *     {
 *         if (mkdir(path) &lt; 0)
 *             retval = -1;
 *     }
 *
 * It first checks for the existence of the path, if path does not pre-exist
 * then it creates the directory.  However if two processes try to create path
 * concurrently, then one possible execution order is as below:
 *
 *     A: stat(path) returns -1, so decide to create it;
 *     B: stat(path) returns -1, so decide to create it;
 *     B: mkdir(path) returns 0, successfully created path;
 *     A: mkdir(path) returns -1, fail to create path as it already exist;
 *
 * It could be triggered easily with initdb:
 *
 *     testdir=/tmp/testdir
 *     datadir=$testdir/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z
 *
 *     rm -rf $testdir
 *     mkdir $testdir
 *
 *     # init two databases with common parent directories
 *     initdb -D $datadir/db1 &gt;$testdir/db1.log 2&gt;&amp;1 &amp;
 *     initdb -D $datadir/db2 &gt;$testdir/db2.log 2&gt;&amp;1 &amp;
 *
 *     # wait for them to finish and check for the error
 *     wait
 *     cd $testdir
 *     grep 'could not create directory' *.log
 *
 * The fail rate is not 100% but should be large enough to happen in 5 tries.
 *
 * This race condition could be fixed by swapping the order of stat() and
 * mkdir(), this is also what the "mkdir -p" command does.
 *
 * In this test module we test concurrent calls to pg_mkdir_p() to ensure the
 * race condition does not happen.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTDIR</name></cpp:macro> <cpp:value>"/tmp/testdir_pg_mkdir_p"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATADIR</name></cpp:macro> <cpp:value>TESTDIR "/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z"</cpp:value></cpp:define>

<comment type="block">/*
 * A struct to pass arguments to the thread and return the results.
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>pthread_t</name></type>	<name>tid</name></decl>;</decl_stmt>				<comment type="block">/* thread id */</comment>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* the path to create */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>retcode</name></decl>;</decl_stmt>			<comment type="block">/* return code of pg_mkdir_p() */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>error</name></decl>;</decl_stmt>				<comment type="block">/* errno */</comment>
}</block></struct></type> <name>Job</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>job_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Job</name>		   <modifier>*</modifier></type><name>job</name> <init>= <expr><operator>(</operator><name>Job</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>retcode</name></name> <operator>=</operator> <call><name>pg_mkdir_p</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>S_IRWXU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This function accepts in integer argument n, it will launch n concurrent
 * threads to call pg_mkdir_p() to create the same dir and check for errors
 * from them.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>concurrent_pg_mkdir_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Job</name>			<modifier>*</modifier></type><name>jobs</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Job</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>failed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* Create concurrent threads to execute pg_mkdir_p() */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Job</name>		   <modifier>*</modifier></type><name>job</name> <init>= <expr><operator>&amp;</operator><name><name>jobs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>DATADIR</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>job_thread</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Check for the results */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Job</name>		   <modifier>*</modifier></type><name>job</name> <init>= <expr><operator>&amp;</operator><name><name>jobs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>retcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Only show the message, do not error out until we joined all
			 * the threads.
			 */</comment>
			<expr_stmt><expr><call><name>print_error</name><argument_list>(<argument><expr><literal type="string">"job %d: could not create directory \"%s\": %s\n"</literal></expr></argument>,
						<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>failed</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>failed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>jobs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__pgmkdirp__1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>concurrent_pg_mkdir_p</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__pgmkdirp__2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>concurrent_pg_mkdir_p</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__pgmkdirp__4</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>concurrent_pg_mkdir_p</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__pgmkdirp__8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>concurrent_pg_mkdir_p</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__pgmkdirp__16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>concurrent_pg_mkdir_p</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__pgmkdirp__32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>concurrent_pg_mkdir_p</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* if the dir does not exist rmtree() would raise a warning, suppress it */</comment>
	<expr_stmt><expr><call><name>mkdir</name><argument_list>(<argument><expr><name>TESTDIR</name></expr></argument>, <argument><expr><name>S_IRWXU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rmtree</name><argument_list>(<argument><expr><name>TESTDIR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>teardown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>rmtree</name><argument_list>(<argument><expr><name>TESTDIR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__pgmkdirp__1</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>, <argument><expr><name>teardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__pgmkdirp__2</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>, <argument><expr><name>teardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__pgmkdirp__4</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>, <argument><expr><name>teardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__pgmkdirp__8</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>, <argument><expr><name>teardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__pgmkdirp__16</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>, <argument><expr><name>teardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__pgmkdirp__32</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>, <argument><expr><name>teardown</name></expr></argument>)</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
