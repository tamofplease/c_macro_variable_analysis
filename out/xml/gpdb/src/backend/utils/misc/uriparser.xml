<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/misc/uriparser.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * uriparser.c
 *	  Functions for parsing URI strings
 *
 * Portions Copyright (c) 2007-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/utils/misc/uriparser.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/uri.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>	 <comment type="block">/* inet_ntoa() */</comment> 

<comment type="block">/*
 * ParseExternalTableUri
 * 
 * This routines converts a string to a supported external 
 * table URI object. It is also used to validate the URI format.
 */</comment>
<function><type><name>Uri</name> <modifier>*</modifier></type>
<name>ParseExternalTableUri</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Uri</name>		   <modifier>*</modifier></type><name>uri</name> <init>= <expr><operator>(</operator><name>Uri</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Uri</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>start</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>protocol_len</name></decl>,
				<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

 	<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
 	<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
 	<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
 	<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>customprotocol</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
 	
	<comment type="block">/*
	 * parse protocol
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IS_FILE_URI</name><argument_list>(<argument><expr><name>uri_str</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <name>URI_FILE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>protocol_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>PROTOCOL_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IS_FTP_URI</name><argument_list>(<argument><expr><name>uri_str</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <name>URI_FTP</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>protocol_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>PROTOCOL_FTP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IS_HTTP_URI</name><argument_list>(<argument><expr><name>uri_str</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <name>URI_HTTP</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>protocol_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>PROTOCOL_HTTP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IS_GPFDIST_URI</name><argument_list>(<argument><expr><name>uri_str</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <name>URI_GPFDIST</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>protocol_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>PROTOCOL_GPFDIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IS_GPFDISTS_URI</name><argument_list>(<argument><expr><name>uri_str</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <name>URI_GPFDISTS</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>protocol_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>PROTOCOL_GPFDISTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<else>else <comment type="block">/* not recognized. treat it as a custom protocol */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>post_protocol</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>uri_str</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>post_protocol</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid URI \'%s\' : undefined structure"</literal></expr></argument>, <argument><expr><name>uri_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>protocol_len</name> <operator>=</operator> <name>post_protocol</name> <operator>-</operator> <name>uri_str</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>customprotocol</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name> <argument_list>(<argument><expr><name>protocol_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>uri</name><operator>-&gt;</operator><name>customprotocol</name></name></expr></argument>, <argument><expr><name>uri_str</name></expr></argument>, <argument><expr><name>protocol_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>customprotocol</name><index>[<expr><name>protocol_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <name>URI_CUSTOM</name></expr>;</expr_stmt>
			<return>return <expr><name>uri</name></expr>;</return> <comment type="block">/* we let the user parse it himself later on */</comment>
		</block_content>}</block></else></if_stmt>
		
		<comment type="block">/* this is a non existing protocol */</comment>
		
		<expr_stmt><expr><name>protocol_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* shut compiler up */</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid URI \'%s\' : undefined protocol"</literal></expr></argument>, <argument><expr><name>uri_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* make sure there is more to the uri string */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>uri_str</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>protocol_len</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid URI \'%s\' : missing host name and path"</literal></expr></argument>, <argument><expr><name>uri_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * parse host name
	 */</comment>
	<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>uri_str</name> <operator>+</operator> <name>protocol_len</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>start</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>			<comment type="block">/* format "prot:///" ? (no hostname) */</comment>
	<block>{<block_content>
		<comment type="block">/* the default is "localhost" */</comment>
		<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>end</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid URI \'%s\' : missing host name or path"</literal></expr></argument>, <argument><expr><name>uri_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>colon</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>len</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>

			<comment type="block">/*
			 * host
			 */</comment>
			<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>uri</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>hostname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			
			<comment type="block">/*
			 * MPP-13617, if we have an ipv6 address in the URI hostname 
			 * (e.g. [2620:0:170:610::11]:8080/path/data.txt ) then we 
			 * we start our search for the :port after the closing ].
			 */</comment>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>uri</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> 
			<block>{<block_content>
				<expr_stmt><expr><name>colon</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * Eliminate the [ ] from the hostname.  
				 * note we don't change the uri-&gt;hostname pointer because we pfree() it later
				 */</comment>
				<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>uri</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>colon</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>uri</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<comment type="block">/*
			 * port
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>colon</name></expr>)</condition> 
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>portlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				
				<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>colon</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>portlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>colon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<comment type="block">/* now truncate ":&lt;port&gt;" from hostname */</comment>
				<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>hostname</name><index>[<expr><name>len</name> <operator>-</operator> <name>portlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

				<expr_stmt><expr><operator>*</operator><name>colon</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* no port was indicated. will use default if needed */</comment>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * We continue from the trailing host '/' since the
	 * path is an absolute path. Our previous ending point
	 * is the beginning of the file path, until the end of
	 * the uri string.
	 */</comment>
	<expr_stmt><expr><name>start</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* make sure there is more to the uri string */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid URI \'%s\' : missing path"</literal></expr></argument>, <argument><expr><name>uri_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>uri</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>path</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<return>return <expr><name>uri</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>FreeExternalTableUri</name><parameter_list>(<parameter><decl><type><name>Uri</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>uri</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>uri</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>customprotocol</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>uri</name><operator>-&gt;</operator><name>customprotocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
