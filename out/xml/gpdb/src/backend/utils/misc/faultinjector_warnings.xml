<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/misc/faultinjector_warnings.c"><comment type="block">/*
 * faultinjector_warnings.c
 *
 * Plugin system for collecting warning functions and processing warnings
 * at a later time.
 *
 * Portions Copyright (c) 2019-Present VMware, Inc. or its affiliates.
 *
 * IDENTIFICATION
 *	    src/backend/utils/misc/faultinjector_warnings.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Implements
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"faultinjector_warnings.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>warnings_list</name></decl>;</decl_stmt>


<function><type><name>void</name></type>
<name>warnings_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>warnings_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Provide a function that inspects an entry and warns the user
 * of an problematic configuration.
 *
 * void some_warning_function(FaultInjectorEntry_s faultEntry)
 * {
 *     if (isProblematic(faultEntry))
 *         elog(WARNING, "this fault injection configuration might have problems");
 * }
 *
 * add_fault_injection_warning(some_warning_function);
 */</comment>
<function><type><name>void</name></type>
<name>register_fault_injection_warning</name><parameter_list>(<parameter><decl><type><name>fault_injection_warning_function</name></type> <name>warning</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>warnings_list</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>warnings_list</name></expr></argument>, <argument><expr><name>warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Process all configured warnings for a given faultEntry.
 *
 */</comment>
<function><type><name>void</name></type>
<name>emit_warnings</name><parameter_list>(<parameter><decl><type><name>FaultInjectorEntry_s</name></type> <name>faultEntry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>list_cell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>list_cell</argument>, <argument>warnings_list</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>fault_injection_warning_function</name></type> <name>warning_function</name> <init>=
			<expr><operator>(</operator><name>fault_injection_warning_function</name><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>list_cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>warning_function</name><argument_list>(<argument><expr><name>faultEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>
</unit>
