<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/misc/bitmap_compression.c"><comment type="block">/*------------------------------------------------------------------------------
 *
 * bitmap_compression.c
 *	  Compression code tailored to compression of bitmap
 *
 * Copyright (c) 2013-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/utils/misc/bitmap_compression.c
 *
 *------------------------------------------------------------------------------
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/bitmap_compression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/bitstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <name>BitmapCompressionFlag</name>
<block>{
	<decl><name>BITMAP_COMPRESSION_FLAG_ZERO</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
	<decl><name>BITMAP_COMPRESSION_FLAG_ONE</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
	<decl><name>BITMAP_COMPRESSION_FLAG_RLE</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
	<decl><name>BITMAP_COMPRESSION_FLAG_RAW</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>
}</block></enum></type> <name>BitmapCompressionFlag</name>;</typedef>

<comment type="block">/*
 * Initializes a new decompression run
 */</comment> 
<function><type><name>bool</name></type>
<name>BitmapDecompress_Init</name><parameter_list>(
	<parameter><decl><type><name>BitmapDecompressState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>inData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inDataSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>tmp</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Bitstream_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>, <argument><expr><name>inData</name></expr></argument>, <argument><expr><name>inDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>compressionType</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_Skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>blockCount</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * returns the number of compression bitmap blocks
 */</comment> 
<function><type><name>int</name></type>
<name>BitmapDecompress_GetBlockCount</name><parameter_list>(
	<parameter><decl><type><name>BitmapDecompressState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>blockCount</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * returns the used compression type
 */</comment> 
<function><type><name>BitmapCompressionType</name></type>
<name>BitmapDecompress_GetCompressionType</name><parameter_list>(
	<parameter><decl><type><name>BitmapDecompressState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>compressionType</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * returns true iff the compression had an error
 */</comment> 
<function><type><name>int</name></type>
<name>BitmapDecompress_HasError</name><parameter_list>(
	<parameter><decl><type><name>BitmapDecompressState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>Bitstream_HasError</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Performs the bitmap decompression.
 *
 * bitmapDataSize in uint32-words.
 */</comment>
<function><type><name>void</name></type>
<name>BitmapDecompress_Decompress</name><parameter_list>(<parameter><decl><type><name>BitmapDecompressState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
							<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
							<parameter><decl><type><name>int</name></type> <name>bitmapDataSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>lastBlockData</name></decl>, <decl><type ref="prev"/><name>flag</name></decl>, <decl><type ref="prev"/><name>rleRepeatCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>failed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>Bitstream_GetOffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>blockCount</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>blockCount</name></name> <operator>&gt;</operator> <name>bitmapDataSize</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid block count for bitmap during decompression: "</literal>
				<literal type="string">"block count %d, compression type %d"</literal></expr></argument>, 
				<argument><expr><name><name>state</name><operator>-&gt;</operator><name>blockCount</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>compressionType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>compressionType</name></name> <operator>==</operator> <name>BITMAP_COMPRESSION_TYPE_NO</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, 
				<argument><expr><call><name>Bitstream_GetAlignedData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, 
				<argument><expr><name><name>state</name><operator>-&gt;</operator><name>blockCount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>compressionType</name></name> <operator>==</operator> <name>BITMAP_COMPRESSION_TYPE_DEFAULT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>lastBlockData</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rleRepeatCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>blockCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>rleRepeatCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<switch>switch <condition>(<expr><name>flag</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>BITMAP_COMPRESSION_FLAG_ZERO</name></expr>:</case>
						<expr_stmt><expr><name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>BITMAP_COMPRESSION_FLAG_ONE</name></expr>:</case>
						<expr_stmt><expr><name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>BITMAP_COMPRESSION_FLAG_RAW</name></expr>:</case>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
							<break>break;</break>
						</block_content>}</block></if></if_stmt>
						<break>break;</break>
					<case>case <expr><name>BITMAP_COMPRESSION_FLAG_RLE</name></expr>:</case>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rleRepeatCount</name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
							<break>break;</break>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lastBlockData</name></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid compression flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></switch>
				<expr_stmt><expr><name>lastBlockData</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* In an RLE block */</comment>
				<expr_stmt><expr><name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lastBlockData</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>rleRepeatCount</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>rleRepeatCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"illegal RLE state after bitmap decompression: "</literal>
					<literal type="string">"block count %d, compression type %d, rle repeat count %u"</literal></expr></argument>,
					<argument><expr><name><name>state</name><operator>-&gt;</operator><name>blockCount</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>compressionType</name></name></expr></argument>, <argument><expr><name>rleRepeatCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>failed</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"bitstream read error seen during decompression: "</literal>
					<literal type="string">"block count %d, compression type %d"</literal></expr></argument>,
					<argument><expr><name><name>state</name><operator>-&gt;</operator><name>blockCount</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>compressionType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"illegal compression type during bitmap decompression: "</literal>
				<literal type="string">"compression type %d"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>compressionType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> 
<name>Bitmap_EncodeRLE</name><parameter_list>(<parameter><decl><type><name>Bitstream</name><modifier>*</modifier></type> <name>bitstream</name></decl></parameter>,
		<parameter><decl><type><name>int</name></type> <name>rleRepeatCount</name></decl></parameter>,
		<parameter><decl><type><name>int</name></type> <name>lastBlockFlag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>lastBlockFlag</name> <operator>==</operator> <name>BITMAP_COMPRESSION_FLAG_RAW</name> <operator>||</operator> <name>rleRepeatCount</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_Put</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>, <argument><expr><name>BITMAP_COMPRESSION_FLAG_RLE</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_Put</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>, <argument><expr><name>rleRepeatCount</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if> 
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lastBlockFlag</name> <operator>!=</operator> <name>BITMAP_COMPRESSION_FLAG_RLE</name> <operator>&amp;&amp;</operator> <name>lastBlockFlag</name> <operator>!=</operator> <name>BITMAP_COMPRESSION_FLAG_RAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* If the number of repeated is not high enough,
		 * it is better to write the encoded one/zeros out
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rleRepeatCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_Put</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>, <argument><expr><name>lastBlockFlag</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> 
<name>Bitmap_Compress_Default</name><parameter_list>(
		<parameter><decl><type><name>uint32</name><modifier>*</modifier></type> <name>bitmap</name></decl></parameter>,
		<parameter><decl><type><name>int</name></type> <name>blockCount</name></decl></parameter>,
		<parameter><decl><type><name>Bitstream</name> <modifier>*</modifier></type><name>bitstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>lastBlockData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>lastBlockFlag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rleRepeatCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>lastBlockData</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>lastBlockFlag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rleRepeatCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blockCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type> <name>blockData</name> <init>= <expr><name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>blockData</name> <operator>==</operator> <name>lastBlockData</name> <operator>&amp;&amp;</operator> <name>rleRepeatCount</name> <operator>&lt;=</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>rleRepeatCount</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>rleRepeatCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitmap_EncodeRLE</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>, <argument><expr><name>rleRepeatCount</name></expr></argument>,
						<argument><expr><name>lastBlockFlag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>rleRepeatCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>blockData</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_Put</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>, <argument><expr><name>BITMAP_COMPRESSION_FLAG_ZERO</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>lastBlockFlag</name> <operator>=</operator> <name>BITMAP_COMPRESSION_FLAG_ZERO</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>blockData</name> <operator>==</operator> <literal type="number">0xFFFFFFFFU</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_Put</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>, <argument><expr><name>BITMAP_COMPRESSION_FLAG_ONE</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>lastBlockFlag</name> <operator>=</operator> <name>BITMAP_COMPRESSION_FLAG_ONE</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_Put</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>, <argument><expr><name>BITMAP_COMPRESSION_FLAG_RAW</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_Put</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>, <argument><expr><name>blockData</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>lastBlockFlag</name> <operator>=</operator> <name>BITMAP_COMPRESSION_FLAG_RAW</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><name>lastBlockData</name> <operator>=</operator> <name>blockData</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Write last RLE block */</comment>
	<if_stmt><if>if <condition>(<expr><name>rleRepeatCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitmap_EncodeRLE</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>, <argument><expr><name>rleRepeatCount</name></expr></argument>,
					<argument><expr><name>lastBlockFlag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>Bitmap_Compress_Write_Header</name><parameter_list>(<parameter><decl><type><name>BitmapCompressionType</name></type> <name>compressionType</name></decl></parameter>,
		<parameter><decl><type><name>int</name></type> <name>blockCount</name></decl></parameter>, <parameter><decl><type><name>Bitstream</name> <modifier>*</modifier></type><name>bitstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Bitstream_Put</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>, <argument><expr><name>compressionType</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Bitstream_Skip</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitstream_Put</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>, <argument><expr><name>blockCount</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>Bitstream_GetOffset</name><argument_list>(<argument><expr><name>bitstream</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compresses the given bitmap data.
 * 
 * bitmapDataSize in uint32-words.
 */</comment> 
<function><type><name>int</name></type>
<name>Bitmap_Compress</name><parameter_list>(
		<parameter><decl><type><name>BitmapCompressionType</name></type> <name>compressionType</name></decl></parameter>,
		<parameter><decl><type><name>uint32</name><modifier>*</modifier></type> <name>bitmap</name></decl></parameter>,
		<parameter><decl><type><name>int</name></type> <name>bitmapDataSize</name></decl></parameter>,
		<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>outData</name></decl></parameter>,
		<parameter><decl><type><name>int</name></type> <name>maxOutDataSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Bitstream</name></type> <name>bitstream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>blockCount</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>maxOutDataSize</name> <operator>&gt;=</operator> <operator>(</operator><name>bitmapDataSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>outData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>maxOutDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>blockCount</name> <operator>=</operator> <name>bitmapDataSize</name></expr>;</expr_stmt>

	<comment type="block">/* Header 
	 */</comment>
	<expr_stmt><expr><call><name>Bitstream_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitstream</name></expr></argument>, <argument><expr><name>outData</name></expr></argument>, <argument><expr><name>maxOutDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitmap_Compress_Write_Header</name><argument_list>(<argument><expr><name>compressionType</name></expr></argument>,<argument><expr><name>blockCount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitstream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write bitmap compression header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* bitmap content */</comment>
	<switch>switch <condition>(<expr><name>compressionType</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BITMAP_COMPRESSION_TYPE_NO</name></expr>:</case>
			<comment type="line">// By assertion I know that I have sufficient space for this</comment>
			<if_stmt><if>if <condition>(<expr><name>bitmapDataSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* we only have the header */</comment>
				<return>return <expr><literal type="number">2</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>Bitstream_GetAlignedData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitstream</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, 
					<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>bitmapDataSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<return>return <expr><operator>(</operator><name>bitmapDataSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</return>
		<case>case <expr><name>BITMAP_COMPRESSION_TYPE_DEFAULT</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bitmap_Compress_Default</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>blockCount</name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>bitstream</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* This may happen when the input bitmap is not nicely compressible */</comment>
				<comment type="block">/* Fall back */</comment>

				<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>outData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>maxOutDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>Bitmap_Compress</name><argument_list>(
						<argument><expr><name>BITMAP_COMPRESSION_TYPE_NO</name></expr></argument>,
						<argument><expr><name>bitmap</name></expr></argument>,
						<argument><expr><name>bitmapDataSize</name></expr></argument>,
						<argument><expr><name>outData</name></expr></argument>,
						<argument><expr><name>maxOutDataSize</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<return>return <expr><call><name>Bitstream_GetLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitstream</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></else></if_stmt>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"illegal compression type during bitmap compression: "</literal>
				<literal type="string">"compression type %d"</literal></expr></argument>, <argument><expr><name>compressionType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
