<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/datumstream/test/datumstreamblock_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../datumstreamblock.c"</cpp:file></cpp:include>

<comment type="block">/* 
 * Unit test function to test the routines added for
 * Delta Compression
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> 
<name>test__DeltaCompression__Core</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
	<decl_stmt><decl><type><name>Delta_Compression_status</name></type> <name>status</name> <init>= <expr><name>DELTA_COMPRESSION_NOT_APPLIED</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DatumStreamTypeInfo</name></type> <name>typeInfo</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>DatumStreamBlockWrite</name><modifier>*</modifier></type> <name>dsw</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlockWrite</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlockWrite</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Creating the DatumStreamBlockWrite structure to be used for below iterations */</comment>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>eyecatcher</name></name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_Eyecatcher</name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_EyecatcherLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datumStreamVersion</name></name> <operator>=</operator> <name>DatumStreamVersion_Dense_Enhanced</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_want_compression</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_want_compression</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name></name> <operator>=</operator> <operator>&amp;</operator><name>typeInfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name> <operator>=</operator> <literal type="number">32768</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDatumPerBlock</name></name> <operator>=</operator> <literal type="number">32768</literal> <operator>/</operator> <literal type="number">64</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer_size</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_afterp</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name> <operator>+</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer_size</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer_size</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_maxcount</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_maxcount</name></name> <operator>*</operator> <name>Int32Compress_MaxByteLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer_size</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_maxcount</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_maxcount</name></name> <operator>*</operator> <name>Int32Compress_MaxByteLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_maxcount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DatumStreamBlockWrite_GetReady</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* For unit testing using this type object */</comment>
	<expr_stmt><expr><name><name>typeInfo</name><operator>.</operator><name>datumlen</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>typeInfo</name><operator>.</operator><name>typid</name></name> <operator>=</operator> <name>INT4OID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>typeInfo</name><operator>.</operator><name>byval</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* 
	 * First value will always be physically stored 
	 */</comment>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>DatumStreamBlockWrite_PerformDeltaCompression</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><call><name>UInt32GetDatum</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>DELTA_COMPRESSION_NOT_APPLIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>not_first_datum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* corresponding bitmap checks */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name><operator>.</operator><name>bitOnCount</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name><operator>.</operator><name>bitCount</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Since physical datum, test the routines for processing the same */</comment>
	<expr_stmt><expr><call><name>DatumStreamBlockWrite_DenseIncrItem</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DatumStreamBlockWrite_DeltaMaintain</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><call><name>UInt32GetDatum</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* corresponding bitmap checks */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name><operator>.</operator><name>bitOnCount</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name><operator>.</operator><name>bitCount</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 
	 * Second value, this must be processed as delta 
	 */</comment>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>DatumStreamBlockWrite_PerformDeltaCompression</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><call><name>UInt32GetDatum</name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>DELTA_COMPRESSION_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* delta value checks */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* corresponding bitmap checks */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name><operator>.</operator><name>bitOnCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name><operator>.</operator><name>bitCount</name></name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>DatumStreamBitMapWrite_CurrentIsOn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 
	 * Third value, this must be processed as positive delta case 
	 */</comment>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>DatumStreamBlockWrite_PerformDeltaCompression</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><call><name>UInt32GetDatum</name><argument_list>(<argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>DELTA_COMPRESSION_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* delta value checks */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">53</literal> <operator>-</operator> <literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* corresponding bitmap checks */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name><operator>.</operator><name>bitOnCount</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name><operator>.</operator><name>bitCount</name></name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>DatumStreamBitMapWrite_CurrentIsOn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 
	 * Forth value, this must be processed as negative delta case 
	 */</comment>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>DatumStreamBlockWrite_PerformDeltaCompression</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><call><name>UInt32GetDatum</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>DELTA_COMPRESSION_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* delta value checks */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">53</literal> <operator>-</operator> <literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* corresponding bitmap checks */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name><operator>.</operator><name>bitOnCount</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name><operator>.</operator><name>bitCount</name></name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>DatumStreamBitMapWrite_CurrentIsOn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 
	 * Fifth value, this must be processed as delta exceeding case 
	 */</comment>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>DatumStreamBlockWrite_PerformDeltaCompression</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><call><name>UInt32GetDatum</name><argument_list>(<argument><expr><literal type="number">23</literal> <operator>+</operator> <name>MAX_DELTA_SUPPORTED_DELTA_COMPRESSION</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>DELTA_COMPRESSION_NOT_APPLIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* delta value checks */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">53</literal> <operator>-</operator> <literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* corresponding bitmap checks */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name><operator>.</operator><name>bitOnCount</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name><operator>.</operator><name>bitCount</name></name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>DatumStreamBitMapWrite_CurrentIsOn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>not_first_datum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Again since physical datum, test the routines for processing the same */</comment>
	<expr_stmt><expr><call><name>DatumStreamBlockWrite_DenseIncrItem</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DatumStreamBlockWrite_DeltaMaintain</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><call><name>UInt32GetDatum</name><argument_list>(<argument><expr><literal type="number">23</literal> <operator>+</operator> <name>MAX_DELTA_SUPPORTED_DELTA_COMPRESSION</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* corresponding bitmap checks */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name><operator>.</operator><name>bitOnCount</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name><operator>.</operator><name>bitCount</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>DatumStreamBitMapWrite_CurrentIsOn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 
	 * Sixth value, this must be processed as delta exceeding case 
	*/</comment>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>DatumStreamBlockWrite_PerformDeltaCompression</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><call><name>UInt32GetDatum</name><argument_list>(<argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>DELTA_COMPRESSION_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* delta value checks */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">23</literal> <operator>+</operator> <name>MAX_DELTA_SUPPORTED_DELTA_COMPRESSION</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* corresponding bitmap checks */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name><operator>.</operator><name>bitOnCount</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name><operator>.</operator><name>bitCount</name></name></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>DatumStreamBitMapWrite_CurrentIsOn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> 
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> 
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
			<macro><name>unit_test</name><argument_list>(<argument>test__DeltaCompression__Core</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
