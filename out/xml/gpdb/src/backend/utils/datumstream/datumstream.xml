<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/datumstream/datumstream.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * datumstream.c
 *
 * Portions Copyright (c) 2009, Greenplum Inc.
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/utils/datumstream/datumstream.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tupmacs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tuptoaster.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_attribute_encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlyam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlyblockdirectory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlystoragelayer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlystorageread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlystoragewrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datumstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_compression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <name>AOCSBK</name>
<block>{
	<decl><name>AOCSBK_None</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>AOCSBK_BLOCK</name></decl>,
	<decl><name>AOCSBK_BLOB</name></decl>,
}</block></enum></type>	<name>AOCSBK</name>;</typedef>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>datumstreamread_check_large_varlena_integrity</name><parameter_list>(
											  <parameter><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type> <name>acc</name></decl></parameter>,
											  <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>,
											  <parameter><decl><type><name>int32</name></type> <name>contentLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>va</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>va</name> <operator>=</operator> <operator>(</operator>struct <name>varlena</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>contentLen</name> <operator>&lt;</operator> <name>VARHDRSZ</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Large varlena header too small.  Found %d, expected at least %d"</literal></expr></argument>,
			 <argument><expr><name>contentLen</name></expr></argument>,
			 <argument><expr><name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Large varlena has a toast reference but Append-Only Column Store tables do not use toast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>datumstreamread_print_large_varlena_info</name><parameter_list>(
										 <parameter><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type> <name>acc</name></decl></parameter>,
										 <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Read large varlena &lt;%s&gt;"</literal></expr></argument>,
		 <argument><expr><call><name>VarlenaInfoToString</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Error detail and context callback for tracing or errors occurring during reading.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>datumstreamread_detail_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type><name>acc</name> <init>= <expr><operator>(</operator><name>DatumStreamRead</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Append-Only Storage Read's detail.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>need_close_file</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>errdetail_appendonly_read_storage_content_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>datumstreamread_context_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type><name>acc</name> <init>= <expr><operator>(</operator><name>DatumStreamRead</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_datumstream</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"datumstream_advance filePathName %s nth %u ndatum %u datump %p "</literal></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>ao_read</name><operator>.</operator><name>bufferedRead</name><operator>.</operator><name>filePathName</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockRead</name><operator>.</operator><name>nth</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockRead</name><operator>.</operator><name>logical_row_count</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockRead</name><operator>.</operator><name>datump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Append-Only Storage Read's context.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>need_close_file</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>errcontext_appendonly_read_storage_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>errcontext</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Error detail and context callback for tracing or errors occurring during writing.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>datumstreamwrite_detail_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<comment type="block">/*	DatumStreamWrite *acc = (DatumStreamWrite*) arg; */</comment>

	<comment type="block">/*
	 * Append-Only Storage Write's detail.
	 */</comment>
	<comment type="block">/* UNDONE */</comment>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>datumstreamwrite_context_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DatumStreamWrite</name> <modifier>*</modifier></type><name>acc</name> <init>= <expr><operator>(</operator><name>DatumStreamWrite</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Append-Only Storage Write's context.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>need_close_file</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>AppendOnlyStorageWrite_ContextStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>errcontext</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>errcontext</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>datumstreamread_getlarge</name><parameter_list>(<parameter><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type> <name>acc</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>datum</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>null</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>largeObjectState</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DatumStreamLargeObjectState_HaveAoContent</name></expr>:</case>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Advance not called on large datum stream object"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>

		<case>case <expr><name>DatumStreamLargeObjectState_PositionAdvanced</name></expr>:</case>
			<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>largeObjectState</name></name> <operator>=</operator> <name>DatumStreamLargeObjectState_Consumed</name></expr>;</expr_stmt>

			<comment type="block">/* Fall below to ~_Consumed. */</comment>
			<comment type="block">/* fallthrough */</comment>

		<case>case <expr><name>DatumStreamLargeObjectState_Consumed</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int32</name></type>		<name>len</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>buffer_beginp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * It is ok to get the same object more than once.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_read_print_varlena_info</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>datumstreamread_print_large_varlena_info</name><argument_list>(
															 <argument><expr><name>acc</name></expr></argument>,
														 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>buffer_beginp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_scan_tuple</name></expr>)</condition>
				<block>{<block_content>


					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block read is returning large variable-length object "</literal>
									<literal type="string">"(length %d)"</literal></expr></argument>,
									<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><operator>*</operator><name>datum</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>buffer_beginp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>null</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block>

		<case>case <expr><name>DatumStreamLargeObjectState_Exhausted</name></expr>:</case>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Get called after large datum stream object already consumed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>

		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unexpected large datum stream state %d"</literal></expr></argument>,
							<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>largeObjectState</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>datumstreamread_advancelarge</name><parameter_list>(<parameter><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type> <name>acc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>blockRead</name><operator>.</operator><name>nth</name></name><operator>++</operator></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>largeObjectState</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DatumStreamLargeObjectState_HaveAoContent</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>va</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int32</name></type>		<name>len</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>va</name> <operator>=</operator> <operator>(</operator>struct <name>varlena</name> <operator>*</operator><operator>)</operator> <name><name>acc</name><operator>-&gt;</operator><name>buffer_beginp</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>largeObjectState</name></name> <operator>=</operator> <name>DatumStreamLargeObjectState_PositionAdvanced</name></expr>;</expr_stmt>
				<return>return <expr><name>len</name></expr>;</return>
			</block_content>}</block>

		<case>case <expr><name>DatumStreamLargeObjectState_PositionAdvanced</name></expr>:</case>
		<case>case <expr><name>DatumStreamLargeObjectState_Consumed</name></expr>:</case>
			<comment type="block">/*
			 * Second advance returns exhaustion.
			 */</comment>
			<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>largeObjectState</name></name> <operator>=</operator> <name>DatumStreamLargeObjectState_Exhausted</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>

		<case>case <expr><name>DatumStreamLargeObjectState_Exhausted</name></expr>:</case>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Advance called after large datum stream object already consumed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
			<comment type="block">/* Never gets here. */</comment>

		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unexpected large datum stream state %d"</literal></expr></argument>,
							<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>largeObjectState</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
			<comment type="block">/* Never reaches here. */</comment>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>datumstreamread_nthlarge</name><parameter_list>(<parameter><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type> <name>acc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>largeObjectState</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DatumStreamLargeObjectState_HaveAoContent</name></expr>:</case>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Advance not called on large datum stream object"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
			<comment type="block">/* Never gets here. */</comment>

		<case>case <expr><name>DatumStreamLargeObjectState_PositionAdvanced</name></expr>:</case>
		<case>case <expr><name>DatumStreamLargeObjectState_Consumed</name></expr>:</case>
			<return>return <expr><literal type="number">0</literal></expr>;</return>

		<case>case <expr><name>DatumStreamLargeObjectState_Exhausted</name></expr>:</case>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Nth called after large datum stream object already consumed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
			<comment type="block">/* Never gets here. */</comment>

		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unexpected large datum stream state %d"</literal></expr></argument>,
							<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>largeObjectState</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
			<comment type="block">/* Never reaches here. */</comment>
	</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>datumstreamwrite_put</name><parameter_list>(
					 <parameter><decl><type><name>DatumStreamWrite</name> <modifier>*</modifier></type> <name>acc</name></decl></parameter>,
					 <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>,
					 <parameter><decl><type><name>bool</name></type> <name>null</name></decl></parameter>,
					 <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>toFree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DatumStreamBlockWrite_Put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>blockWrite</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>toFree</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>datumstreamwrite_nth</name><parameter_list>(<parameter><decl><type><name>DatumStreamWrite</name> <modifier>*</modifier></type> <name>acc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DatumStreamBlockWrite_Nth</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>blockWrite</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_datumstream_typeinfo</name><parameter_list>(
						  <parameter><decl><type><name>DatumStreamTypeInfo</name> <modifier>*</modifier></type> <name>typeInfo</name></decl></parameter>,
						  <parameter><decl><type><name>Form_pg_attribute</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>typeInfo</name><operator>-&gt;</operator><name>typid</name></name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>typeInfo</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>attalign</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>typeInfo</name><operator>-&gt;</operator><name>byval</name></name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * DeltaRange compression supported for folowing datatypes
 * INTEGER, BIGINT, DATE, TIME and TIMESTAMP
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_deltarange_compression_supported</name><parameter_list>(<parameter><decl><type><name>Form_pg_attribute</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>INT4OID</name></expr>:</case>
		<case>case <expr><name>INT8OID</name></expr>:</case>
		<case>case <expr><name>DATEOID</name></expr>:</case>
		<case>case <expr><name>TIMEOID</name></expr>:</case>
		<case>case <expr><name>TIMESTAMPOID</name></expr>:</case>
		<case>case <expr><name>TIMESTAMPTZOID</name></expr>:</case>
			<comment type="block">/*
			 * FIXED length attributes and max with 8bytes length
			 * supported for DeltaRange
			 */</comment>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name> <operator>&lt;=</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></switch>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_datumstream_info</name><parameter_list>(
					  <parameter><decl><type><name>DatumStreamTypeInfo</name> <modifier>*</modifier></type> <name>typeInfo</name></decl></parameter>, <comment type="line">//OUTPUT</comment>
					  <parameter><decl><type><name>DatumStreamVersion</name> <modifier>*</modifier></type> <name>datumStreamVersion</name></decl></parameter>, <comment type="line">//OUTPUT</comment>
					  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>rle_compression</name></decl></parameter>, <comment type="line">//OUTPUT</comment>
					  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>delta_compression</name></decl></parameter>, <comment type="line">//OUTPUT</comment>
					  <parameter><decl><type><name>AppendOnlyStorageAttributes</name> <modifier>*</modifier></type><name>ao_attr</name></decl></parameter>, <comment type="line">//OUTPUT</comment>
					  <parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>maxAoBlockSize</name></decl></parameter>, <comment type="line">//OUTPUT</comment>
					  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>compName</name></decl></parameter>,
					  <parameter><decl><type><name>int32</name></type> <name>compLevel</name></decl></parameter>,
					  <parameter><decl><type><name>bool</name></type> <name>checksum</name></decl></parameter>,
					  <parameter><decl><type><name>int32</name></type> <name>safeFSWriteSize</name></decl></parameter>,
					  <parameter><decl><type><name>int32</name></type> <name>maxsz</name></decl></parameter>,
					  <parameter><decl><type><name>Form_pg_attribute</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>init_datumstream_typeinfo</name><argument_list>(
							  <argument><expr><name>typeInfo</name></expr></argument>,
							  <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Adjust maxsz for Append-Only Storage.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>maxsz</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>maxsz</name> <operator>&gt;</operator> <name>MAX_APPENDONLY_BLOCK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid AO block size %d"</literal></expr></argument>, <argument><expr><name>maxsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>maxAoBlockSize</name> <operator>=</operator> <name>maxsz</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Assume the folowing unless modified below.
	 */</comment>
	<expr_stmt><expr><operator>*</operator><name>rle_compression</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>delta_compression</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compress</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compressType</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compressLevel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>datumStreamVersion</name> <operator>=</operator> <name>DatumStreamVersion_Original</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>checksum</name></name> <operator>=</operator> <name>checksum</name></expr>;</expr_stmt>
	<comment type="block">/*
	 * The original version didn't bother to populate these fields...
	 */</comment>
	<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>safeFSWriteSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>compName</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>compName</name></expr></argument>, <argument><expr><literal type="string">"rle_type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * For RLE_TYPE, we do the compression ourselves in this module.
		 *
		 * Optionally, BULK Compression by the AppendOnlyStorage layer may be performed
		 * as a second compression on the "Access Method" (first) compressed block.
		 */</comment>
		<expr_stmt><expr><operator>*</operator><name>datumStreamVersion</name> <operator>=</operator> <name>DatumStreamVersion_Dense_Enhanced</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>rle_compression</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>safeFSWriteSize</name></name> <operator>=</operator> <name>safeFSWriteSize</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Use the compresslevel as a kludgy way of specifiying the BULK compression
		 * to use.
		 */</comment>
		<switch>switch <condition>(<expr><name>compLevel</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compress</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compressType</name></name> <operator>=</operator> <literal type="string">"none"</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compressLevel</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compress</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compressType</name></name> <operator>=</operator> <literal type="string">"zlib"</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compressLevel</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compress</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compressType</name></name> <operator>=</operator> <literal type="string">"zlib"</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compressLevel</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compress</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compressType</name></name> <operator>=</operator> <literal type="string">"zlib"</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compressLevel</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
				<break>break;</break>

			<default>default:</default>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unexpected compresslevel %d"</literal></expr></argument>,
								<argument><expr><name>compLevel</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></switch>

		<comment type="block">/*
		 * Check if for this dataype delta encoding is supported.
		 * With RLE this layer also does Delta range encoding
		 */</comment>
		<expr_stmt><expr><operator>*</operator><name>delta_compression</name> <operator>=</operator> <call><name>is_deltarange_compression_supported</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>compName</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>compName</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* No bulk compression. */</comment>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * Bulk compression will be used by AppendOnlyStorage{Write|Read} modules.
		 */</comment>
		<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compress</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compressType</name></name> <operator>=</operator> <name>compName</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>compressLevel</name></name> <operator>=</operator> <name>compLevel</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>determine_datumstream_compression_overflow</name><parameter_list>(
										<parameter><decl><type><name>AppendOnlyStorageAttributes</name> <modifier>*</modifier></type><name>ao_attr</name></decl></parameter>,
								 <parameter><function_decl><type><name>size_t</name></type>(<modifier>*</modifier><name>desiredCompSizeFunc</name>) <parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>input</name></decl></parameter>)</parameter_list></function_decl></parameter>,
										   <parameter><decl><type><name>int32</name></type> <name>maxAoBlockSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>desiredOverflowBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>desiredCompSizeFunc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Call the compression's desired size function to find out what additional
		 * space it requires for our block size.
		 */</comment>
		<expr_stmt><expr><name>desiredOverflowBytes</name> <operator>=</operator>
			<operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>desiredCompSizeFunc</name><operator>)</operator> <operator>(</operator><name>maxAoBlockSize</name><operator>)</operator> <operator>-</operator> <name>maxAoBlockSize</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>desiredOverflowBytes</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ao_attr</name><operator>-&gt;</operator><name>overflowSize</name></name> <operator>=</operator> <name>desiredOverflowBytes</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>DatumStreamWrite</name> <modifier>*</modifier></type>
<name>create_datumstreamwrite</name><parameter_list>(
						<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>compName</name></decl></parameter>,
						<parameter><decl><type><name>int32</name></type> <name>compLevel</name></decl></parameter>,
						<parameter><decl><type><name>bool</name></type> <name>checksum</name></decl></parameter>,
						<parameter><decl><type><name>int32</name></type> <name>safeFSWriteSize</name></decl></parameter>,
						<parameter><decl><type><name>int32</name></type> <name>maxsz</name></decl></parameter>,
						<parameter><decl><type><name>Form_pg_attribute</name></type> <name>attr</name></decl></parameter>,
						<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>relname</name></decl></parameter>,
						<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
						<parameter><decl><type><name>bool</name></type> <name>needsWAL</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DatumStreamWrite</name> <modifier>*</modifier></type><name>acc</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamWrite</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int32</name></type>		<name>initialMaxDatumPerBlock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>maxDatumPerBlock</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>PGFunction</name> <modifier>*</modifier></type><name>compressionFunctions</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CompressionState</name> <modifier>*</modifier></type><name>compressionState</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>CompressionState</name> <modifier>*</modifier></type><name>verifyBlockCompressionState</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>init_datumstream_info</name><argument_list>(
						  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>typeInfo</name></name></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>rle_want_compression</name></name></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>delta_want_compression</name></name></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name></name></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>maxAoBlockSize</name></name></expr></argument>,
						  <argument><expr><name>compName</name></expr></argument>,
						  <argument><expr><name>compLevel</name></expr></argument>,
						  <argument><expr><name>checksum</name></expr></argument>,
						  <argument><expr><name>safeFSWriteSize</name></expr></argument>,
						  <argument><expr><name>maxsz</name></expr></argument>,
						  <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>compressionFunctions</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>compressionState</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>verifyBlockCompressionState</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name><operator>.</operator><name>compress</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * BULK compression.
		 */</comment>
		<expr_stmt><expr><name>compressionFunctions</name> <operator>=</operator> <call><name>get_funcs_for_compression</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name><operator>.</operator><name>compressType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>compressionFunctions</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>td</name> <init>= <expr><call><name>CreateTupleDesc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>StorageAttributes</name></type> <name>sa</name></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>comptype</name></name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name><operator>.</operator><name>compressType</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>complevel</name></name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name><operator>.</operator><name>compressLevel</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>blocksize</name></name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>maxAoBlockSize</name></name></expr>;</expr_stmt>

			<expr_stmt><expr><name>compressionState</name> <operator>=</operator>
				<call><name>callCompressionConstructor</name><argument_list>(
										   <argument><expr><name><name>compressionFunctions</name><index>[<expr><name>COMPRESSION_CONSTRUCTOR</name></expr>]</index></name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <comment type="block">/* compress */</comment> <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>determine_datumstream_compression_overflow</name><argument_list>(
													   <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name></name></expr></argument>,
												<argument><expr><name><name>compressionState</name><operator>-&gt;</operator><name>desired_sz</name></name></expr></argument>,
													   <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>maxAoBlockSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>gp_appendonly_verify_write_block</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>verifyBlockCompressionState</name> <operator>=</operator>
					<call><name>callCompressionConstructor</name><argument_list>(
											   <argument><expr><name><name>compressionFunctions</name><index>[<expr><name>COMPRESSION_CONSTRUCTOR</name></expr>]</index></name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <comment type="block">/* compress */</comment> <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>AppendOnlyStorageWrite_Init</name><argument_list>(
								<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>,
								 <comment type="block">/* memoryContext */</comment> <argument><expr><name>NULL</name></expr></argument>,
								<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>maxAoBlockSize</name></name></expr></argument>,
								<argument><expr><name>relname</name></expr></argument>,
								<argument><expr><name>title</name></expr></argument>,
								<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name></name></expr></argument>,
								<argument><expr><name>needsWAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name><operator>.</operator><name>compression_functions</name></name> <operator>=</operator> <name>compressionFunctions</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name><operator>.</operator><name>compressionState</name></name> <operator>=</operator> <name>compressionState</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name><operator>.</operator><name>verifyWriteCompressionState</name></name> <operator>=</operator> <name>verifyBlockCompressionState</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Temporarily set the firstRowNum for the block so that we can
	 * calculate the correct header length.
	 */</comment>
	<expr_stmt><expr><call><name>AppendOnlyStorageWrite_SetFirstRowNum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DatumStreamVersion_Original</name></expr>:</case>
			<expr_stmt><expr><name>initialMaxDatumPerBlock</name> <operator>=</operator> <name>MAXDATUM_PER_AOCS_ORIG_BLOCK</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>maxDatumPerBlock</name> <operator>=</operator> <name>MAXDATUM_PER_AOCS_ORIG_BLOCK</name></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>maxAoHeaderSize</name></name> <operator>=</operator> <call><name>AoHeader_Size</name><argument_list>(
												  <comment type="block">/* isLong */</comment> <argument><expr><name>false</name></expr></argument>,
												 <argument><expr><name>checksum</name></expr></argument>,
												  <comment type="block">/* hasFirstRowNum */</comment> <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>DatumStreamVersion_Dense</name></expr>:</case>
		<case>case <expr><name>DatumStreamVersion_Dense_Enhanced</name></expr>:</case>
			<expr_stmt><expr><name>initialMaxDatumPerBlock</name> <operator>=</operator> <name>INITIALDATUM_PER_AOCS_DENSE_BLOCK</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>maxDatumPerBlock</name> <operator>=</operator> <name>MAXDATUM_PER_AOCS_DENSE_BLOCK</name></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>maxAoHeaderSize</name></name> <operator>=</operator> <call><name>AoHeader_Size</name><argument_list>(
												  <comment type="block">/* isLong */</comment> <argument><expr><name>true</name></expr></argument>,
												 <argument><expr><name>checksum</name></expr></argument>,
												  <comment type="block">/* hasFirstRowNum */</comment> <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unexpected datum stream version %d"</literal></expr></argument>,
							<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>initialMaxDatumPerBlock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<comment type="block">/* Quiet down compiler. */</comment>
			<expr_stmt><expr><name>maxDatumPerBlock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
			<comment type="block">/* Never reached. */</comment>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>DatumStreamBlockWrite_Init</name><argument_list>(
							   <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>blockWrite</name></name></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>typeInfo</name></name></expr></argument>,
							   <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>,
							   <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>rle_want_compression</name></name></expr></argument>,
							   <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>delta_want_compression</name></name></expr></argument>,
							   <argument><expr><name>initialMaxDatumPerBlock</name></expr></argument>,
							   <argument><expr><name>maxDatumPerBlock</name></expr></argument>,
							   <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>maxAoBlockSize</name></name> <operator>-</operator> <name><name>acc</name><operator>-&gt;</operator><name>maxAoHeaderSize</name></name></expr></argument>,
					<comment type="block">/* errdetailCallback */</comment> <argument><expr><name>datumstreamwrite_detail_callback</name></expr></argument>,
								<comment type="block">/* errdetailArg */</comment> <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>acc</name></expr></argument>,
				  <comment type="block">/* errcontextCallback */</comment> <argument><expr><name>datumstreamwrite_context_callback</name></expr></argument>,
								<comment type="block">/* errcontextArg */</comment> <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>acc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DatumStreamRead</name> <modifier>*</modifier></type>
<name>create_datumstreamread</name><parameter_list>(
					   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>compName</name></decl></parameter>,
					   <parameter><decl><type><name>int32</name></type> <name>compLevel</name></decl></parameter>,
					   <parameter><decl><type><name>bool</name></type> <name>checksum</name></decl></parameter>,
					   <parameter><decl><type><name>int32</name></type> <name>safeFSWriteSize</name></decl></parameter>,
					   <parameter><decl><type><name>int32</name></type> <name>maxsz</name></decl></parameter>,
					   <parameter><decl><type><name>Form_pg_attribute</name></type> <name>attr</name></decl></parameter>,
					   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>relname</name></decl></parameter>,
					   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type><name>acc</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamRead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>PGFunction</name> <modifier>*</modifier></type><name>compressionFunctions</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CompressionState</name> <modifier>*</modifier></type><name>compressionState</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>memctxt</name></name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>init_datumstream_info</name><argument_list>(
						  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>typeInfo</name></name></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>rle_can_have_compression</name></name></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>delta_can_have_compression</name></name></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name></name></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>maxAoBlockSize</name></name></expr></argument>,
						  <argument><expr><name>compName</name></expr></argument>,
						  <argument><expr><name>compLevel</name></expr></argument>,
						  <argument><expr><name>checksum</name></expr></argument>,
						  <argument><expr><name>safeFSWriteSize</name></expr></argument>,
						  <argument><expr><name>maxsz</name></expr></argument>,
						  <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>compressionFunctions</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>compressionState</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name><operator>.</operator><name>compress</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * BULK compression.
		 */</comment>
		<expr_stmt><expr><name>compressionFunctions</name> <operator>=</operator> <call><name>get_funcs_for_compression</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name><operator>.</operator><name>compressType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>compressionFunctions</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>StorageAttributes</name></type> <name>sa</name></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>comptype</name></name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name><operator>.</operator><name>compressType</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>complevel</name></name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name><operator>.</operator><name>compressLevel</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>blocksize</name></name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>maxAoBlockSize</name></name></expr>;</expr_stmt>

			<expr_stmt><expr><name>compressionState</name> <operator>=</operator>
				<call><name>callCompressionConstructor</name><argument_list>(
										   <argument><expr><name><name>compressionFunctions</name><index>[<expr><name>COMPRESSION_CONSTRUCTOR</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>false</name></expr></argument> <comment type="block">/* compress */</comment> )</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>determine_datumstream_compression_overflow</name><argument_list>(
													   <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name></name></expr></argument>,
												<argument><expr><name><name>compressionState</name><operator>-&gt;</operator><name>desired_sz</name></name></expr></argument>,
													   <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>maxAoBlockSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>AppendOnlyStorageRead_Init</name><argument_list>(
							   <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>,
								<comment type="block">/* memoryContext */</comment> <argument><expr><name>NULL</name></expr></argument>,
							   <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>maxAoBlockSize</name></name></expr></argument>,
							   <argument><expr><name>relname</name></expr></argument>,
							   <argument><expr><name>title</name></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>ao_read</name><operator>.</operator><name>compression_functions</name></name> <operator>=</operator> <name>compressionFunctions</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>ao_read</name><operator>.</operator><name>compressionState</name></name> <operator>=</operator> <name>compressionState</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFirstRowNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFileOffset</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockRowCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DatumStreamBlockRead_Init</name><argument_list>(
							  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>blockRead</name></name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>typeInfo</name></name></expr></argument>,
							  <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>,
							  <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>rle_can_have_compression</name></name></expr></argument>,
					 <comment type="block">/* errdetailCallback */</comment> <argument><expr><name>datumstreamread_detail_callback</name></expr></argument>,
							   <comment type="block">/* errdetailArg */</comment> <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>acc</name></expr></argument>,
				   <comment type="block">/* errcontextCallback */</comment> <argument><expr><name>datumstreamread_context_callback</name></expr></argument>,
							   <comment type="block">/* errcontextArg */</comment> <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>largeObjectState</name></name> <operator>==</operator> <name>DatumStreamLargeObjectState_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>eof</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>eofUncompress</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_scan</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name><operator>.</operator><name>compress</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream read %s created with NO bulk compression for %s"</literal>
							<literal type="string">"(maximum Append-Only blocksize %d, "</literal>
							<literal type="string">"checksum %s)"</literal></expr></argument>,
						  <argument><expr><call><name>DatumStreamVersion_String</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>title</name></name></expr></argument>,
							<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>maxAoBlockSize</name></name></expr></argument>,
							<argument><expr><operator>(</operator><ternary><condition><expr><name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name><operator>.</operator><name>checksum</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream read %s created with bulk compression for %s "</literal>
							<literal type="string">"(maximum Append-Only blocksize %d, "</literal>
							<literal type="string">"compression type %s, compress level %d, "</literal>
							<literal type="string">"checksum %s)"</literal></expr></argument>,
						  <argument><expr><call><name>DatumStreamVersion_String</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>title</name></name></expr></argument>,
							<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>maxAoBlockSize</name></name></expr></argument>,
							<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name><operator>.</operator><name>compressType</name></name></expr></argument>,
							<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name><operator>.</operator><name>compressLevel</name></name></expr></argument>,
							<argument><expr><operator>(</operator><ternary><condition><expr><name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name><operator>.</operator><name>checksum</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>acc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>destroy_datumstreamwrite</name><parameter_list>(<parameter><decl><type><name>DatumStreamWrite</name> <modifier>*</modifier></type> <name>ds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DatumStreamBlockWrite_Finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>blockWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>AppendOnlyStorageWrite_FinishSession</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>title</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>destroy_datumstreamread</name><parameter_list>(<parameter><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type> <name>ds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DatumStreamBlockRead_Finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>blockRead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>large_object_buffer</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>large_object_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>large_object_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>datum_upgrade_buffer</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>datum_upgrade_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>datum_upgrade_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>AppendOnlyStorageRead_FinishSession</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>title</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>datumstreamwrite_open_file</name><parameter_list>(<parameter><decl><type><name>DatumStreamWrite</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>eof</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>eofUncompressed</name></decl></parameter>,
						   <parameter><decl><type><name>RelFileNodeBackend</name> <modifier>*</modifier></type><name>relFileNode</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>segmentFileNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>eof</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>eofUncompress</name></name> <operator>=</operator> <name>eofUncompressed</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>need_close_file</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>datumstreamwrite_close_file</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Segment file #0 is created when the Append-Only table is created.
	 *
	 * Other segment files are created on-demand under transaction.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>segmentFileNum</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>eof</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>AppendOnlyStorageWrite_TransactionCreateFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>,
													 <argument><expr><name>relFileNode</name></expr></argument>,
													 <argument><expr><name>segmentFileNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Open the existing file for write.
	 */</comment>
	<expr_stmt><expr><call><name>AppendOnlyStorageWrite_OpenFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>,
									<argument><expr><name>fn</name></expr></argument>,
									<argument><expr><name>version</name></expr></argument>,
									<argument><expr><name>eof</name></expr></argument>,
									<argument><expr><name>eofUncompressed</name></expr></argument>,
									<argument><expr><name>relFileNode</name></expr></argument>,
									<argument><expr><name>segmentFileNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>need_close_file</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>datumstreamread_open_file</name><parameter_list>(<parameter><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type> <name>ds</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>eof</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>eofUncompressed</name></decl></parameter>, <parameter><decl><type><name>RelFileNode</name></type> <name>relFileNode</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>segmentFileNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>eof</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>eofUncompress</name></name> <operator>=</operator> <name>eofUncompressed</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>need_close_file</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>datumstreamread_close_file</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>AppendOnlyStorageRead_OpenFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>eof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>need_close_file</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>datumstreamwrite_close_file</name><parameter_list>(<parameter><decl><type><name>DatumStreamWrite</name> <modifier>*</modifier></type> <name>ds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>AppendOnlyStorageWrite_TransactionFlushAndCloseFile</name><argument_list>(
														<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>,
														<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>eof</name></name></expr></argument>,
														<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>eofUncompress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Add the access method "compression" saving.
	 *
	 * If the savings are negative, then the compresion ratio could fall below 1.0
	 */</comment>
	<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>eofUncompress</name></name> <operator>+=</operator> <name><name>ds</name><operator>-&gt;</operator><name>blockWrite</name><operator>.</operator><name>savings</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>need_close_file</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>datumstreamread_close_file</name><parameter_list>(<parameter><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type> <name>ds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>AppendOnlyStorageRead_CloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>need_close_file</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>datumstreamwrite_block_orig</name><parameter_list>(<parameter><decl><type><name>DatumStreamWrite</name> <modifier>*</modifier></type> <name>acc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>writesz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>rowCount</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Set the BlockFirstRowNum. Need to set this before
	 * calling AppendOnlyStorageWrite_GetBuffer.
	 */</comment>
	<expr_stmt><expr><call><name>AppendOnlyStorageWrite_SetFirstRowNum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>,
										  <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFirstRowNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rowCount</name> <operator>=</operator> <call><name>DatumStreamBlockWrite_Nth</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>blockWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rowCount</name> <operator>&lt;=</operator> <name>MAXDATUM_PER_AOCS_ORIG_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>AppendOnlyStorageWrite_GetBuffer</name><argument_list>(
											  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>,
											  <argument><expr><name>AoHeaderKind_SmallContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>writesz</name> <operator>=</operator> <call><name>DatumStreamBlockWrite_Block</name><argument_list>(
										  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>blockWrite</name></name></expr></argument>,
										  <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name><operator>.</operator><name>logicalBlockStartOffset</name></name> <operator>=</operator>
		<call><name>BufferedAppendNextBufferPosition</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name><operator>.</operator><name>bufferedAppend</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Write it out */</comment>
	<expr_stmt><expr><call><name>AppendOnlyStorageWrite_FinishBuffer</name><argument_list>(
										<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>,
										<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <name>writesz</name></expr></argument>,
										<argument><expr><name>AOCSBK_BLOCK</name></expr></argument>,
										<argument><expr><name>rowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Set up our write block information */</comment>
	<expr_stmt><expr><call><name>DatumStreamBlockWrite_GetReady</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>blockWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>writesz</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>datumstreamwrite_block_dense</name><parameter_list>(<parameter><decl><type><name>DatumStreamWrite</name> <modifier>*</modifier></type> <name>acc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>writesz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>rowCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AoHeaderKind</name></type> <name>aoHeaderKind</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Set the BlockFirstRowNum. Need to set this before
	 * calling AppendOnlyStorageWrite_GetBuffer.
	 */</comment>
	<expr_stmt><expr><call><name>AppendOnlyStorageWrite_SetFirstRowNum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>,
										  <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFirstRowNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rowCount</name> <operator>=</operator> <call><name>DatumStreamBlockWrite_Nth</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>blockWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>rowCount</name> <operator>&lt;=</operator> <name>AOSmallContentHeader_MaxRowCount</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>aoHeaderKind</name> <operator>=</operator> <name>AoHeaderKind_SmallContent</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>ao_attr</name><operator>.</operator><name>compress</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>aoHeaderKind</name> <operator>=</operator> <name>AoHeaderKind_BulkDenseContent</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>aoHeaderKind</name> <operator>=</operator> <name>AoHeaderKind_NonBulkDenseContent</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>AppendOnlyStorageWrite_GetBuffer</name><argument_list>(
											  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>,
											  <argument><expr><name>aoHeaderKind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>writesz</name> <operator>=</operator> <call><name>DatumStreamBlockWrite_Block</name><argument_list>(
										  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>blockWrite</name></name></expr></argument>,
										  <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name><operator>.</operator><name>logicalBlockStartOffset</name></name> <operator>=</operator>
		<call><name>BufferedAppendNextBufferPosition</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name><operator>.</operator><name>bufferedAppend</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Write it out */</comment>
	<expr_stmt><expr><call><name>AppendOnlyStorageWrite_FinishBuffer</name><argument_list>(
										<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>,
										<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <name>writesz</name></expr></argument>,
										<argument><expr><name>AOCSBK_BLOCK</name></expr></argument>,
										<argument><expr><name>rowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Set up our write block information */</comment>
	<expr_stmt><expr><call><name>DatumStreamBlockWrite_GetReady</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>blockWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>writesz</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64</name></type>
<name>datumstreamwrite_block</name><parameter_list>(<parameter><decl><type><name>DatumStreamWrite</name> <modifier>*</modifier></type><name>acc</name></decl></parameter>,
					   <parameter><decl><type><name>AppendOnlyBlockDirectory</name> <modifier>*</modifier></type><name>blockDirectory</name></decl></parameter>,
					   <parameter><decl><type><name>int</name></type> <name>columnGroupNo</name></decl></parameter>,
					   <parameter><decl><type><name>bool</name></type> <name>addColAction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type> <name>writesz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> <init>= <expr><call><name>DatumStreamBlockWrite_Nth</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>blockWrite</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Nothing to write, this is just no op */</comment>
	<if_stmt><if>if <condition>(<expr><name>itemCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DatumStreamVersion_Original</name></expr>:</case>
			<expr_stmt><expr><name>writesz</name> <operator>=</operator> <call><name>datumstreamwrite_block_orig</name><argument_list>(<argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>DatumStreamVersion_Dense</name></expr>:</case>
		<case>case <expr><name>DatumStreamVersion_Dense_Enhanced</name></expr>:</case>
			<expr_stmt><expr><name>writesz</name> <operator>=</operator> <call><name>datumstreamwrite_block_dense</name><argument_list>(<argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected datum stream version %d"</literal></expr></argument>,
				 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
			<comment type="block">/* Never reaches here. */</comment>
	</block_content>}</block></switch>

	<comment type="block">/* Insert an entry to the block directory */</comment>
	<expr_stmt><expr><call><name>AppendOnlyBlockDirectory_InsertEntry</name><argument_list>(
		<argument><expr><name>blockDirectory</name></expr></argument>,
		<argument><expr><name>columnGroupNo</name></expr></argument>,
		<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFirstRowNum</name></name></expr></argument>,
		<argument><expr><call><name>AppendOnlyStorageWrite_LogicalBlockStartOffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>itemCount</name></expr></argument>,
		<argument><expr><name>addColAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>writesz</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>datumstreamwrite_print_large_varlena_info</name><parameter_list>(
										  <parameter><decl><type><name>DatumStreamWrite</name> <modifier>*</modifier></type> <name>acc</name></decl></parameter>,
										  <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Write large varlena &lt;%s&gt;"</literal></expr></argument>,
		 <argument><expr><call><name>VarlenaInfoToString</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int64</name></type>
<name>datumstreamwrite_lob</name><parameter_list>(<parameter><decl><type><name>DatumStreamWrite</name> <modifier>*</modifier></type> <name>acc</name></decl></parameter>,
					 <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>,
					 <parameter><decl><type><name>AppendOnlyBlockDirectory</name> <modifier>*</modifier></type><name>blockDirectory</name></decl></parameter>,
					 <parameter><decl><type><name>int</name></type> <name>colGroupNo</name></decl></parameter>,
					 <parameter><decl><type><name>bool</name></type> <name>addColAction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>varLen</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>datumStreamVersion</name></name> <operator>==</operator> <name>DatumStreamVersion_Original</name> <operator>||</operator>
		   <name><name>acc</name><operator>-&gt;</operator><name>datumStreamVersion</name></name> <operator>==</operator> <name>DatumStreamVersion_Dense</name> <operator>||</operator>
		   <name><name>acc</name><operator>-&gt;</operator><name>datumStreamVersion</name></name> <operator>==</operator> <name>DatumStreamVersion_Dense_Enhanced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>typeInfo</name><operator>.</operator><name>datumlen</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Large object must be variable length objects (varlena)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/*
	 * If the datum is toasted	/ compressed -- an error.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTENDED</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Expected large object / variable length objects (varlena) to be de-toasted and/or de-compressed at this point"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * De-Toast Datum
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>heap_tuple_fetch_attr</name><argument_list>(
								<argument><expr><operator>(</operator>struct <name>varlena</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>varLen</name> <operator>=</operator> <call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_write_print_large_varlena_info</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>datumstreamwrite_print_large_varlena_info</name><argument_list>(
												  <argument><expr><name>acc</name></expr></argument>,
												  <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Set the BlockFirstRowNum */</comment>
	<expr_stmt><expr><call><name>AppendOnlyStorageWrite_SetFirstRowNum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>,
										  <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFirstRowNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>AppendOnlyStorageWrite_Content</name><argument_list>(
								   <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>,
								   <argument><expr><name>p</name></expr></argument>,
								   <argument><expr><name>varLen</name></expr></argument>,
								   <argument><expr><name>AOCSBK_BLOB</name></expr></argument>,
									<comment type="block">/* rowCount */</comment> <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Insert an entry to the block directory */</comment>
	<expr_stmt><expr><call><name>AppendOnlyBlockDirectory_InsertEntry</name><argument_list>(
		<argument><expr><name>blockDirectory</name></expr></argument>,
		<argument><expr><name>colGroupNo</name></expr></argument>,
		<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFirstRowNum</name></name></expr></argument>,
		<argument><expr><call><name>AppendOnlyStorageWrite_LogicalBlockStartOffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_write</name></name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><literal type="number">1</literal></expr></argument>, <comment type="block">/*itemCount -- always just the lob just inserted */</comment>
		<argument><expr><name>addColAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>varLen</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>datumstreamread_block_info</name><parameter_list>(<parameter><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type> <name>acc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>readOK</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>readOK</name> <operator>=</operator> <call><name>AppendOnlyStorageRead_GetBlockInfo</name><argument_list>(
												<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>,
												<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr></argument>,
											<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>execBlockKind</name></name></expr></argument>,
												<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>firstRow</name></name></expr></argument>,
												<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>rowCnt</name></name></expr></argument>,
												<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>isLarge</name></name></expr></argument>,
											<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>isCompressed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>readOK</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFirstRowNum</name></name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>firstRow</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFileOffset</name></name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>ao_read</name><operator>.</operator><name>current</name><operator>.</operator><name>headerOffsetInFile</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>blockRowCount</name></name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>rowCnt</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_scan</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			 <argument><expr><literal type="string">"Datum stream read get block typeInfo for table '%s' "</literal>
		 <literal type="string">"(contentLen %d, execBlockKind = %d, firstRowNum "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal>
			 <literal type="string">"rowCount %d, isLargeContent %s, isCompressed %s, "</literal>
			 <literal type="string">"blockFirstRowNum "</literal> <name>INT64_FORMAT</name> <literal type="string">", blockFileOffset "</literal> <name>INT64_FORMAT</name> <literal type="string">", blockRowCount %d)"</literal></expr></argument>,
			 <argument><expr><call><name>AppendOnlyStorageRead_RelationName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>)</argument_list></call></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>execBlockKind</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>firstRow</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>rowCnt</name></name></expr></argument>,
			 <argument><expr><operator>(</operator><ternary><condition><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>isLarge</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
			 <argument><expr><operator>(</operator><ternary><condition><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>isCompressed</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFirstRowNum</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFileOffset</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockRowCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>datumstreamread_block_get_ready</name><parameter_list>(<parameter><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type> <name>acc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Read header information and setup for reading the datum in the block.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>execBlockKind</name></name> <operator>==</operator> <name>AOCSBK_BLOCK</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>hadToAdjustRowCount</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>adjustedRowCount</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>DatumStreamBlockRead_GetReady</name><argument_list>(
									  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>blockRead</name></name></expr></argument>,
									  <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>buffer_beginp</name></name></expr></argument>,
									  <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr></argument>,
									  <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>firstRow</name></name></expr></argument>,
									  <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>rowCnt</name></name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name>hadToAdjustRowCount</name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name>adjustedRowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>hadToAdjustRowCount</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>blockRowCount</name></name> <operator>=</operator> <name>adjustedRowCount</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>execBlockKind</name></name> <operator>==</operator> <name>AOCSBK_BLOB</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>buffer_beginp</name></name> <operator>==</operator> <name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			 <argument><expr><literal type="string">"Unexpected Append-Only Column Store executor kind %d"</literal></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>execBlockKind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>datumstreamread_block_content</name><parameter_list>(<parameter><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type> <name>acc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Clear out state from previous block.
	 */</comment>
	<expr_stmt><expr><call><name>DatumStreamBlockRead_Reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>blockRead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>largeObjectState</name></name> <operator>=</operator> <name>DatumStreamLargeObjectState_None</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Read in data.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>execBlockKind</name></name> <operator>==</operator> <name>AOCSBK_BLOCK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>isLarge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>isCompressed</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Compressed, need to decompress to our own buffer.  */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer_size</name></name> <operator>&lt;</operator> <name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldCtxt</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>oldCtxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>memctxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"malloc_failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer_size</name></name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldCtxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>AppendOnlyStorageRead_Content</name><argument_list>(
										  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>,
										  <argument><expr><operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer</name></name></expr></argument>,
										  <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>buffer_beginp</name></name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>buffer_beginp</name></name> <operator>=</operator> <call><name>AppendOnlyStorageRead_GetBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>


		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_datumstream</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				 <argument><expr><literal type="string">"datumstream_read_block_content filePathName %s firstRowNum "</literal> <name>INT64_FORMAT</name> <literal type="string">" rowCnt %u "</literal>
				 <literal type="string">"ndatum %u contentLen %d datump %p"</literal></expr></argument>,
				 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>ao_read</name><operator>.</operator><name>bufferedRead</name><operator>.</operator><name>filePathName</name></name></expr></argument>,
				 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>firstRow</name></name></expr></argument>,
				 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>rowCnt</name></name></expr></argument>,
				 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockRead</name><operator>.</operator><name>logical_row_count</name></name></expr></argument>,
				 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr></argument>, <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockRead</name><operator>.</operator><name>datump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>execBlockKind</name></name> <operator>==</operator> <name>AOCSBK_BLOB</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>rowCnt</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>typeInfo</name><operator>.</operator><name>datumlen</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Large object must be variable length objects (varlena)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * NOTE: Do not assert the content is large.  What appears to be large
		 * content
		 */</comment>
		<comment type="block">/* NOTE: can compress into one AO storage block. */</comment>

		<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer_size</name></name> <operator>&lt;</operator> <name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldCtxt</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>oldCtxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>memctxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer_size</name></name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldCtxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>AppendOnlyStorageRead_Content</name><argument_list>(
									  <argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>,
									  <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer</name></name></expr></argument>,
									  <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>buffer_beginp</name></name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>large_object_buffer</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>largeObjectState</name></name> <operator>=</operator> <name>DatumStreamLargeObjectState_HaveAoContent</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_read_check_large_varlena_integrity</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>datumstreamread_check_large_varlena_integrity</name><argument_list>(
														  <argument><expr><name>acc</name></expr></argument>,
														  <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>buffer_beginp</name></name></expr></argument>,
											   <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			 <argument><expr><literal type="string">"Unexpected Append-Only Column Store executor kind %d"</literal></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>execBlockKind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Unpack the information from the block headers and get ready to read the first datum.
	 */</comment>
	<expr_stmt><expr><call><name>datumstreamread_block_get_ready</name><argument_list>(<argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>datumstreamread_block</name><parameter_list>(<parameter><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type> <name>acc</name></decl></parameter>,
					  <parameter><decl><type><name>AppendOnlyBlockDirectory</name> <modifier>*</modifier></type><name>blockDirectory</name></decl></parameter>,
					  <parameter><decl><type><name>int</name></type> <name>colGroupNo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>readOK</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFirstRowNum</name></name> <operator>+=</operator> <name><name>acc</name><operator>-&gt;</operator><name>blockRowCount</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>readOK</name> <operator>=</operator> <call><name>AppendOnlyStorageRead_GetBlockInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>,
												<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr></argument>,
											<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>execBlockKind</name></name></expr></argument>,
												<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>firstRow</name></name></expr></argument>,
												<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>rowCnt</name></name></expr></argument>,
												<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>isLarge</name></name></expr></argument>,
											<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>isCompressed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>readOK</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_datumstream</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			 <argument><expr><literal type="string">"datumstream_read_block filePathName %s ndatum %u datump %p "</literal>
			 <literal type="string">"firstRow "</literal> <name>INT64_FORMAT</name> <literal type="string">" rowCnt %u contentLen %u "</literal></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>ao_read</name><operator>.</operator><name>bufferedRead</name><operator>.</operator><name>filePathName</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockRead</name><operator>.</operator><name>logical_row_count</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockRead</name><operator>.</operator><name>datump</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>firstRow</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>rowCnt</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/*
	 * Pre-4.0 blocks do not store firstRowNum, so the returned value
	 * for firstRow is -1. In this case, acc-&gt;blockFirstRowNum keeps
	 * its last value, i.e. is incremented by the blockRowCount of the
	 * previous block.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>firstRow</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFirstRowNum</name></name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>firstRow</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFileOffset</name></name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>ao_read</name><operator>.</operator><name>current</name><operator>.</operator><name>headerOffsetInFile</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>acc</name><operator>-&gt;</operator><name>blockRowCount</name></name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>rowCnt</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_scan</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			 <argument><expr><literal type="string">"Datum stream read get block typeInfo for table '%s' "</literal>
		 <literal type="string">"(contentLen %d, execBlockKind = %d, firstRowNum "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal>
			 <literal type="string">"rowCount %d, isLargeContent %s, isCompressed %s, "</literal>
			 <literal type="string">"blockFirstRowNum "</literal> <name>INT64_FORMAT</name> <literal type="string">", blockFileOffset "</literal> <name>INT64_FORMAT</name> <literal type="string">", blockRowCount %d)"</literal></expr></argument>,
			 <argument><expr><call><name>AppendOnlyStorageRead_RelationName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>acc</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>)</argument_list></call></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>execBlockKind</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>firstRow</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>rowCnt</name></name></expr></argument>,
			 <argument><expr><operator>(</operator><ternary><condition><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>isLarge</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
			 <argument><expr><operator>(</operator><ternary><condition><expr><name><name>acc</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>isCompressed</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFirstRowNum</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFileOffset</name></name></expr></argument>,
			 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockRowCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>datumstreamread_block_content</name><argument_list>(<argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>blockDirectory</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>AppendOnlyBlockDirectory_InsertEntry</name><argument_list>(<argument><expr><name>blockDirectory</name></expr></argument>,
											 <argument><expr><name>colGroupNo</name></expr></argument>,
											 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFirstRowNum</name></name></expr></argument>,
											 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockFileOffset</name></name></expr></argument>,
											 <argument><expr><name><name>acc</name><operator>-&gt;</operator><name>blockRowCount</name></name></expr></argument>,
											 <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>datumstreamread_rewind_block</name><parameter_list>(<parameter><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type> <name>datumStream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DatumStreamBlockRead_Reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>datumStream</name><operator>-&gt;</operator><name>blockRead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>datumstreamread_block_get_ready</name><argument_list>(<argument><expr><name>datumStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Find the specified row in the current block.
 *
 * Note that the values for rowNumInBlock starts with 0.
 */</comment>
<function><type><name>void</name></type>
<name>datumstreamread_find</name><parameter_list>(<parameter><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type> <name>datumStream</name></decl></parameter>,
					 <parameter><decl><type><name>int32</name></type> <name>rowNumInBlock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * if reading a tuple that is prior to the tuple that the datum stream
	 * is pointing to now, reset the datum stream pointers.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>rowNumInBlock</name> <operator>&lt;</operator> <call><name>DatumStreamBlockRead_Nth</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>datumStream</name><operator>-&gt;</operator><name>blockRead</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>datumstreamread_rewind_block</name><argument_list>(<argument><expr><name>datumStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rowNumInBlock</name> <operator>&gt;=</operator> <call><name>DatumStreamBlockRead_Nth</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>datumStream</name><operator>-&gt;</operator><name>blockRead</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
		   <call><name>DatumStreamBlockRead_Nth</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>datumStream</name><operator>-&gt;</operator><name>blockRead</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Find the right row in the block.
	 */</comment>
	<while>while <condition>(<expr><name>rowNumInBlock</name> <operator>&gt;</operator> <call><name>DatumStreamBlockRead_Nth</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>datumStream</name><operator>-&gt;</operator><name>blockRead</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>status</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>datumstreamread_advance</name><argument_list>(<argument><expr><name>datumStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unexpected internal error,"</literal>
								   <literal type="string">" could not find the right row in block."</literal>
								   <literal type="string">" rowCnt is %d"</literal>
								   <literal type="string">" largeObjectState is %d"</literal>
								   <literal type="string">" rowNumInBlock is %d"</literal>
								   <literal type="string">" DatumStreamBlockRead_Nth is %d"</literal></expr></argument>,
								   <argument><expr><name><name>datumStream</name><operator>-&gt;</operator><name>blockRead</name><operator>.</operator><name>logical_row_count</name></name></expr></argument>,
								   <argument><expr><name><name>datumStream</name><operator>-&gt;</operator><name>largeObjectState</name></name></expr></argument>,
								   <argument><expr><name>rowNumInBlock</name></expr></argument>,
						<argument><expr><call><name>DatumStreamBlockRead_Nth</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>datumStream</name><operator>-&gt;</operator><name>blockRead</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rowNumInBlock</name> <operator>==</operator> <call><name>DatumStreamBlockRead_Nth</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>datumStream</name><operator>-&gt;</operator><name>blockRead</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Find the block that contains the given row.
 */</comment>
<function><type><name>bool</name></type>
<name>datumstreamread_find_block</name><parameter_list>(<parameter><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type> <name>datumStream</name></decl></parameter>,
						   <parameter><decl><type><name>DatumStreamFetchDesc</name></type> <name>datumStreamFetchDesc</name></decl></parameter>,
						   <parameter><decl><type><name>int64</name></type> <name>rowNum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>datumStream</name></name> <operator>==</operator> <name>datumStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>scanNextFileOffset</name></name> <operator>&gt;=</operator>
		<name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>scanAfterFileOffset</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* No more blocks requested for range */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentSegmentFile</name><operator>.</operator><name>logicalEof</name></name> <operator>==</operator>
		<name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>scanNextFileOffset</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* No more blocks requested for range */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentSegmentFile</name><operator>.</operator><name>logicalEof</name></name> <operator>&lt;</operator>
		<name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>scanNextFileOffset</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<comment type="block">/* UNDONE:Why does our next scan position go beyond logical EOF ? */</comment>

	<expr_stmt><expr><call><name>AppendOnlyStorageRead_SetTemporaryRange</name><argument_list>(
											<argument><expr><operator>&amp;</operator><name><name>datumStream</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>,
									<argument><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>scanNextFileOffset</name></name></expr></argument>,
								  <argument><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>scanAfterFileOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>datumstreamread_block_info</name><argument_list>(<argument><expr><name>datumStream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Update the current block typeInfo.
		 */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type>	<name>isOldBlockFormat</name> <init>= <expr><operator>(</operator><name><name>datumStream</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>firstRow</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>fileOffset</name></name> <operator>=</operator>
			<call><name>AppendOnlyStorageRead_CurrentHeaderOffsetInFile</name><argument_list>(
													  <argument><expr><operator>&amp;</operator><name><name>datumStream</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>overallBlockLen</name></name> <operator>=</operator>
			<call><name>AppendOnlyStorageRead_OverallBlockLen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>datumStream</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>firstRowNum</name></name> <operator>=</operator>
			<ternary><condition><expr><operator>(</operator><operator>!</operator><name>isOldBlockFormat</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>datumStream</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>firstRow</name></name></expr> </then><else>: <expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>scanNextRowNum</name></name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>lastRowNum</name></name> <operator>=</operator>
			<name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>firstRowNum</name></name> <operator>+</operator> <name><name>datumStream</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>rowCnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>gotContents</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_datumstream</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				 <argument><expr><literal type="string">"datumstream_find_block filePathName %s fileOffset "</literal> <name>INT64_FORMAT</name> <literal type="string">" firstRowNum "</literal> <name>INT64_FORMAT</name> <literal type="string">"  "</literal>
				 <literal type="string">"rowCnt %u lastRowNum "</literal> <name>INT64_FORMAT</name> <literal type="string">" "</literal></expr></argument>,
				 <argument><expr><name><name>datumStream</name><operator>-&gt;</operator><name>ao_read</name><operator>.</operator><name>bufferedRead</name><operator>.</operator><name>filePathName</name></name></expr></argument>,
				 <argument><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>fileOffset</name></name></expr></argument>,
				 <argument><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>firstRowNum</name></name></expr></argument>,
				 <argument><expr><name><name>datumStream</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>rowCnt</name></name></expr></argument>,
				 <argument><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>lastRowNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>rowNum</name> <operator>&lt;</operator> <name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>firstRowNum</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Since we have read a new block, the temporary
			 * range for the read needs to be adjusted
			 * accordingly. Otherwise, the underlying bufferedRead
			 * may stop reading more data because of the
			 * previously-set smaller temporary range.
			 */</comment>
			<decl_stmt><decl><type><name>int64</name></type>		<name>beginFileOffset</name> <init>= <expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>fileOffset</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int64</name></type>		<name>afterFileOffset</name> <init>= <expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>fileOffset</name></name> <operator>+</operator>
			<name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>overallBlockLen</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>AppendOnlyStorageRead_SetTemporaryRange</name><argument_list>(
													<argument><expr><operator>&amp;</operator><name><name>datumStream</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>,
													<argument><expr><name>beginFileOffset</name></expr></argument>,
													<argument><expr><name>afterFileOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * the fix for MPP-17061 does not need to be applied for pre-4.0 blocks,
		 * since index could only be created after upgrading to 4.x.
		 * As a result pre-4.0 blocks has no invisible rows.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>isOldBlockFormat</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int32</name></type>		<name>rowCnt</name></decl>;</decl_stmt>

			<comment type="block">/*
			 * rowCnt may not be valid for pre-4.0 blocks, we need to
			 * read the block content to restore the correct value.
			 */</comment>
			<expr_stmt><expr><call><name>datumstreamread_block_content</name><argument_list>(<argument><expr><name>datumStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>rowCnt</name> <operator>=</operator> <name><name>datumStream</name><operator>-&gt;</operator><name>blockRowCount</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>lastRowNum</name></name> <operator>=</operator>
				<name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>firstRowNum</name></name> <operator>+</operator> <name>rowCnt</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_datumstream</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				 <argument><expr><literal type="string">"datumstream_find_block filePathName %s fileOffset "</literal> <name>INT64_FORMAT</name> <literal type="string">" firstRowNum "</literal> <name>INT64_FORMAT</name> <literal type="string">" "</literal>
				 <literal type="string">"rowCnt %u lastRowNum "</literal> <name>INT64_FORMAT</name> <literal type="string">" "</literal></expr></argument>,
				 <argument><expr><name><name>datumStream</name><operator>-&gt;</operator><name>ao_read</name><operator>.</operator><name>bufferedRead</name><operator>.</operator><name>filePathName</name></name></expr></argument>,
				 <argument><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>fileOffset</name></name></expr></argument>,
				 <argument><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>firstRowNum</name></name></expr></argument>,
				 <argument><expr><name><name>datumStream</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>rowCnt</name></name></expr></argument>,
				 <argument><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>lastRowNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>rowNum</name> <operator>&lt;=</operator> <name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>lastRowNum</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Found the block that contains the row.
			 * Read the block content if it was not read above.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isOldBlockFormat</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>gotContents</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unexpected internal error,"</literal>
									<literal type="string">" block content was already read."</literal>
									<literal type="string">" datumstream_find_block filePathName %s"</literal>
									<literal type="string">" fileOffset "</literal> <name>INT64_FORMAT</name>
									<literal type="string">" firstRowNum "</literal> <name>INT64_FORMAT</name>
									<literal type="string">" rowCnt %u lastRowNum "</literal> <name>INT64_FORMAT</name>
								 <literal type="string">" ndatum %u contentLen %d gotContents true"</literal></expr></argument>,
							  <argument><expr><name><name>datumStream</name><operator>-&gt;</operator><name>ao_read</name><operator>.</operator><name>bufferedRead</name><operator>.</operator><name>filePathName</name></name></expr></argument>,
							   <argument><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>fileOffset</name></name></expr></argument>,
									<argument><expr><name><name>datumStream</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>firstRow</name></name></expr></argument>,
									<argument><expr><name><name>datumStream</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>rowCnt</name></name></expr></argument>,
							   <argument><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>lastRowNum</name></name></expr></argument>,
									<argument><expr><name><name>datumStream</name><operator>-&gt;</operator><name>blockRead</name><operator>.</operator><name>logical_row_count</name></name></expr></argument>,
									<argument><expr><name><name>datumStream</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr></argument>
									)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_datumstream</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						 <argument><expr><literal type="string">"datumstream_find_block filePathName %s fileOffset "</literal> <name>INT64_FORMAT</name> <literal type="string">" firstRowNum "</literal> <name>INT64_FORMAT</name> <literal type="string">" "</literal>
						 <literal type="string">"rowCnt %u lastRowNum "</literal> <name>INT64_FORMAT</name> <literal type="string">" "</literal>
						 <literal type="string">"ndatum %u contentLen %d "</literal></expr></argument>,
						 <argument><expr><name><name>datumStream</name><operator>-&gt;</operator><name>ao_read</name><operator>.</operator><name>bufferedRead</name><operator>.</operator><name>filePathName</name></name></expr></argument>,
						 <argument><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>fileOffset</name></name></expr></argument>,
						 <argument><expr><name><name>datumStream</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>firstRow</name></name></expr></argument>,
						 <argument><expr><name><name>datumStream</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>rowCnt</name></name></expr></argument>,
						 <argument><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>lastRowNum</name></name></expr></argument>,
						 <argument><expr><name><name>datumStream</name><operator>-&gt;</operator><name>blockRead</name><operator>.</operator><name>logical_row_count</name></name></expr></argument>,
						 <argument><expr><name><name>datumStream</name><operator>-&gt;</operator><name>getBlockInfo</name><operator>.</operator><name>contentLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>datumstreamread_block_content</name><argument_list>(<argument><expr><name>datumStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>gotContents</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>gotContents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* MPP-17061: reach the end of range covered by block directory entry */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>fileOffset</name></name> <operator>+</operator>
			 <name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>currentBlock</name><operator>.</operator><name>overallBlockLen</name></name><operator>)</operator> <operator>&gt;=</operator>
			<name><name>datumStreamFetchDesc</name><operator>-&gt;</operator><name>scanAfterFileOffset</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>AppendOnlyStorageRead_SkipCurrentBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>datumStream</name><operator>-&gt;</operator><name>ao_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Ensures that the stream's datum_upgrade_buffer is at least len bytes long.
 * Returns a pointer to the (possibly newly allocated) upgrade buffer space. If
 * additional space is needed, it will be allocated in the stream's memory
 * context.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>datumstreamread_get_upgrade_space</name><parameter_list>(<parameter><decl><type><name>DatumStreamRead</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>datum_upgrade_buffer_size</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>memctxt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * FIXME: looks like at least one realloc() implementation can't handle
		 * NULL pointers?
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>datum_upgrade_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>datum_upgrade_buffer</name></name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>datum_upgrade_buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>datum_upgrade_buffer</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>datum_upgrade_buffer_size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>ds</name><operator>-&gt;</operator><name>datum_upgrade_buffer</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
