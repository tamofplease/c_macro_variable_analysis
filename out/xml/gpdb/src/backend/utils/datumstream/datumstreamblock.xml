<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/datumstream/datumstreamblock.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * datumstreamblock.c
 *
 * Portions Copyright (c) 2011, EMC, Inc.
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/utils/datumstream/datumstreamblock.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tupmacs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tuptoaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datumstreamblock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<comment type="block">/*	Forwards. */</comment>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>VarlenaInfoToBuffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DatumStreamBlock_IntegrityCheckOrig</name><parameter_list>(
									<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>,
									<parameter><decl><type><name>int32</name></type> <name>bufferSize</name></decl></parameter>,
									<parameter><decl><type><name>bool</name></type> <name>minimalIntegrityChecks</name></decl></parameter>,
									<parameter><decl><type><name>int32</name></type> <name>expectedRowCount</name></decl></parameter>,
									<parameter><decl><type><name>DatumStreamTypeInfo</name> <modifier>*</modifier></type> <name>typeInfo</name></decl></parameter>,
							   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>errdetailCallback</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errdetailArg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
									<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errdetailArg</name></decl></parameter>,
							 <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>errcontextCallback</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errcontextArg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
									<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errcontextArg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DatumStreamBlock_IntegrityCheckDense</name><parameter_list>(
									 <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>,
									 <parameter><decl><type><name>int32</name></type> <name>bufferSize</name></decl></parameter>,
									 <parameter><decl><type><name>bool</name></type> <name>minimalIntegrityChecks</name></decl></parameter>,
									 <parameter><decl><type><name>int32</name></type> <name>expectedRowCount</name></decl></parameter>,
									 <parameter><decl><type><name>DatumStreamTypeInfo</name> <modifier>*</modifier></type> <name>typeInfo</name></decl></parameter>,
							   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>errdetailCallback</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errdetailArg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
									 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errdetailArg</name></decl></parameter>,
							 <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>errcontextCallback</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errcontextArg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
									 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errcontextArg</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Proper align with zero padding */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type>
<name>att_align_zero</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>alignchar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type>  <name>misalignment</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>att_align_nominal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>alignchar</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>data</name> <operator>&amp;</operator> <name>misalignment</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name>data</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumStreamBlockRead.
 */</comment>
<comment type="block">/*	PERFORMANCE EXPERIMENT: Only do integrity and trace checking for DEBUG builds... */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
<function><type><name>void</name></type>
<name>DatumStreamBlockRead_PrintVarlenaInfo</name><parameter_list>(
									  <parameter><decl><type><name>DatumStreamBlockRead</name> <modifier>*</modifier></type> <name>dsr</name></decl></parameter>,
									  <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Read varlena &lt;%s&gt;"</literal></expr></argument>,
		 <argument><expr><call><name>VarlenaInfoToString</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>errdetail_datumstreamblockread</name><parameter_list>(
							   <parameter><decl><type><name>DatumStreamBlockRead</name> <modifier>*</modifier></type> <name>dsr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>dsr</name><operator>-&gt;</operator><name>errdetailCallback</name></name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>errcontextArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>errdetail_datumstreamblockread_callback</name><parameter_list>(
										<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DatumStreamBlockRead</name> <modifier>*</modifier></type><name>dsr</name> <init>= <expr><operator>(</operator><name>DatumStreamBlockRead</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>eyecatcher</name></name></expr></argument>, <argument><expr><name>DatumStreamBlockRead_Eyecatcher</name></expr></argument>, <argument><expr><name>DatumStreamBlockRead_EyecatcherLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"DatumStreamBlockRead data structure not valid (eyecatcher)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>errdetail_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>errcontext_datumstreamblockread</name><parameter_list>(
								<parameter><decl><type><name>DatumStreamBlockRead</name> <modifier>*</modifier></type> <name>dsr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>dsr</name><operator>-&gt;</operator><name>errcontextCallback</name></name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>errcontextArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>errcontext_datumstreamblockread_callback</name><parameter_list>(
										 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DatumStreamBlockRead</name> <modifier>*</modifier></type><name>dsr</name> <init>= <expr><operator>(</operator><name>DatumStreamBlockRead</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>eyecatcher</name></name></expr></argument>, <argument><expr><name>DatumStreamBlockRead_Eyecatcher</name></expr></argument>, <argument><expr><name>DatumStreamBlockRead_EyecatcherLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"DatumStreamBlockRead data structure not valid (eyecatcher)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>errcontext_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>DatumStreamBlockRead_ResetOrig</name><parameter_list>(<parameter><decl><type><name>DatumStreamBlockRead</name> <modifier>*</modifier></type> <name>dsr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * PERFORMANCE EXPERIMENT: Only do integrity and trace checking for DEBUG
	 * builds...
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>eyecatcher</name></name></expr></argument>, <argument><expr><name>DatumStreamBlockRead_Eyecatcher</name></expr></argument>, <argument><expr><name>DatumStreamBlockRead_EyecatcherLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"DatumStreamBlockRead data structure not valid (eyecatcher)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Put before first entry.	Caller will advance.
	 */</comment>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>nth</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Reset everything else.
	 */</comment>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>has_null</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap_beginp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_afterp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>buffer_beginp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datump</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>DatumStreamBlockRead_GetReadyOrig</name><parameter_list>(
								  <parameter><decl><type><name>DatumStreamBlockRead</name> <modifier>*</modifier></type> <name>dsr</name></decl></parameter>,
								  <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>,
								  <parameter><decl><type><name>int32</name></type> <name>bufferSize</name></decl></parameter>,
								  <parameter><decl><type><name>int64</name></type> <name>firstRowNum</name></decl></parameter>,
								  <parameter><decl><type><name>int32</name></type> <name>rowCount</name></decl></parameter>,
								  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>hadToAdjustRowCount</name></decl></parameter>,
								  <parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>adjustedRowCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int32</name></type>		<name>unalignedHeaderSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>alignedHeaderSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>minimalIntegrityChecks</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>DatumStreamBlock_Orig</name> <modifier>*</modifier></type><name>blockOrig</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>minHeaderSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Orig</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * PERFORMANCE EXPERIMENT: Only do integrity and trace checking for DEBUG
	 * builds...
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>eyecatcher</name></name></expr></argument>, <argument><expr><name>DatumStreamBlockRead_Eyecatcher</name></expr></argument>, <argument><expr><name>DatumStreamBlockRead_EyecatcherLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"DatumStreamBlockRead data structure not valid (eyecatcher)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><operator>*</operator><name>hadToAdjustRowCount</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>adjustedRowCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><name>minimalIntegrityChecks</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>minimalIntegrityChecks</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_block_read_check_integrity</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>minimalIntegrityChecks</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>buffer_beginp</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Read header information and setup for reading the datum in the block.
	 */</comment>

	<comment type="block">/*
	 * Advance pointer 'p' as we discover the contents of this block.
	 */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>buffer_beginp</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>bufferSize</name> <operator>&lt;</operator> <name>minHeaderSize</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"bad datum stream Original block header size"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail_internal</name><argument_list>(<argument><expr><literal type="string">"Found %d and expected the size to be at least %d."</literal></expr></argument>,
									<argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>minHeaderSize</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontext_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>blockOrig</name> <operator>=</operator> <operator>(</operator><name>DatumStreamBlock_Orig</name> <operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>blockOrig</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>DatumStreamVersion_Original</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"bad datum stream Original block version"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail_internal</name><argument_list>(<argument><expr><literal type="string">"Found %d and expected %d."</literal></expr></argument>,
									<argument><expr><name><name>blockOrig</name><operator>-&gt;</operator><name>version</name></name></expr></argument>,
									<argument><expr><name>DatumStreamVersion_Original</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontext_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>minimalIntegrityChecks</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>DatumStreamBlock_IntegrityCheckOrig</name><argument_list>(
											<argument><expr><name>buffer</name></expr></argument>,
											<argument><expr><name>bufferSize</name></expr></argument>,
											<argument><expr><name>minimalIntegrityChecks</name></expr></argument>,
											<argument><expr><name>rowCount</name></expr></argument>,
											<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>typeInfo</name></name></expr></argument>,
			 <comment type="block">/* errdetailCallback */</comment> <argument><expr><name>errdetail_datumstreamblockread_callback</name></expr></argument>,
											 <comment type="block">/* errdetailArg */</comment> <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>dsr</name></expr></argument>,
		   <comment type="block">/* errcontextCallback */</comment> <argument><expr><name>errcontext_datumstreamblockread_callback</name></expr></argument>,
										   <comment type="block">/* errcontextArg */</comment> <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>dsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name> <operator>=</operator> <name><name>blockOrig</name><operator>-&gt;</operator><name>ndatum</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Not used for Original */</comment>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_data_size</name></name> <operator>=</operator> <name><name>blockOrig</name><operator>-&gt;</operator><name>sz</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Orig</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<comment type="block">/* Set up acc */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>nth</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_index</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>has_null</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>blockOrig</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DSB_HAS_NULLBITMAP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dsr</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap_beginp</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>DatumStreamBitMapRead_Init</name><argument_list>(
								   <argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>,
								   <argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap_beginp</name></name></expr></argument>,
								   <argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*
		 * The field nullsz byte length is MAXALIGN.
		 */</comment>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>blockOrig</name><operator>-&gt;</operator><name>nullsz</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Pre-4.0 code did not enforce the following assertion.
	 * We identify this exception through firstRow, which is -1
	 * for pre-4.0 blocks (not stored inside the block).
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name> <operator>==</operator> <name>rowCount</name> <operator>||</operator> <name>firstRowNum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
		 * In pre-4.0 blocks, the maximum value of ndatum is
	 * 32000 while rowCnt cannot exceed 16384, so we set
	 * rowCnt to ndatum to build the block directory
	 * consistently.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name> <operator>&gt;</operator> <name>rowCount</name> <operator>&amp;&amp;</operator> <name>firstRowNum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Adjust !!!! */</comment>
		<expr_stmt><expr><operator>*</operator><name>adjustedRowCount</name> <operator>=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>hadToAdjustRowCount</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>unalignedHeaderSize</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name><name>dsr</name><operator>-&gt;</operator><name>buffer_beginp</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>alignedHeaderSize</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>unalignedHeaderSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name> <operator>=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>buffer_beginp</name></name> <operator>+</operator> <name>alignedHeaderSize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_afterp</name></name> <operator>=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name> <operator>+</operator> <name><name>dsr</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * PERFORMANCE EXPERIMENT: Only do integrity and trace checking for DEBUG
	 * builds...
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_scan</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsr</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			 <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block read unpack Original with NO NULLs "</literal>
					 <literal type="string">"(logical row count %d, physical data size = %d, "</literal>
					 <literal type="string">"adjustedRowCount %d, row count adjusted %s, "</literal>
					 <literal type="string">"unaligned header size %d, aligned header size %d, "</literal>
					 <literal type="string">"datum begin %p, datum after %p)"</literal></expr></argument>,
					 <argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>,
					 <argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr></argument>,
					 <argument><expr><operator>*</operator><name>adjustedRowCount</name></expr></argument>,
					 <argument><expr><operator>(</operator><ternary><condition><expr><operator>*</operator><name>hadToAdjustRowCount</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
					 <argument><expr><name>unalignedHeaderSize</name></expr></argument>,
					 <argument><expr><name>alignedHeaderSize</name></expr></argument>,
					 <argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name></expr></argument>,
					 <argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_afterp</name></name></expr></argument>)</argument_list></call><operator>,</operator>
			  <call><name>errdetail_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>,</operator>
			  <call><name>errcontext_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block read unpack Original with NULLs "</literal>
						<literal type="string">"(logical row count %d, physical data size = %d, "</literal>
						<literal type="string">"NULL bit-map MAXALIGN size %d, "</literal>
						<literal type="string">"adjustedRowCount %d, row count adjusted %s, "</literal>
						<literal type="string">"unaligned header size %d, aligned header size %d, "</literal>
						<literal type="string">"null begin %p, datum begin %p, datum after %p)"</literal></expr></argument>,
						<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>,
						<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr></argument>,
						<argument><expr><name><name>blockOrig</name><operator>-&gt;</operator><name>nullsz</name></name></expr></argument>,
						<argument><expr><operator>*</operator><name>adjustedRowCount</name></expr></argument>,
						<argument><expr><operator>(</operator><ternary><condition><expr><operator>*</operator><name>hadToAdjustRowCount</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
						<argument><expr><name>unalignedHeaderSize</name></expr></argument>,
						<argument><expr><name>alignedHeaderSize</name></expr></argument>,
						<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap_beginp</name></name></expr></argument>,
						<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name></expr></argument>,
						<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_afterp</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontext_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datump</name></name> <operator>=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>DatumStreamBlockRead_Init</name><parameter_list>(
						  <parameter><decl><type><name>DatumStreamBlockRead</name> <modifier>*</modifier></type> <name>dsr</name></decl></parameter>,
						  <parameter><decl><type><name>DatumStreamTypeInfo</name> <modifier>*</modifier></type> <name>typeInfo</name></decl></parameter>,
						  <parameter><decl><type><name>DatumStreamVersion</name></type> <name>datumStreamVersion</name></decl></parameter>,
						  <parameter><decl><type><name>bool</name></type> <name>rle_can_have_compression</name></decl></parameter>,
						  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>errdetailCallback</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errdetailArg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
						  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errdetailArg</name></decl></parameter>,
						  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>errcontextCallback</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errcontextArg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
						  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errcontextArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>eyecatcher</name></name></expr></argument>, <argument><expr><name>DatumStreamBlockRead_Eyecatcher</name></expr></argument>, <argument><expr><name>DatumStreamBlockRead_EyecatcherLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>typeInfo</name></name></expr></argument>, <argument><expr><name>typeInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamTypeInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datumStreamVersion</name></name> <operator>=</operator> <name>datumStreamVersion</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_can_have_compression</name></name> <operator>=</operator> <name>rle_can_have_compression</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>errdetailCallback</name></name> <operator>=</operator> <name>errdetailCallback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>errcontextArg</name></name> <operator>=</operator> <name>errcontextArg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>errcontextCallback</name></name> <operator>=</operator> <name>errcontextCallback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>errcontextArg</name></name> <operator>=</operator> <name>errcontextArg</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>memctxt</name></name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_data_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap_beginp</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_compress_beginp</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_repeatcountsp</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>nth</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>dsr</name><operator>-&gt;</operator><name>has_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>datump</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>dsr</name><operator>-&gt;</operator><name>rle_block_was_compressed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_repeatcounts_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>dsr</name><operator>-&gt;</operator><name>rle_in_repeated_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_repeated_item_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_beginp</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_deltasp</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>delta_datum_p</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_bitmap_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>deltas_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>deltas_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_block_was_compressed</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_item</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>
<name>DatumStreamBlockRead_Finish</name><parameter_list>(
							<parameter><decl><type><name>DatumStreamBlockRead</name> <modifier>*</modifier></type> <name>dsr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Place holder. */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Dense routines.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
<function><type><name>void</name></type>
<name>DatumStreamBlockRead_CheckDenseGetInvariant</name><parameter_list>(
											<parameter><decl><type><name>DatumStreamBlockRead</name> <modifier>*</modifier></type> <name>dsr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>total_datum_index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>currentDeltaBitMapOnCount</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>total_datum_index</name> <operator>=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_index</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_block_was_compressed</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>currentDeltaBitMapOnCount</name> <operator>=</operator> <call><name>DatumStreamBitMapRead_OnSeenCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>total_datum_index</name> <operator>+=</operator> <name>currentDeltaBitMapOnCount</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>currentDeltaBitMapOnCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsr</name><operator>-&gt;</operator><name>rle_block_was_compressed</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsr</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>dsr</name><operator>-&gt;</operator><name>nth</name></name> <operator>!=</operator> <name>total_datum_index</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"nth position %d expected to match physical datum index %d + delta ON count %d when Dense block does not have RLE_TYPE compression and does not have NULLs "</literal>
						   <literal type="string">"(logical row count %d, physical datum count %d)"</literal></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_index</name></name></expr></argument>,
								<argument><expr><name>currentDeltaBitMapOnCount</name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int32</name></type>		<name>currentNullOnCount</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int32</name></type>		<name>expectedNullOnCount</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>currentNullOnCount</name> <operator>=</operator> <call><name>DatumStreamBitMapRead_OnSeenCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>expectedNullOnCount</name> <operator>=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>nth</name></name> <operator>-</operator> <name>total_datum_index</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>currentNullOnCount</name> <operator>!=</operator> <name>expectedNullOnCount</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"NULL bit-map ON count does not match when Dense block does not have RLE_TYPE compression"</literal></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_internal</name><argument_list>(<argument><expr><literal type="string">"Found %d, expected %d."</literal></expr></argument>,
											<argument><expr><name>currentNullOnCount</name></expr></argument>,
											<argument><expr><name>expectedNullOnCount</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>currentCompressBitMapPosition</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>currentCompressBitMapOffCount</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>currentCompressBitMapPosition</name> <operator>=</operator> <call><name>DatumStreamBitMapRead_Position</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>currentCompressBitMapPosition</name> <operator>!=</operator> <name>total_datum_index</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"COMPRESS bit-map position %d expected to match physical datum index %d + delta ON count %d when Dense block does not have RLE_TYPE compression and does not have NULLs "</literal>
							<literal type="string">"(logical row count %d, physical datum count %d)"</literal></expr></argument>,
							<argument><expr><name>currentCompressBitMapPosition</name></expr></argument>,
							<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_index</name></name></expr></argument>,
							<argument><expr><name>currentDeltaBitMapOnCount</name></expr></argument>,
							<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>,
							<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>


		<expr_stmt><expr><name>currentCompressBitMapOffCount</name> <operator>=</operator> <name>currentCompressBitMapPosition</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator>
			<call><name>DatumStreamBitMapRead_OnSeenCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsr</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>dsr</name><operator>-&gt;</operator><name>nth</name></name> <operator>!=</operator> <name>currentCompressBitMapOffCount</name> <operator>+</operator> <name><name>dsr</name><operator>-&gt;</operator><name>rle_total_repeat_items_read</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Nth position %d expected to match "</literal>
								<literal type="string">"current COMPRESS bit-map OFF count %d + total repeat items read %d - 1 "</literal>
								<literal type="string">"when Dense block does not have RLE_TYPE compression and does not have NULLs "</literal>
						   <literal type="string">"(logical row count %d, physical datum count %d)"</literal></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
								<argument><expr><name>currentCompressBitMapOffCount</name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_total_repeat_items_read</name></name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int32</name></type>		<name>currentNullBitMapOnCount</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>currentNullBitMapOnCount</name> <operator>=</operator> <call><name>DatumStreamBitMapRead_OnSeenCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>dsr</name><operator>-&gt;</operator><name>nth</name></name> <operator>!=</operator> <name>currentNullBitMapOnCount</name> <operator>+</operator> <name>currentCompressBitMapOffCount</name> <operator>+</operator> <name><name>dsr</name><operator>-&gt;</operator><name>rle_total_repeat_items_read</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Nth position %d expected to match current NULL bit-map ON count %d + "</literal>
								<literal type="string">"current COMPRESS bit-map OFF count %d + total repeat items read %d - 1 "</literal>
								<literal type="string">"when Dense block does not have RLE_TYPE compression and does not have NULLs "</literal>
						   <literal type="string">"(logical row count %d, physical datum count %d)"</literal></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
								<argument><expr><name>currentNullBitMapOnCount</name></expr></argument>,
								<argument><expr><name>currentCompressBitMapOffCount</name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_total_repeat_items_read</name></name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_block_was_compressed</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>currentDeltaBitMapPosition</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>currentDeltaBitMapPosition</name> <operator>=</operator> <call><name>DatumStreamBitMapRead_Position</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>currentDeltaBitMapPosition</name> <operator>!=</operator> <name>total_datum_index</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"DELTA bit-map position %d expected to match physical datum index %d + delta ON count %d "</literal>
							<literal type="string">"(logical row count %d, physical datum count %d)"</literal></expr></argument>,
							<argument><expr><name>currentDeltaBitMapPosition</name></expr></argument>,
							<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_index</name></name></expr></argument>,
							<argument><expr><name>currentDeltaBitMapOnCount</name></expr></argument>,
							<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>,
							<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>DatumStreamBlockRead_ResetDense</name><parameter_list>(<parameter><decl><type><name>DatumStreamBlockRead</name> <modifier>*</modifier></type> <name>dsr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * PERFORMANCE EXPERIMENT: Only do integrity and trace checking for DEBUG
	 * builds...
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>eyecatcher</name></name></expr></argument>, <argument><expr><name>DatumStreamBlockRead_Eyecatcher</name></expr></argument>, <argument><expr><name>DatumStreamBlockRead_EyecatcherLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"DatumStreamBlockRead data structure not valid (eyecatcher)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Put before first entry.	Caller will advance.
	 */</comment>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>nth</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Reset everything else.
	 */</comment>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>has_null</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap_beginp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_afterp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_compress_beginp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_repeatcountsp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_beginp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_deltasp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>delta_datum_p</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>buffer_beginp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datump</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_block_was_compressed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_repeatcounts_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_in_repeated_item</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_repeated_item_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_total_repeat_items_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_bitmap_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>deltas_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>deltas_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_block_was_compressed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_item</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>DatumStreamBlockRead_GetReadyDense</name><parameter_list>(
								   <parameter><decl><type><name>DatumStreamBlockRead</name> <modifier>*</modifier></type> <name>dsr</name></decl></parameter>,
								   <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>,
								   <parameter><decl><type><name>int32</name></type> <name>bufferSize</name></decl></parameter>,
								   <parameter><decl><type><name>int64</name></type> <name>firstRowNum</name></decl></parameter>,
								   <parameter><decl><type><name>int32</name></type> <name>rowCount</name></decl></parameter>,
								   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>hadToAdjustRowCount</name></decl></parameter>,
								   <parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>adjustedRowCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int32</name></type>		<name>unalignedHeaderSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>alignedHeaderSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>minimalIntegrityChecks</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>DatumStreamBlock_Dense</name> <modifier>*</modifier></type><name>blockDense</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DatumStreamBlock_Rle_Extension</name> <modifier>*</modifier></type><name>rleExtension</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DatumStreamBlock_Delta_Extension</name> <modifier>*</modifier></type><name>deltaExtension</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * PERFORMANCE EXPERIMENT: Only do integrity and trace checking for DEBUG
	 * builds...
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>eyecatcher</name></name></expr></argument>, <argument><expr><name>DatumStreamBlockRead_Eyecatcher</name></expr></argument>, <argument><expr><name>DatumStreamBlockRead_EyecatcherLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"DatumStreamBlockRead data structure not valid (eyecatcher)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><operator>*</operator><name>hadToAdjustRowCount</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>adjustedRowCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><name>minimalIntegrityChecks</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>minimalIntegrityChecks</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_block_read_check_integrity</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>minimalIntegrityChecks</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>buffer_beginp</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Read header information and setup for reading the datum in the block.
	 */</comment>

	<comment type="block">/*
	 * Advance pointer 'p' as we discover the contents of this block.
	 */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>buffer_beginp</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>p</name> <operator>==</operator> <name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DatumStreamBlock_IntegrityCheckDense</name><argument_list>(
										 <argument><expr><name>buffer</name></expr></argument>,
										 <argument><expr><name>bufferSize</name></expr></argument>,
										 <argument><expr><name>minimalIntegrityChecks</name></expr></argument>,
										 <argument><expr><name>rowCount</name></expr></argument>,
										 <argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>typeInfo</name></name></expr></argument>,
			 <comment type="block">/* errdetailCallback */</comment> <argument><expr><name>errdetail_datumstreamblockread_callback</name></expr></argument>,
										  <comment type="block">/* errdetailArg */</comment> <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>dsr</name></expr></argument>,
		   <comment type="block">/* errcontextCallback */</comment> <argument><expr><name>errcontext_datumstreamblockread_callback</name></expr></argument>,
										  <comment type="block">/* errcontextArg */</comment> <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>dsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>blockDense</name> <operator>=</operator> <operator>(</operator><name>DatumStreamBlock_Dense</name> <operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name> <operator>=</operator> <name><name>blockDense</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name> <operator>==</operator> <name>rowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>=</operator> <name><name>blockDense</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_data_size</name></name> <operator>=</operator> <name><name>blockDense</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Dense</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_block_was_compressed</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>blockDense</name><operator>-&gt;</operator><name>orig_4_bytes</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>DSB_HAS_RLE_COMPRESSION</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_block_was_compressed</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>rleExtension</name> <operator>=</operator> <operator>(</operator><name>DatumStreamBlock_Rle_Extension</name> <operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Rle_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_norepeats_null_bitmap_count</name></name> <operator>=</operator> <name><name>rleExtension</name><operator>-&gt;</operator><name>norepeats_null_bitmap_count</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_compress_bitmap_count</name></name> <operator>=</operator> <name><name>rleExtension</name><operator>-&gt;</operator><name>compress_bitmap_count</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name> <operator>=</operator> <name><name>rleExtension</name><operator>-&gt;</operator><name>repeatcounts_count</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_repeatcounts_size</name></name> <operator>=</operator> <name><name>rleExtension</name><operator>-&gt;</operator><name>repeatcounts_size</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>rleExtension</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Delta */</comment>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_block_was_compressed</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>blockDense</name><operator>-&gt;</operator><name>orig_4_bytes</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>DSB_HAS_DELTA_COMPRESSION</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_block_was_compressed</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>deltaExtension</name> <operator>=</operator> <operator>(</operator><name>DatumStreamBlock_Delta_Extension</name> <operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Delta_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_bitmap_count</name></name> <operator>=</operator> <name><name>deltaExtension</name><operator>-&gt;</operator><name>delta_bitmap_count</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>deltas_count</name></name> <operator>=</operator> <name><name>deltaExtension</name><operator>-&gt;</operator><name>deltas_count</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>deltas_size</name></name> <operator>=</operator> <name><name>deltaExtension</name><operator>-&gt;</operator><name>deltas_size</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>deltaExtension</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Set up acc */</comment>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>nth</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>				<comment type="block">/* put it before first entry.  Caller will
								 * advance */</comment>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_datum_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>has_null</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>blockDense</name><operator>-&gt;</operator><name>orig_4_bytes</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>DSB_HAS_NULLBITMAP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsr</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap_beginp</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>DatumStreamBitMapRead_Init</name><argument_list>(
								   <argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>,
								   <argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap_beginp</name></name></expr></argument>,
								   <argument><expr><operator>(</operator><ternary><condition><expr><operator>!</operator><name><name>dsr</name><operator>-&gt;</operator><name>rle_block_was_compressed</name></name></expr> ?</condition><then>
									<expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr> </then><else>:
									<expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_norepeats_null_bitmap_count</name></name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>DatumStreamBitMapRead_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>unalignedHeaderSize</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name><name>dsr</name><operator>-&gt;</operator><name>buffer_beginp</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>alignedHeaderSize</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>unalignedHeaderSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Skip over alignment padding.
	 */</comment>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name> <operator>=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>buffer_beginp</name></name> <operator>+</operator> <name>alignedHeaderSize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_afterp</name></name> <operator>=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name> <operator>+</operator> <name><name>dsr</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsr</name><operator>-&gt;</operator><name>rle_block_was_compressed</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * PERFORMANCE EXPERIMENT: Only do integrity and trace checking for
		 * DEBUG builds...
		 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_scan</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsr</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block read unpack Dense with NO NULLs "</literal>
						<literal type="string">"(logical row count %d, physical data size = %d, "</literal>
						<literal type="string">"unaligned header size %d, aligned header size %d, "</literal>
						<literal type="string">"datum begin %p, datum after %p)"</literal></expr></argument>,
						<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>,
						<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr></argument>,
						<argument><expr><name>unalignedHeaderSize</name></expr></argument>,
						<argument><expr><name>alignedHeaderSize</name></expr></argument>,
						<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name></expr></argument>,
						<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_afterp</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontext_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream read unpack Dense block header for table with NULLs "</literal>
								<literal type="string">"(logical row count %d, physical data size = %d, NULL bit-map size %d, "</literal>
						 <literal type="string">"unaligned header size %d, aligned header size %d, "</literal>
							<literal type="string">"null begin %p, datum begin %p, datum after %p)"</literal></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr></argument>,
								<argument><expr><call><name>DatumStreamBitMapRead_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name>unalignedHeaderSize</name></expr></argument>,
								<argument><expr><name>alignedHeaderSize</name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap_beginp</name></name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_afterp</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * RLE_TYPE compression was used for this block.
		 */</comment>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_compress_beginp</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>DatumStreamBitMapRead_Init</name><argument_list>(
								   <argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>,
								   <argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_compress_beginp</name></name></expr></argument>,
								   <argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_compress_bitmap_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>DatumStreamBitMapRead_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Start our decompression of repeat counts at beginning.
		 */</comment>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_repeatcountsp</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>rle_repeatcounts_size</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_repeatcounts_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_repeated_item_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_in_repeated_item</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>unalignedHeaderSize</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>dsr</name><operator>-&gt;</operator><name>buffer_beginp</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>alignedHeaderSize</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>unalignedHeaderSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Skip over alignment padding.
		 */</comment>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name> <operator>=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>buffer_beginp</name></name> <operator>+</operator> <name>alignedHeaderSize</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_afterp</name></name> <operator>=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name> <operator>+</operator> <name><name>dsr</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr>;</expr_stmt>

		<comment type="block">/*
		 * PERFORMANCE EXPERIMENT: Only do integrity and trace checking for
		 * DEBUG builds...
		 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_scan</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsr</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block read unpack Dense with NO NULLs and RLE_TYPE compression "</literal>
						   <literal type="string">"(logical row count %d, physical data size = %d, "</literal>
					  <literal type="string">"compress bit-map count %d, compress bit-map size %d, "</literal>
							<literal type="string">"repeat counts count %d, repeat counts size %d, "</literal>
						 <literal type="string">"unaligned header size %d, aligned header size %d, "</literal>
								<literal type="string">"datum begin %p, datum after %p)"</literal></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr></argument>,
					  <argument><expr><call><name>DatumStreamBitMapRead_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><call><name>DatumStreamBitMapRead_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_repeatcounts_size</name></name></expr></argument>,
								<argument><expr><name>unalignedHeaderSize</name></expr></argument>,
								<argument><expr><name>alignedHeaderSize</name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_afterp</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block read unpack Dense with NULLs and RLE_TYPE compression "</literal>
						   <literal type="string">"(logical row count %d, physical data size = %d, "</literal>
								<literal type="string">"norepeats NULL bit-map count %d, norepeats NULL bit-map size %d, "</literal>
					  <literal type="string">"compress bit-map count %d, compress bit-map size %d, "</literal>
							<literal type="string">"repeat counts count %d, repeat counts size %d, "</literal>
						 <literal type="string">"unaligned header size %d, aligned header size %d, "</literal>
							<literal type="string">"null begin %p, datum begin %p, datum after %p)"</literal></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr></argument>,
							  <argument><expr><call><name>DatumStreamBitMapRead_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>DatumStreamBitMapRead_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><call><name>DatumStreamBitMapRead_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><call><name>DatumStreamBitMapRead_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>rle_repeatcounts_size</name></name></expr></argument>,
								<argument><expr><name>unalignedHeaderSize</name></expr></argument>,
								<argument><expr><name>alignedHeaderSize</name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap_beginp</name></name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name></expr></argument>,
								<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_afterp</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_block_was_compressed</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Delta compression was used for this block.
		 */</comment>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_beginp</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>DatumStreamBitMapRead_Init</name><argument_list>(
								   <argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>,
								   <argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_beginp</name></name></expr></argument>,
								   <argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_bitmap_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>DatumStreamBitMapRead_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Start our decompression of deltas at beginning.
		 */</comment>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>delta_deltasp</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>deltas_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>unalignedHeaderSize</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>dsr</name><operator>-&gt;</operator><name>buffer_beginp</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>alignedHeaderSize</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>unalignedHeaderSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Skip over alignment padding.
		 */</comment>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name> <operator>=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>buffer_beginp</name></name> <operator>+</operator> <name>alignedHeaderSize</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_afterp</name></name> <operator>=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name> <operator>+</operator> <name><name>dsr</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_scan</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block read unpack Dense with NULLs and DELTA compression "</literal>
							<literal type="string">"(logical row count %d, physical data size = %d, "</literal>
							<literal type="string">"has_nul %s, norepeats NULL bit-map count %d, norepeats NULL bit-map size %d, "</literal>
							<literal type="string">"delta bit-map count %d, delta bit-map size %d, "</literal>
							<literal type="string">"deltas count %d, deltas size %d, "</literal>
						 <literal type="string">"unaligned header size %d, aligned header size %d, "</literal>
							<literal type="string">"null begin %p, datum begin %p, datum after %p)"</literal></expr></argument>,
							<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>,
							<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr></argument>,
							<argument><expr><ternary><condition><expr><name><name>dsr</name><operator>-&gt;</operator><name>has_null</name></name></expr> ?</condition><then> <expr><literal type="string">"TRUE"</literal></expr> </then><else>: <expr><literal type="string">"FALSE"</literal></expr></else></ternary></expr></argument>,
							<argument><expr><ternary><condition><expr><name><name>dsr</name><operator>-&gt;</operator><name>has_null</name></name></expr> ?</condition><then> <expr><call><name>DatumStreamBitMapRead_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name><name>dsr</name><operator>-&gt;</operator><name>has_null</name></name></expr> ?</condition><then> <expr><call><name>DatumStreamBitMapRead_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
							<argument><expr><call><name>DatumStreamBitMapRead_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>DatumStreamBitMapRead_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsr</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>deltas_count</name></name></expr></argument>,
							<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>deltas_size</name></name></expr></argument>,
							<argument><expr><name>unalignedHeaderSize</name></expr></argument>,
							<argument><expr><name>alignedHeaderSize</name></expr></argument>,
							<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>null_bitmap_beginp</name></name></expr></argument>,
							<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name></expr></argument>,
							<argument><expr><name><name>dsr</name><operator>-&gt;</operator><name>datum_afterp</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockread</name><argument_list>(<argument><expr><name>dsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>dsr</name><operator>-&gt;</operator><name>datump</name></name> <operator>=</operator> <name><name>dsr</name><operator>-&gt;</operator><name>datum_beginp</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>errdetail_datumstreamblockwrite</name><parameter_list>(
								<parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>dsw</name><operator>-&gt;</operator><name>errdetailCallback</name></name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>errcontextArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>errdetail_datumstreamblockwrite_callback</name><parameter_list>(
										 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type><name>dsw</name> <init>= <expr><operator>(</operator><name>DatumStreamBlockWrite</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>eyecatcher</name></name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_Eyecatcher</name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_EyecatcherLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"DatumStreamBlockWrite data structure not valid (eyecatcher)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>errcontext_datumstreamblockwrite</name><parameter_list>(
								 <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>dsw</name><operator>-&gt;</operator><name>errcontextCallback</name></name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>errcontextArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>errcontext_datumstreamblockwrite_callback</name><parameter_list>(
										  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type><name>dsw</name> <init>= <expr><operator>(</operator><name>DatumStreamBlockWrite</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>eyecatcher</name></name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_Eyecatcher</name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_EyecatcherLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"DatumStreamBlockWrite data structure not valid (eyecatcher)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
<comment type="block">/*
 * DatumStreamBlockWrite routines.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>DatumStreamBlockWrite_CheckDenseInvariant</name><parameter_list>(
										  <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>total_datum_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int32</name></type>		<name>currentCompressBitMapPosition</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>currentCompressBitMapCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>currentCompressBitMapOffCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int32</name></type>		<name>currentDeltaBitMapPosition</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>currentDeltaBitMapCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>currentDeltaBitMapOffCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>currentDeltaBitMapOnCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>currentDeltaBitMapPosition</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>currentDeltaBitMapCount</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>currentDeltaBitMapOffCount</name> <operator>=</operator>
			<name>currentDeltaBitMapCount</name>
			<operator>-</operator> <call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>currentDeltaBitMapOnCount</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>total_datum_count</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>+</operator> <name>currentDeltaBitMapOnCount</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>!=</operator> <name>total_datum_count</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Nth position %d expected to match physical datum count %d + DELTA On count %d when Dense block does not have RLE_TYPE compression and does not have NULLs"</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
								<argument><expr><name>currentDeltaBitMapOnCount</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int32</name></type>		<name>currentNullOnCount</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int32</name></type>		<name>expectedNullOnCount</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>currentNullOnCount</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>expectedNullOnCount</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>-</operator> <name>total_datum_count</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>currentNullOnCount</name> <operator>!=</operator> <name>expectedNullOnCount</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"NULL bit-map ON count does not match when Dense block does not have RLE_TYPE compression.  Found %d, expected %d"</literal></expr></argument>,
								<argument><expr><name>currentNullOnCount</name></expr></argument>,
								<argument><expr><name>expectedNullOnCount</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>currentCompressBitMapPosition</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>currentCompressBitMapCount</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>currentCompressBitMapOffCount</name> <operator>=</operator> <name>currentCompressBitMapCount</name> <operator>-</operator>
			<call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>currentCompressBitMapPosition</name> <operator>!=</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>currentDeltaBitMapOnCount</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"COMPRESS bit-map position %d expected to match physical datum count %d - 1 when Dense block does not have RLE_TYPE compression and does not have NULLs "</literal>
							<literal type="string">"(Nth %d)"</literal></expr></argument>,
							<argument><expr><name>currentCompressBitMapPosition</name></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>!=</operator> <name>currentCompressBitMapOffCount</name> <operator>+</operator> <name><name>dsw</name><operator>-&gt;</operator><name>rle_total_repeat_items_written</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Nth position %d expected to match "</literal>
								<literal type="string">"current COMPRESS bit-map OFF count %d + total repeat items written %d "</literal>
								<literal type="string">"when Dense block does not have RLE_TYPE compression and does not have NULLs "</literal>
								<literal type="string">"(physical datum count %d)"</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
								<argument><expr><name>currentCompressBitMapOffCount</name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_total_repeat_items_written</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int32</name></type>		<name>currentNullBitMapOnCount</name></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>int32</name></type>		<name>currentNullBitMapCount</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>currentNullBitMapOnCount</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>!=</operator> <name>currentNullBitMapOnCount</name> <operator>+</operator> <name>currentCompressBitMapOffCount</name> <operator>+</operator> <name><name>dsw</name><operator>-&gt;</operator><name>rle_total_repeat_items_written</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Nth position %d expected to match current NULL bit-map ON count %d + "</literal>
								<literal type="string">"current COMPRESS bit-map OFF count %d + total repeat items written %d "</literal>
								<literal type="string">"when Dense block does not have RLE_TYPE compression and does not have NULLs "</literal>
								<literal type="string">"(physical datum count %d)"</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
								<argument><expr><name>currentNullBitMapOnCount</name></expr></argument>,
								<argument><expr><name>currentCompressBitMapOffCount</name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_total_repeat_items_written</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>currentNullBitMapCount</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>currentNullBitMapCount</name> <operator>!=</operator> <name>currentNullBitMapOnCount</name> <operator>+</operator> <name>currentCompressBitMapCount</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Current NULL bit-map count %d expected to match current NULL bit-map ON count %d + "</literal>
								<literal type="string">"current COMPRESS bit-map count %d "</literal>
								<literal type="string">"when Dense block does not have RLE_TYPE compression and does not have NULLs "</literal>
				  <literal type="string">"(total repeat items written %d, physical datum count %d)"</literal></expr></argument>,
								<argument><expr><name>currentNullBitMapCount</name></expr></argument>,
								<argument><expr><name>currentNullBitMapOnCount</name></expr></argument>,
								<argument><expr><name>currentCompressBitMapCount</name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_total_repeat_items_written</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>currentDeltaBitMapPosition</name> <operator>!=</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>currentDeltaBitMapOnCount</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"DELTA bit-map position %d expected to match physical datum count %d - 1 + %d DELTA On "</literal>
							<literal type="string">"count, when Dense block does not have RLE_TYPE compression and does not have NULLs "</literal>
							<literal type="string">"(Nth %d)"</literal></expr></argument>,
							<argument><expr><name>currentDeltaBitMapPosition</name></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
							<argument><expr><name>currentDeltaBitMapOnCount</name></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>currentDeltaBitMapCount</name> <operator>!=</operator> <name>currentCompressBitMapCount</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Current DELTA bit-map count %d expected to match current COMPRESS bit-map count %d "</literal>
				  <literal type="string">"(total repeat items written %d, physical datum count %d)"</literal></expr></argument>,
								<argument><expr><name>currentDeltaBitMapCount</name></expr></argument>,
								<argument><expr><name>currentCompressBitMapCount</name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_total_repeat_items_written</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DatumStreamBlockWrite_PrintInputVarlenaInfo</name><parameter_list>(
											<parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
											<parameter><decl><type><name>Datum</name></type> <name>originalDatum</name></decl></parameter>,
											<parameter><decl><type><name>bool</name></type> <name>wasExtended</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>originalDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
		  <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Write input varlena input &lt;%s&gt; (nth %d, was extended %s)"</literal></expr></argument>,
				  <argument><expr><call><name>VarlenaInfoToString</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,
				  <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
				  <argument><expr><operator>(</operator><ternary><condition><expr><name>wasExtended</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>,</operator>
		   <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
		   <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DatumStreamBlockWrite_PrintStoredSmallVarlenaInfo</name><parameter_list>(
												  <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
												  <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>outputBuffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>outputBuffer</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Write stored small varlena: &lt;%s&gt; (nth %d)"</literal></expr></argument>,
					<argument><expr><call><name>VarlenaInfoToString</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DatumStreamBlockWrite_PutFixedLengthTrace</name><parameter_list>(
										  <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
										  <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>item_beginp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>byval</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block write Original fixed-length non-byval item "</literal>
						<literal type="string">"(nth %d, physical item index #%d, item size %d, item begin %p, item offset "</literal> <name>INT64_FORMAT</name> <literal type="string">", next item begin %p)"</literal></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>,
						<argument><expr><name>item_beginp</name></expr></argument>,
						<argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <operator>(</operator><name>item_beginp</name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name><operator>)</operator></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>readDatum</name></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>readDatum</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <name>item_beginp</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>readDatum</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint16</name> <operator>*</operator><operator>)</operator> <name>item_beginp</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>readDatum</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <name>item_beginp</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<expr_stmt><expr><name>readDatum</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <name>item_beginp</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"fixed length type has unexpected length %d"</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>readDatum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
				<comment type="block">/* Never reaches here. */</comment>
		</block_content>}</block></switch>

		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block write Original fixed-length item "</literal>
						<literal type="string">"(nth %d, physical item index #%d, item size %d, item begin %p, item offset "</literal> <name>INT64_FORMAT</name> <literal type="string">", next item begin %p, integer "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>,
						<argument><expr><name>item_beginp</name></expr></argument>,
						<argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <operator>(</operator><name>item_beginp</name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name><operator>)</operator></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>,
						<argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <name>readDatum</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DatumStreamBlockWrite_PutFixedLength</name><parameter_list>(
									 <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
									 <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>byval</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>, <argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>+=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<switch>switch <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name><operator>)</operator> <operator>=</operator> <call><name>DatumGetChar</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>++</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsAligned</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name><operator>)</operator> <operator>=</operator> <call><name>DatumGetUInt16</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsAligned</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name><operator>)</operator> <operator>=</operator> <call><name>DatumGetUInt32</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsAligned</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsAligned</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name><operator>)</operator> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"fixed length type has unexpected length %d"</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DatumStreamBlockWrite_MakeNullBitMapSpace</name><parameter_list>(
										  <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>newNullBitMapSize</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>newNullBitMapSize</name> <operator>=</operator> <call><name>DatumStreamBitMap_Size</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">120</literal> <operator>*</operator> <literal type="number">1000000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write %s block problem growing NULL bit-map buffer "</literal>
				   <literal type="string">"(current logical row count %d, physical datum count %d, "</literal>
						 <literal type="string">"null bit-map count %d, old NULL bit-map count %d)"</literal></expr></argument>,
						  <argument><expr><call><name>DatumStreamVersion_String</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
							<argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>newNullBitMapSize</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_NextSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Buffer big enough?
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>newNullBitMapSize</name> <operator>&gt;</operator> <name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer_size</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>newBufferSize</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>newBuffer</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldCtxt</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Grow the NULL bit-map.
		 */</comment>
		<expr_stmt><expr><name>newBufferSize</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer_size</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>newBufferSize</name> <operator>&lt;</operator> <name>newNullBitMapSize</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>newBufferSize</name> <operator>=</operator> <name>newNullBitMapSize</name> <operator>+</operator> <name><name>dsw</name><operator>-&gt;</operator><name>initialMaxDatumPerBlock</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>oldCtxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>memctxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>newBuffer</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>newBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>DatumStreamBitMapWrite_CopyToLargerBuffer</name><argument_list>(
												  <argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>,
												  <argument><expr><name>newBuffer</name></expr></argument>,
												  <argument><expr><name>newBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldCtxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer</name></name> <operator>=</operator> <name>newBuffer</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer_size</name></name> <operator>=</operator> <name>newBufferSize</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Trace the growth of the NULL bit-map buffer.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write %s block grew NULL bit-map buffer "</literal>
				   <literal type="string">"(current logical row count %d, physical datum count %d, "</literal>
								<literal type="string">"null bit-map count %d, null bit-map ON count %d, null bit-map size %d, null bit-map max size %d)"</literal></expr></argument>,
						  <argument><expr><call><name>DatumStreamVersion_String</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
							 <argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><call><name>DatumStreamBitMapWrite_MaxSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write %s block formatted RLE_TYPE block grew NULL bit-map buffer "</literal>
				   <literal type="string">"(current logical row count %d, physical datum count %d, "</literal>
								<literal type="string">"null bit-map count %d, null bit-map ON count %d, null bit-map size %d, null bit-map max size %d, "</literal>
								<literal type="string">"compression bit-map count %d, compression bit-map ON count %d, compression bit-map size %d, "</literal>
							 <literal type="string">"repeat counts count %d, repeat count size %d)"</literal></expr></argument>,
						  <argument><expr><call><name>DatumStreamVersion_String</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
							 <argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><call><name>DatumStreamBitMapWrite_MaxSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_current_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * First NULL.	Zero fill the NULL bit-map out and set position.
		 */</comment>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>DatumStreamBitMapWrite_ZeroFill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>, <comment type="block">/* bitIndex */</comment> <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Trace the zero fill out of the NULL bit-map buffer.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write %s block zero fill out NULL bit-map "</literal>
								<literal type="string">"(current logical row count %d, old NULL bit-map count %d, physical datum count %d, "</literal>
								<literal type="string">"null bit-map count %d, null bit-map ON count %d, null bit-map size %d)"</literal></expr></argument>,
						  <argument><expr><call><name>DatumStreamVersion_String</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
							 <argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write %s block formatted RLE_TYPE block zero fill out NULL bit-map "</literal>
								<literal type="string">"(current logical row count %d, old NULL bit-map count %d, physical datum count %d, "</literal>
							  <literal type="string">"null bit-map count %d, null bit-map size %d, "</literal>
								<literal type="string">"compression bit-map count %d, compression bit-map ON count %d, compression bit-map size %d, "</literal>
							 <literal type="string">"repeat counts count %d, repeat count size %d)"</literal></expr></argument>,
						  <argument><expr><call><name>DatumStreamVersion_String</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
							 <argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_current_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>DatumStreamBlockWrite_OrigHasSpace</name><parameter_list>(
								   <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
								   <parameter><decl><type><name>bool</name></type> <name>null</name></decl></parameter>,
								   <parameter><decl><type><name>int32</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>headerSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>nullSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>currentDataSize</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int32</name></type>		<name>newTotalSize</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDatumPerBlock</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>headerSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Orig</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>null</name> <operator>||</operator> <name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>nullSize</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><call><name>DatumStreamBitMap_Size</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>nullSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>currentDataSize</name> <operator>=</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>newTotalSize</name> <operator>=</operator> <operator>(</operator><name>headerSize</name> <operator>+</operator> <name>nullSize</name> <operator>+</operator> <name>currentDataSize</name> <operator>+</operator> <name>sz</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>newTotalSize</name> <operator>&lt;</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block write checking Original new item space for "</literal>
						<literal type="string">"(nth %d, item size %d, configured datum length %d, item begin %p, item offset "</literal> <name>INT64_FORMAT</name> <literal type="string">", physical datum count %d, "</literal>
						<literal type="string">"headerSize %d, nullSize %d, current dataSize %d, "</literal>
						<literal type="string">"new total size %d, "</literal>
						<literal type="string">"maxdatasz %d, "</literal>
						<literal type="string">"result %s)"</literal></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
						<argument><expr><name>sz</name></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>,
						<argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name><operator>)</operator></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
						<argument><expr><name>headerSize</name></expr></argument>,
						<argument><expr><name>nullSize</name></expr></argument>,
						<argument><expr><name>currentDataSize</name></expr></argument>,
						<argument><expr><name>newTotalSize</name></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name></expr></argument>,
						<argument><expr><operator>(</operator><ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>DatumStreamBlockWrite_PutOrig</name><parameter_list>(
							  <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
							  <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>,
							  <parameter><decl><type><name>bool</name></type> <name>null</name></decl></parameter>,
							  <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>toFree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>item_beginp</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>toFree</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>null</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumStreamBlockWrite_OrigHasSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Too many items, or not enough room to add a NULL bit-map data.
			 */</comment>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>DatumStreamBlockWrite_MakeNullBitMapSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>DatumStreamBitMapWrite_AddBit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>, <comment type="block">/* on */</comment> <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block write Original NULL "</literal>
							<literal type="string">"(nth %d)"</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Not a NULL.	We have an item to add.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Variable length. */</comment>
		<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>dataStart</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>dataLen</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int32</name></type>		<name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name>c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>wsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>originalDatum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>wasExtended</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>originalDatum</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * If toFree comes back non-NULL, we have created a palloc'd de-toasted and/or
		 * de-compressed varlena copy.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>varattrib_untoast_ptr_len</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>dataStart</name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name>dataLen</name></expr></argument>,
									  <argument><expr><name>toFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>toFree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>toFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>wasExtended</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>wasExtended</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_write_print_small_varlena_info</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>DatumStreamBlockWrite_PrintInputVarlenaInfo</name><argument_list>(
														<argument><expr><name>dsw</name></expr></argument>,
														<argument><expr><name>originalDatum</name></expr></argument>,
														<argument><expr><name>wasExtended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>wsz</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>VARATT_IS_SHORT</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>VARSIZE_SHORT</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>wsz</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>value_type_could_short</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>typid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>VARATT_CONVERTED_SHORT_SIZE</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>VARSIZE_TO_SHORT_D</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>wsz</name> <operator>=</operator> <name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>=</operator> <operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <call><name>att_align_zero</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>wsz</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumStreamBlockWrite_OrigHasSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <comment type="block">/* null */</comment> <argument><expr><name>false</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><name>sz</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Set item begin pointer after we have done zero padding.
		 */</comment>
		<expr_stmt><expr><name>item_beginp</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>uint8</name><operator>)</operator> <name>c1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>wsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_write_print_small_varlena_info</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>DatumStreamBlockWrite_PrintStoredSmallVarlenaInfo</name><argument_list>(
															  <argument><expr><name>dsw</name></expr></argument>,
															  <argument><expr><name>item_beginp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>+=</operator> <name>wsz</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>DatumStreamBlockWrite_MakeNullBitMapSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>DatumStreamBitMapWrite_AddBit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>, <comment type="block">/* on */</comment> <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>&lt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDatumPerBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>++</operator><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block write Original variable-length item "</literal>
					<literal type="string">"(nth %d, physical item index #%d, item size %d, item begin %p, item offset "</literal> <name>INT64_FORMAT</name> <literal type="string">", next item begin %p, datum buffer after %p)"</literal></expr></argument>,
					<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
					<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
					<argument><expr><name>sz</name></expr></argument>,
					<argument><expr><name>item_beginp</name></expr></argument>,
					<argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <operator>(</operator><name>item_beginp</name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name><operator>)</operator></expr></argument>,
					<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>,
					<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_afterp</name></name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><name>sz</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Fixed length. */</comment>

	<expr_stmt><expr><name>item_beginp</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumStreamBlockWrite_OrigHasSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <comment type="block">/* null */</comment> <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><operator>-</operator><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>DatumStreamBlockWrite_PutFixedLength</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>DatumStreamBlockWrite_MakeNullBitMapSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>DatumStreamBitMapWrite_AddBit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>, <comment type="block">/* on */</comment> <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>&lt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDatumPerBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>++</operator><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>DatumStreamBlockWrite_PutFixedLengthTrace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>item_beginp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DatumStreamBlockWrite_MakeCompressBitMapSpace</name><parameter_list>(
											  <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>newCompressBitMapSize</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int32</name></type>		<name>deltaBitMapOnCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>deltaBitMapOnCount</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>newCompressBitMapSize</name> <operator>=</operator> <call><name>DatumStreamBitMap_Size</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>+</operator> <name>deltaBitMapOnCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call> <operator>==</operator>
			   <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>+</operator> <name>deltaBitMapOnCount</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>newCompressBitMapSize</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_NextSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Buffer big enough?
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>newCompressBitMapSize</name> <operator>&gt;</operator> <name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer_size</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>newBufferSize</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>newBuffer</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldCtxt</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Grow the NULL bit-map.
		 */</comment>
		<expr_stmt><expr><name>newBufferSize</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer_size</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>newBufferSize</name> <operator>&lt;</operator> <name>newCompressBitMapSize</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>newBufferSize</name> <operator>=</operator> <name>newCompressBitMapSize</name> <operator>+</operator> <name><name>dsw</name><operator>-&gt;</operator><name>initialMaxDatumPerBlock</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>oldCtxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>memctxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>newBuffer</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>newBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>DatumStreamBitMapWrite_CopyToLargerBuffer</name><argument_list>(
												  <argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>,
												  <argument><expr><name>newBuffer</name></expr></argument>,
												  <argument><expr><name>newBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldCtxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer</name></name> <operator>=</operator> <name>newBuffer</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer_size</name></name> <operator>=</operator> <name>newBufferSize</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Trace the growth of the NULL bit-map buffer.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write Dense block formatted RLE_TYPE block grew COMPRESS bit-map buffer "</literal>
				   <literal type="string">"(current logical row count %d, physical datum count %d, "</literal>
								<literal type="string">"compression bit-map count %d, compression bit-map ON count %d, compression bit-map size %d, compression bit-map max size %d, "</literal>
							 <literal type="string">"repeat counts count %d, repeat count size %d)"</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
					 <argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>DatumStreamBitMapWrite_MaxSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_current_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write Dense block formatted RLE_TYPE block with NULLs grew COMPRESS bit-map buffer "</literal>
				   <literal type="string">"(current logical row count %d, physical datum count %d, "</literal>
								<literal type="string">"null bit-map count %d, null bit-map ON count %d, null bit-map size %d, "</literal>
								<literal type="string">"compression bit-map count %d, compression bit-map ON count %d, compression bit-map size %d, compression bit-map max size %d, "</literal>
							 <literal type="string">"repeat counts count %d, repeat count size %d)"</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
							 <argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><call><name>DatumStreamBitMapWrite_MaxSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_current_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * First COMPRESS bit-map entry. Zero fill the COMPRESS bit-map out and set the position.
		 */</comment>
		<expr_stmt><expr><call><name>DatumStreamBitMapWrite_ZeroFill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>,
		  <comment type="block">/* bitIndex */</comment> <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>deltaBitMapOnCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Trace the zero fill out of the NULL bit-map buffer.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write Dense block formatted RLE_TYPE block zero fill out COMPRESS bit-map "</literal>
								<literal type="string">"(current logical row count %d, physical datum count %d, delta bit-map ON count %d,"</literal>
								<literal type="string">"compression bit-map count %d, compression bit-map ON count %d, compression bit-map size %d, compression bit-map max size %d, "</literal>
							 <literal type="string">"repeat counts count %d, repeat count size %d)"</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
								<argument><expr><name>deltaBitMapOnCount</name></expr></argument>,
					 <argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>DatumStreamBitMapWrite_MaxSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_current_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write Dense block formatted RLE_TYPE block with NULLs zero fill out COMPRESS bit-map "</literal>
								<literal type="string">"(current logical row count %d, physical datum count %d, delta bit-map ON count %d,"</literal>
							  <literal type="string">"null bit-map count %d, null bit-map size %d, "</literal>
								<literal type="string">"compression bit-map count %d, compression bit-map ON count %d, compression bit-map size %d, compression bit-map max size %d, "</literal>
							 <literal type="string">"repeat counts count %d, repeat count size %d)"</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
								<argument><expr><name>deltaBitMapOnCount</name></expr></argument>,
							 <argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>DatumStreamBitMapWrite_MaxSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_current_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<comment type="block">/*
 * Function calculates the space required for storing the 
 * RLE meta-data for current block.
 * Increments headerSize and rleSize to reflect the additional
 * size needed for RLE in block, if any.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>DatumStreamBlockWrite_DenseRleSpace</name><parameter_list>(
		<parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type><name>dsw</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>null</name></decl></parameter>,
		<parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>headerSize</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>rleSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>headerSize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Rle_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>null</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* CURRENT compressbitmap byte size since we don't add bits when NULL. */</comment>
		<expr_stmt><expr><operator>*</operator><name>rleSize</name> <operator>+=</operator> <call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* NEXT compressbitmap byte size. */</comment>
		<expr_stmt><expr><operator>*</operator><name>rleSize</name> <operator>+=</operator> <call><name>DatumStreamBitMapWrite_NextSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * CURRENT repeat counts size.
	 */</comment>
	<expr_stmt><expr><operator>*</operator><name>rleSize</name> <operator>+=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_current_size</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If last item repeated is true, then to finalize the repeatcounts
	 * anytime later we will need space equivalent to its size in block.
	 * Hence account for its size now else during block write may go
	 * beyond block boundary.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_is_repeated</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>rleSize</name> <operator>+=</operator> <call><name>DatumStreamInt32Compress_Size</name><argument_list>(
					<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Can we add an optional NULL bitmap entry or optionally the compress bit-map and
 * repeat count array for RLE_TYPE?
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>DatumStreamBlockWrite_DenseHasSpaceNull</name><parameter_list>(
										<parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>headerSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>nullSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>rleSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>deltaSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>alignedHeaderSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>currentDataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>newTotalSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDatumPerBlock</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>headerSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Dense</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<comment type="block">/*
	 * Add in NULL bit-map, extra DatumStreamBlock_Rle struct, compress bit-map, repeated counts...
	 */</comment>
	<expr_stmt><expr><name>nullSize</name> <operator>=</operator> <call><name>DatumStreamBitMap_Size</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DatumStreamBlockWrite_DenseRleSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>headerSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rleSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add in Delta Compression structures */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Add in Delta bitmap but CURRENT deltas array byte lengths.
		 */</comment>
		<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Delta_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<comment type="block">/*
		 * NEW delta bitmap byte size since we don't add bits when NULL;
		 */</comment>
		<expr_stmt><expr><name>deltaSize</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_NextSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * CURRENT deltas size.
		 */</comment>
		<expr_stmt><expr><name>deltaSize</name> <operator>+=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>deltas_current_size</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Align headers and meta-data (e.g. NULL bit-maps, etc).
	 */</comment>
	<expr_stmt><expr><name>alignedHeaderSize</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>headerSize</name> <operator>+</operator> <name>nullSize</name> <operator>+</operator> <name>rleSize</name> <operator>+</operator> <name>deltaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Data.
	 */</comment>
	<expr_stmt><expr><name>currentDataSize</name> <operator>=</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Total.
	 */</comment>
	<expr_stmt><expr><name>newTotalSize</name> <operator>=</operator> <operator>(</operator><name>alignedHeaderSize</name> <operator>+</operator> <name>currentDataSize</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>newTotalSize</name> <operator>&lt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block write checking Dense new NULL space "</literal>
					<literal type="string">"(nth %d, configured datum length %d, item begin %p, item offset "</literal> <name>INT64_FORMAT</name> <literal type="string">", physical datum count %d, "</literal>
					<literal type="string">"has RLE_TYPE compression %s, "</literal>
					<literal type="string">"has DELTA compression %s, "</literal>
		<literal type="string">"headerSize %d, nullSize %d, rleSize %d, deltaSize %d, dataSize %d, "</literal>
					<literal type="string">"aligned header size %d, new total size %d, "</literal>
					<literal type="string">"maxdatasz %d, "</literal>
					<literal type="string">"result %s)"</literal></expr></argument>,
					<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
					<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>,
					<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>,
					<argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name><operator>)</operator></expr></argument>,
					<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
					<argument><expr><operator>(</operator><ternary><condition><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
					<argument><expr><operator>(</operator><ternary><condition><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
					<argument><expr><name>headerSize</name></expr></argument>,
					<argument><expr><name>nullSize</name></expr></argument>,
					<argument><expr><name>rleSize</name></expr></argument>,
					<argument><expr><name>deltaSize</name></expr></argument>,
					<argument><expr><name>currentDataSize</name></expr></argument>,
					<argument><expr><name>alignedHeaderSize</name></expr></argument>,
					<argument><expr><name>newTotalSize</name></expr></argument>,
					<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name></expr></argument>,
					<argument><expr><operator>(</operator><ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Can we add an optional NULL bitmap entry or optionally the compress bit-map and
 * repeat count array for RLE_TYPE?
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>DatumStreamBlockWrite_DenseHasSpaceRepeat</name><parameter_list>(
										  <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
										  <parameter><decl><type><name>bool</name></type> <name>newRepeat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>headerSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>nullSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>rleSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>deltaSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>alignedHeaderSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>currentDataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>newTotalSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>total_datum_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDatumPerBlock</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>headerSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Dense</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<comment type="block">/*
	 * Add in NULL bit-map, extra DatumStreamBlock_Rle struct, compress bit-map, repeated counts...
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * The first item already incremented always_null_bitmap_count.
		 */</comment>
		<expr_stmt><expr><name>nullSize</name> <operator>=</operator> <call><name>DatumStreamBitMap_Size</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>total_datum_count</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Add in Delta Compression structures
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Add in Delta bitmap but CURRENT deltas array byte lengths.
		 */</comment>
		<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Delta_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<comment type="block">/*
		 * NEW delta bitmap byte size since we don't add bits when NULL;
		 */</comment>
		<expr_stmt><expr><name>deltaSize</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_NextSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * CURRENT deltas size.
		 */</comment>
		<expr_stmt><expr><name>deltaSize</name> <operator>+=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>deltas_current_size</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>total_datum_count</name> <operator>+=</operator> <call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Rle_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>newRepeat</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * NEW compressbitmap byte size.
		 */</comment>
		<expr_stmt><expr><name>rleSize</name> <operator>=</operator> <call><name>DatumStreamBitMap_Size</name><argument_list>(<argument><expr><name>total_datum_count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * CURRENT compressbitmap byte size.
		 */</comment>
		<expr_stmt><expr><name>rleSize</name> <operator>=</operator> <call><name>DatumStreamBitMap_Size</name><argument_list>(<argument><expr><name>total_datum_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * NEW repeat counts size.	For simplicity, assume it will be the largest repeated count integer possible.
	 */</comment>
	<expr_stmt><expr><name>rleSize</name> <operator>+=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_current_size</name></name> <operator>+</operator> <name>Int32Compress_MaxByteLen</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Align headers and meta-data (e.g. NULL bit-maps, etc).
	 */</comment>
	<expr_stmt><expr><name>alignedHeaderSize</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>headerSize</name> <operator>+</operator> <name>nullSize</name> <operator>+</operator> <name>rleSize</name> <operator>+</operator> <name>deltaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Data.
	 */</comment>
	<expr_stmt><expr><name>currentDataSize</name> <operator>=</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Total.
	 */</comment>
	<expr_stmt><expr><name>newTotalSize</name> <operator>=</operator> <operator>(</operator><name>alignedHeaderSize</name> <operator>+</operator> <name>currentDataSize</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>newTotalSize</name> <operator>&lt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block write checking Dense %s Repeat space "</literal>
				   <literal type="string">"(nth %d, configured datum length %d, item begin %p, item offset "</literal> <name>INT64_FORMAT</name> <literal type="string">", physical datum count %d, "</literal>
				   <literal type="string">"has RLE_TYPE compression %s, "</literal>
				   <literal type="string">"has DELTA compression %s, "</literal>
		<literal type="string">"headerSize %d, nullSize %d, rleSize %d, deltaSize %d, dataSize %d, "</literal>
				   <literal type="string">"aligned header size %d, new total size %d, "</literal>
				   <literal type="string">"maxdatasz %d, "</literal>
				   <literal type="string">"result %s)"</literal></expr></argument>,
				   <argument><expr><operator>(</operator><ternary><condition><expr><name>newRepeat</name></expr> ?</condition><then> <expr><literal type="string">"NEW"</literal></expr> </then><else>: <expr><literal type="string">"OLD"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
				   <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
				   <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>,
				   <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>,
				   <argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name><operator>)</operator></expr></argument>,
				   <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
				   <argument><expr><operator>(</operator><ternary><condition><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
				   <argument><expr><operator>(</operator><ternary><condition><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
				   <argument><expr><name>headerSize</name></expr></argument>,
				   <argument><expr><name>nullSize</name></expr></argument>,
				   <argument><expr><name>rleSize</name></expr></argument>,
				   <argument><expr><name>deltaSize</name></expr></argument>,
				   <argument><expr><name>currentDataSize</name></expr></argument>,
				   <argument><expr><name>alignedHeaderSize</name></expr></argument>,
				   <argument><expr><name>newTotalSize</name></expr></argument>,
				   <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name></expr></argument>,
				   <argument><expr><operator>(</operator><ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Can we add the delta bit-map and deltas array for RLE_TYPE with Delta?
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>DatumStreamBlockWrite_DenseHasSpaceDelta</name><parameter_list>(
										 <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>headerSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>nullSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>rleSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>deltaSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>alignedHeaderSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>currentDataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>newTotalSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>total_datum_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDatumPerBlock</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>headerSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Dense</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<comment type="block">/*
	 * Add in NULL bit-map, extra DatumStreamBlock_Rle struct, compress bit-map, repeated counts...
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Adding delta value will add a false bit to null_bitmap.
		 * So, must account for it.
		 */</comment>
		<expr_stmt><expr><name>nullSize</name> <operator>=</operator> <call><name>DatumStreamBitMap_Size</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>DatumStreamBlockWrite_DenseRleSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>headerSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rleSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>total_datum_count</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>total_datum_count</name> <operator>+=</operator> <call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Add in Delta bitmap but CURRENT deltas array byte lengths.
	 */</comment>
	<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Delta_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<comment type="block">/*
	 * NEW delta bitmap byte size;
	 */</comment>
	<expr_stmt><expr><name>deltaSize</name> <operator>=</operator> <call><name>DatumStreamBitMap_Size</name><argument_list>(<argument><expr><name>total_datum_count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * NEW deltas size. For simplicity, assume it will be the largest delta integer possible.
	 */</comment>
	<expr_stmt><expr><name>deltaSize</name> <operator>+=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>deltas_current_size</name></name> <operator>+</operator> <name>Int32CompressReserved3_MaxByteLen</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Align headers and meta-data (e.g. NULL bit-maps, etc).
	 */</comment>
	<expr_stmt><expr><name>alignedHeaderSize</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>headerSize</name> <operator>+</operator> <name>nullSize</name> <operator>+</operator> <name>rleSize</name> <operator>+</operator> <name>deltaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Data.
	 */</comment>
	<expr_stmt><expr><name>currentDataSize</name> <operator>=</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Total.
	 */</comment>
	<expr_stmt><expr><name>newTotalSize</name> <operator>=</operator> <operator>(</operator><name>alignedHeaderSize</name> <operator>+</operator> <name>currentDataSize</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>newTotalSize</name> <operator>&lt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block write checking Dense DELTA space "</literal>
						<literal type="string">"(nth %d, configured datum length %d, item begin %p, item offset "</literal> <name>INT64_FORMAT</name> <literal type="string">", physical datum count %d, "</literal>
						<literal type="string">"has RLE_TYPE compression %s, "</literal>
						<literal type="string">"has DELTA compression %s, "</literal>
		<literal type="string">"headerSize %d, nullSize %d, rleSize %d, deltaSize %d, dataSize %d, "</literal>
						<literal type="string">"aligned header size %d, new total size %d, "</literal>
						<literal type="string">"maxdatasz %d, "</literal>
						<literal type="string">"result %s)"</literal></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>,
						<argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name><operator>)</operator></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
						<argument><expr><operator>(</operator><ternary><condition><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
						<argument><expr><operator>(</operator><ternary><condition><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
						<argument><expr><name>headerSize</name></expr></argument>,
						<argument><expr><name>nullSize</name></expr></argument>,
						<argument><expr><name>rleSize</name></expr></argument>,
						<argument><expr><name>deltaSize</name></expr></argument>,
						<argument><expr><name>currentDataSize</name></expr></argument>,
						<argument><expr><name>alignedHeaderSize</name></expr></argument>,
						<argument><expr><name>newTotalSize</name></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name></expr></argument>,
						<argument><expr><operator>(</operator><ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Can we add a compressed bitmap array and repeat count array for RLE_TYPE?
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>DatumStreamBlockWrite_DenseHasSpaceItem</name><parameter_list>(
										<parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
										<parameter><decl><type><name>int32</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>headerSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>nullSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>rleSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>deltaSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>alignedHeaderSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>currentDataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>newTotalSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDatumPerBlock</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>headerSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Dense</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<comment type="block">/*
	 * Add in NULL bit-map, extra DatumStreamBlock_Rle_Extension struct, compress bit-map, repeated counts...
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>nullSize</name> <operator>=</operator> <call><name>DatumStreamBitMap_Size</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>DatumStreamBlockWrite_DenseRleSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>headerSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rleSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Add in Delta bitmap but CURRENT deltas array byte lengths.
		 */</comment>
		<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Delta_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<comment type="block">/*
		 * NEW delta bitmap byte size since we don't add bits when NULL;
		 */</comment>
		<expr_stmt><expr><name>deltaSize</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_NextSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * CURRENT deltas size.
		 */</comment>
		<expr_stmt><expr><name>deltaSize</name> <operator>+=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>deltas_current_size</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Align headers and meta-data (e.g. NULL bit-maps, etc).
	 */</comment>
	<expr_stmt><expr><name>alignedHeaderSize</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>headerSize</name> <operator>+</operator> <name>nullSize</name> <operator>+</operator> <name>rleSize</name> <operator>+</operator> <name>deltaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Data.
	 */</comment>
	<expr_stmt><expr><name>currentDataSize</name> <operator>=</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Total.
	 */</comment>
	<expr_stmt><expr><name>newTotalSize</name> <operator>=</operator> <operator>(</operator><name>alignedHeaderSize</name> <operator>+</operator> <name>currentDataSize</name> <operator>+</operator> <name>sz</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>newTotalSize</name> <operator>&lt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
		<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block write checking Dense new item space for "</literal>
				<literal type="string">"(nth %d, item size %d, configured datum length %d, item begin %p, item offset "</literal> <name>INT64_FORMAT</name> <literal type="string">", physical datum count %d, "</literal>
				<literal type="string">"has RLE_TYPE compression %s, "</literal>
				<literal type="string">"has DELTA compression %s, "</literal>
				<literal type="string">"headerSize %d, nullSize %d, rleSize %d, deltaSize %d, current dataSize %d, "</literal>
				<literal type="string">"aligned header size %d, new total size %d, "</literal>
				<literal type="string">"maxdatasz %d, "</literal>
				<literal type="string">"result %s)"</literal></expr></argument>,
				<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
				<argument><expr><name>sz</name></expr></argument>,
				<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>,
				<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>,
				<argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name><operator>)</operator></expr></argument>,
				<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
				<argument><expr><operator>(</operator><ternary><condition><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
				<argument><expr><operator>(</operator><ternary><condition><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
				<argument><expr><name>headerSize</name></expr></argument>,
				<argument><expr><name>nullSize</name></expr></argument>,
				<argument><expr><name>rleSize</name></expr></argument>,
				<argument><expr><name>deltaSize</name></expr></argument>,
				<argument><expr><name>currentDataSize</name></expr></argument>,
				<argument><expr><name>alignedHeaderSize</name></expr></argument>,
				<argument><expr><name>newTotalSize</name></expr></argument>,
				<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name></expr></argument>,
				<argument><expr><operator>(</operator><ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>,</operator>
		 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
		 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DatumStreamBlockWrite_RleFinalizeRepeatCountSize</name><parameter_list>(
												 <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_is_repeated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_is_repeated</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Look at how large the current repeat count is and add in its size.
	 */</comment>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_current_size</name></name> <operator>+=</operator>
		<call><name>DatumStreamInt32Compress_Size</name><argument_list>(
					 <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
		<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block write Dense finalized repeated item for "</literal>
		<literal type="string">"(nth %d, item size %d, item begin %p, item offset "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal>
				<literal type="string">"repeat index %d, repeat count %d, repeat counts size %d)"</literal></expr></argument>,
				<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
				<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>,
				<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>,
				<argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name><operator>)</operator></expr></argument>,
				<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
				<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_current_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
		 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
		 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DatumStreamBlockWrite_DenseIncrNull</name><parameter_list>(
									<parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DatumStreamBitMapWrite_AddBit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>, <comment type="block">/* on */</comment> <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Always maintain this NULL bit-map counter even if we don't have RLE_TYPE compression yet.
	 */</comment>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Maintain compression data structures.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_want_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_is_repeated</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>DatumStreamBlockWrite_RleFinalizeRepeatCountSize</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Total number of items represented in this block.
	 */</comment>
	<expr_stmt><expr><operator>++</operator><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>&lt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDatumPerBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DatumStreamBlockWrite_DenseIncrItem</name><parameter_list>(
									<parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
									<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>rle_last_item</name></decl></parameter>,
									<parameter><decl><type><name>int32</name></type> <name>rle_last_item_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>DatumStreamBlockWrite_MakeNullBitMapSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>DatumStreamBitMapWrite_AddBit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>, <comment type="block">/* on */</comment> <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Always maintain this NULL bit-map counter even if we don't have NULLs yet and/or RLE_TYPE compression yet.
	 */</comment>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Maintain RLE compression data structures.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_want_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_is_repeated</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>DatumStreamBlockWrite_RleFinalizeRepeatCountSize</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item</name></name> <operator>=</operator> <name>rle_last_item</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_size</name></name> <operator>=</operator> <name>rle_last_item_size</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>DatumStreamBlockWrite_MakeCompressBitMapSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * New items start off with their bit as OFF.
			 */</comment>
			<expr_stmt><expr><call><name>DatumStreamBitMapWrite_AddBit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>, <comment type="block">/* on */</comment> <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Total number of items represented in this block.
	 */</comment>
	<expr_stmt><expr><operator>++</operator><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>&lt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDatumPerBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>++</operator><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DatumStreamBlockWrite_RleIncrRepeated</name><parameter_list>(
									  <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * DO NOT advance the null bit-map since it was advanced on the first item.
	 */</comment>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_is_repeated</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * First time this item has repeated.
		 */</comment>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_is_repeated</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_total_repeat_items_written</name></name><operator>++</operator></expr>;</expr_stmt>
		<comment type="block">/* Bump here to count the first item. */</comment>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Zero fill out, if necessary.
			 */</comment>
			<expr_stmt><expr><call><name>DatumStreamBlockWrite_MakeCompressBitMapSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>DatumStreamBitMapWrite_AddBit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>, <comment type="block">/* on */</comment> <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Set rle_has_compression after calling
			 * ~_MakeBitMapSpaceForCompress above.
			 */</comment>
			<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * Set the repeated item bit (that was initialized as OFF in ~_DenseIncrItem) in
			 * the COMPRESS bit-map.
			 */</comment>
			<expr_stmt><expr><call><name>DatumStreamBitMapWrite_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_maxcount</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int32</name></type>		<name>oldBufferSize</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int32</name></type>		<name>newBufferSize</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>newBuffer</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldCtxt</name></decl>;</decl_stmt>

			<comment type="block">/*
			 * Grow the repeat counts array.
			 */</comment>
			<expr_stmt><expr><name>oldBufferSize</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_maxcount</name></name> <operator>*</operator> <name>Int32Compress_MaxByteLen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>newBufferSize</name> <operator>=</operator> <name>oldBufferSize</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

			<expr_stmt><expr><name>oldCtxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>memctxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>newBuffer</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>newBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newBuffer</name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name></name></expr></argument>, <argument><expr><name>oldBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldCtxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name></name> <operator>=</operator> <name>newBuffer</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_maxcount</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Initialize the repeat count.
		 */</comment>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * In the end, we use rle_savings to estimate the eofUncompress.
	 */</comment>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>savings</name></name> <operator>+=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_size</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Advance our overall count of items.
	 *
	 * DO NOT increment always_null_bitmap_count here.
	 */</comment>
	<expr_stmt><expr><operator>++</operator><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_total_repeat_items_written</name></name><operator>++</operator></expr>;</expr_stmt>
	<comment type="block">/* Count new repeated item. */</comment>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>&lt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDatumPerBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * If we have space, mark the previous RLE_TYPE entry as repeated.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>DatumStreamBlockWrite_RleMarkRepeat</name><parameter_list>(
									<parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Allocate the compress bit-map and repeat count array if necessary.  And,
	 * see if there is room for both and room including a new compress bit and
	 * new count.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumStreamBlockWrite_DenseHasSpaceRepeat</name><argument_list>(
												   <argument><expr><name>dsw</name></expr></argument>,
							<comment type="block">/* newRepeat */</comment> <argument><expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_is_repeated</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>DatumStreamBlockWrite_RleIncrRepeated</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DatumStreamBlockWrite_MakeDeltaCompressBitMapSpace</name><parameter_list>(
												 <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>newCompressBitMapSize</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>newCompressBitMapSize</name> <operator>=</operator> <call><name>DatumStreamBitMap_Size</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>newCompressBitMapSize</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_NextSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Buffer big enough?
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>newCompressBitMapSize</name> <operator>&gt;</operator> <name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer_size</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>newBufferSize</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>newBuffer</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldCtxt</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Grow the Delta bit-map.
		 */</comment>
		<expr_stmt><expr><name>newBufferSize</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer_size</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>newBufferSize</name> <operator>&lt;</operator> <name>newCompressBitMapSize</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>newBufferSize</name> <operator>=</operator> <name>newCompressBitMapSize</name> <operator>+</operator> <name><name>dsw</name><operator>-&gt;</operator><name>initialMaxDatumPerBlock</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>oldCtxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>memctxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>newBuffer</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>newBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>DatumStreamBitMapWrite_CopyToLargerBuffer</name><argument_list>(
												  <argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>,
												  <argument><expr><name>newBuffer</name></expr></argument>,
												  <argument><expr><name>newBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldCtxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer</name></name> <operator>=</operator> <name>newBuffer</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer_size</name></name> <operator>=</operator> <name>newBufferSize</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Trace the growth of the Delta bit-map buffer.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write Dense block formatted RLE_TYPE block grew DELTA COMPRESS bit-map buffer "</literal>
				   <literal type="string">"(current logical row count %d, physical datum count %d, "</literal>
							<literal type="string">"delta bit-map count %d, delta bit-map ON count %d, delta bit-map size %d, delta bit-map max size %d, "</literal>
							<literal type="string">"repeat counts count %d, repeat count size %d)"</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
							<argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><call><name>DatumStreamBitMapWrite_MaxSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_current_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * First delta bit-map entry. Zero fill the delta COMPRESS bit-map out and set the position.
		 */</comment>
		<expr_stmt><expr><call><name>DatumStreamBitMapWrite_ZeroFill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>, <comment type="block">/* bitIndex */</comment> <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Trace the zero fill out of the NULL bit-map buffer.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write Dense block formatted RLE_TYPE DELTA block zero fill out DELTA bit-map "</literal>
				   <literal type="string">"(current logical row count %d, physical datum count %d, "</literal>
							<literal type="string">"delta bit-map count %d, delta bit-map ON count %d, delta bit-map size %d, delta bit-map max size %d, "</literal>
							<literal type="string">"deltas count %d, deltas size %d)"</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
							<argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><call><name>DatumStreamBitMapWrite_MaxSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_current_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write Dense block formatted RLE_TYPE DELTA block DELTA bit-map "</literal>
				   <literal type="string">"(current logical row count %d, physical datum count %d, "</literal>
							<literal type="string">"delta bit-map count %d, delta bit-map ON count %d, delta bit-map size %d, delta bit-map max size %d, "</literal>
							<literal type="string">"deltas count %d, deltas size %d)"</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
							<argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><call><name>DatumStreamBitMapWrite_MaxSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_current_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>DatumStreamBlockWrite_DeltaMaintain</name><parameter_list>(
									<parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
									<parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_want_compression</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream insert DELTA Maintain = "</literal> <name>INT64_FORMAT</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Maintain Delta compression data structures.
	 */</comment>
	<switch>switch <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">4</literal></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name><operator>)</operator> <operator>=</operator> <call><name>DatumGetUInt32</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">8</literal></expr>:</case>
			<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"DELTA Compression maintain, fixed length type has unexpected length %d"</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Add a 0 bit in Delta Bitmap
	 * Zero fill out, if necessary.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>DatumStreamBlockWrite_MakeDeltaCompressBitMapSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>DatumStreamBitMapWrite_AddBit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>, <comment type="block">/* on */</comment> <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>DatumStreamBlockWrite_DeltaAdd</name><parameter_list>(
							   <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
							   <parameter><decl><type><name>int64</name></type> <name>delta</name></decl></parameter>,
							   <parameter><decl><type><name>bool</name></type> <name>sign</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
		<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream insert DELTA Add = "</literal> <name>INT64_FORMAT</name> <literal type="string">" sign = %d"</literal></expr></argument>,
				<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call><operator>,</operator>
		 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
		 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Zero fill out, if necessary.
	 */</comment>
	<expr_stmt><expr><call><name>DatumStreamBlockWrite_MakeDeltaCompressBitMapSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Set delta_has_compression after calling ~_MakeDeltaBitMapSpace above. */</comment>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Maintain NULL data structures.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>DatumStreamBlockWrite_MakeNullBitMapSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>DatumStreamBitMapWrite_AddBit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>, <comment type="block">/* on */</comment> <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Always maintain this NULL bit-map counter even if we don't have NULLs yet and/or RLE_TYPE compression yet.
	 */</comment>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Maintain RLE compression data structures.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_want_compression</name></name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_is_repeated</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>DatumStreamBlockWrite_RleFinalizeRepeatCountSize</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* RLE last item now should be the current datum */</comment>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item</name></name> <operator>=</operator> <operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator> <name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_size</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>DatumStreamBlockWrite_MakeCompressBitMapSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * New items start off with their bit as OFF.
		 */</comment>
		<expr_stmt><expr><call><name>DatumStreamBitMapWrite_AddBit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>, <comment type="block">/* on */</comment> <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Add a set bit to delta bitmap... This needs to happen after
	 * MakeCompressBitMapSpace
	 */</comment>
	<expr_stmt><expr><call><name>DatumStreamBitMapWrite_AddBit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>, <comment type="block">/* on */</comment> <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>deltas_maxcount</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>oldBufferSize</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>newBufferSize</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>newBuffer</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldCtxt</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Grow the delta and delta_sign array.
		 */</comment>
		<expr_stmt><expr><name>oldBufferSize</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>deltas_maxcount</name></name> <operator>*</operator> <name>Int32Compress_MaxByteLen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>newBufferSize</name> <operator>=</operator> <name>oldBufferSize</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>oldCtxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>memctxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>newBuffer</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>newBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newBuffer</name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name></name></expr></argument>, <argument><expr><name>oldBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldCtxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name></name> <operator>=</operator> <name>newBuffer</name></expr>;</expr_stmt>

		<comment type="block">/* Grow the delta_sign buffer as well */</comment>
		<expr_stmt><expr><name>oldBufferSize</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>deltas_maxcount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name>newBufferSize</name> <operator>=</operator> <name>oldBufferSize</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>oldCtxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>memctxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>newBuffer</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>newBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newBuffer</name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name></name></expr></argument>, <argument><expr><name>oldBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldCtxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name></name> <operator>=</operator> <name>newBuffer</name></expr>;</expr_stmt>


		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_maxcount</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Store the delta and sign.
	 */</comment>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name></expr>]</index></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name></expr>]</index></name> <operator>=</operator> <name>sign</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_current_size</name></name> <operator>+=</operator>
		<call><name>DatumStreamInt32CompressReserved3_Size</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * In the end, we use delta_savings to estimate the eofUncompress.
	 */</comment>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>savings</name></name> <operator>+=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr>;</expr_stmt><empty_stmt>;</empty_stmt>

	<comment type="block">/*
	 * Advance our overall count of items.
	 *
	 */</comment>
	<expr_stmt><expr><operator>++</operator><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>&lt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDatumPerBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Delta compression is applied only if delta between the adjacent tuples can
 * be stored max by 4 bytes. Since upper 3 bits are reserved, leaves room of
 * 29 bits max value for delta to be stored. If delta turns out to be larger
 * than this value, delta compression is not applied for this tuple instead
 * actual value is directly stored.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DELTA_SUPPORTED_DELTA_COMPRESSION</name></cpp:macro> <cpp:value>0x1FFFFFFF</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>Delta_Compression_status</name></type>
<name>DatumStreamBlockWrite_PerformDeltaCompression</name><parameter_list>(
											  <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
											  <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>delta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>positive_delta</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_want_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>DELTA_COMPRESSION_NOT_APPLIED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Check if its first non-NULL datum of the block then
	 * just need to add a starting 0 bit in deltaBit map and return
	 * as first value will always be stored as physical datum
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>not_first_datum</name></name> <operator>==</operator> <name>false</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>not_first_datum</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><name>DELTA_COMPRESSION_NOT_APPLIED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Here means, we have compare value stored to calculate the Delta */</comment>
	<switch>switch <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">4</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>DatumGetUInt32</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>DatumGetUInt32</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Positive delta */</comment>
				<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>DatumGetUInt32</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>DatumGetUInt32</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>positive_delta</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* Negative Delta */</comment>
				<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>DatumGetUInt32</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>DatumGetUInt32</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>positive_delta</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><literal type="number">8</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name> <operator>&lt;=</operator> <name>d</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Positive delta */</comment>
				<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>d</name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>positive_delta</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* Negative Delta */</comment>
				<expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name> <operator>-</operator> <name>d</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>positive_delta</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"DELTA compression fixed length type has unexpected length %d"</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Check if delta value fits the storage reserved for it. Important is to
	 * also check for overflow case, where delta goes negative. As logic above
	 * always subtracts smaller number from larger, delta must be positive
	 * except overflow case.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>delta</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>delta</name></expr></argument> &gt;</argument_list></name> <name>MAX_DELTA_SUPPORTED_DELTA_COMPRESSION</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>DELTA_COMPRESSION_NOT_APPLIED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumStreamBlockWrite_DenseHasSpaceDelta</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>DELTA_COMPRESSION_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Update the compare_item now to be new value */</comment>
	<switch>switch <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">4</literal></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name><operator>)</operator> <operator>=</operator> <call><name>DatumGetUInt32</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">8</literal></expr>:</case>
			<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"DELTA Compression fixed length type has unexpected length %d"</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>DatumStreamBlockWrite_DeltaAdd</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>positive_delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>DELTA_COMPRESSION_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * The Dense and optially RLE_TYPE version of datumstream_put.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>DatumStreamBlockWrite_PutDense</name><parameter_list>(
							   <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
							   <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>,
							   <parameter><decl><type><name>bool</name></type> <name>null</name></decl></parameter>,
							   <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>toFree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>item_beginp</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type>		<name>havePreviousValueToLookAt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isEqual</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>rle_last_item</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>toFree</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Delta_Compression_status</name></type> <name>delta_status</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>DatumStreamBlockWrite_CheckDenseInvariant</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>null</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumStreamBlockWrite_DenseHasSpaceNull</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Too many items, or not enough room to add a NULL bit-map data.
			 */</comment>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>DatumStreamBlockWrite_MakeNullBitMapSpace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>DatumStreamBlockWrite_DenseIncrNull</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream insert Dense NULL for "</literal>
							<literal type="string">"(nth %d, new NULL bit-map count %d)"</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Not a NULL.	We have an item to add.
	 */</comment>
	<comment type="block">/*
	 * But first, do we have a previous value to look at?
	 */</comment>
	<expr_stmt><expr><name>havePreviousValueToLookAt</name> <operator>=</operator>
		<operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_want_compression</name></name> <operator>&amp;&amp;</operator>
		 <name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * All the DeltaRange datatypes supported have FIXED length and
	 * hence don't need to check for the same in the below Variable length for DeltaRange
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Variable length. */</comment>
		<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>dataStart</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>dataLen</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int32</name></type>		<name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name>c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>wsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>originalDatum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>wasExtended</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Datum</name></type>		<name>storedDatum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>storedDataStart</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>storedDataLen</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>storedToFree</name></decl>;</decl_stmt>

		<comment type="block">/* Variable length */</comment>
		<expr_stmt><expr><name>originalDatum</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * If toFree comes back non-NULL, we have created a palloc'd de-toasted and/or
		 * de-compressed varlena copy.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>varattrib_untoast_ptr_len</name><argument_list>(
									  <argument><expr><name>d</name></expr></argument>,
									  <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>dataStart</name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name>dataLen</name></expr></argument>,
									  <argument><expr><name>toFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>toFree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>toFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>wasExtended</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>wasExtended</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>dataLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>dataStart</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_write_print_small_varlena_info</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>DatumStreamBlockWrite_PrintInputVarlenaInfo</name><argument_list>(
														<argument><expr><name>dsw</name></expr></argument>,
														<argument><expr><name>originalDatum</name></expr></argument>,
														<argument><expr><name>wasExtended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_is_repeated</name></name> <operator>&amp;&amp;</operator>
			<name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name>MAXREPEAT_COUNT</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Reguardless of whether new is equal, we need to finalized the repeated item.
			 */</comment>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>DatumStreamBlockWrite_RleFinalizeRepeatCountSize</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>havePreviousValueToLookAt</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream insert has previous Dense variable-length item to look at "</literal>
								<literal type="string">"(control block %p, nth %d, new item size %d, new item %p, last item size %d, last item %p, data buffer %p, (next item) datum pointer %p, data buffer after %p)"</literal></expr></argument>,
								<argument><expr><name>dsw</name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
								<argument><expr><name>dataLen</name></expr></argument>,
								<argument><expr><name>dataStart</name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_size</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_afterp</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>dataLen</name> <operator>!=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_size</name></name> <operator>||</operator> <operator>!</operator><name>dataStart</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>isEqual</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>isEqual</name> <operator>=</operator>
					<operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item</name></name></expr></argument>, <argument><expr><name>dataStart</name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_size</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream insert Dense variable-length possible repeated item %s "</literal>
								<literal type="string">"(control block %p, nth %d)"</literal></expr></argument>,
								<argument><expr><operator>(</operator><ternary><condition><expr><name>isEqual</name></expr> ?</condition><then> <expr><literal type="string">"EQUAL"</literal></expr> </then><else>: <expr><literal type="string">"NOT EQUAL"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
								<argument><expr><name>dsw</name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>isEqual</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumStreamBlockWrite_RleMarkRepeat</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
				</block_content>}</block></if></if_stmt>

				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * NOT EQUAL.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_is_repeated</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>DatumStreamBlockWrite_RleFinalizeRepeatCountSize</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>wsz</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>VARATT_IS_SHORT</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>VARSIZE_SHORT</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>wsz</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>value_type_could_short</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>typid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>VARATT_CONVERTED_SHORT_SIZE</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>VARSIZE_TO_SHORT_D</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>wsz</name> <operator>=</operator> <name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>=</operator> <operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <call><name>att_align_zero</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>wsz</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumStreamBlockWrite_DenseHasSpaceItem</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><operator>-</operator><name>sz</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Set item begin pointer after we have done zero padding.
		 */</comment>
		<expr_stmt><expr><name>item_beginp</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name><operator>)</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>wsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_write_print_small_varlena_info</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>DatumStreamBlockWrite_PrintStoredSmallVarlenaInfo</name><argument_list>(
															  <argument><expr><name>dsw</name></expr></argument>,
															  <argument><expr><name>item_beginp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>+=</operator> <name>wsz</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>storedDatum</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>item_beginp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>varattrib_untoast_ptr_len</name><argument_list>(
									  <argument><expr><name>storedDatum</name></expr></argument>,
									  <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>storedDataStart</name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name>storedDataLen</name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name>storedToFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>storedToFree</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>storedDataStart</name> <operator>=</operator> <operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetCString</name><argument_list>(<argument><expr><name>storedDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>storedDataLen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><name>storedDatum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>DatumStreamBlockWrite_DenseIncrItem</name><argument_list>(
											<argument><expr><name>dsw</name></expr></argument>,
											<argument><expr><name>storedDataStart</name></expr></argument>,
											<argument><expr><name>storedDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			   <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block write Dense variable-length item "</literal>
					   <literal type="string">"(nth %d, item size %d, item begin %p, item offset "</literal> <name>INT64_FORMAT</name> <literal type="string">", next item begin %p, datum buffer after %p)"</literal></expr></argument>,
					   <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
					   <argument><expr><name>sz</name></expr></argument>,
					   <argument><expr><name>item_beginp</name></expr></argument>,
					   <argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <operator>(</operator><name>item_beginp</name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name><operator>)</operator></expr></argument>,
					   <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>,
					   <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_afterp</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				<call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
				<call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><name>sz</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Fixed length */</comment>

	<expr_stmt><expr><name>item_beginp</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_is_repeated</name></name> <operator>&amp;&amp;</operator>
	<name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name><index>[<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name>MAXREPEAT_COUNT</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Reguardless of whether new is equal, we need to finalized the repeated item.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>DatumStreamBlockWrite_RleFinalizeRepeatCountSize</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>havePreviousValueToLookAt</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Do we have a fixed length REPEATED value?
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_size</name></name> <operator>!=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Last data item size %d doesn't match type datum length %d"</literal></expr></argument>,
				 <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_size</name></name></expr></argument>,
				 <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_size</name></name> <operator>==</operator> <name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>byval</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>isEqual</name> <operator>=</operator>
				<operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item</name></name></expr></argument>, <argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<switch>switch <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><literal type="number">1</literal></expr>:</case>
					<expr_stmt><expr><name>isEqual</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item</name></name><operator>)</operator> <operator>==</operator> <call><name>DatumGetChar</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="number">2</literal></expr>:</case>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsAligned</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>isEqual</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>uint16</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item</name></name><operator>)</operator> <operator>==</operator> <call><name>DatumGetUInt16</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="number">4</literal></expr>:</case>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsAligned</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>isEqual</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item</name></name><operator>)</operator> <operator>==</operator> <call><name>DatumGetUInt32</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="number">8</literal></expr>:</case>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsAligned</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsAligned</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>isEqual</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item</name></name><operator>)</operator> <operator>==</operator> <name>d</name><operator>)</operator></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"fixed length type has strange length %d"</literal></expr></argument>,
									<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>isEqual</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>isEqual</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumStreamBlockWrite_RleMarkRepeat</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Not enough space to add meta data to record a repeat.
				 */</comment>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * NOT EQUAL.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream insert Dense fixed-length possible repeated item NOT EQUAL "</literal>
							<literal type="string">"(nth %d, item size %d, item begin %p, next item begin %p, datum buffer after %p)"</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>,
							<argument><expr><name>item_beginp</name></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_afterp</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_is_repeated</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>DatumStreamBlockWrite_RleFinalizeRepeatCountSize</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Fall through and see if there is enough space for new item.
		 */</comment>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_want_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * RLE done with its checks and if we are here means not repeated/exceding the MAX_REPEAT_COUNT
		 * in either case, now should check for Delta if supported and if it falls within range,
		 * should store Delta instead of storing the pysical datum
		 */</comment>
		<expr_stmt><expr><name>delta_status</name> <operator>=</operator> <call><name>DatumStreamBlockWrite_PerformDeltaCompression</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Should return from here if we have performed DeltaCompression */</comment>
		<switch>switch <condition>(<expr><name>delta_status</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>DELTA_COMPRESSION_OK</name></expr>:</case>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			<case>case <expr><name>DELTA_COMPRESSION_ERROR</name></expr>:</case>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			<case>case <expr><name>DELTA_COMPRESSION_NOT_APPLIED</name></expr>:</case>
				<break>break;</break>
				<comment type="block">/* FALL through */</comment>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumStreamBlockWrite_DenseHasSpaceItem</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Not enough space for the new item.
		 */</comment>
		<return>return <expr><operator>-</operator><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Remember the beginning of the new item for DatumStreamBlockWrite_DenseIncrItem below.
	 */</comment>
	<expr_stmt><expr><name>rle_last_item</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DatumStreamBlockWrite_PutFixedLength</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DatumStreamBlockWrite_DenseIncrItem</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>rle_last_item</name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_want_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>DatumStreamBlockWrite_DeltaMaintain</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert_tuple</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>DatumStreamBlockWrite_PutFixedLengthTrace</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>item_beginp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>DatumStreamBlockWrite_Put</name><parameter_list>(
						  <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
						  <parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>,
						  <parameter><decl><type><name>bool</name></type> <name>null</name></decl></parameter>,
						  <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>toFree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>eyecatcher</name></name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_Eyecatcher</name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_EyecatcherLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"DatumStreamBlockWrite data structure not valid (eyecatcher)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DatumStreamVersion_Original</name></expr>:</case>
			<return>return <expr><call><name>DatumStreamBlockWrite_PutOrig</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>toFree</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>DatumStreamVersion_Dense</name></expr>:</case>
		<case>case <expr><name>DatumStreamVersion_Dense_Enhanced</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DatumStreamBlockWrite_PutDense</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>toFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
				<comment type="block">/*
				 * Check afterwards to verify invariants of latest write.
				 */</comment>
				<expr_stmt><expr><call><name>DatumStreamBlockWrite_CheckDenseInvariant</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<return>return <expr><name>result</name></expr>;</return>
			</block_content>}</block>

		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unexpected datum stream version %d"</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
			<comment type="block">/* Never reaches here. */</comment>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>DatumStreamBlockWrite_Nth</name><parameter_list>(<parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>eyecatcher</name></name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_Eyecatcher</name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_EyecatcherLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"DatumStreamBlockWrite data structure not valid (eyecatcher)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>DatumStreamBlockWrite_GetReady</name><parameter_list>(
							   <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>eyecatcher</name></name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_Eyecatcher</name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_EyecatcherLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"DatumStreamBlockWrite data structure not valid (eyecatcher)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>always_null_bitmap_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>remember_savings</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>savings</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DatumStreamBitMapWrite_Init</name><argument_list>(
								<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<switch>switch <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DatumStreamVersion_Original</name></expr>:</case>
			<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>DatumStreamVersion_Dense</name></expr>:</case>
		<case>case <expr><name>DatumStreamVersion_Dense_Enhanced</name></expr>:</case>
			<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_want_compression</name></name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Set up for RLETYPE compression */</comment>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_is_repeated</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_total_repeat_items_written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>DatumStreamBitMapWrite_Init</name><argument_list>(
											<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>,
											<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer</name></name></expr></argument>,
									   <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_current_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_want_compression</name></name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Set up for RLETYPE with delta compression */</comment>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>DatumStreamBitMapWrite_Init</name><argument_list>(
											<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>,
											<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer</name></name></expr></argument>,
											<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_current_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>not_first_datum</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>compare_item</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unexpected datum stream version %d"</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
			<comment type="block">/* Never reached. */</comment>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>DatumStreamBlockWrite_BlockOrig</name><parameter_list>(
								<parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
								<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DatumStreamBlock_Orig</name></type> <name>block</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>unalignedNullSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>rowCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>writesz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>minimalIntegrityChecks</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

	<comment type="block">/* First write header */</comment>
	<expr_stmt><expr><name><name>block</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>DatumStreamVersion_Original</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>block</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <ternary><condition><expr><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr> ?</condition><then> <expr><name>DSB_HAS_NULLBITMAP</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>block</name><operator>.</operator><name>ndatum</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>block</name><operator>.</operator><name>unused</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<comment type="block">/* NOTE:Unfortunately, this was not zeroed in the earlier releases of the code. */</comment>

	<comment type="block">/* compress null bitmaps */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>unalignedNullSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>block</name><operator>.</operator><name>nullsz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(
			   <argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>unalignedNullSize</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>block</name><operator>.</operator><name>nullsz</name></name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>unalignedNullSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>block</name><operator>.</operator><name>sz</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Serialize the different data in to the write buffer.
	 */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Orig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Orig</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<comment type="block">/* Next write the null bitmap */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>nullPadSize</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>pad</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer</name></name></expr></argument>, <argument><expr><name>unalignedNullSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>unalignedNullSize</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Zero pad after the NULL bit-map to just before the aligned datum data.
		 */</comment>
		<expr_stmt><expr><name>nullPadSize</name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>nullsz</name></name> <operator>-</operator> <name>unalignedNullSize</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>pad</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pad</name> <operator>&lt;</operator> <name>nullPadSize</name></expr>;</condition> <incr><expr><name>pad</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Next write data */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>block</name><operator>.</operator><name>sz</name></name></expr>;</expr_stmt>

	<comment type="block">/* Calculate write size. */</comment>
	<expr_stmt><expr><name>writesz</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>buffer</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rowCount</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write Original block formatted with NO NULLs "</literal>
				 <literal type="string">"(total length = %d, logical row count %d, data length %d)"</literal></expr></argument>,
							<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <name>writesz</name></expr></argument>,
							<argument><expr><name>rowCount</name></expr></argument>,
							<argument><expr><name><name>block</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write Original block formatted with NULLs for "</literal>
							<literal type="string">"(total length = %d, logical row count %d, null bit-map ON count %d, null bit-map aligned length %d, data length %d)"</literal></expr></argument>,
							<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <name>writesz</name></expr></argument>,
							<argument><expr><name>rowCount</name></expr></argument>,
							<argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name><name>block</name><operator>.</operator><name>nullsz</name></name></expr></argument>,
							<argument><expr><name><name>block</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><name>minimalIntegrityChecks</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>minimalIntegrityChecks</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_block_write_check_integrity</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>minimalIntegrityChecks</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>DatumStreamBlock_IntegrityCheckOrig</name><argument_list>(
										<argument><expr><name>buffer</name></expr></argument>,
										<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <name>writesz</name></expr></argument>,
										<argument><expr><name>minimalIntegrityChecks</name></expr></argument>,
										<argument><expr><name>rowCount</name></expr></argument>,
										<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name></name></expr></argument>,
			<comment type="block">/* errdetailCallback */</comment> <argument><expr><name>errdetail_datumstreamblockwrite_callback</name></expr></argument>,
										 <comment type="block">/* errdetailArg */</comment> <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>dsw</name></expr></argument>,
		  <comment type="block">/* errcontextCallback */</comment> <argument><expr><name>errcontext_datumstreamblockwrite_callback</name></expr></argument>,
										 <comment type="block">/* errcontextArg */</comment> <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>writesz</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>DatumStreamBlockWrite_BlockDense</name><parameter_list>(
								 <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
								 <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>writesz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DatumStreamBlock_Dense</name></type> <name>dense</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DatumStreamBlock_Rle_Extension</name></type> <name>rle_extension</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DatumStreamBlock_Delta_Extension</name></type> <name>delta_extension</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>headerSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>nullSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>rleSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>deltaSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>metadataSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>metadataMaxAlignSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>nullPadSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>pad</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>rowCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>totalRepeatCountsSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>totalDeltasSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>formattedMetadataSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>minimalIntegrityChecks</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>totalRepeatCountsSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>totalDeltasSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Maintain compression data structures.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_last_item_is_repeated</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>DatumStreamBlockWrite_RleFinalizeRepeatCountSize</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

	<comment type="block">/* First fill in orig header portion */</comment>
	<expr_stmt><expr><name><name>dense</name><operator>.</operator><name>orig_4_bytes</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dense</name><operator>.</operator><name>orig_4_bytes</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <ternary><condition><expr><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr> ?</condition><then> <expr><name>DSB_HAS_NULLBITMAP</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>dense</name><operator>.</operator><name>orig_4_bytes</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>DSB_HAS_RLE_COMPRESSION</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>dense</name><operator>.</operator><name>orig_4_bytes</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>DSB_HAS_DELTA_COMPRESSION</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>dense</name><operator>.</operator><name>logical_row_count</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dense</name><operator>.</operator><name>physical_datum_count</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dense</name><operator>.</operator><name>physical_data_size</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datump</name></name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>headerSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Dense</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<comment type="block">/*
	 * Add in NULL bit-map, extra DatumStreamBlock_Rle struct, compress bit-map, repeated counts...
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>nullSize</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>nullSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Add in compress bitmap and repeat counts byte lengths,
		 * if we have done compression in this block.
		 */</comment>
		<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Rle_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>rle_extension</name><operator>.</operator><name>norepeats_null_bitmap_count</name></name> <operator>=</operator>
				<call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>rle_extension</name><operator>.</operator><name>norepeats_null_bitmap_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/*
		 * Compress bit-map byte size since we don't add bits when NULL;
		 */</comment>
		<expr_stmt><expr><name>rleSize</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>rle_extension</name><operator>.</operator><name>compress_bitmap_count</name></name> <operator>=</operator>
			<call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Repeat counts count and size.
		 */</comment>
		<expr_stmt><expr><name>rleSize</name> <operator>+=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_current_size</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>rle_extension</name><operator>.</operator><name>repeatcounts_count</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rle_extension</name><operator>.</operator><name>repeatcounts_size</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_current_size</name></name></expr>;</expr_stmt>

		<comment type="block">/*
		 * We charge the compression metadata size against the RLE_TYPE savings.
		 */</comment>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>savings</name></name> <operator>-=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Rle_Extension</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>rleSize</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>rleSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Add in extra DatumStreamBlock_Delta struct, Delta bit-map, deltas...
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Add in Delta bitmap and deltas byte lengths,
		 * if we have done compression in this block.
		 */</comment>
		<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Delta_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<comment type="block">/*
		 * Delta bit-map byte size since we don't add bits when NULL;
		 */</comment>
		<expr_stmt><expr><name>deltaSize</name> <operator>=</operator> <call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>delta_extension</name><operator>.</operator><name>delta_bitmap_count</name></name> <operator>=</operator>
			<call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Repeat counts count and size.
		 */</comment>
		<expr_stmt><expr><name>deltaSize</name> <operator>+=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>deltas_current_size</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>delta_extension</name><operator>.</operator><name>deltas_count</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>delta_extension</name><operator>.</operator><name>deltas_size</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>deltas_current_size</name></name></expr>;</expr_stmt>

		<comment type="block">/*
		 * We charge the compression metadata size against the RLE_TYPE with Delta savings.
		 */</comment>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>savings</name></name> <operator>-=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Delta_Extension</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>deltaSize</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>deltaSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Align headers and meta-data (e.g. NULL bit-maps, etc).
	 */</comment>
	<expr_stmt><expr><name>metadataSize</name> <operator>=</operator> <name>headerSize</name> <operator>+</operator> <name>nullSize</name> <operator>+</operator> <name>rleSize</name> <operator>+</operator> <name>deltaSize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>metadataMaxAlignSize</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>metadataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dense</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Dense</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Dense</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rle_extension</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Rle_Extension</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Rle_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta_extension</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Delta_Extension</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Delta_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer</name></name></expr></argument>, <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Compress bit-map.
		 */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer</name></name></expr></argument>, <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Write out optimal Repeat Count integer sizes.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>totalRepeatCountsSize</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>byteLen</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>totalRepeatCountsSize</name> <operator>+</operator>
				   <call><name>DatumStreamInt32Compress_Size</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>
				   <operator>&lt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_current_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>byteLen</name> <operator>=</operator> <call><name>DatumStreamInt32Compress_Encode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>byteLen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>totalRepeatCountsSize</name> <operator>+=</operator> <name>byteLen</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Add Delta compress bitmap and Deltas */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Compress bit-map.
		 */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer</name></name></expr></argument>, <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Write out optimal Deltas integer sizes.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>totalDeltasSize</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>byteLen</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>totalDeltasSize</name> <operator>+</operator>
				   <call><name>DatumStreamInt32CompressReserved3_Size</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>
				   <operator>&lt;=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>deltas_current_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>byteLen</name> <operator>=</operator> <call><name>DatumStreamInt32CompressReserved3_Encode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>byteLen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>totalDeltasSize</name> <operator>+=</operator> <name>byteLen</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Were our meta-data size calculations correct?
	 */</comment>
	<expr_stmt><expr><name>formattedMetadataSize</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>buffer</name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>formattedMetadataSize</name> <operator>!=</operator> <name>metadataSize</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Formatted datum stream write metasize size different (expected %d, found "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
						<argument><expr><name>metadataSize</name></expr></argument>,
						<argument><expr><name>formattedMetadataSize</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Zero pad after metadata to just before the aligned datum data.
	 */</comment>
	<expr_stmt><expr><name>nullPadSize</name> <operator>=</operator> <name>metadataMaxAlignSize</name> <operator>-</operator> <name>metadataSize</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>pad</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pad</name> <operator>&lt;</operator> <name>nullPadSize</name></expr>;</condition> <incr><expr><name>pad</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Next write data */</comment>
	<if_stmt><if>if <condition>(<expr><name>metadataMaxAlignSize</name> <operator>+</operator> <name><name>dense</name><operator>.</operator><name>physical_data_size</name></name> <operator>&gt;</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Formatted datum stream MAXALIGN metadata size %d + physical datum size %d "</literal>
						<literal type="string">"(total %d, metadata size %d, header size %d, null size %d, RLE_TYPE size %d) would exceed maximum data blocksize %d)"</literal></expr></argument>,
						<argument><expr><name>metadataMaxAlignSize</name></expr></argument>,
						<argument><expr><name><name>dense</name><operator>.</operator><name>physical_data_size</name></name></expr></argument>,
						<argument><expr><name>metadataMaxAlignSize</name> <operator>+</operator> <name><name>dense</name><operator>.</operator><name>physical_data_size</name></name></expr></argument>,
						<argument><expr><name>metadataSize</name></expr></argument>,
						<argument><expr><name>headerSize</name></expr></argument>,
						<argument><expr><name>nullSize</name></expr></argument>,
						<argument><expr><name>rleSize</name></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name></expr></argument>, <argument><expr><name><name>dense</name><operator>.</operator><name>physical_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>dense</name><operator>.</operator><name>physical_data_size</name></name></expr>;</expr_stmt>

	<comment type="block">/* Calculate write size. */</comment>
	<expr_stmt><expr><name>writesz</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>buffer</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rowCount</name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>nth</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_has_compression</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write Dense block formatted with NO NULLs "</literal>
								<literal type="string">"(maximum length %d, total length = %d, logical row count and physical datum count %d, "</literal>
								<literal type="string">"metadata size %d, metadata size MAXALIGN %d, header size %d, null size %d, RLE_TYPE size %d, "</literal>
								<literal type="string">"physical data size %d)"</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name></expr></argument>,
								<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <name>writesz</name></expr></argument>,
								<argument><expr><name>rowCount</name></expr></argument>,
								<argument><expr><name>metadataSize</name></expr></argument>,
								<argument><expr><name>metadataMaxAlignSize</name></expr></argument>,
								<argument><expr><name>headerSize</name></expr></argument>,
								<argument><expr><name>nullSize</name></expr></argument>,
								<argument><expr><name>rleSize</name></expr></argument>,
								<argument><expr><name><name>dense</name><operator>.</operator><name>physical_data_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write Dense block formatted with NULLs "</literal>
						<literal type="string">"(maximum length %d, total length = %d, logical row count %d, physical datum count %d, "</literal>
						<literal type="string">"null bit-map count %d, null bit-map ON count %d, null bit-map size %d, "</literal>
						<literal type="string">"metadata size %d, metadata size MAXALIGN %d, header size %d, null size %d, RLE_TYPE size %d, "</literal>
						<literal type="string">"physical data size %d)"</literal></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name></expr></argument>,
						<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <name>writesz</name></expr></argument>,
						<argument><expr><name>rowCount</name></expr></argument>,
						<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
						<argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name>metadataSize</name></expr></argument>,
						<argument><expr><name>metadataMaxAlignSize</name></expr></argument>,
						<argument><expr><name>headerSize</name></expr></argument>,
						<argument><expr><name>nullSize</name></expr></argument>,
						<argument><expr><name>rleSize</name></expr></argument>,
						<argument><expr><name><name>dense</name><operator>.</operator><name>physical_data_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dsw</name><operator>-&gt;</operator><name>has_null</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write Dense block formatted RLE_TYPE block with NO NULLs "</literal>
								<literal type="string">"(maximum length %d, total length = %d, logical row count %d, physical datum count %d, "</literal>
								<literal type="string">"compression bit-map count %d, compression bit-map ON count %d, compression bit-map size %d, "</literal>
								<literal type="string">"repeat counts count %d, repeat counts size %d, output repeat counts size %d, "</literal>
							  <literal type="string">"metadata size %d, metadata size MAXALIGN %d, "</literal>
								<literal type="string">"additional savings "</literal> <name>INT64_FORMAT</name> <literal type="string">", total savings "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal>
								<literal type="string">"physical data size %d)"</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name></expr></argument>,
								<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <name>writesz</name></expr></argument>,
								<argument><expr><name>rowCount</name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
					 <argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_current_size</name></name></expr></argument>,
								<argument><expr><name>totalRepeatCountsSize</name></expr></argument>,
								<argument><expr><name>metadataSize</name></expr></argument>,
								<argument><expr><name>metadataMaxAlignSize</name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>savings</name></name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>remember_savings</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>savings</name></name></expr></argument>,
								<argument><expr><name><name>dense</name><operator>.</operator><name>physical_data_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write Dense block formatted RLE_TYPE block with NULLs "</literal>
								<literal type="string">"(maximum length %d, total length = %d, logical row count %d, physical datum count %d, "</literal>
								<literal type="string">"null bit-map count %d, null bit-map ON count %d, null bit-map size %d, "</literal>
								<literal type="string">"compression bit-map count %d, compression bit-map ON count %d, compression bit-map size %d, "</literal>
								<literal type="string">"repeat counts count %d, repeat count size %d, output repeat counts size %d, "</literal>
							  <literal type="string">"metadata size %d, metadata size MAXALIGN %d, "</literal>
								<literal type="string">"additional savings "</literal> <name>INT64_FORMAT</name> <literal type="string">", total savings "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal>
								<literal type="string">"physical data size %d)"</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name></expr></argument>,
								<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <name>writesz</name></expr></argument>,
								<argument><expr><name>rowCount</name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
							 <argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_current_size</name></name></expr></argument>,
								<argument><expr><name>totalRepeatCountsSize</name></expr></argument>,
								<argument><expr><name>metadataSize</name></expr></argument>,
								<argument><expr><name>metadataMaxAlignSize</name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>savings</name></name> <operator>-</operator> <name><name>dsw</name><operator>-&gt;</operator><name>remember_savings</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>savings</name></name></expr></argument>,
								<argument><expr><name><name>dense</name><operator>.</operator><name>physical_data_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_has_compression</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream write Dense block formatted RLE_TYPE with DELTA compression "</literal>
							<literal type="string">"delta bit-map count %d, delta bit-map ON count %d, delta bit-map size %d, "</literal>
				   <literal type="string">"deltas count %d, deltas size %d, output deltas size %d)"</literal></expr></argument>,
							<argument><expr><call><name>DatumStreamBitMapWrite_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><call><name>DatumStreamBitMapWrite_OnCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>DatumStreamBitMapWrite_Size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_current_size</name></name></expr></argument>,
							<argument><expr><name>totalDeltasSize</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><name>minimalIntegrityChecks</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>minimalIntegrityChecks</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_block_write_check_integrity</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>minimalIntegrityChecks</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>DatumStreamBlock_IntegrityCheckDense</name><argument_list>(
										 <argument><expr><name>buffer</name></expr></argument>,
										 <argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <name>writesz</name></expr></argument>,
										 <argument><expr><name>minimalIntegrityChecks</name></expr></argument>,
										 <argument><expr><name>rowCount</name></expr></argument>,
										 <argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name></name></expr></argument>,
			<comment type="block">/* errdetailCallback */</comment> <argument><expr><name>errdetail_datumstreamblockwrite_callback</name></expr></argument>,
										  <comment type="block">/* errdetailArg */</comment> <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>dsw</name></expr></argument>,
		  <comment type="block">/* errcontextCallback */</comment> <argument><expr><name>errcontext_datumstreamblockwrite_callback</name></expr></argument>,
										  <comment type="block">/* errcontextArg */</comment> <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>writesz</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64</name></type>
<name>DatumStreamBlockWrite_Block</name><parameter_list>(
							<parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
							<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>eyecatcher</name></name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_Eyecatcher</name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_EyecatcherLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"DatumStreamBlockWrite data structure not valid (eyecatcher)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DatumStreamVersion_Original</name></expr>:</case>
			<return>return <expr><call><name>DatumStreamBlockWrite_BlockOrig</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>DatumStreamVersion_Dense</name></expr>:</case>
		<case>case <expr><name>DatumStreamVersion_Dense_Enhanced</name></expr>:</case>
			<return>return <expr><call><name>DatumStreamBlockWrite_BlockDense</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>

		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unexpected datum stream version %d"</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
			<comment type="block">/* Never reaches here. */</comment>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>DatumStreamBlockWrite_Init</name><parameter_list>(
						   <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>,
						   <parameter><decl><type><name>DatumStreamTypeInfo</name> <modifier>*</modifier></type> <name>typeInfo</name></decl></parameter>,
						   <parameter><decl><type><name>DatumStreamVersion</name></type> <name>datumStreamVersion</name></decl></parameter>,
						   <parameter><decl><type><name>bool</name></type> <name>rle_want_compression</name></decl></parameter>,
						   <parameter><decl><type><name>bool</name></type> <name>delta_want_compression</name></decl></parameter>,
						   <parameter><decl><type><name>int32</name></type> <name>initialMaxDatumPerBlock</name></decl></parameter>,
						   <parameter><decl><type><name>int32</name></type> <name>maxDatumPerBlock</name></decl></parameter>,
						   <parameter><decl><type><name>int32</name></type> <name>maxDataBlockSize</name></decl></parameter>,
						   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>errdetailCallback</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errdetailArg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
						   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errdetailArg</name></decl></parameter>,
						   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>errcontextCallback</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errcontextArg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
						   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errcontextArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>eyecatcher</name></name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_Eyecatcher</name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_EyecatcherLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name></name> <operator>=</operator> <name>typeInfo</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datumStreamVersion</name></name> <operator>=</operator> <name>datumStreamVersion</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_want_compression</name></name> <operator>=</operator> <name>rle_want_compression</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_want_compression</name></name> <operator>=</operator> <name>delta_want_compression</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>initialMaxDatumPerBlock</name></name> <operator>=</operator> <name>initialMaxDatumPerBlock</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDatumPerBlock</name></name> <operator>=</operator> <name>maxDatumPerBlock</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name> <operator>=</operator> <name>maxDataBlockSize</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>errdetailCallback</name></name> <operator>=</operator> <name>errdetailCallback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>errcontextArg</name></name> <operator>=</operator> <name>errcontextArg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>errcontextCallback</name></name> <operator>=</operator> <name>errcontextCallback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>errcontextArg</name></name> <operator>=</operator> <name>errcontextArg</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>memctxt</name></name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Now start setting up our write buffers, etc.
	 */</comment>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer_size</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_afterp</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name> <operator>+</operator> <name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer_size</name></name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DatumStreamVersion_Original</name></expr>:</case>
			<comment type="block">/*
			 * The maximum number of NULLs is regulated by the maximum number of rows that
			 * can be put in the Append-Only Small Content block header.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_write_use_small_initial_buffers</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer_size</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer_size</name></name> <operator>=</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>initialMaxDatumPerBlock</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block write created "</literal>
						<literal type="string">"(maximum usable block space = %d, datum_buffer %p, "</literal>
					 <literal type="string">"datumlen = %d, typid = %u, align '%c', by value = %s)"</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>,
								<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>typid</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>align</name></name></expr></argument>,
								<argument><expr><operator>(</operator><ternary><condition><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>byval</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>DatumStreamVersion_Dense</name></expr>:</case>
		<case>case <expr><name>DatumStreamVersion_Dense_Enhanced</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_write_use_small_initial_buffers</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer_size</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer_size</name></name> <operator>=</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>initialMaxDatumPerBlock</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_want_compression</name></name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Start with lower than MAX, since MAX is huge.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_write_use_small_initial_buffers</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer_size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer_size</name></name> <operator>=</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>initialMaxDatumPerBlock</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * Worst case repeat is 2 different repeated values for whole block.
				 */</comment>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_write_use_small_initial_buffers</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_maxcount</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_maxcount</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>initialMaxDatumPerBlock</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name></name> <operator>=</operator>
					<call><name>palloc</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_maxcount</name></name> <operator>*</operator> <name>Int32Compress_MaxByteLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts_maxcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_want_compression</name></name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Start with lower than MAX, since MAX is huge.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_write_use_small_initial_buffers</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer_size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer_size</name></name> <operator>=</operator> <operator>(</operator><name><name>dsw</name><operator>-&gt;</operator><name>initialMaxDatumPerBlock</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * Worst case delta encoding is all datums in block having small
				 * Start with lower than MAX, since MAX is huge.
				 */</comment>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>Debug_datumstream_write_use_small_initial_buffers</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_maxcount</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_maxcount</name></name> <operator>=</operator> <name><name>dsw</name><operator>-&gt;</operator><name>initialMaxDatumPerBlock</name></name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name></name> <operator>=</operator>
					<call><name>palloc</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_maxcount</name></name> <operator>*</operator> <name>Int32Compress_MaxByteLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name></name> <operator>=</operator>
					<call><name>palloc</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_maxcount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas_maxcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_insert</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Datum stream block write created "</literal>
						<literal type="string">"(maximum usable block space = %d, datum_buffer %p, "</literal>
					 <literal type="string">"datumlen = %d, typid = %u, align '%c', by value = %s)"</literal></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>maxDataBlockSize</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>,
								<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>typid</name></name></expr></argument>,
								<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>align</name></name></expr></argument>,
								<argument><expr><operator>(</operator><ternary><condition><expr><name><name>dsw</name><operator>-&gt;</operator><name>typeInfo</name><operator>-&gt;</operator><name>byval</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unexpected datum stream version %d"</literal></expr></argument>,
							<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datumStreamVersion</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_datumstreamblockwrite</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
			<comment type="block">/* Never reached. */</comment>
	</block_content>}</block></switch>

	<comment type="block">/* Set up our write block information */</comment>
	<expr_stmt><expr><call><name>DatumStreamBlockWrite_GetReady</name><argument_list>(<argument><expr><name>dsw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>DatumStreamBlockWrite_Finish</name><parameter_list>(
							 <parameter><decl><type><name>DatumStreamBlockWrite</name> <modifier>*</modifier></type> <name>dsw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldCtxt</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>eyecatcher</name></name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_Eyecatcher</name></expr></argument>, <argument><expr><name>DatumStreamBlockWrite_EyecatcherLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"DatumStreamBlockWrite data structure not valid (eyecatcher)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>oldCtxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>memctxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>null_bitmap_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>datum_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_compress_bitmap_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>rle_repeatcounts</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_bitmap_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>deltas</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dsw</name><operator>-&gt;</operator><name>delta_sign</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldCtxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * DatumStreamBlock.
 */</comment>
<function><type><specifier>static</specifier> <name>int32</name></type>
<name>DatumStreamBlock_IntegrityCheckVarlena</name><parameter_list>(
									   <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>physicalData</name></decl></parameter>,
									   <parameter><decl><type><name>int32</name></type> <name>physicalDataSize</name></decl></parameter>,
									   <parameter><decl><type><name>DatumStreamVersion</name></type> <name>datumStreamVersion</name></decl></parameter>,
									   <parameter><decl><type><name>DatumStreamTypeInfo</name> <modifier>*</modifier></type> <name>typeInfo</name></decl></parameter>,
							   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>errdetailCallback</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errdetailArg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
									   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errdetailArg</name></decl></parameter>,
							 <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>errcontextCallback</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errcontextArg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
									   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errcontextArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>currentOffset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>physicalDataSize</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>physicalDataSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>physicalData</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>currentOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>remainingSize</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>varLen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>remainingSize</name> <operator>=</operator> <name>physicalDataSize</name> <operator>-</operator> <name>currentOffset</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>remainingSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Verify and move past any possible zero paddings AFTER PREVIOUS varlena data.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>currentOffset</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>afterPadding</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int32</name></type>		<name>saveBeginOffset</name></decl>;</decl_stmt>

			<comment type="block">/*
			 * Note that SHORT varlena has the high bit of the first byte as 1, so
			 * we will not go here if item begins with SHORT header.
			 */</comment>

			<expr_stmt><expr><name>afterPadding</name> <operator>=</operator> <operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <call><name>att_align_nominal</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>typeInfo</name><operator>-&gt;</operator><name>align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>saveBeginOffset</name> <operator>=</operator> <name>currentOffset</name></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>afterPadding</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad datum stream %s variable-length item zero padding byte at offset %d is not zero (begin offset %d, physical item index #%d)"</literal></expr></argument>,
							   <argument><expr><call><name>DatumStreamVersion_String</name><argument_list>(<argument><expr><name>datumStreamVersion</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>currentOffset</name></expr></argument>,
									<argument><expr><name>saveBeginOffset</name></expr></argument>,
									<argument><expr><name>count</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>currentOffset</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>remainingSize</name><operator>--</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>remainingSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></while>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>currentOffset</name> <operator>&gt;=</operator> <name>physicalDataSize</name></expr>)</condition>
		<block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Enough room for minimum varlena?
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad datum stream %s variable-length item at physical offset %d is corrupt (varlena is EXTERNAL, physical item index #%d)"</literal></expr></argument>,
							<argument><expr><call><name>DatumStreamVersion_String</name><argument_list>(<argument><expr><name>datumStreamVersion</name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name>currentOffset</name></expr></argument>,
							<argument><expr><name>count</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>varLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<comment type="block">/* Never reaches here. */</comment>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>VARATT_IS_SHORT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>remainingSize</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>varLen</name> <operator>=</operator> <call><name>VARSIZE_SHORT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Check SHORT varlena length.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>varLen</name> <operator>&lt;</operator> <name>VARHDRSZ_SHORT</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad datum stream %s variable-length item at physical offset %d.  SHORT varlena VARSIZE too short (size %d, remaining size %d, physical size %d, physical item index #%d, varlena: %s)"</literal></expr></argument>,
								<argument><expr><call><name>DatumStreamVersion_String</name><argument_list>(<argument><expr><name>datumStreamVersion</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name>currentOffset</name></expr></argument>,
								<argument><expr><name>varLen</name></expr></argument>,
								<argument><expr><name>remainingSize</name></expr></argument>,
								<argument><expr><name>physicalDataSize</name></expr></argument>,
								<argument><expr><name>count</name></expr></argument>,
								<argument><expr><call><name>VarlenaInfoToString</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>varLen</name> <operator>&gt;</operator> <name>remainingSize</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad datum stream %s variable-length item at physical offset %d.  SHORT varlena size bad (size %d, remaining size %d, physical size %d, physical item index #%d, varlena: %s)"</literal></expr></argument>,
								<argument><expr><call><name>DatumStreamVersion_String</name><argument_list>(<argument><expr><name>datumStreamVersion</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name>currentOffset</name></expr></argument>,
								<argument><expr><name>varLen</name></expr></argument>,
								<argument><expr><name>remainingSize</name></expr></argument>,
								<argument><expr><name>physicalDataSize</name></expr></argument>,
								<argument><expr><name>count</name></expr></argument>,
								<argument><expr><call><name>VarlenaInfoToString</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>remainingSize</name> <operator>&lt;</operator> <name>VARHDRSZ</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad datum stream %s variable-length item at physical offset %d.  Remaining length %d too short for regular varlena 4 byte header (physical item index #%d)"</literal></expr></argument>,
								<argument><expr><call><name>DatumStreamVersion_String</name><argument_list>(<argument><expr><name>datumStreamVersion</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name>currentOffset</name></expr></argument>,
								<argument><expr><name>remainingSize</name></expr></argument>,
								<argument><expr><name>count</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>currentOffset</name> <operator>%</operator> <literal type="number">1</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad datum stream %s variable-length item at physical offset %d.  Not aligned on at least a 2 byte boundary for regular varlena header (physical item index #%d)"</literal></expr></argument>,
								<argument><expr><call><name>DatumStreamVersion_String</name><argument_list>(<argument><expr><name>datumStreamVersion</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name>currentOffset</name></expr></argument>,
								<argument><expr><name>count</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>varLen</name> <operator>=</operator> <call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>varLen</name> <operator>&lt;</operator> <name>VARHDRSZ</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad datum stream %s variable-length item at physical offset %d.  Regular varlena VARSIZE too short (length %d, remaining size %d, physical size %d, physical item index #%d, varlena: %s)"</literal></expr></argument>,
								<argument><expr><call><name>DatumStreamVersion_String</name><argument_list>(<argument><expr><name>datumStreamVersion</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name>currentOffset</name></expr></argument>,
								<argument><expr><name>varLen</name></expr></argument>,
								<argument><expr><name>remainingSize</name></expr></argument>,
								<argument><expr><name>physicalDataSize</name></expr></argument>,
								<argument><expr><name>count</name></expr></argument>,
								<argument><expr><call><name>VarlenaInfoToString</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>varLen</name> <operator>&gt;</operator> <name>remainingSize</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad datum stream %s variable-length item at physical offset %d.  Regular varlena length bad (length %d, remaining size %d, physical size %d, physical item index #%d, varlena: %s)"</literal></expr></argument>,
								<argument><expr><call><name>DatumStreamVersion_String</name><argument_list>(<argument><expr><name>datumStreamVersion</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name>currentOffset</name></expr></argument>,
								<argument><expr><name>varLen</name></expr></argument>,
								<argument><expr><name>remainingSize</name></expr></argument>,
								<argument><expr><name>physicalDataSize</name></expr></argument>,
								<argument><expr><name>count</name></expr></argument>,
								<argument><expr><call><name>VarlenaInfoToString</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>varLen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>currentOffset</name> <operator>+=</operator> <name>varLen</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>currentOffset</name> <operator>&gt;=</operator> <name>physicalDataSize</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>currentOffset</name> <operator>==</operator> <name>physicalDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DatumStreamBlock_IntegrityCheckOrig</name><parameter_list>(
									<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>,
									<parameter><decl><type><name>int32</name></type> <name>bufferSize</name></decl></parameter>,
									<parameter><decl><type><name>bool</name></type> <name>minimalIntegrityChecks</name></decl></parameter>,
									<parameter><decl><type><name>int32</name></type> <name>expectedRowCount</name></decl></parameter>,
									<parameter><decl><type><name>DatumStreamTypeInfo</name> <modifier>*</modifier></type> <name>typeInfo</name></decl></parameter>,
							   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>errdetailCallback</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errdetailArg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
									<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errdetailArg</name></decl></parameter>,
							 <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>errcontextCallback</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errcontextArg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
									<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errcontextArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>minHeaderSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Orig</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>DatumStreamBlock_Orig</name> <modifier>*</modifier></type><name>blockOrig</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int32</name></type>		<name>headerSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type>		<name>hasNull</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>bufferSize</name> <operator>&lt;</operator> <name>minHeaderSize</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad datum stream Original block header size.  Found %d and expected the size to be at least %d"</literal></expr></argument>,
						<argument><expr><name>bufferSize</name></expr></argument>,
						<argument><expr><name>minHeaderSize</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>blockOrig</name> <operator>=</operator> <operator>(</operator><name>DatumStreamBlock_Orig</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>headerSize</name> <operator>=</operator> <name>minHeaderSize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <name>headerSize</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>blockOrig</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>DatumStreamVersion_Original</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad datum stream Original block version.  Found %d and expected %d"</literal></expr></argument>,
						<argument><expr><name><name>blockOrig</name><operator>-&gt;</operator><name>version</name></name></expr></argument>,
						<argument><expr><name>DatumStreamVersion_Original</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>minimalIntegrityChecks</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* CONSIDER: Verify reserved flags are Zero */</comment>

	<expr_stmt><expr><name>hasNull</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>blockOrig</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DSB_HAS_NULLBITMAP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/* UNDONE: Add a whole bunch of other checking... */</comment>

	<if_stmt><if>if <condition>(<expr><name>hasNull</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * The field nullsz byte length is MAXALIGN.
		 */</comment>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>blockOrig</name><operator>-&gt;</operator><name>nullsz</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Variable length items (i.e. varlena).
		 */</comment>
		<expr_stmt><expr><call><name>DatumStreamBlock_IntegrityCheckVarlena</name><argument_list>(
											   <argument><expr><name>p</name></expr></argument>,
											   <argument><expr><name><name>blockOrig</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>,
											   <argument><expr><name>DatumStreamVersion_Original</name></expr></argument>,
											   <argument><expr><name>typeInfo</name></expr></argument>,
											   <argument><expr><name>errdetailCallback</name></expr></argument>,
											   <argument><expr><name>errdetailArg</name></expr></argument>,
											   <argument><expr><name>errcontextCallback</name></expr></argument>,
											   <argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DatumStreamBlock_IntegrityCheckDenseDelta</name><parameter_list>(
						   <parameter><decl><type><name>DatumStreamBlock_Delta_Extension</name> <modifier>*</modifier></type> <name>deltaExtension</name></decl></parameter>,
										  <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>,
										  <parameter><decl><type><name>int32</name></type> <name>bufferSize</name></decl></parameter>,
										  <parameter><decl><type><name>int32</name></type> <name>headerSize</name></decl></parameter>,
							   <parameter><decl><type><name>DatumStreamBlock_Rle_Extension</name> <modifier>*</modifier></type> <name>rleExtension</name></decl></parameter>,
							   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>errdetailCallback</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errdetailArg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
										  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errdetailArg</name></decl></parameter>,
							 <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>errcontextCallback</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errcontextArg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
										  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errcontextArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>deltaBitMapSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>actualDeltasOnCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>totalDeltasSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>alignedHeaderSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>deltaExtension</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>deltaExtension</name><operator>-&gt;</operator><name>delta_bitmap_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"DELTA bit-map count is negative or 0 and is expected to be greater than 0. (%d)"</literal></expr></argument>,
						<argument><expr><name><name>deltaExtension</name><operator>-&gt;</operator><name>delta_bitmap_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>deltaExtension</name><operator>-&gt;</operator><name>deltas_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"DELTA deltas count is negative or 0 and is expected to be greater than 0. (%d)"</literal></expr></argument>,
						<argument><expr><name><name>deltaExtension</name><operator>-&gt;</operator><name>deltas_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>deltaExtension</name><operator>-&gt;</operator><name>deltas_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"DELTA deltas size is negative or 0 and is expected to be greater than 0. (%d)"</literal></expr></argument>,
						<argument><expr><name><name>deltaExtension</name><operator>-&gt;</operator><name>deltas_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>rleExtension</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>deltaExtension</name><operator>-&gt;</operator><name>delta_bitmap_count</name></name> <operator>!=</operator> <name><name>rleExtension</name><operator>-&gt;</operator><name>compress_bitmap_count</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"DELTA delta_bitmap count (%d) is expected to equal to RLE_TYPE compress bitmap count (%d)"</literal></expr></argument>,
							<argument><expr><name><name>deltaExtension</name><operator>-&gt;</operator><name>delta_bitmap_count</name></name></expr></argument>,
							<argument><expr><name><name>rleExtension</name><operator>-&gt;</operator><name>compress_bitmap_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>deltaBitMapSize</name> <operator>=</operator> <call><name>DatumStreamBitMap_Size</name><argument_list>(<argument><expr><name><name>deltaExtension</name><operator>-&gt;</operator><name>delta_bitmap_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <name>deltaBitMapSize</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>bufferSize</name> <operator>&lt;</operator> <name>headerSize</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Expected RLE_TYPE header with DELTA size %d including NULL bit-map is larger than buffer size %d"</literal></expr></argument>,
						<argument><expr><name>headerSize</name></expr></argument>,
						<argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>actualDeltasOnCount</name> <operator>=</operator> <call><name>DatumStreamBitMap_CountOn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>deltaExtension</name><operator>-&gt;</operator><name>delta_bitmap_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>actualDeltasOnCount</name> <operator>!=</operator> <name><name>deltaExtension</name><operator>-&gt;</operator><name>deltas_count</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"DELTA extension header bit-map ON count does not match DELTA bit-map ON count.  Found %d, expected %d"</literal></expr></argument>,
						<argument><expr><name>actualDeltasOnCount</name></expr></argument>,
						<argument><expr><name><name>deltaExtension</name><operator>-&gt;</operator><name>deltas_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>deltaBitMapSize</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <name><name>deltaExtension</name><operator>-&gt;</operator><name>deltas_size</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>alignedHeaderSize</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>headerSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>bufferSize</name> <operator>&lt;</operator> <name>alignedHeaderSize</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Expected RLE_TYPE DELTA header size %d including deltas size is larger than buffer size %d"</literal></expr></argument>,
						<argument><expr><name>alignedHeaderSize</name></expr></argument>,
						<argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>totalDeltasSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>deltaExtension</name><operator>-&gt;</operator><name>deltas_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>deltasCount</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>byteLen</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>sign</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>deltasCount</name> <operator>=</operator> <call><name>DatumStreamInt32CompressReserved3_Decode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>byteLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* UNDONE: Range check repeatCount */</comment>

		<expr_stmt><expr><name>totalDeltasSize</name> <operator>+=</operator> <name>byteLen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>byteLen</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>totalDeltasSize</name> <operator>!=</operator> <name><name>deltaExtension</name><operator>-&gt;</operator><name>deltas_size</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad DELTA type deltas size.  Found %d, expected %d"</literal></expr></argument>,
						<argument><expr><name>totalDeltasSize</name></expr></argument>,
						<argument><expr><name><name>deltaExtension</name><operator>-&gt;</operator><name>deltas_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DatumStreamBlock_IntegrityCheckDense</name><parameter_list>(
									 <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>,
									 <parameter><decl><type><name>int32</name></type> <name>bufferSize</name></decl></parameter>,
									 <parameter><decl><type><name>bool</name></type> <name>minimalIntegrityChecks</name></decl></parameter>,
									 <parameter><decl><type><name>int32</name></type> <name>expectedRowCount</name></decl></parameter>,
									 <parameter><decl><type><name>DatumStreamTypeInfo</name> <modifier>*</modifier></type> <name>typeInfo</name></decl></parameter>,
							   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>errdetailCallback</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errdetailArg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
									 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errdetailArg</name></decl></parameter>,
							 <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>errcontextCallback</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errcontextArg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
									 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errcontextArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>minHeaderSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Dense</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>DatumStreamBlock_Dense</name> <modifier>*</modifier></type><name>blockDense</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int32</name></type>		<name>headerSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type>		<name>hasNull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>hasRleCompression</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>hasDeltaCompression</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int32</name></type>		<name>alignedHeaderSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>deltaOnCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DatumStreamBlock_Delta_Extension</name> <modifier>*</modifier></type><name>deltaExtension</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DatumStreamBlock_Rle_Extension</name> <modifier>*</modifier></type><name>rleExtension</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>deltaExtension</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rleExtension</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>alignedHeaderSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>bufferSize</name> <operator>&lt;</operator> <name>minHeaderSize</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad datum stream Dense block header size.  Found %d and expected the size to be at least %d"</literal></expr></argument>,
						<argument><expr><name>bufferSize</name></expr></argument>,
						<argument><expr><name>minHeaderSize</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>blockDense</name> <operator>=</operator> <operator>(</operator><name>DatumStreamBlock_Dense</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>headerSize</name> <operator>=</operator> <name>minHeaderSize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <name>headerSize</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>blockDense</name><operator>-&gt;</operator><name>orig_4_bytes</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name>DatumStreamVersion_Dense</name><operator>)</operator> <operator>&amp;&amp;</operator>
	 <operator>(</operator><name><name>blockDense</name><operator>-&gt;</operator><name>orig_4_bytes</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name>DatumStreamVersion_Dense_Enhanced</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad datum stream Dense block version.  Found %d and expected %d"</literal></expr></argument>,
						<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>orig_4_bytes</name><operator>.</operator><name>version</name></name></expr></argument>,
						<argument><expr><name>DatumStreamVersion_Dense_Enhanced</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>minimalIntegrityChecks</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* CONSIDER: Verify reserved flags are Zero */</comment>

	<expr_stmt><expr><name>hasNull</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>blockDense</name><operator>-&gt;</operator><name>orig_4_bytes</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>DSB_HAS_NULLBITMAP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>hasRleCompression</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>blockDense</name><operator>-&gt;</operator><name>orig_4_bytes</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>DSB_HAS_RLE_COMPRESSION</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>hasDeltaCompression</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>blockDense</name><operator>-&gt;</operator><name>orig_4_bytes</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>DSB_HAS_DELTA_COMPRESSION</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Verify logical row count.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>blockDense</name><operator>-&gt;</operator><name>logical_row_count</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Logical row count is negative and is expected to be greater than 0. (%d)"</literal></expr></argument>,
						<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>blockDense</name><operator>-&gt;</operator><name>logical_row_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Logical row count is zero and is expected to be at greater than 0"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>blockDense</name><operator>-&gt;</operator><name>logical_row_count</name></name> <operator>!=</operator> <name>expectedRowCount</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Logical row count does not match expected value (found %d, expected %d)"</literal></expr></argument>,
						<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>,
						<argument><expr><name>expectedRowCount</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Verify physical datum count.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Physical datum count is negative and is expected to be at least greater than or equal to 0. (%d)"</literal></expr></argument>,
						<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Verify physical data size.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_data_size</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Physical data size is negative and is expected to be at least greater than or equal to 0. (%d)"</literal></expr></argument>,
						<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_data_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Physical data size is zero and is expected to be at least greater than 0 since physical datum count is %d"</literal></expr></argument>,
							<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_data_size</name></name> <operator>&gt;</operator> <name>bufferSize</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			  <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Physical data size %d is greater than buffer size %d"</literal></expr></argument>,
					  <argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr></argument>,
					  <argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call><operator>,</operator>
			   <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
			   <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * This check will make it safer to do multiplication of datum count and datum length.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>&gt;</operator> <name><name>blockDense</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"More physical items %d than physical bytes %d"</literal></expr></argument>,
							<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
							<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int64</name></type>		<name>calculatedDataSize</name></decl>;</decl_stmt>

			<comment type="block">/*
			 * Fixed-length items.
			 */</comment>
			<expr_stmt><expr><name>calculatedDataSize</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64</name><operator>)</operator> <name><name>blockDense</name><operator>-&gt;</operator><name>physical_datum_count</name></name><operator>)</operator> <operator>*</operator> <name><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>calculatedDataSize</name> <operator>&gt;</operator> <name><name>blockDense</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Physical size doesn't match calculations for %d count of fixed-size %d items "</literal>
								<literal type="string">"(found "</literal> <name>INT64_FORMAT</name> <literal type="string">", expected %d)"</literal></expr></argument>,
								<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
								<argument><expr><name><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name></expr></argument>,
								<argument><expr><name>calculatedDataSize</name></expr></argument>,
								<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_data_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Physical data size %d is expected to be at 0 since physical datum count is 0"</literal></expr></argument>,
							<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasRleCompression</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>total_datum_count</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>hasDeltaCompression</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Delta_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>bufferSize</name> <operator>&lt;</operator> <name>headerSize</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad datum stream DELTA block header extension size. Found %d and expected the size to be at least %d"</literal></expr></argument>,
								<argument><expr><name>bufferSize</name></expr></argument>,
								<argument><expr><name>headerSize</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>deltaExtension</name> <operator>=</operator> <operator>(</operator><name>DatumStreamBlock_Delta_Extension</name> <operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Delta_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>deltaOnCount</name> <operator>=</operator> <name><name>deltaExtension</name><operator>-&gt;</operator><name>deltas_count</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>deltaOnCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>total_datum_count</name> <operator>=</operator> <name><name>blockDense</name><operator>-&gt;</operator><name>physical_datum_count</name></name> <operator>+</operator> <name>deltaOnCount</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasNull</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>alignedHeaderSize</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>headerSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>blockDense</name><operator>-&gt;</operator><name>logical_row_count</name></name> <operator>!=</operator> <name>total_datum_count</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Logical row count expected to match physical datum count when block does not have NULLs "</literal>
								<literal type="string">"(logical row count %d, physical datum count %d + deltaOnCount %d)"</literal></expr></argument>,
								<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>,
								<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_datum_count</name></name></expr></argument>,
								<argument><expr><name>deltaOnCount</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int32</name></type>		<name>nullBitMapSize</name></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>int32</name></type>		<name>actualNullOnCount</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int32</name></type>		<name>expectedNullOnCount</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>nullBitMapSize</name> <operator>=</operator> <call><name>DatumStreamBitMap_Size</name><argument_list>(<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <name>nullBitMapSize</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasDeltaCompression</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>alignedHeaderSize</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>headerSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>bufferSize</name> <operator>&lt;</operator> <name>alignedHeaderSize</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Expected header size %d including NULL bit-map is larger than buffer size %d"</literal></expr></argument>,
									<argument><expr><name>alignedHeaderSize</name></expr></argument>,
									<argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>bufferSize</name> <operator>&lt;</operator> <name>headerSize</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Expected header size %d including NULL bit-map is larger than buffer size %d"</literal></expr></argument>,
									<argument><expr><name>headerSize</name></expr></argument>,
									<argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><name>actualNullOnCount</name> <operator>=</operator> <call><name>DatumStreamBitMap_CountOn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>expectedNullOnCount</name> <operator>=</operator> <name><name>blockDense</name><operator>-&gt;</operator><name>logical_row_count</name></name> <operator>-</operator> <name>total_datum_count</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>actualNullOnCount</name> <operator>!=</operator> <name>expectedNullOnCount</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"NULL bit-map ON count does not match.  Found %d, expected %d"</literal></expr></argument>,
								<argument><expr><name>actualNullOnCount</name></expr></argument>,
								<argument><expr><name>expectedNullOnCount</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>nullBitMapSize</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* CONSIDER: Verify zero padding */</comment>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>DatumStreamBlock_Rle_Extension</name> <modifier>*</modifier></type><name>rleExtension</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int32</name></type>		<name>actualNullOnCount</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int32</name></type>		<name>compressBitMapSize</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int32</name></type>		<name>actualCompressOnCount</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int32</name></type>		<name>totalRepeatCount</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>totalRepeatCountsSize</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int32</name></type>		<name>expectedNullOnCount</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Rle_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>bufferSize</name> <operator>&lt;</operator> <name>headerSize</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad datum stream RLE_TYPE block header extension size.	Found %d and expected the size to be at least %d"</literal></expr></argument>,
							<argument><expr><name>bufferSize</name></expr></argument>,
							<argument><expr><name>headerSize</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>rleExtension</name> <operator>=</operator> <operator>(</operator><name>DatumStreamBlock_Rle_Extension</name> <operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasNull</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>rleExtension</name><operator>-&gt;</operator><name>norepeats_null_bitmap_count</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"RLE_TYPE NULL bit-map count is expected to be 0 when there are no NULLs. (%d)"</literal></expr></argument>,
								<argument><expr><name><name>rleExtension</name><operator>-&gt;</operator><name>norepeats_null_bitmap_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>rleExtension</name><operator>-&gt;</operator><name>norepeats_null_bitmap_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"RLE_TYPE NULL bit-map count is negative or 0 and is expected to be greater than 0 when there are NULLs. (%d)"</literal></expr></argument>,
								<argument><expr><name><name>rleExtension</name><operator>-&gt;</operator><name>norepeats_null_bitmap_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>rleExtension</name><operator>-&gt;</operator><name>compress_bitmap_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"RLE_TYPE COMPRESS bit-map count is negative or 0 and is expected to be greater than 0. (%d)"</literal></expr></argument>,
							<argument><expr><name><name>rleExtension</name><operator>-&gt;</operator><name>compress_bitmap_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>rleExtension</name><operator>-&gt;</operator><name>repeatcounts_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"RLE_TYPE repeats count is negative or 0 and is expected to be greater than 0. (%d)"</literal></expr></argument>,
							<argument><expr><name><name>rleExtension</name><operator>-&gt;</operator><name>repeatcounts_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>rleExtension</name><operator>-&gt;</operator><name>repeatcounts_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"RLE_TYPE repeats size is negative or 0 and is expected to be greater than 0. (%d)"</literal></expr></argument>,
							<argument><expr><name><name>rleExtension</name><operator>-&gt;</operator><name>repeatcounts_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Rle_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>hasDeltaCompression</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Delta_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>bufferSize</name> <operator>&lt;</operator> <name>headerSize</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad datum stream RLE_TYPE DELTA block header extension size. Found %d and expected the size to be at least %d"</literal></expr></argument>,
								<argument><expr><name>bufferSize</name></expr></argument>,
								<argument><expr><name>headerSize</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>deltaExtension</name> <operator>=</operator> <operator>(</operator><name>DatumStreamBlock_Delta_Extension</name> <operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DatumStreamBlock_Delta_Extension</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasNull</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>actualNullOnCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int32</name></type>		<name>nullBitMapSize</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>nullBitMapSize</name> <operator>=</operator> <call><name>DatumStreamBitMap_Size</name><argument_list>(<argument><expr><name><name>rleExtension</name><operator>-&gt;</operator><name>norepeats_null_bitmap_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <name>nullBitMapSize</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>bufferSize</name> <operator>&lt;</operator> <name>headerSize</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad NULL bit-map size %d with RLE_TYPE compression extension header is larger than buffer size %d"</literal></expr></argument>,
								<argument><expr><name>headerSize</name></expr></argument>,
								<argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>actualNullOnCount</name> <operator>=</operator> <call><name>DatumStreamBitMap_CountOn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>rleExtension</name><operator>-&gt;</operator><name>norepeats_null_bitmap_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>nullBitMapSize</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>compressBitMapSize</name> <operator>=</operator> <call><name>DatumStreamBitMap_Size</name><argument_list>(<argument><expr><name><name>rleExtension</name><operator>-&gt;</operator><name>compress_bitmap_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <name>compressBitMapSize</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>bufferSize</name> <operator>&lt;</operator> <name>headerSize</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Expected RLE_TYPE header size %d including NULL bit-map is larger than buffer size %d"</literal></expr></argument>,
							<argument><expr><name>headerSize</name></expr></argument>,
							<argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>actualCompressOnCount</name> <operator>=</operator> <call><name>DatumStreamBitMap_CountOn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>rleExtension</name><operator>-&gt;</operator><name>compress_bitmap_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>actualCompressOnCount</name> <operator>!=</operator> <name><name>rleExtension</name><operator>-&gt;</operator><name>repeatcounts_count</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"RLE_TYPE COMPRESS bit-map ON count does not match COMPRESS bit-map ON count.  Found %d, expected %d"</literal></expr></argument>,
							<argument><expr><name>actualCompressOnCount</name></expr></argument>,
							<argument><expr><name><name>rleExtension</name><operator>-&gt;</operator><name>repeatcounts_count</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>compressBitMapSize</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>headerSize</name> <operator>+=</operator> <name><name>rleExtension</name><operator>-&gt;</operator><name>repeatcounts_size</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasDeltaCompression</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>alignedHeaderSize</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>headerSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>bufferSize</name> <operator>&lt;</operator> <name>alignedHeaderSize</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Expected RLE_TYPE header size %d including repeat counts is larger than buffer size %d"</literal></expr></argument>,
								<argument><expr><name>alignedHeaderSize</name></expr></argument>,
								<argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>bufferSize</name> <operator>&lt;</operator> <name>headerSize</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Expected RLE_TYPE header size %d including repeat counts is larger than buffer size %d"</literal></expr></argument>,
								<argument><expr><name>headerSize</name></expr></argument>,
								<argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>totalRepeatCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>totalRepeatCountsSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rleExtension</name><operator>-&gt;</operator><name>repeatcounts_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int32</name></type>		<name>repeatCount</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>byteLen</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>repeatCount</name> <operator>=</operator> <call><name>DatumStreamInt32Compress_Decode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>byteLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* UNDONE: Range check repeatCount */</comment>

			<expr_stmt><expr><name>totalRepeatCount</name> <operator>+=</operator> <name>repeatCount</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>totalRepeatCountsSize</name> <operator>+=</operator> <name>byteLen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>byteLen</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>totalRepeatCountsSize</name> <operator>!=</operator> <name><name>rleExtension</name><operator>-&gt;</operator><name>repeatcounts_size</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Bad RLE_TYPE repeats count size.  Found %d, expected %d"</literal></expr></argument>,
					<argument><expr><name>totalRepeatCountsSize</name></expr></argument>,
					<argument><expr><name><name>rleExtension</name><operator>-&gt;</operator><name>repeatcounts_size</name></name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>expectedNullOnCount</name> <operator>=</operator>
			<name><name>blockDense</name><operator>-&gt;</operator><name>logical_row_count</name></name> <operator>-</operator>
			<name><name>rleExtension</name><operator>-&gt;</operator><name>compress_bitmap_count</name></name> <operator>-</operator>
			<name>totalRepeatCount</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasNull</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>actualNullOnCount</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>expectedNullOnCount</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Logical row count, COMPRESS bit-map count, and total repeat count for RLE_TYPE compression do not add up properly. Found %d, expected %d. "</literal>
								<literal type="string">"(logical row count %d, COMPRESS bit-map count %d, total repeat count %d)"</literal></expr></argument>,
								<argument><expr><name>actualNullOnCount</name></expr></argument>,
								<argument><expr><name>expectedNullOnCount</name></expr></argument>,
								<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>,
								<argument><expr><name><name>rleExtension</name><operator>-&gt;</operator><name>compress_bitmap_count</name></name></expr></argument>,
								<argument><expr><name>totalRepeatCount</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>actualNullOnCount</name> <operator>!=</operator> <name>expectedNullOnCount</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"NULL bit-map ON count for RLE_TYPE compression does not match.	Found %d, expected %d. "</literal>
								<literal type="string">"(logical row count %d, COMPRESS bit-map count %d, total repeat count %d)"</literal></expr></argument>,
								<argument><expr><name>actualNullOnCount</name></expr></argument>,
								<argument><expr><name>expectedNullOnCount</name></expr></argument>,
								<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>logical_row_count</name></name></expr></argument>,
								<argument><expr><name><name>rleExtension</name><operator>-&gt;</operator><name>compress_bitmap_count</name></name></expr></argument>,
								<argument><expr><name>totalRepeatCount</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetailCallback</name><argument_list>(<argument><expr><name>errdetailArg</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontextCallback</name><argument_list>(<argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* UNDONE: Verify zero padding */</comment>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>hasDeltaCompression</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>DatumStreamBlock_IntegrityCheckDenseDelta</name><argument_list>(
												  <argument><expr><name>deltaExtension</name></expr></argument>,
												  <argument><expr><name>p</name></expr></argument>,
												  <argument><expr><name>bufferSize</name></expr></argument>,
												  <argument><expr><name>headerSize</name></expr></argument>,
												  <argument><expr><name>rleExtension</name></expr></argument>,
												  <argument><expr><name>errdetailCallback</name></expr></argument>,
												  <argument><expr><name>errdetailArg</name></expr></argument>,
												  <argument><expr><name>errcontextCallback</name></expr></argument>,
												  <argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>typeInfo</name><operator>-&gt;</operator><name>datumlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Variable-length items.
		 */</comment>

		<expr_stmt><expr><call><name>DatumStreamBlock_IntegrityCheckVarlena</name><argument_list>(
											   <argument><expr><name>buffer</name> <operator>+</operator> <name>alignedHeaderSize</name></expr></argument>,
											   <argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>physical_data_size</name></name></expr></argument>,
											<argument><expr><name><name>blockDense</name><operator>-&gt;</operator><name>orig_4_bytes</name><operator>.</operator><name>version</name></name></expr></argument>,
											   <argument><expr><name>typeInfo</name></expr></argument>,
											   <argument><expr><name>errdetailCallback</name></expr></argument>,
											   <argument><expr><name>errdetailArg</name></expr></argument>,
											   <argument><expr><name>errcontextCallback</name></expr></argument>,
											   <argument><expr><name>errcontextArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>DatumStreamVersion_String</name><parameter_list>(<parameter><decl><type><name>DatumStreamVersion</name></type> <name>datumStreamVersion</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>datumStreamVersion</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DatumStreamVersion_Original</name></expr>:</case>
			<return>return <expr><literal type="string">"Original"</literal></expr>;</return>
		<case>case <expr><name>DatumStreamVersion_Dense</name></expr>:</case>
			<return>return <expr><literal type="string">"Dense"</literal></expr>;</return>
		<case>case <expr><name>DatumStreamVersion_Dense_Enhanced</name></expr>:</case>
			<return>return <expr><literal type="string">"Dense_Enhanced"</literal></expr>;</return>
		<default>default:</default>
			<return>return <expr><literal type="string">"Unknown"</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * varlena header info to string.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>VarlenaInfoToBuffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>alignment</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <call><name>INTALIGN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>p</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>varatt_external</name></name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><operator>(</operator>struct <name>varatt_external</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>externalIsCompressed</name> <init>= <expr><operator>(</operator><name><name>ext</name><operator>-&gt;</operator><name>va_extsize</name></name> <operator>!=</operator> <name><name>ext</name><operator>-&gt;</operator><name>va_rawsize</name></name> <operator>-</operator> <name>VARHDRSZ</name><operator>)</operator></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
			 <argument><expr><literal type="string">"external (header ptr %p, header alignment %u, header 0x%.8x): "</literal>
				<literal type="string">"va_rawsize: %d, va_extsize %d, valueid %u, toastrelid %u (compressed %s)"</literal></expr></argument>,
				<argument><expr><name>p</name></expr></argument>,
				<argument><expr><name>alignment</name></expr></argument>,
				<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <name>p</name><operator>)</operator></expr></argument>,
				<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>va_rawsize</name></name></expr></argument>,
				<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>va_extsize</name></name></expr></argument>,
				<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>va_valueid</name></name></expr></argument>,
				<argument><expr><name><name>ext</name><operator>-&gt;</operator><name>va_toastrelid</name></name></expr></argument>,
				<argument><expr><operator>(</operator><ternary><condition><expr><name>externalIsCompressed</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>VARATT_IS_SHORT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
				<argument><expr><literal type="string">"short (header ptr %p, header alignment %u, header 0x%.2x): "</literal>
				<literal type="string">"VARSIZE_SHORT %d, VARDATA_SHORT %p"</literal></expr></argument>,
				<argument><expr><name>p</name></expr></argument>,
				<argument><expr><name>alignment</name></expr></argument>,
				<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <name>p</name><operator>)</operator></expr></argument>,
				<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <call><name>VARSIZE_SHORT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>VARDATA_SHORT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>VARATT_IS_COMPRESSED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>varattrib_4b</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><operator>(</operator><name>varattrib_4b</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
		   <argument><expr><literal type="string">"compressed (header ptr %p, header alignment %u, header 0x%.8x): "</literal>
				<literal type="string">"va_rawsize: %d, "</literal>
				<literal type="string">"VARSIZE_ANY %d, VARDATA_ANY %p"</literal></expr></argument>,
				<argument><expr><name>p</name></expr></argument>,
				<argument><expr><name>alignment</name></expr></argument>,
				<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <name>p</name><operator>)</operator></expr></argument>,
				<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <name><name>comp</name><operator>-&gt;</operator><name>va_compressed</name><operator>.</operator><name>va_rawsize</name></name></expr></argument>,
				<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
			  <argument><expr><literal type="string">"regular (header ptr %p, header alignment %u, header 0x%.8x): "</literal>
				<literal type="string">"VARSIZE_ANY %d, VARDATA_ANY %p"</literal></expr></argument>,
				<argument><expr><name>p</name></expr></argument>,
				<argument><expr><name>alignment</name></expr></argument>,
				<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <name>p</name><operator>)</operator></expr></argument>,
				<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>varlenaInfoBuffer</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>VarlenaInfoToString</name><parameter_list>(<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>VarlenaInfoToBuffer</name><argument_list>(<argument><expr><name>varlenaInfoBuffer</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
