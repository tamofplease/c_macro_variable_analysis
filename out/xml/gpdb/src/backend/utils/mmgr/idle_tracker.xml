<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/mmgr/idle_tracker.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * idle_tracker.c
 *	 Implementation of the idle tracker that tracks whether a process is idle
 *	 (and therefore is incapable of responding to a runaway cleanup event).
 *	 This module coordinates with the runaway cleaner to ensure that an active
 *	 process cannot become idle before cleaning up for a pending runaway event.
 *
 * Copyright (c) 2014-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/utils/mmgr/idle_tracker.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/session_state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/vmem_tracker.h"</cpp:file></cpp:include>

<comment type="block">/* External dependencies within the runaway cleanup framework */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>vmemTrackerInited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>volatile</specifier> <name>EventVersion</name> <modifier>*</modifier></type><name>CurrentVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>volatile</specifier> <name>EventVersion</name> <modifier>*</modifier></type><name>latestRunawayVersion</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>RunawayCleaner_StartCleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>RunawayCleaner_IsCleanupInProgress</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<comment type="block">/* The event version when this process was last activated */</comment>
<decl_stmt><decl><type><name>EventVersion</name></type> <name>activationVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* The event version when this process was last deactivated */</comment>
<decl_stmt><decl><type><name>EventVersion</name></type> <name>deactivationVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Is this process active (i.e., contributing 1 to activeProcessCount of the MySessionState).
 * As the activation/deactivation version can overlap in case there was no
 * runaway event in between activation and deactivation, this boolean flag
 * will indicate whether the activation or the deactivation event happened last.
 */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>isProcessActive</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>IdleTracker_ShmemInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>IdleTracker_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>IdleTracker_Shutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Initializes the idle tracker's shared memory states.
 */</comment>
<function><type><name>void</name></type>
<name>IdleTracker_ShmemInit</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>*</operator><name>CurrentVersion</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*
		 * Set both activation and deactivation version greater than
		 * latestRunawayVersion so that they consider that runaway
		 * event as irrelevant.
		 */</comment>
		<expr_stmt><expr><name>activationVersion</name> <operator>=</operator> <operator>*</operator><name>CurrentVersion</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>deactivationVersion</name> <operator>=</operator> <operator>*</operator><name>CurrentVersion</name></expr>;</expr_stmt>
		<comment type="block">/* We will soon activate it, once the IdleTracker_Init() is called */</comment>
		<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initializes the per-process states of the idle tracker.
 */</comment>
<function><type><name>void</name></type>
<name>IdleTracker_Init</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>vmemTrackerInited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isProcessActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Every process comes as pre-activated. */</comment>
	<expr_stmt><expr><call><name>IdleTracker_ActivateProcess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Deactivates and shuts down the idle tracker.
 */</comment>
<function><type><name>void</name></type>
<name>IdleTracker_Shutdown</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>vmemTrackerInited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Unsubscribe this process from future runaway cleanup consideration
	 * and cleanup one last time if necessary
	 */</comment>
	<expr_stmt><expr><call><name>IdleTracker_DeactivateProcess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isProcessActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Marks the current process as active to the runaway detector. The runaway
 * detector needs at least one active process that can cleanup, if flagged as
 * runaway. If all the processes are idle, the session is incapable of responding
 * to a runaway cleanup request, and therefore is not considered a runaway
 * candidate by the runaway detector.
 */</comment>
<function><type><name>void</name></type>
<name>IdleTracker_ActivateProcess</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>MySessionState</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isProcessActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* No new runaway event can come in */</comment>
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MySessionState</name><operator>-&gt;</operator><name>spinLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* No atomic update necessary as the update is protected by spin lock */</comment>
		<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>activationVersion</name> <operator>=</operator> <operator>*</operator><name>CurrentVersion</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>activationVersion</name> <operator>&gt;=</operator> <name>deactivationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*
		 * Release spinLock as we no longer contend for isRunaway.
		 */</comment>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MySessionState</name><operator>-&gt;</operator><name>spinLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Marks the current process as idle; i.e., it is no longer able to respond
 * to a runaway cleanup. However, before it returns from this method, it
 * would trigger one last runaway cleanup for a pre-dactivation era runaway
 * event, if necessary.
 */</comment>
<function><type><name>void</name></type>
<name>IdleTracker_DeactivateProcess</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>MySessionState</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Verify that deactivation during proc_exit_inprogress is protected in
		 * critical section or the interrupt is disabled so that we don't attempt
		 * any runaway cleanup
		 */</comment>
		<expr_stmt><expr><call><name>AssertImply</name><argument_list>(<argument><expr><name>proc_exit_inprogress</name></expr></argument>, <argument><expr><name>CritSectionCount</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>InterruptHoldoffCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * When an idle process receives a SIGTERM process, the signal handler
		 * die() calls the cleanup directly, so we get here for an idle process.
		 * Instead of re-activating it forcefully, just special case it
		 * and don't do anything during process exit for already inactive processes.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>proc_exit_inprogress</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>isProcessActive</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>deactivationVersion</name> <operator>&gt;=</operator> <name>activationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>isProcessActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>deactivationVersion</name> <operator>&lt;=</operator> <name>activationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* No new runaway event can come in */</comment>
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MySessionState</name><operator>-&gt;</operator><name>spinLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>&lt;=</operator> <name><name>MySessionState</name><operator>-&gt;</operator><name>pinCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* No atomic update necessary as the update is protected by spin lock */</comment>
		<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>idle_start</name></name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<comment type="block">/* Save the point where we reduced the activeProcessCount */</comment>
		<expr_stmt><expr><name>deactivationVersion</name> <operator>=</operator> <operator>*</operator><name>CurrentVersion</name></expr>;</expr_stmt>
		<comment type="block">/*
		 * Release spinLock as we no longer contend for isRunaway.
		 */</comment>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MySessionState</name><operator>-&gt;</operator><name>spinLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * We are still deactivated (i.e., activeProcessCount is decremented). If an ERROR is indeed thrown
		 * from the VmemTracker_StartCleanupIfRunaway, the VmemTracker_RunawayCleanupDoneForProcess()
		 * method would reactivate this process.
		 */</comment>
		<expr_stmt><expr><call><name>RunawayCleaner_StartCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* At this point the process must be clean, unless we don't have a runaway event before deactivation */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>*</operator><name>latestRunawayVersion</name> <operator>&gt;</operator> <name>deactivationVersion</name> <operator>||</operator>
				<operator>!</operator><call><name>RunawayCleaner_IsCleanupInProgress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* At this point the process is ready to be blocked in ReadCommand() */</comment>
</block_content>}</block></function>
</unit>
