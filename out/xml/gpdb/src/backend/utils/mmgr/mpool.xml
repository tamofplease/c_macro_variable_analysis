<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/mmgr/mpool.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * mpool.c
 *	  Fast memory pool to manage lots of variable sizes of objects. This pool
 *    does not support free individual objects, but you can release all
 *    objects as a whole.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>elog x</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PRINT</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>  

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPOOL_BLOCK_SIZE</name></cpp:macro> <cpp:value>(64 * 1024)</cpp:value></cpp:define>

<struct>struct <name>MPool</name> 
<block>{
	<decl_stmt><decl><type><name>MemoryContextData</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContextData</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Total number of bytes are allocated through the memory
	 * context.
	 */</comment>
	<decl_stmt><decl><type><name>uint64</name></type> <name>total_bytes_allocated</name></decl>;</decl_stmt>

	<comment type="block">/* How many bytes are used by the caller. */</comment>
	<decl_stmt><decl><type><name>uint64</name></type> <name>bytes_used</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * When a new allocation request arrives, and the current block
	 * does not have enough space for this request, we waste those
	 * several bytes at the end of the block. This variable stores
	 * total number of these wasted bytes.
	 */</comment>
	<decl_stmt><decl><type><name>uint64</name></type> <name>bytes_wasted</name></decl>;</decl_stmt>

	<comment type="block">/* The latest allocated block of available space. */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mpool_init</name><parameter_list>(<parameter><decl><type><name>MPool</name> <modifier>*</modifier></type><name>mpool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>mpool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mpool</name><operator>-&gt;</operator><name>total_bytes_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mpool</name><operator>-&gt;</operator><name>bytes_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mpool</name><operator>-&gt;</operator><name>bytes_wasted</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mpool</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mpool</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Create a MPool object and initialize its variables.
 */</comment>
<function><type><name>MPool</name> <modifier>*</modifier></type>
<name>mpool_create_with_context</name><parameter_list>(<parameter><decl><type><name>MemoryContext</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MPool</name> <modifier>*</modifier></type><name>mpool</name> <init>= <expr><call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MPool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mpool</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mpool</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mpool_init</name><argument_list>(<argument><expr><name>mpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>mpool</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return a pointer to a space with the given 'size'.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>mpool_alloc</name><parameter_list>(<parameter><decl><type><name>MPool</name> <modifier>*</modifier></type><name>mpool</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_space</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>mpool</name><operator>-&gt;</operator><name>start</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
		<operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mpool</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mpool</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Size</name></type> <name>alloc_size</name></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name><name>mpool</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>mpool</name><operator>-&gt;</operator><name>end</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>mpool</name><operator>-&gt;</operator><name>bytes_wasted</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mpool</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mpool</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><name>alloc_size</name> <operator>=</operator> <name>MPOOL_BLOCK_SIZE</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>MPOOL_BLOCK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>alloc_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>mpool</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name><name>mpool</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>alloc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mpool</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mpool</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name>alloc_size</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>mpool</name><operator>-&gt;</operator><name>total_bytes_allocated</name></name> <operator>+=</operator> <name>alloc_size</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>mpool</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>mpool</name><operator>-&gt;</operator><name>end</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		   <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mpool</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mpool</name><operator>-&gt;</operator><name>start</name></name> <operator>&gt;=</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>alloc_space</name> <operator>=</operator> <name><name>mpool</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mpool</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mpool</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>mpool</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;=</operator> <name><name>mpool</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>mpool</name><operator>-&gt;</operator><name>bytes_used</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

	<return>return <expr><name>alloc_space</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Release all objects in the pool, and reset the memory context.
 */</comment>
<function><type><name>void</name></type>
<name>mpool_reset</name><parameter_list>(<parameter><decl><type><name>MPool</name> <modifier>*</modifier></type><name>mpool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>mpool</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>mpool</name><operator>-&gt;</operator><name>context</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>MemoryContextIsValid</name><argument_list>(<argument><expr><name><name>mpool</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"MPool: total_bytes_allocated="</literal> <name>INT64_FORMAT</name> 
		 <literal type="string">", bytes_used="</literal> <name>INT64_FORMAT</name> <literal type="string">", bytes_wasted="</literal> <name>INT64_FORMAT</name></expr></argument>,
		 <argument><expr><name><name>mpool</name><operator>-&gt;</operator><name>total_bytes_allocated</name></name></expr></argument>, <argument><expr><name><name>mpool</name><operator>-&gt;</operator><name>bytes_used</name></name></expr></argument>,
		 <argument><expr><name><name>mpool</name><operator>-&gt;</operator><name>bytes_wasted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name><name>mpool</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mpool_init</name><argument_list>(<argument><expr><name>mpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Delete the MPool object and its related space.
 */</comment>
<function><type><name>void</name></type>
<name>mpool_delete</name><parameter_list>(<parameter><decl><type><name>MPool</name> <modifier>*</modifier></type><name>mpool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>mpool</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>mpool</name><operator>-&gt;</operator><name>context</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>MemoryContextIsValid</name><argument_list>(<argument><expr><name><name>mpool</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>mpool_reset</name><argument_list>(<argument><expr><name>mpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>mpool</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>mpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>uint64</name></type> <name>mpool_total_bytes_allocated</name><parameter_list>(<parameter><decl><type><name>MPool</name> <modifier>*</modifier></type><name>mpool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>mpool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>mpool</name><operator>-&gt;</operator><name>total_bytes_allocated</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64</name></type> <name>mpool_bytes_used</name><parameter_list>(<parameter><decl><type><name>MPool</name> <modifier>*</modifier></type><name>mpool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>mpool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>mpool</name><operator>-&gt;</operator><name>bytes_used</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
