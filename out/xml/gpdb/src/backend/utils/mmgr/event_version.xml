<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/mmgr/event_version.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * event_version.c
 *	 Implementation of the event version provider. This module does not provide
 *	 any API. Instead it just sets up shared memory variables so that other
 *	 modules can track and update event versions as necessary. Event versions
 *	 are used to provide a temporal ordering of runaway events and cleanup events,
 *	 as well as the idle and the activation events of different processes.
 *
 * Copyright (c) 2014-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/utils/mmgr/event_version.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/vmem_tracker.h"</cpp:file></cpp:include>

<comment type="block">/* External dependencies within the runaway cleanup framework */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>vmemTrackerInited</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHMEM_EVENT_VERSION_PROVIDER</name></cpp:macro> <cpp:value>"The shared counter for event version provider"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHMEM_RUNAWAY_EVENT_VERSION</name></cpp:macro> <cpp:value>"Most recent runaway detection version"</cpp:value></cpp:define>

<comment type="block">/*
 * A shared memory counter that provides a set of monotonically
 * increasing values. The counter is only incremented by the runaway
 * detector, at the time of a new runaway event. In fact, at the time
 * of runaway event, the detector would increment it by 2, using the
 * skipped value as the version of the runaway event. This ensures
 * that the runaway version doesn't overlap with any other version
 * as used by other processes on the segment as activation and
 * deactivation version.
 *
 * The current version would be used by processes during activation
 * or deactivation to identify when it becmes idle/active.
 */</comment>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>EventVersion</name> <modifier>*</modifier></type><name>CurrentVersion</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* The event version of the latest runaway event */</comment>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>EventVersion</name> <modifier>*</modifier></type><name>latestRunawayVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>EventVersion_ShmemInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Initializes the event version provider's shared memory states.
 */</comment>
<function><type><name>void</name></type>
<name>EventVersion_ShmemInit</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>vmemTrackerInited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type>		<name>alreadyInShmem</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>CurrentVersion</name> <operator>=</operator> <operator>(</operator><name>EventVersion</name> <operator>*</operator><operator>)</operator>
								<call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>SHMEM_EVENT_VERSION_PROVIDER</name></expr></argument>,
										<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EventVersion</name></expr></argument>)</argument_list></sizeof></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>alreadyInShmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>alreadyInShmem</name> <operator>||</operator> <operator>!</operator><name>IsUnderPostmaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>(</operator><name>EventVersion</name> <operator>*</operator><operator>)</operator>
								<call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>SHMEM_RUNAWAY_EVENT_VERSION</name></expr></argument>,
										<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EventVersion</name></expr></argument>)</argument_list></sizeof></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>alreadyInShmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>alreadyInShmem</name> <operator>||</operator> <operator>!</operator><name>IsUnderPostmaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>CurrentVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>latestRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>latestRunawayVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<comment type="block">/*
		 * As no runaway event has happened yet, we must make sure that
		 * the CurrentVersion is larger than latestRunawayVersion
		 */</comment>
		<expr_stmt><expr><operator>*</operator><name>CurrentVersion</name> <operator>=</operator> <operator>*</operator><name>latestRunawayVersion</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
