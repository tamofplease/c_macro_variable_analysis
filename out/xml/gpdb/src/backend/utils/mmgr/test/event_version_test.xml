<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/mmgr/test/event_version_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../event_version.c"</cpp:file></cpp:include>

<comment type="block">/*
 * Checks if EventVersion_ShmemInit attaches the global pointers and initializes
 * the versions as a postmaster
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__EventVersion_ShmemInit__AttachesPointersAndInitializesValuesWhenPostmaster</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>CurrentVersion</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeCurrentVersion</name> <init>= <expr><literal type="number">123</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">123</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fakeCurrentVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Simulate Postmaster */</comment>
	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EventVersion_ShmemInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The pointers should always be attached to the share memory area
	 * no matter whether its postmaster or under postmaster
	 */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>CurrentVersion</name> <operator>==</operator> <operator>&amp;</operator><name>fakeCurrentVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>latestRunawayVersion</name> <operator>==</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* As we are postmaster, we should also initialize the versions */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>CurrentVersion</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>latestRunawayVersion</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if EventVersion_ShmemInit attaches the global pointers and but does not
 * initialize the versions when under postmaster
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__EventVersion_ShmemInit__AttachesPointersWhenUnderPostmaster</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>CurrentVersion</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeCurrentVersion</name> <init>= <expr><literal type="number">123</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">123</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fakeCurrentVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Simulate Postmaster */</comment>
	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EventVersion_ShmemInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The pointers should always be attached to the share memory area
	 * no matter whether its postmaster or under postmaster
	 */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>CurrentVersion</name> <operator>==</operator> <operator>&amp;</operator><name>fakeCurrentVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>latestRunawayVersion</name> <operator>==</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* As we are under postmaster, we don't re-initialize the versions */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>CurrentVersion</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>latestRunawayVersion</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
            	<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__EventVersion_ShmemInit__AttachesPointersAndInitializesValuesWhenPostmaster</name></expr></argument>)</argument_list></call></expr>,
            	<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__EventVersion_ShmemInit__AttachesPointersWhenUnderPostmaster</name></expr></argument>)</argument_list></call></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
