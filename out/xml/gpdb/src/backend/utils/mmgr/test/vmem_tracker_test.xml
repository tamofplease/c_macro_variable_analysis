<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/mmgr/test/vmem_tracker_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../vmem_tracker.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_EXCEPTION</name><parameter_list>()</parameter_list></cpp:macro>     \
	<cpp:value>expect_any(ExceptionalCondition,conditionName); \
	expect_any(ExceptionalCondition,errorType); \
	expect_any(ExceptionalCondition,fileName); \
	expect_any(ExceptionalCondition,lineNumber); \
    will_be_called_with_sideeffect(ExceptionalCondition, &amp;_ExceptionalCondition, NULL);\

#define SEGMENT_VMEM_CHUNKS_TEST_VALUE 100</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PG_RE_THROW</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_RE_THROW</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>siglongjmp(*PG_exception_stack, 1)</cpp:value></cpp:define>

<comment type="block">/*
 * This method will emulate the real ExceptionalCondition
 * function by re-throwing the exception, essentially falling
 * back to the next available PG_CATCH();
 */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>_ExceptionalCondition</name><parameter_list>()</parameter_list>
<block>{<block_content>
     <expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* segmentVmemChunks pointer uses the address of this global variable */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int32</name></type> <name>fakeSegmentVmemChunks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * A global variable to save the trackedBytes just before VmemTracker_ReserveVmem
 * is called. Can be used to check the sanity of trackedBytes during a
 * RedZoneHandler_DetectRunawaySession call
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int64</name></type> <name>preAllocTrackedBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* MySessionState will use the address of this global variable */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>SessionState</name></type> <name>fakeSessionState</name></decl>;</decl_stmt>

<comment type="block">/* segmentOOMTime pointer uses the address of this global variable */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>OOMTimeType</name></type> <name>fakeSegmentOOMTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Prepares a fake MySessionState pointer for use in the vmem tracker */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>InitFakeSessionState</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>MySessionState</name> <operator>=</operator> <operator>&amp;</operator><name>fakeSessionState</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>=</operator> <name>RunawayStatus_NotRunaway</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>pinCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>=</operator> <literal type="number">1234</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>sessionVmem</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>spinLock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Resets the OOM event state */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>OOMEventSetup</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>segmentOOMTime</name> <operator>=</operator> <operator>&amp;</operator><name>fakeSegmentOOMTime</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>segmentOOMTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>oomTrackerStartTime</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>alreadyReportedOOMTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This method sets up necessary data structures such as
 * fake session state, segmentVmemChunks etc. for testing
 * vmem tracker.
 */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>VmemTrackerTestSetup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>OOMEventSetup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 8GB default VMEM */</comment>
	<expr_stmt><expr><name>gp_vmem_protect_limit</name> <operator>=</operator> <literal type="number">8192</literal></expr>;</expr_stmt>
	<comment type="block">/* Disable runaway detector */</comment>
	<expr_stmt><expr><name>runaway_detector_activation_percent</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fakeSegmentVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>EventVersion_ShmemInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RedZoneHandler_ShmemInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>IdleTracker_ShmemInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Keep the assertion happy and also initialize everything */</comment>
	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmemTracker_ShmemInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>IdleTracker_Init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RunawayCleaner_Init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmemTracker_Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Make sure the VMEM enforcement would work */</comment>
	<expr_stmt><expr><name>Gp_role</name> <operator>=</operator> <name>GP_ROLE_EXECUTE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>CritSectionCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This method cleans up vmem tracker data structures after a test run.
 */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>VmemTrackerTestTeardown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>MemoryProtection_IsOwnerThread</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>IdleTracker_Shutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmemTracker_Shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if the vmem tracker can be disabled (no further reservation)
 */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>test__VmemTracker_ReserveVmem__IgnoreWhenUninitialized</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>preAllocChunks</name> <init>= <expr><name>trackedVmemChunks</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Allocate 10MB */</comment>
	<expr_stmt><expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* As vmemTracker is not initialized, new reservation should not happen */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>preAllocChunks</name> <operator>==</operator> <name>trackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Checks if the reservation fails for negative size request */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>test__VmemTracker_ReserveVmem__FailForInvalidSize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>EXPECT_EXCEPTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<comment type="block">/* The min size is 0. So, negative size should fail. */</comment>
		<expr_stmt><expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * Checks the effectiveness of the cache.
 *
 * This will test the following:
 *
 * 1. Cache satisfiable reservations use cache
 * 2. Insufficient cache triggers new reservation (i.e., increase cache)
 * 3. Freeing would leave unused cache, that can be reused later
 */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>test__VmemTracker_ReserveVmem__CacheSanity</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* GPDB Memory protection is enabled and initialized */</comment>
	<expr_stmt><expr><name>gp_mp_inited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int64</name></type> <name>oneChunkBytes</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>chunkSizeInBits</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <name>trackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>MemoryProtection_IsOwnerThread</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<decl_stmt><decl><type><name>int64</name></type> <name>prevTrackedBytes</name> <init>= <expr><name>trackedBytes</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RedZoneHandler_DetectRunawaySession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* This triggers one chunk allocation */</comment>
	<expr_stmt><expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><name>oneChunkBytes</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>==</operator> <name>trackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>prevTrackedBytes</name> <operator>+</operator> <name>oneChunkBytes</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>trackedBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int64</name></type> <name>twoChunkBytes</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>oneChunkBytes</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/*
	 * This will not trigger a new chunk reservation: previously we allocated
	 * (oneChunkBytes + 1) and up to (twoChunkBytes - 1) we will not need a
	 * new chunk (as we already had an extra chunk - 1). The difference is
	 * the amount up to which we can allocate without any new chunk reservation
	 */</comment>
	<expr_stmt><expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><name>twoChunkBytes</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>oneChunkBytes</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>==</operator> <name>trackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RedZoneHandler_DetectRunawaySession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* This will trigger a new chunk reservation */</comment>
	<expr_stmt><expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>==</operator> <name>trackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* This will satisfy from the cache */</comment>
	<expr_stmt><expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><name>oneChunkBytes</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>==</operator> <name>trackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RedZoneHandler_DetectRunawaySession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * This will trigger three new chunk reservation: we exhausted previous reservation,
	 * and now we are asking for two new chunks + 1 extra bytes, which translates to 3
	 * chunks, where the last chunk only has 1 byte used.
	 */</comment>
	<expr_stmt><expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><name>twoChunkBytes</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>==</operator> <name>trackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Free one chunk. */</comment>
	<expr_stmt><expr><call><name>VmemTracker_ReleaseVmem</name><argument_list>(<argument><expr><name>oneChunkBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>==</operator> <name>trackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><name>oneChunkBytes</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>==</operator> <name>trackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Still not reserving any additional chunks */</comment>
	<expr_stmt><expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><name>oneChunkBytes</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>==</operator> <name>trackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RedZoneHandler_DetectRunawaySession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* 1 more byte, and we need a new chunk */</comment>
	<expr_stmt><expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>==</operator> <name>trackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks the sanity of the tracked bytes.
 *
 * This will test the following:
 *
 * 1. If within segment and session limit, the request will be honored and
 *    the tracked bytes will be increased accordingly
 * 2. If request exceeds segment or session limit, it will not be honored
 *    and the trackedBytes will be unchanged
 * 3. For failure due to exceeding either segment or session limit, we will
 *    error out with proper error type (i.e., if segment limit is smaller than
 *    session limit, we will hit segment limit first, or vice versa)
 * 4. For equal segment and session limit we will hit the session limit first.
 */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>test__VmemTracker_ReserveVmem__TrackedBytesSanity</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* GPDB Memory protection is enabled and initialized */</comment>
	<expr_stmt><expr><name>gp_mp_inited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Session quota is disabled */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <name>maxChunksPerQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>MemoryProtection_IsOwnerThread</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RedZoneHandler_DetectRunawaySession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>MemoryAllocationStatus</name></type> <name>status</name> <init>= <expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><name>vmemChunksQuota</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <name>MemoryAllocation_Success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedVmemChunks</name> <operator>==</operator> <name>vmemChunksQuota</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedBytes</name> <operator>==</operator> <call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><name>vmemChunksQuota</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>chunksReserved</name> <init>= <expr><name>trackedVmemChunks</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* No new chunk should have been reserved */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>chunksReserved</name> <operator>==</operator> <name>trackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* This will be over the vmem limit */</comment>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RedZoneHandler_DetectRunawaySession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* 1 more byte, and we need a new chunk */</comment>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <name>MemoryFailure_VmemExhausted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedVmemChunks</name> <operator>==</operator> <name>vmemChunksQuota</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedBytes</name> <operator>==</operator> <call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><name>vmemChunksQuota</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>VmemTracker_ReleaseVmem</name><argument_list>(<argument><expr><name>trackedBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <name>trackedBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Enable session quota and set it to vmemChunksQuota */</comment>
	<expr_stmt><expr><name>maxChunksPerQuery</name> <operator>=</operator> <name>vmemChunksQuota</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RedZoneHandler_DetectRunawaySession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* This will first hit the session limit */</comment>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><name>vmemChunksQuota</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <name>MemoryFailure_QueryMemoryExhausted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedVmemChunks</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedBytes</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Enable session quota and set it to more than vmemChunksQuota */</comment>
	<expr_stmt><expr><name>maxChunksPerQuery</name> <operator>=</operator> <name>vmemChunksQuota</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RedZoneHandler_DetectRunawaySession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* This will first hit the vmem limit */</comment>
	<comment type="block">/* 1 more byte, and we need a new chunk */</comment>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><name>vmemChunksQuota</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <name>MemoryFailure_VmemExhausted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedVmemChunks</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedBytes</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Helper method to check if trackedBytes is rolled back before
 * calling RedZoneHandler_DetectRunawaySession.
 *
 * This method assumes a non-zero trackedBytes. So, the caller must
 * pre-allocate some memory before attempting to verify rollback of
 * trackedBytes during runaway detector for a particular reservation.
 */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>RedZoneHandler_DetectRunawaySession_TrackedBytesSanity</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>!=</operator> <name>trackedBytes</name> <operator>&amp;&amp;</operator> <name>trackedBytes</name> <operator>==</operator> <name>preAllocTrackedBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if we undo tracked bytes before calling red-zone detector and whether
 * we redo tracked bytes once the call returns
 */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>test__VmemTracker_ReserveVmem__TrackedBytesSanityForRedzoneDetection</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* GPDB Memory protection is enabled and initialized */</comment>
	<expr_stmt><expr><name>gp_mp_inited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>MemoryProtection_IsOwnerThread</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RedZoneHandler_DetectRunawaySession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* This will first hit the vmem limit */</comment>
	<comment type="block">/* 1 more byte, and we need a new chunk */</comment>
	<expr_stmt><expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>==</operator> <name>trackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called_with_sideeffect</name><argument_list>(<argument><expr><name>RedZoneHandler_DetectRunawaySession</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>RedZoneHandler_DetectRunawaySession_TrackedBytesSanity</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>preAllocTrackedBytes</name> <operator>=</operator> <name>trackedBytes</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>==</operator> <name>trackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>preAllocTrackedBytes</name> <operator>+</operator> <call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>trackedBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Checks if we call OOM logger before reserving any new VMEM */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>test__VmemTracker_ReserveVmem__OOMLoggingBeforeReservation</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>gp_mp_inited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OOMTimeType</name></type> <name>tempOOMtime</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>segmentOOMTime</name> <operator>=</operator> <operator>&amp;</operator><name>tempOOMtime</name></expr>;</expr_stmt>
	<comment type="block">/* Make *segmentOOMTime &gt; oomTrackerStartTime and alreadyReportedOOMTime */</comment>
	<expr_stmt><expr><operator>*</operator><name>segmentOOMTime</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>oomTrackerStartTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>alreadyReportedOOMTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Verify that we are actually trying to log OOM */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>UpdateTimeAtomically</name></expr></argument>, <argument><expr><name>time_var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alreadyReportedOOMTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>UpdateTimeAtomically</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>write_stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>write_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>MemoryContextStats</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>MemoryContextStats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 1 for OOM logging and 1 for VmemTracker_ReserveVmemChunks() */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>MemoryProtection_IsOwnerThread</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RedZoneHandler_DetectRunawaySession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>==</operator> <name>trackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if we attach segmentVmemLimit properly, without changing the value
 * of the limit, when under postmaster
 */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>test__VmemTracker_ShmemInit__InitSegmentVmemLimitUnderPostmaster</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Keep the assertions happy */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>chunkSizeInBits</name> <operator>=</operator> <name>BITS_IN_MB</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>int32</name></type> <name>tempSegmentVmemChunks</name> <init>= <expr><name>SEGMENT_VMEM_CHUNKS_TEST_VALUE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tempSegmentVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>segmentVmemChunks</name> <operator>==</operator> <operator>&amp;</operator><name>fakeSegmentVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * When under postmaster, we don't reinitialize the segmentVmemChunks, we just
	 * attach to it
	 */</comment>
	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmemTracker_ShmemInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>segmentVmemChunks</name> <operator>==</operator> <operator>&amp;</operator><name>tempSegmentVmemChunks</name> <operator>&amp;&amp;</operator>
			<name>segmentVmemChunks</name> <operator>!=</operator> <operator>&amp;</operator><name>fakeSegmentVmemChunks</name> <operator>&amp;&amp;</operator>
			<operator>*</operator><name>segmentVmemChunks</name> <operator>==</operator> <name>SEGMENT_VMEM_CHUNKS_TEST_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>vmemTrackerInited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if we attach segmentVmemLimit properly and initialize it to 0.
 */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>test__VmemTracker_ShmemInit__InitSegmentVmemLimitInPostmaster</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Keep the assertions happy */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>chunkSizeInBits</name> <operator>=</operator> <name>BITS_IN_MB</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int32</name></type> <name>tempSegmentVmemChunks</name> <init>= <expr><name>SEGMENT_VMEM_CHUNKS_TEST_VALUE</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tempSegmentVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>segmentVmemChunks</name> <operator>==</operator> <operator>&amp;</operator><name>fakeSegmentVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>EventVersion_ShmemInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RedZoneHandler_ShmemInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>IdleTracker_ShmemInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * When not under postmaster, we don't reinitialize the segmentVmemChunks, we just
	 * attach to it
	 */</comment>
	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmemTracker_ShmemInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>segmentVmemChunks</name> <operator>==</operator> <operator>&amp;</operator><name>tempSegmentVmemChunks</name> <operator>&amp;&amp;</operator>
			<name>segmentVmemChunks</name> <operator>!=</operator> <operator>&amp;</operator><name>fakeSegmentVmemChunks</name> <operator>&amp;&amp;</operator>
			<operator>*</operator><name>segmentVmemChunks</name> <operator>!=</operator> <name>SEGMENT_VMEM_CHUNKS_TEST_VALUE</name> <operator>&amp;&amp;</operator>
			<operator>*</operator><name>segmentVmemChunks</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>vmemTrackerInited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Helper method to set the segment and session vmem limit to desired values */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>SetVmemLimit</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>newSegmentVmemLimitMB</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>newSessionVmemLimitMB</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int32</name></type> <name>tempSegmentVmemChunks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Keep the assertions happy */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>chunkSizeInBits</name> <operator>=</operator> <name>BITS_IN_MB</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tempSegmentVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>EventVersion_ShmemInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RedZoneHandler_ShmemInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>IdleTracker_ShmemInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>gp_vmem_protect_limit</name> <operator>=</operator> <name>newSegmentVmemLimitMB</name></expr>;</expr_stmt>
	<comment type="block">/* Session vmem limit is in kB unit */</comment>
	<expr_stmt><expr><name>gp_vmem_limit_per_query</name> <operator>=</operator> <name>newSessionVmemLimitMB</name> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmemTracker_ShmemInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>chunkSizeInBits</name> <operator>&gt;=</operator> <name>BITS_IN_MB</name> <operator>&amp;&amp;</operator> <name>vmemChunksQuota</name> <operator>==</operator> <call><name>MB_TO_CHUNKS</name><argument_list>(<argument><expr><name>newSegmentVmemLimitMB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>chunkSizeInBits</name> <operator>&gt;=</operator> <name>BITS_IN_MB</name> <operator>&amp;&amp;</operator> <name>maxChunksPerQuery</name> <operator>==</operator> <call><name>MB_TO_CHUNKS</name><argument_list>(<argument><expr><name>newSessionVmemLimitMB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if we correctly calculate segment and session vmem limit.
 * Also checks the chunk size adjustment.
 */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>test__VmemTracker_ShmemInit__QuotaCalculation</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SetVmemLimit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>chunkSizeInBits</name> <operator>==</operator> <name>BITS_IN_MB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>vmemChunksQuota</name> <operator>==</operator> <name>gp_vmem_protect_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>maxChunksPerQuery</name> <operator>==</operator> <operator>(</operator><name>gp_vmem_limit_per_query</name> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SetVmemLimit</name><argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>chunkSizeInBits</name> <operator>==</operator> <name>BITS_IN_MB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>vmemChunksQuota</name> <operator>==</operator> <name>gp_vmem_protect_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>maxChunksPerQuery</name> <operator>==</operator> <operator>(</operator><name>gp_vmem_limit_per_query</name> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SetVmemLimit</name><argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>chunkSizeInBits</name> <operator>==</operator> <name>BITS_IN_MB</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>vmemChunksQuota</name> <operator>==</operator> <name>gp_vmem_protect_limit</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>maxChunksPerQuery</name> <operator>==</operator> <operator>(</operator><name>gp_vmem_limit_per_query</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SetVmemLimit</name><argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>chunkSizeInBits</name> <operator>==</operator> <name>BITS_IN_MB</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>vmemChunksQuota</name> <operator>==</operator> <name>gp_vmem_protect_limit</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>maxChunksPerQuery</name> <operator>==</operator> <operator>(</operator><name>gp_vmem_limit_per_query</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * After one integer division of (32GB + 1) by 2 would still be 16GB, so
	 * only 1 shifting would happen
	 */</comment>
	<expr_stmt><expr><call><name>SetVmemLimit</name><argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>chunkSizeInBits</name> <operator>==</operator> <name>BITS_IN_MB</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>vmemChunksQuota</name> <operator>==</operator> <name>gp_vmem_protect_limit</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>maxChunksPerQuery</name> <operator>==</operator> <operator>(</operator><name>gp_vmem_limit_per_query</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * After one integer division of (32GB + 2) by 2 would still be 16GB + 1, so
	 * 2 shifting would happen
	 */</comment>
	<expr_stmt><expr><call><name>SetVmemLimit</name><argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>chunkSizeInBits</name> <operator>==</operator> <name>BITS_IN_MB</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>vmemChunksQuota</name> <operator>==</operator> <name>gp_vmem_protect_limit</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>maxChunksPerQuery</name> <operator>==</operator> <operator>(</operator><name>gp_vmem_limit_per_query</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SetVmemLimit</name><argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>chunkSizeInBits</name> <operator>==</operator> <name>BITS_IN_MB</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>vmemChunksQuota</name> <operator>==</operator> <name>gp_vmem_protect_limit</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>maxChunksPerQuery</name> <operator>==</operator> <operator>(</operator><name>gp_vmem_limit_per_query</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Reset to default for future test sanity */</comment>
	<expr_stmt><expr><call><name>SetVmemLimit</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if we call *_Init on required sub-modules.
 */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>test__VmemTracker_Init__InitializesOthers</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Keep the assertion happy */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>IdleTracker_Init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RunawayCleaner_Init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmemTracker_Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Now the vmemTrackerInited should be true */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>vmemTrackerInited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* All local vmem tracking counters should be set to 0 */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedVmemChunks</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>maxVmemChunksTracked</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedBytes</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if we release all vmem during shutdown.
 */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>test__VmemTracker_Shutdown__ReleasesAllVmem</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>MemoryProtection_IsOwnerThread</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RedZoneHandler_DetectRunawaySession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>MemoryAllocationStatus</name></type> <name>status</name> <init>= <expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><name>vmemChunksQuota</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <name>MemoryAllocation_Success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedVmemChunks</name> <operator>==</operator> <name>vmemChunksQuota</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>vmemChunksQuota</name> <operator>&amp;&amp;</operator> <name>trackedBytes</name> <operator>==</operator> <call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><name>vmemChunksQuota</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>vmemTrackerInited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedVmemChunks</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>maxVmemChunksTracked</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedBytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>IdleTracker_Shutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmemTracker_Shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>vmemTrackerInited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedVmemChunks</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* maxVmemChunksTracked should not be affected */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>maxVmemChunksTracked</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedBytes</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if waiver works after we exhaust vmem quota. Also checks the resetting
 * of the waiver once the vmem usage falls below vmem quota and a new chunk
 * can be reserved from vmem quota.
 */</comment>
<function><type><specifier>static</specifier>
<name>void</name></type> <name>test__VmemTracker_RequestWaiver__WaiveEnforcement</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>MemoryProtection_IsOwnerThread</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>RedZoneHandler_DetectRunawaySession</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Exhaust everything */</comment>
	<decl_stmt><decl><type><name>MemoryAllocationStatus</name></type> <name>status</name> <init>= <expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><name>vmemChunksQuota</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <name>MemoryAllocation_Success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedVmemChunks</name> <operator>==</operator> <name>vmemChunksQuota</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedBytes</name> <operator>==</operator> <call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><name>vmemChunksQuota</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>oldTrackedVmemChunks</name> <init>= <expr><name>trackedVmemChunks</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>oldTrackedBytes</name> <init>= <expr><name>trackedBytes</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>oldVmemChunksQuota</name> <init>= <expr><name>vmemChunksQuota</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>oldWaivedChunks</name> <init>= <expr><name>waivedChunks</name></expr></init></decl>;</decl_stmt>


	<comment type="block">/* 1 more byte will fail */</comment>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <name>MemoryFailure_VmemExhausted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* No new chunk should have been reserved */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>oldTrackedVmemChunks</name> <operator>==</operator> <name>trackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Requesting just 1 byte should give a whole chunk */</comment>
	<expr_stmt><expr><call><name>VmemTracker_RequestWaiver</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedBytes</name> <operator>==</operator> <name>oldTrackedBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* We don't touch vemChunksQuota directly */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>vmemChunksQuota</name> <operator>==</operator> <name>oldVmemChunksQuota</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* 1 extra waived chunks */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>oldWaivedChunks</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>waivedChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* A whole chunk should now succeed using the additional waiver */</comment>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>MemoryAllocation_Success</name> <operator>==</operator> <name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedBytes</name> <operator>==</operator> <name>oldTrackedBytes</name> <operator>+</operator> <call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldTrackedVmemChunks</name> <operator>=</operator> <name>trackedVmemChunks</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldTrackedBytes</name> <operator>=</operator> <name>trackedBytes</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldWaivedChunks</name> <operator>=</operator> <name>waivedChunks</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldVmemChunksQuota</name> <operator>=</operator> <name>vmemChunksQuota</name></expr>;</expr_stmt>

	<comment type="block">/* This will be over the vmem limit + waived chunks, therefore will fail */</comment>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RedZoneHandler_DetectRunawaySession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* 1 more byte, and we need a new chunk */</comment>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <name>MemoryFailure_VmemExhausted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedVmemChunks</name> <operator>==</operator> <name>oldTrackedVmemChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedBytes</name> <operator>==</operator> <name>oldTrackedBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>waivedChunks</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>oldWaivedChunks</name> <operator>==</operator> <name>waivedChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Enlarge the waived chunks */</comment>
	<expr_stmt><expr><call><name>VmemTracker_RequestWaiver</name><argument_list>(<argument><expr><call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>waivedChunks</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Enlarged waivedChunks should now suffice this reservation request */</comment>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <name>MemoryAllocation_Success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* No reduction in waivedChunks is permitted */</comment>
	<expr_stmt><expr><call><name>VmemTracker_RequestWaiver</name><argument_list>(<argument><expr><call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Should be unchanged to the maximum reserved waiver */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>waivedChunks</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We allocated two additional waiver chunks after exhausting vmemChunksQuota */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedBytes</name> <operator>==</operator> <call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><name>vmemChunksQuota</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We allocated two chunks in the waiver zone after exhausting the quota.
	 * We free those, and 1 additional chunk to test resetting of waiver
	 */</comment>
	<expr_stmt><expr><call><name>VmemTracker_ReleaseVmem</name><argument_list>(<argument><expr><call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* We don't change waiver unless we are able to satisfy the request from the vmemChunksQuota */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>waivedChunks</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>vmemChunksQuota</name> <operator>==</operator> <name>oldVmemChunksQuota</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>trackedVmemChunks</name> <operator>==</operator> <name>vmemChunksQuota</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* This should reset the waivedChunks as a new chunk will be allocated within the vmem limit */</comment>
	<expr_stmt><expr><call><name>VmemTracker_ReserveVmem</name><argument_list>(<argument><expr><call><name>CHUNKS_TO_BYTES</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>waivedChunks</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__VmemTracker_ReserveVmem__IgnoreWhenUninitialized</name></expr></argument>, <argument><expr><name>VmemTrackerTestSetup</name></expr></argument>, <argument><expr><name>VmemTrackerTestTeardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__VmemTracker_ReserveVmem__FailForInvalidSize</name></expr></argument>, <argument><expr><name>VmemTrackerTestSetup</name></expr></argument>, <argument><expr><name>VmemTrackerTestTeardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__VmemTracker_ReserveVmem__CacheSanity</name></expr></argument>, <argument><expr><name>VmemTrackerTestSetup</name></expr></argument>, <argument><expr><name>VmemTrackerTestTeardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__VmemTracker_ReserveVmem__TrackedBytesSanity</name></expr></argument>, <argument><expr><name>VmemTrackerTestSetup</name></expr></argument>, <argument><expr><name>VmemTrackerTestTeardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__VmemTracker_ReserveVmem__TrackedBytesSanityForRedzoneDetection</name></expr></argument>, <argument><expr><name>VmemTrackerTestSetup</name></expr></argument>, <argument><expr><name>VmemTrackerTestTeardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__VmemTracker_ReserveVmem__OOMLoggingBeforeReservation</name></expr></argument>, <argument><expr><name>VmemTrackerTestSetup</name></expr></argument>, <argument><expr><name>VmemTrackerTestTeardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__VmemTracker_ShmemInit__InitSegmentVmemLimitUnderPostmaster</name></expr></argument>, <argument><expr><name>VmemTrackerTestSetup</name></expr></argument>, <argument><expr><name>VmemTrackerTestTeardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__VmemTracker_ShmemInit__InitSegmentVmemLimitInPostmaster</name></expr></argument>, <argument><expr><name>VmemTrackerTestSetup</name></expr></argument>, <argument><expr><name>VmemTrackerTestTeardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__VmemTracker_ShmemInit__QuotaCalculation</name></expr></argument>, <argument><expr><name>VmemTrackerTestSetup</name></expr></argument>, <argument><expr><name>VmemTrackerTestTeardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__VmemTracker_Init__InitializesOthers</name></expr></argument>, <argument><expr><name>VmemTrackerTestSetup</name></expr></argument>, <argument><expr><name>VmemTrackerTestTeardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__VmemTracker_Shutdown__ReleasesAllVmem</name></expr></argument>, <argument><expr><name>VmemTrackerTestSetup</name></expr></argument>, <argument><expr><name>VmemTrackerTestTeardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__VmemTracker_RequestWaiver__WaiveEnforcement</name></expr></argument>, <argument><expr><name>VmemTrackerTestSetup</name></expr></argument>, <argument><expr><name>VmemTrackerTestTeardown</name></expr></argument>)</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
