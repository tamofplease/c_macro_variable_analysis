<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/mmgr/test/runaway_cleaner_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../runaway_cleaner.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_EREPORT</name><parameter_list>(<parameter><type><name>LOG_LEVEL</name></type></parameter>)</parameter_list></cpp:macro>     \
	<cpp:value>expect_any(errstart, elevel); \
	expect_any(errstart, domain); \
	if (LOG_LEVEL &lt; ERROR) \
	{ \
    	will_return(errstart, false); \
	} \
    else \
    { \
    	will_return_with_sideeffect(errstart, false, &amp;_ExceptionalCondition, NULL); \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_FOR_RUNAWAY_CLEANUP_MEMORY_LOGGING</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>will_be_called(write_stderr); \
	expect_any(write_stderr, fmt); \
	will_be_called(MemoryContextStats); \
	expect_any(MemoryContextStats, context);</cpp:value></cpp:define> \

<comment type="block">/* MySessionState will use the address of this global variable */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>SessionState</name></type> <name>fakeSessionState</name></decl>;</decl_stmt>

<comment type="block">/* Prepares a fake MySessionState pointer for use in the vmem tracker */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>InitFakeSessionState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>activeProcessCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cleanupCountdown</name></decl></parameter>, <parameter><decl><type><name>RunawayStatus</name></type> <name>runawayStatus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pinCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vmem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>MySessionState</name> <operator>=</operator> <operator>&amp;</operator><name>fakeSessionState</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>=</operator> <name>activeProcessCount</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>=</operator> <name>cleanupCountdown</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>=</operator> <name>runawayStatus</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>pinCount</name></name> <operator>=</operator> <name>pinCount</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>=</operator> <literal type="number">1234</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>sessionVmem</name></name> <operator>=</operator> <name>vmem</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>spinLock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>PG_RE_THROW</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_RE_THROW</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>siglongjmp(*PG_exception_stack, 1)</cpp:value></cpp:define>

<comment type="block">/*
 * This method will emulate the real ExceptionalCondition
 * function by re-throwing the exception, essentially falling
 * back to the next available PG_CATCH();
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_ExceptionalCondition</name><parameter_list>()</parameter_list>
<block>{<block_content>
     <expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RunawayCleaner_StartCleanup() does not start cleanup if
 * the current session is not a runaway
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RunawayCleaner_StartCleanup__IgnoresNonRunaway</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>,
			<argument><expr><name>CLEANUP_COUNTDOWN_BEFORE_RUNAWAY</name></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
			<argument><expr><name>RunawayStatus_NotRunaway</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>beginCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RunawayCleaner_StartCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Cleanup shouldn't have begun */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>beginCleanupRunawayVersion</name> <operator>!=</operator> <operator>*</operator><name>latestRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RunawayCleaner_StartCleanup() does not execute a duplicate
 * cleanup for the same runaway event that it already started cleaning up
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RunawayCleaner_StartCleanup__IgnoresDuplicateCleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>,
			<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
			<argument><expr><name>RunawayStatus_PrimaryRunawaySession</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>beginCleanupRunawayVersion</name> <operator>=</operator> <operator>*</operator><name>latestRunawayVersion</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * As we are not providing IsCommitInProgress, the call itself verifies
	 * that we are not attempting any cleanup
	 */</comment>
	<expr_stmt><expr><call><name>RunawayCleaner_StartCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RunawayCleaner_StartCleanup() starts the cleanup process if
 * all conditions are met (i.e., no commit is in progress and vmem tracker
 * is initialized) and runaway session is "primary"
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RunawayCleaner_StartCleanup__StartsPrimaryCleanupIfPossible</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>,
			<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
			<argument><expr><name>RunawayStatus_PrimaryRunawaySession</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">12345</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set beginCleanupRunawayVersion to less than *latestRunawayVersion
	 * to trigger a cleanup
	 */</comment>
	<expr_stmt><expr><name>beginCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>endCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Make sure the cleanup goes through */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>CritSectionCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>InterruptHoldoffCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* We need a valid gp_command_count to execute cleanup */</comment>
	<expr_stmt><expr><name>gp_command_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>IsTransactionState</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EXPECT_EREPORT</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RunawayCleaner_StartCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><literal type="string">"Cleanup didn't throw error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>

	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>beginCleanupRunawayVersion</name> <operator>==</operator> <operator>*</operator><name>latestRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* We should not finish the cleanup as we errored out */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>endCleanupRunawayVersion</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* cleanupCountdown shouldn't change as we haven't finished cleanup */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we call RunawayCleaner_StartCleanup again for the same runaway event,
	 * it should be a noop, therefore requiring no "will_be_called" setup
	 */</comment>
	<expr_stmt><expr><call><name>RunawayCleaner_StartCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RunawayCleaner_StartCleanup() starts the cleanup process if
 * all conditions are met (i.e., no commit is in progress and vmem tracker
 * is initialized) and runaway session is "secondary"
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RunawayCleaner_StartCleanup__StartsSecondaryCleanupIfPossible</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>,
						 <argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
						 <argument><expr><name>RunawayStatus_SecondaryRunawaySession</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">12345</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set beginCleanupRunawayVersion to less than *latestRunawayVersion
	 * to trigger a cleanup
	 */</comment>
	<expr_stmt><expr><name>beginCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>endCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Make sure the cleanup goes through */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>CritSectionCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>InterruptHoldoffCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* We need a valid gp_command_count to execute cleanup */</comment>
	<expr_stmt><expr><name>gp_command_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>superuser</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>IsTransactionState</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EXPECT_EREPORT</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RunawayCleaner_StartCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><literal type="string">"Cleanup didn't throw error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>

	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>beginCleanupRunawayVersion</name> <operator>==</operator> <operator>*</operator><name>latestRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* We should not finish the cleanup as we errored out */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>endCleanupRunawayVersion</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* cleanupCountdown shouldn't change as we haven't finished cleanup */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we call RunawayCleaner_StartCleanup again for the same runaway event,
	 * it should be a noop, therefore requiring no "will_be_called" setup
	 */</comment>
	<expr_stmt><expr><call><name>RunawayCleaner_StartCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Checks if RunawayCleaner_StartCleanup() ignores cleanup if in critical section
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RunawayCleaner_StartCleanup__IgnoresCleanupInCriticalSection</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>,
			<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
			<argument><expr><name>RunawayStatus_PrimaryRunawaySession</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">12345</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set beginCleanupRunawayVersion to less than *latestRunawayVersino
	 * to trigger a cleanup
	 */</comment>
	<expr_stmt><expr><name>beginCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>endCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* Make sure the cleanup goes through */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>CritSectionCount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>InterruptHoldoffCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_FOR_RUNAWAY_CLEANUP_MEMORY_LOGGING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RunawayCleaner_StartCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>beginCleanupRunawayVersion</name> <operator>==</operator> <operator>*</operator><name>latestRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Cleanup is done, without ever throwing an ERROR */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>endCleanupRunawayVersion</name> <operator>==</operator> <name>beginCleanupRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * cleanupCountdown is decremented by 1 as there was no error, and therefore
	 * the cleanup is done within the same call of RunawayCleaner_StartCleanup
	 */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>CritSectionCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RunawayCleaner_StartCleanup() ignores cleanup if interrupts are held off
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RunawayCleaner_StartCleanup__IgnoresCleanupInHoldoffInterrupt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>,
			<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
			<argument><expr><name>RunawayStatus_PrimaryRunawaySession</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">12345</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set beginCleanupRunawayVersion to less than *latestRunawayVersino
	 * to trigger a cleanup
	 */</comment>
	<expr_stmt><expr><name>beginCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>endCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* Make sure the cleanup goes through */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>CritSectionCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>InterruptHoldoffCount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_FOR_RUNAWAY_CLEANUP_MEMORY_LOGGING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RunawayCleaner_StartCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>beginCleanupRunawayVersion</name> <operator>==</operator> <operator>*</operator><name>latestRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Cleanup is done, without ever throwing an ERROR */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>endCleanupRunawayVersion</name> <operator>==</operator> <name>beginCleanupRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * cleanupCountdown is decremented by 1 as there was no error, and therefore
	 * the cleanup is done within the same call of RunawayCleaner_StartCleanup
	 */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>InterruptHoldoffCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RunawayCleaner_StartCleanup() ignores cleanup if outside of any transaction
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RunawayCleaner_StartCleanup__IgnoresCleanupOutsideAnyTransaction</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>,
						 <argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
						 <argument><expr><name>RunawayStatus_PrimaryRunawaySession</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">12345</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set beginCleanupRunawayVersion to less than *latestRunawayVersino
	 * to trigger a cleanup
	 */</comment>
	<expr_stmt><expr><name>beginCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>endCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Make sure the cleanup goes through */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>CritSectionCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>InterruptHoldoffCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>gp_command_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* But it is called outside of a transaction */</comment>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>IsTransactionState</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_FOR_RUNAWAY_CLEANUP_MEMORY_LOGGING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Should not call superuser() as that can cause a PANIC */</comment>
	<expr_stmt><expr><call><name>RunawayCleaner_StartCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>beginCleanupRunawayVersion</name> <operator>==</operator> <operator>*</operator><name>latestRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Cleanup is done, without ever throwing an ERROR */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>endCleanupRunawayVersion</name> <operator>==</operator> <name>beginCleanupRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * cleanupCountdown is decremented by 1 as there was no error, and therefore
	 * the cleanup is done within the same call of RunawayCleaner_StartCleanup
	 */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>InterruptHoldoffCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RunawayCleaner_RunawayCleanupDoneForProcess() ignores cleanupCountdown
 * if optional cleanup
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RunawayCleaner_RunawayCleanupDoneForProcess__IgnoresCleanupIfNotRequired</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEANUP_COUNTDOWN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>,
			<argument><expr><name>CLEANUP_COUNTDOWN</name></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
			<argument><expr><name>RunawayStatus_PrimaryRunawaySession</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">12345</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set beginCleanupRunawayVersion to less than *latestRunawayVersino
	 * to trigger a cleanup
	 */</comment>
	<expr_stmt><expr><name>beginCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>endCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* Make sure the cleanup is not ignored for vmem initialization */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<comment type="block">/* Simulate a deactivation before the runaway */</comment>
	<expr_stmt><expr><name>deactivationVersion</name> <operator>=</operator> <operator>*</operator><name>latestRunawayVersion</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>activationVersion</name> <operator>=</operator> <operator>*</operator><name>latestRunawayVersion</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>CritSectionCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>InterruptHoldoffCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RunawayCleaner_StartCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The cleanup shouldn't even start as the QE was deactivated at the time of the runaway*/</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>beginCleanupRunawayVersion</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>endCleanupRunawayVersion</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * cleanupCountdown should not be decremented as this was an optional cleanup
	 */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>==</operator> <name>CLEANUP_COUNTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>==</operator> <name>RunawayStatus_PrimaryRunawaySession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Now simulate a scenario where the we activated but the runaway happened
	 * before the activation
	 */</comment>
	<expr_stmt><expr><name>beginCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>endCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<comment type="block">/* Another runaway happened after the last cleanup */</comment>
	<expr_stmt><expr><operator>*</operator><name>latestRunawayVersion</name> <operator>=</operator> <name>beginCleanupRunawayVersion</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>activationVersion</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>deactivationVersion</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RunawayCleaner_StartCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The cleanup shouldn't even start as the runaway event happened before the QE became active */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>beginCleanupRunawayVersion</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>endCleanupRunawayVersion</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * cleanupCountdown should not be decremented as this was an optional cleanup
	 */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>==</operator> <name>CLEANUP_COUNTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>==</operator> <name>RunawayStatus_PrimaryRunawaySession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RunawayCleaner_RunawayCleanupDoneForProcess ignores duplicate cleanup
 * for a single runaway event
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RunawayCleaner_RunawayCleanupDoneForProcess__IgnoresDuplicateCalls</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>,
			<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
			<argument><expr><name>RunawayStatus_PrimaryRunawaySession</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">12345</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>
	<comment type="block">/*
	 * Set beginCleanupRunawayVersion and endCleanupRunawayVersion to
	 * latestRunawayVersion which should make the function call a no-op
	 */</comment>
	<expr_stmt><expr><name>beginCleanupRunawayVersion</name> <operator>=</operator> <operator>*</operator><name>latestRunawayVersion</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>endCleanupRunawayVersion</name> <operator>=</operator> <operator>*</operator><name>latestRunawayVersion</name></expr>;</expr_stmt>

	<comment type="block">/* Make sure the cleanup goes through */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RunawayCleaner_RunawayCleanupDoneForProcess</name><argument_list>(<argument><expr><name>false</name></expr></argument> <comment type="block">/* ignoredCleanup */</comment>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Nothing got cleaned */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RunawayCleaner_RunawayCleanupDoneForProcess prevents multiple cleanup
 * for a single runaway event by properly updating beginCleanupRunawayVersion and
 * endCleanupRunawayVersion
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RunawayCleaner_RunawayCleanupDoneForProcess__PreventsDuplicateCleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>,
			<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
			<argument><expr><name>RunawayStatus_PrimaryRunawaySession</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><name>CLEANUP_COUNTDOWN</name></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">12345</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Some imaginary cleanup begin/end event version. The idea is to ensure
	 * that once the RunawayCleaner_RunawayCleanupDoneForProcess call returns
	 * we will have both set to latestRunawayVersion
	 */</comment>
	<expr_stmt><expr><name>beginCleanupRunawayVersion</name> <operator>=</operator> <operator>*</operator><name>latestRunawayVersion</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>endCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Make sure the cleanup goes through */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_FOR_RUNAWAY_CLEANUP_MEMORY_LOGGING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RunawayCleaner_RunawayCleanupDoneForProcess</name><argument_list>(<argument><expr><name>false</name></expr></argument> <comment type="block">/* ignoredCleanup */</comment>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* cleanupCountdown should be adjusted */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>==</operator> <name>CLEANUP_COUNTDOWN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>beginCleanupRunawayVersion</name> <operator>==</operator> <name>endCleanupRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>beginCleanupRunawayVersion</name> <operator>==</operator> <operator>*</operator><name>latestRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Second call shouldn't change anything */</comment>
	<expr_stmt><expr><call><name>RunawayCleaner_RunawayCleanupDoneForProcess</name><argument_list>(<argument><expr><name>false</name></expr></argument> <comment type="block">/* ignoredCleanup */</comment>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* cleanupCountdown is unchanged */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>==</operator> <name>CLEANUP_COUNTDOWN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RunawayCleaner_RunawayCleanupDoneForProcess reactivates a process
 * if the deactivation process triggers cleanup for a pending runaway event
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RunawayCleaner_RunawayCleanupDoneForProcess__UndoDeactivation</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>,
			<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
			<argument><expr><name>RunawayStatus_PrimaryRunawaySession</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">12345</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set beginCleanupRunawayVersion to latestRunawayVersion and endCleanupRunawayVersion
	 * to a smaller value to simulate an ongoing cleanup
	 */</comment>
	<expr_stmt><expr><name>beginCleanupRunawayVersion</name> <operator>=</operator> <operator>*</operator><name>latestRunawayVersion</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>endCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* Valid isRunawayDetector is necessary for Assert */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name>fakeIsRunawayDetector</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>isRunawayDetector</name> <operator>=</operator> <operator>&amp;</operator><name>fakeIsRunawayDetector</name></expr>;</expr_stmt>

	<comment type="block">/* Make sure we became idle after a pending runaway event */</comment>
	<expr_stmt><expr><name>activationVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>deactivationVersion</name> <operator>=</operator> <operator>*</operator><name>latestRunawayVersion</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* Make sure the cleanup goes through */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* We must undo the idle state */</comment>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>IdleTracker_ActivateProcess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_FOR_RUNAWAY_CLEANUP_MEMORY_LOGGING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RunawayCleaner_RunawayCleanupDoneForProcess</name><argument_list>(<argument><expr><name>false</name></expr></argument> <comment type="block">/* ignoredCleanup */</comment>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* The cleanupCountdown must be decremented as we cleaned up */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* We updated the endCleanupRunawayVersion to indicate that we finished cleanup */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>endCleanupRunawayVersion</name> <operator>==</operator> <name>beginCleanupRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RunawayCleaner_RunawayCleanupDoneForProcess reactivates the runaway detector
 * once all the processes of the runaway session are done cleaning
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RunawayCleaner_RunawayCleanupDoneForProcess__ReactivatesRunawayDetection</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>,
			<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
			<argument><expr><name>RunawayStatus_PrimaryRunawaySession</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">12345</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set beginCleanupRunawayVersion to latestRunawayVersion and endCleanupRunawayVersion
	 * to a smaller value to simulate an ongoing cleanup
	 */</comment>
	<expr_stmt><expr><name>beginCleanupRunawayVersion</name> <operator>=</operator> <operator>*</operator><name>latestRunawayVersion</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>endCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* Valid isRunawayDetector is necessary for Assert */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name>fakeIsRunawayDetector</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>isRunawayDetector</name> <operator>=</operator> <operator>&amp;</operator><name>fakeIsRunawayDetector</name></expr>;</expr_stmt>

	<comment type="block">/* Just an active process that never became idle */</comment>
	<expr_stmt><expr><name>activationVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>deactivationVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Make sure the cleanup goes through */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_FOR_RUNAWAY_CLEANUP_MEMORY_LOGGING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RunawayCleaner_RunawayCleanupDoneForProcess</name><argument_list>(<argument><expr><name>false</name></expr></argument> <comment type="block">/* ignoredCleanup */</comment>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* The cleanupCountdown must be decremented as we cleaned up */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* We updated the endCleanupRunawayVersion to indicate that we finished cleanup */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>endCleanupRunawayVersion</name> <operator>==</operator> <name>beginCleanupRunawayVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The runaway detector promotion should be disabled as we still have 1 QE unclean */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>isRunawayDetector</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Fake a ongoing cleanup by making endCleanupRunawayVersion &lt; beginCleanupRunawayVersion
	 * so that we can execute cleanup one more time, marking all QEs clean
	 */</comment>
	<expr_stmt><expr><name>endCleanupRunawayVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_FOR_RUNAWAY_CLEANUP_MEMORY_LOGGING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * cleanupCountdown should reach 0, and immediately afterwards should be set to
	 * CLEANUP_COUNTDOWN_BEFORE_RUNAWAY
	 */</comment>
	<expr_stmt><expr><call><name>RunawayCleaner_RunawayCleanupDoneForProcess</name><argument_list>(<argument><expr><name>false</name></expr></argument> <comment type="block">/* ignoredCleanup */</comment>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>==</operator> <name>CLEANUP_COUNTDOWN_BEFORE_RUNAWAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Runaway detector should be re-enabled */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>isRunawayDetector</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RunawayCleaner_RunawayCleanupDoneForSession reactivates the runaway detector
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RunawayCleaner_RunawayCleanupDoneForSession__ResetsRunawayFlagAndReactivateRunawayDetector</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>,
			<argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
			<argument><expr><name>RunawayStatus_PrimaryRunawaySession</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><literal type="number">2</literal></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">12345</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Satisfy asserts
	 */</comment>
	<expr_stmt><expr><name>beginCleanupRunawayVersion</name> <operator>=</operator> <operator>*</operator><name>latestRunawayVersion</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>endCleanupRunawayVersion</name> <operator>=</operator> <name>beginCleanupRunawayVersion</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>=</operator> <name>CLEANUP_COUNTDOWN_BEFORE_RUNAWAY</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>isRunawayDetector</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>=</operator> <name>RunawayStatus_PrimaryRunawaySession</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RunawayCleaner_RunawayCleanupDoneForSession</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>==</operator> <name>RunawayStatus_NotRunaway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Runaway detector should be re-enabled */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>isRunawayDetector</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RunawayCleaner_StartCleanup__IgnoresNonRunaway</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RunawayCleaner_StartCleanup__IgnoresDuplicateCleanup</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RunawayCleaner_StartCleanup__StartsPrimaryCleanupIfPossible</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RunawayCleaner_StartCleanup__StartsSecondaryCleanupIfPossible</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RunawayCleaner_StartCleanup__IgnoresCleanupInCriticalSection</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RunawayCleaner_StartCleanup__IgnoresCleanupInHoldoffInterrupt</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RunawayCleaner_StartCleanup__IgnoresCleanupOutsideAnyTransaction</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RunawayCleaner_RunawayCleanupDoneForProcess__IgnoresCleanupIfNotRequired</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RunawayCleaner_RunawayCleanupDoneForProcess__IgnoresDuplicateCalls</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RunawayCleaner_RunawayCleanupDoneForProcess__PreventsDuplicateCleanup</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RunawayCleaner_RunawayCleanupDoneForProcess__UndoDeactivation</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RunawayCleaner_RunawayCleanupDoneForProcess__ReactivatesRunawayDetection</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RunawayCleaner_RunawayCleanupDoneForSession__ResetsRunawayFlagAndReactivateRunawayDetector</name></expr></argument>)</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
