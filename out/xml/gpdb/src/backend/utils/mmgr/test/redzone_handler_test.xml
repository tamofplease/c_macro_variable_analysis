<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/mmgr/test/redzone_handler_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../redzone_handler.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_EREPORT</name><parameter_list>(<parameter><type><name>LOG_LEVEL</name></type></parameter>)</parameter_list></cpp:macro>     \
	<cpp:value>expect_any(errstart, elevel); \
	expect_any(errstart, domain); \
	if (LOG_LEVEL &lt; ERROR) \
	{ \
    	will_return(errstart, false); \
	} \
    else \
    { \
    	will_return_with_sideeffect(errstart, false, &amp;_ExceptionalCondition, NULL);\
    }</cpp:value></cpp:define> \

<comment type="block">/* isRunawayDetector assumes the address of this variable */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name>fakeIsRunawayDetector</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>sessionStateInited</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PG_RE_THROW</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_RE_THROW</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>siglongjmp(*PG_exception_stack, 1)</cpp:value></cpp:define>

<comment type="block">/*
 * This method will emulate the real ExceptionalCondition
 * function by re-throwing the exception, essentially falling
 * back to the next available PG_CATCH();
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_ExceptionalCondition</name><parameter_list>()</parameter_list>
<block>{<block_content>
     <expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Creates a SessionStateArray of the specified number of entry */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CreateSessionStateArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numEntries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>MaxBackends</name> <operator>=</operator> <name>numEntries</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>NULL</name> <operator>==</operator> <name>AllSessionStateEntries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SessionStateArray</name> <modifier>*</modifier></type><name>fakeSessionStateArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>fakeSessionStateArray</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>SessionState_ShmemSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>fakeSessionStateArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SessionState_ShmemInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The lookup should always work, whether under postmaster or not */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>AllSessionStateEntries</name> <operator>==</operator> <name>fakeSessionStateArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Frees a previously created SessionStateArray */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>DestroySessionStateArray</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>AllSessionStateEntries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>AllSessionStateEntries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>AllSessionStateEntries</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Acquires a SessionState entry for the specified sessionid. If an existing entry
 * is found, this method reuses that entry
 */</comment>
<function><type><specifier>static</specifier> <name>SessionState</name> <modifier>*</modifier></type>
<name>AcquireSessionState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sessionId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vmem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>activeProcessCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Keep the assertions happy */</comment>
	<expr_stmt><expr><name>gp_session_id</name> <operator>=</operator> <name>sessionId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sessionStateInited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>MySessionState</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EXPECT_EREPORT</name><argument_list>(<argument><expr><name>gp_sessionstate_loglevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SessionState_Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>vmem</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>sessionVmem</name></name> <operator>=</operator> <name>vmem</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>activeProcessCount</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>=</operator> <name>activeProcessCount</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>SessionState</name> <operator>*</operator><operator>)</operator> <name>MySessionState</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Checks if RedZoneHandler_ShmemInit() properly initializes the global variables
 * as the postmaster
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RedZoneHandler_ShmemInit__InitializesGlobalVarsWhenPostmaster</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* Assign weird value to test the re-initialization */</comment>
	<expr_stmt><expr><name>fakeIsRunawayDetector</name> <operator>=</operator> <literal type="number">1234</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>isRunawayDetector</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fakeIsRunawayDetector</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>VmemTracker_ConvertVmemMBToChunks</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>VmemTracker_ConvertVmemMBToChunks</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * When vmem limit is not activated or runaway_detector_activation_percent is
	 * set to 0, red zone should be very high (i.e., red-zone will be disabled).
	 */</comment>
	<expr_stmt><expr><name>runaway_detector_activation_percent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RedZoneHandler_ShmemInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>isRunawayDetector</name> <operator>==</operator> <operator>&amp;</operator><name>fakeIsRunawayDetector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>redZoneChunks</name> <operator>==</operator> <name>INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>isRunawayDetector</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * When the activation percent is set to 100, we will not even attempt calculating
	 * the redZoneChunks and instead assign INT32_MAX directly. Note, we don't even
	 * call VmemTracker_ConvertVmemMBToChunks()
	 */</comment>
	<expr_stmt><expr><name>runaway_detector_activation_percent</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>redZoneChunks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RedZoneHandler_ShmemInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>redZoneChunks</name> <operator>==</operator> <name>INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>runaway_detector_activation_percent</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RedZoneHandler_ShmemInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RedZoneHandler_ShmemInit() properly initializes the global variables
 * when under postmaster
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RedZoneHandler_ShmemInit__InitializesUnderPostmaster</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Assign weird value to test the re-initialization */</comment>
	<expr_stmt><expr><name>fakeIsRunawayDetector</name> <operator>=</operator> <literal type="number">1234</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>isRunawayDetector</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>ShmemInitStruct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fakeIsRunawayDetector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* For testing that we don't change this value */</comment>
	<expr_stmt><expr><name>redZoneChunks</name> <operator>=</operator> <literal type="number">1234</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RedZoneHandler_ShmemInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>isRunawayDetector</name> <operator>==</operator> <operator>&amp;</operator><name>fakeIsRunawayDetector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>redZoneChunks</name> <operator>==</operator> <literal type="number">1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>isRunawayDetector</name> <operator>==</operator> <literal type="number">1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RedZoneHandler_IsVmemRedZone() properly identifies red zone
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RedZoneHandler_IsVmemRedZone__ProperlyIdentifiesRedZone</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* No red zone detection if vmem tracker is not initialized */</comment>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>RedZoneHandler_IsVmemRedZone</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>int32</name></type> <name>fakeSegmentVmemChunks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>segmentVmemChunks</name> <operator>=</operator> <operator>&amp;</operator><name>fakeSegmentVmemChunks</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>redZoneChunks</name> <operator>=</operator> <name>INT32_MAX</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>segmentVmemChunks</name> <operator>=</operator> <name>INT32_MAX</name></expr>;</expr_stmt>
	<comment type="block">/* Both segment vmem and red zone is INT32_MAX. It's not a red-zone */</comment>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>RedZoneHandler_IsVmemRedZone</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 100 chunks */</comment>
	<expr_stmt><expr><operator>*</operator><name>segmentVmemChunks</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>redZoneChunks</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
	<comment type="block">/* segmentVmemChunks exceeds redZoneChunks. So, should be red zone */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>RedZoneHandler_IsVmemRedZone</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<comment type="block">/*
	 * segmentVmemChunks exceeds redZoneChunks. But vmem tracker is not
	 * initialized. Therefore, no red zone detection
	 */</comment>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>RedZoneHandler_IsVmemRedZone</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RedZoneHandler_FlagTopConsumer() allows only one detector
 * at a time
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RedZoneHandler_FlagTopConsumer__SingletonDetector</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Make sure the code is exercised */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Ensure non-null MySessionState */</comment>
	<expr_stmt><expr><name>MySessionState</name> <operator>=</operator> <operator>(</operator><name>SessionState</name> <operator>*</operator><operator>)</operator> <literal type="number">0x1234</literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name>fakeIsRunawayDetector</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>isRunawayDetector</name> <operator>=</operator> <operator>&amp;</operator><name>fakeIsRunawayDetector</name></expr>;</expr_stmt>

	<comment type="block">/* We already have a runaway detector */</comment>
	<expr_stmt><expr><operator>*</operator><name>isRunawayDetector</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * This will return without attempting to detecting any runaway session.
	 * This is tested from the fact that it is not trying to call LWLocAcquire
	 */</comment>
	<expr_stmt><expr><call><name>RedZoneHandler_FlagTopConsumer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RedZoneHandler_FlagTopConsumer() finds the top consumer
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RedZoneHandler_FlagTopConsumer__FindsTopConsumer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Make sure the RedZoneHandler_FlagTopConsumer code is exercised */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CreateSessionStateArray</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Make sure MySessionState is valid */</comment>
	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>one</name> <init>= <expr><call><name>AcquireSessionState</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* sessionId */</comment>, <argument><expr><literal type="number">100</literal></expr></argument> <comment type="block">/* vmem */</comment>, <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>two</name> <init>= <expr><call><name>AcquireSessionState</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">101</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>three</name> <init>= <expr><call><name>AcquireSessionState</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">101</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>four</name> <init>= <expr><call><name>AcquireSessionState</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Ensure we can detect runaway sessions */</comment>
	<expr_stmt><expr><operator>*</operator><name>isRunawayDetector</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeCurrentVersion</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>CurrentVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeCurrentVersion</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RedZoneHandler_FlagTopConsumer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>==</operator> <name>RunawayStatus_NotRunaway</name> <operator>&amp;&amp;</operator>
			<name><name>two</name><operator>-&gt;</operator><name>runawayStatus</name></name>  <operator>==</operator> <name>RunawayStatus_NotRunaway</name> <comment type="block">/* three is tied with two. So, won't be flagged */</comment> <operator>&amp;&amp;</operator>
			<name><name>three</name><operator>-&gt;</operator><name>runawayStatus</name></name>  <operator>==</operator> <name>RunawayStatus_PrimaryRunawaySession</name> <comment type="block">/* First detected max consumer is
			flagged (note the usedList is reversed, so "three" will be ahead of "two") */</comment> <operator>&amp;&amp;</operator>
			<name><name>four</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>==</operator> <name>RunawayStatus_NotRunaway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DestroySessionStateArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RedZoneHandler_FlagTopConsumer() ignores the idle sessions
 * even if they are the top consumer
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RedZoneHandler_FlagTopConsumer__IgnoresIdleSession</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Make sure the RedZoneHandler_FlagTopConsumer code is exercised */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CreateSessionStateArray</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Make sure MySessionState is valid */</comment>
	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>one</name> <init>= <expr><call><name>AcquireSessionState</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* sessionId */</comment>, <argument><expr><literal type="number">100</literal></expr></argument> <comment type="block">/* vmem */</comment>, <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>two</name> <init>= <expr><call><name>AcquireSessionState</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">101</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>three</name> <init>= <expr><call><name>AcquireSessionState</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>four</name> <init>= <expr><call><name>AcquireSessionState</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Ensure we can detect runaway sessions */</comment>
	<expr_stmt><expr><operator>*</operator><name>isRunawayDetector</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeCurrentVersion</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>CurrentVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeCurrentVersion</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RedZoneHandler_FlagTopConsumer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>runawayStatus</name></name>  <operator>==</operator> <name>RunawayStatus_SecondaryRunawaySession</name> <operator>&amp;&amp;</operator>
			<name><name>two</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>==</operator> <name>RunawayStatus_NotRunaway</name> <operator>&amp;&amp;</operator>
			<name><name>three</name><operator>-&gt;</operator><name>runawayStatus</name></name>  <operator>==</operator> <name>RunawayStatus_NotRunaway</name> <comment type="block">/* We will encounter three first, but it
				doesn't have active process. So, RDT will ignore it. */</comment> <operator>&amp;&amp;</operator>
			<name><name>four</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>==</operator> <name>RunawayStatus_NotRunaway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DestroySessionStateArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RedZoneHandler_FlagTopConsumer() reactivates the runaway detector
 * if there is no active session
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RedZoneHandler_FlagTopConsumer__ReactivatesDetectorIfNoActiveSession</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Make sure the RedZoneHandler_FlagTopConsumer code is exercised */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CreateSessionStateArray</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Make sure MySessionState is valid */</comment>
	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>one</name> <init>= <expr><call><name>AcquireSessionState</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* sessionId */</comment>, <argument><expr><literal type="number">100</literal></expr></argument> <comment type="block">/* vmem */</comment>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>two</name> <init>= <expr><call><name>AcquireSessionState</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">101</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>three</name> <init>= <expr><call><name>AcquireSessionState</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>four</name> <init>= <expr><call><name>AcquireSessionState</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Ensure we can detect runaway sessions */</comment>
	<expr_stmt><expr><operator>*</operator><name>isRunawayDetector</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeCurrentVersion</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>CurrentVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeCurrentVersion</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RedZoneHandler_FlagTopConsumer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* None of them could be detected as runaway as all of them are inactive sessions */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>==</operator> <name>RunawayStatus_NotRunaway</name> <operator>&amp;&amp;</operator> <name><name>two</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>==</operator> <name>RunawayStatus_NotRunaway</name> <operator>&amp;&amp;</operator>
			<name><name>three</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>==</operator> <name>RunawayStatus_NotRunaway</name> <operator>&amp;&amp;</operator> <name><name>four</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>==</operator> <name>RunawayStatus_NotRunaway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>isRunawayDetector</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DestroySessionStateArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if RedZoneHandler_FlagTopConsumer() updates the CurrentVersion and
 * latestRunawayVersion
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__RedZoneHandler_FlagTopConsumer__UpdatesEventVersions</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Make sure the RedZoneHandler_FlagTopConsumer code is exercised */</comment>
	<expr_stmt><expr><name>vmemTrackerInited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CreateSessionStateArray</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Make sure MySessionState is valid */</comment>
	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>one</name> <init>= <expr><call><name>AcquireSessionState</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* sessionId */</comment>, <argument><expr><literal type="number">100</literal></expr></argument> <comment type="block">/* vmem */</comment>, <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Ensure we can detect runaway sessions */</comment>
	<expr_stmt><expr><operator>*</operator><name>isRunawayDetector</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeCurrentVersion</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>CurrentVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeCurrentVersion</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RedZoneHandler_FlagTopConsumer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>==</operator> <name>RunawayStatus_PrimaryRunawaySession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Verify that the event versions were properly updated */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>CurrentVersion</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>latestRunawayVersion</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DestroySessionStateArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RedZoneHandler_ShmemInit__InitializesGlobalVarsWhenPostmaster</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RedZoneHandler_ShmemInit__InitializesUnderPostmaster</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RedZoneHandler_IsVmemRedZone__ProperlyIdentifiesRedZone</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RedZoneHandler_FlagTopConsumer__SingletonDetector</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RedZoneHandler_FlagTopConsumer__FindsTopConsumer</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RedZoneHandler_FlagTopConsumer__IgnoresIdleSession</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RedZoneHandler_FlagTopConsumer__ReactivatesDetectorIfNoActiveSession</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__RedZoneHandler_FlagTopConsumer__UpdatesEventVersions</name></expr></argument>)</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
