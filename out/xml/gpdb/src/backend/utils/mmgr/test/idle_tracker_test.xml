<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/mmgr/test/idle_tracker_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../idle_tracker.c"</cpp:file></cpp:include>

<comment type="block">/*
 * This sets up an expected exception that will be rethrown for
 * verification using PG_TRY(), PG_CATCH() and PG_END_TRY() macros
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_EXCEPTION</name><parameter_list>()</parameter_list></cpp:macro>     \
	<cpp:value>expect_any(ExceptionalCondition,conditionName); \
	expect_any(ExceptionalCondition,errorType); \
	expect_any(ExceptionalCondition,fileName); \
	expect_any(ExceptionalCondition,lineNumber); \
    will_be_called_with_sideeffect(ExceptionalCondition, &amp;_ExceptionalCondition, NULL);</cpp:value></cpp:define>\

<comment type="block">/* MySessionState will use the address of this global variable */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>SessionState</name></type> <name>fakeSessionState</name></decl>;</decl_stmt>

<comment type="block">/* Prepares a fake MySessionState pointer for use in the vmem tracker */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>InitFakeSessionState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>activeProcessCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cleanupCountdown</name></decl></parameter>, <parameter><decl><type><name>RunawayStatus</name></type> <name>runawayStatus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pinCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vmem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>MySessionState</name> <operator>=</operator> <operator>&amp;</operator><name>fakeSessionState</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>=</operator> <name>activeProcessCount</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>=</operator> <name>cleanupCountdown</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>=</operator> <name>runawayStatus</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>pinCount</name></name> <operator>=</operator> <name>pinCount</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>=</operator> <literal type="number">1234</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>sessionVmem</name></name> <operator>=</operator> <name>vmem</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>spinLock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PG_RE_THROW</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_RE_THROW</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>siglongjmp(*PG_exception_stack, 1)</cpp:value></cpp:define>

<comment type="block">/*
 * This method will emulate the real ExceptionalCondition
 * function by re-throwing the exception, essentially falling
 * back to the next available PG_CATCH();
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_ExceptionalCondition</name><parameter_list>()</parameter_list>
<block>{<block_content>
     <expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * A shared method to test proper activation during IdleTracker_Init()
 * or a direct call to IdleTracker_ActivateProcess() during regular
 * activation of an idle process.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CheckForActivation</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>testFunc</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeCurrentVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>CurrentVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeCurrentVersion</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>, <argument><expr><name>CLEANUP_COUNTDOWN_BEFORE_RUNAWAY</name></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
			<argument><expr><name>RunawayStatus_NotRunaway</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>activationVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>deactivationVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>CurrentVersion</name> <operator>!=</operator> <name>activationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>CurrentVersion</name> <operator>!=</operator> <name>deactivationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set to false as we want to verify that it gets set to true
	 * once the testFunc() call returns
	 */</comment>
	<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>testFunc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>activationVersion</name> <operator>==</operator> <operator>*</operator><name>CurrentVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>deactivationVersion</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>isProcessActive</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * A shared method to test proper deactivation during IdleTracker_Shutdown()
 * or a direct call to IdleTracker_DeactivateProcess() during regular
 * deactivation of an active process when a proper cleanup was not possible
 * (e.g., a transaction is in progress).
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CheckForDeactivationWithoutCleanup</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>testFunc</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeCurrentVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>CurrentVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeCurrentVersion</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>, <argument><expr><name>CLEANUP_COUNTDOWN_BEFORE_RUNAWAY</name></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
			<argument><expr><name>RunawayStatus_NotRunaway</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ensure we have a pending runaway event */</comment>
	<decl_stmt><decl><type><name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><operator>*</operator><name>CurrentVersion</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>activationVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>deactivationVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>CurrentVersion</name> <operator>!=</operator> <name>activationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>CurrentVersion</name> <operator>!=</operator> <name>deactivationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set to true as we want to verify that it gets set to false
	 * once the testFunc() call returns
	 */</comment>
	<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Deactivation must call RunawayCleaner_StartCleanup before finishing deactivation
	 * to check for cleanup requirement for any pending runaway event. The method is
	 * supposed to throw an exception, but for this test we are mocking the function
	 * without side effect. I.e., the function behaves as if a proper cleanup is not
	 * possible
	 */</comment>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RunawayCleaner_StartCleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>lastTime</name> <init>= <expr><call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>idle_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>RunawayCleaner_IsCleanupInProgress</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Expecting an exception as we are indicating an ongoing cleanup
	 * and yet returning to IdleTracker_DactivateProcess
	 */</comment>
	<expr_stmt><expr><call><name>EXPECT_EXCEPTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>testFunc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><literal type="string">"Expected an assertion failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>

	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>activationVersion</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>deactivationVersion</name> <operator>==</operator> <operator>*</operator><name>CurrentVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>isProcessActive</name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>lastTime</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>MySessionState</name><operator>-&gt;</operator><name>idle_start</name></name> <operator>&gt;=</operator> <name>lastTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * A shared method to test proper deactivation during IdleTracker_Shutdown()
 * or a direct call to IdleTracker_DeactivateProcess() during regular
 * deactivation of an active process when a proper cleanup was done, throwing
 * and elog(ERROR,...) and therefore the call would never return to the calling
 * function
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CheckForDeactivationWithProperCleanup</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>testFunc</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeCurrentVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>CurrentVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeCurrentVersion</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>, <argument><expr><name>CLEANUP_COUNTDOWN_BEFORE_RUNAWAY</name></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
			<argument><expr><name>RunawayStatus_NotRunaway</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ensure we have a pending runaway event */</comment>
	<decl_stmt><decl><type><name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><operator>*</operator><name>CurrentVersion</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>activationVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>deactivationVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>CurrentVersion</name> <operator>!=</operator> <name>activationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>CurrentVersion</name> <operator>!=</operator> <name>deactivationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set to true as we want to verify that it gets set to false
	 * once the testFunc() call returns
	 */</comment>
	<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Deactivation must call RunawayCleaner_StartCleanup before finishing deactivation
	 * to check for cleanup requirement for any pending runaway event. The mocked method
	 * is throwing an exception here, which would block execution of code following the call
	 * site
	 */</comment>
	<expr_stmt><expr><call><name>will_be_called_with_sideeffect</name><argument_list>(<argument><expr><name>RunawayCleaner_StartCleanup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_ExceptionalCondition</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>lastTime</name> <init>= <expr><call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>idle_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>testFunc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><literal type="string">"Expected an exception"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>

	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>activationVersion</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>deactivationVersion</name> <operator>==</operator> <operator>*</operator><name>CurrentVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>isProcessActive</name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>lastTime</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>MySessionState</name><operator>-&gt;</operator><name>idle_start</name></name> <operator>&gt;=</operator> <name>lastTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * A shared method to test that the IdleTracker_DeactivateProcess ignores
 * deactivation for an already idle process when the proc_exit_inprogress
 * is set to true
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PreventDuplicateDeactivationDuringProcExit</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>testFunc</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeCurrentVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>CurrentVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeCurrentVersion</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>InitFakeSessionState</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* activeProcessCount */</comment>, <argument><expr><name>CLEANUP_COUNTDOWN_BEFORE_RUNAWAY</name></expr></argument> <comment type="block">/* cleanupCountdown */</comment>,
			<argument><expr><name>RunawayStatus_NotRunaway</name></expr></argument> <comment type="block">/* runawayStatus */</comment>, <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* pinCount */</comment>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* vmem */</comment>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ensure we have a pending runaway event */</comment>
	<decl_stmt><decl><type><name>EventVersion</name></type> <name>fakeLatestRunawayVersion</name> <init>= <expr><operator>*</operator><name>CurrentVersion</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>latestRunawayVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeLatestRunawayVersion</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>activationVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>deactivationVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>CurrentVersion</name> <operator>!=</operator> <name>activationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>CurrentVersion</name> <operator>!=</operator> <name>deactivationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set to false to mark the process as deactivated
	 */</comment>
	<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Setting proc_exit_inprogress to true means we won't try to
	 * deactivate an already idle process
	 */</comment>
	<expr_stmt><expr><name>proc_exit_inprogress</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<comment type="block">/* Interrupts should be held off during proc_exit_inprogress*/</comment>
	<expr_stmt><expr><name>InterruptHoldoffCount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>idle_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Now the deactivation should succeed as we have held off interrupts */</comment>
	<expr_stmt><expr><call><name>testFunc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>InterruptHoldoffCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>activationVersion</name> <operator>==</operator> <name>deactivationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>deactivationVersion</name> <operator>!=</operator> <operator>*</operator><name>CurrentVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>isProcessActive</name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* We haven't reduced the activeProcessCount */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* idle_start shouldn't change as we were already idle */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MySessionState</name><operator>-&gt;</operator><name>idle_start</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<comment type="block">/*
	 * Now test that the testFunc fails assert if we try to deactivate an already
	 * idle process during a normal execution (i.e., not proc_exit_inprogress)
	 */</comment>
	<expr_stmt><expr><name>proc_exit_inprogress</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_EXCEPTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>testFunc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><literal type="string">"Expected assertion failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>

	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if IdleTracker_ShmemInit() properly initializes the global variables
 * as the postmaster
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__IdleTracker_ShmemInit__InitializesGlobalVarsWhenPostmaster</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>EventVersion</name></type> <name>fakeCurrentVersion</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>CurrentVersion</name> <operator>=</operator> <operator>&amp;</operator><name>fakeCurrentVersion</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>activationVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>deactivationVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>CurrentVersion</name> <operator>!=</operator> <name>activationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><name>CurrentVersion</name> <operator>!=</operator> <name>deactivationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set to true as we want to verfiy that it gets set to false
	 * once the IdleTracker_ShmemInit() call returns
	 */</comment>
	<expr_stmt><expr><name>isProcessActive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>IdleTracker_ShmemInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>activationVersion</name> <operator>==</operator> <operator>*</operator><name>CurrentVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>deactivationVersion</name> <operator>==</operator> <operator>*</operator><name>CurrentVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>isProcessActive</name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if IdleTracker_Init() activates the current process
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__IdleTracker_Init__ActivatesProcess</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CheckForActivation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>IdleTracker_Init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if IdleTracker_ActivateProcess() activates the current process
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__IdleTracker_ActivateProcess__ActivatesProcess</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CheckForActivation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>IdleTracker_ActivateProcess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if IdleTracker_DeactivateProcess() deactivates the current process
 * when a proper cleanup was done
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__IdleTracker_DeactivateProcess__DeactivatesProcessWithCleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CheckForDeactivationWithProperCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>IdleTracker_DeactivateProcess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if IdleTracker_Shutdown() deactivates the current process when a
 * proper cleanup was done
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__IdleTracker_Shutdown__DeactivatesProcessWithCleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CheckForDeactivationWithProperCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>IdleTracker_Shutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if IdleTracker_DeactivateProcess() deactivates the current process
 * when a proper cleanup could not be done
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__IdleTracker_DeactivateProcess__DeactivatesProcessWithoutCleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CheckForDeactivationWithoutCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>IdleTracker_DeactivateProcess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if IdleTracker_Shutdown() deactivates the current process when a
 * proper cleanup could not be done
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__IdleTracker_Shutdown__DeactivatesProcessWithoutCleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CheckForDeactivationWithoutCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>IdleTracker_Shutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if IdleTracker_DeactivateProcess() ignores deactivation if the
 * proc_exit_inprogress is set to true
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__IdleTracker_DeactivateProcess__IgnoresDeactivationDuringProcExit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PreventDuplicateDeactivationDuringProcExit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>IdleTracker_DeactivateProcess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if IdleTracker_Shutdown() ignores deactivation if the
 * proc_exit_inprogress is set to true
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__IdleTracker_Shutdown__IgnoresDeactivationDuringProcExit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PreventDuplicateDeactivationDuringProcExit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>IdleTracker_Shutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__IdleTracker_ShmemInit__InitializesGlobalVarsWhenPostmaster</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__IdleTracker_Init__ActivatesProcess</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__IdleTracker_ActivateProcess__ActivatesProcess</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__IdleTracker_DeactivateProcess__DeactivatesProcessWithCleanup</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__IdleTracker_Shutdown__DeactivatesProcessWithCleanup</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__IdleTracker_DeactivateProcess__DeactivatesProcessWithoutCleanup</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__IdleTracker_Shutdown__DeactivatesProcessWithoutCleanup</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__IdleTracker_DeactivateProcess__IgnoresDeactivationDuringProcExit</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__IdleTracker_Shutdown__IgnoresDeactivationDuringProcExit</name></expr></argument>)</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
