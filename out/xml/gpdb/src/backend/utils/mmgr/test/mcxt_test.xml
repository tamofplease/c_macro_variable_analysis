<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/mmgr/test/mcxt_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../mcxt.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__MemoryContextContainsGenericAllocation_DoesContain</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mcxt</name> <init>= <expr><call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>ErrorContext</name></expr></argument>,
													 <argument><expr><literal type="string">"TestContext"</literal></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Most common case, where pointer points to beginning of a chunk allocated</comment>
	<comment type="line">//  in the correct context  (true positive)</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pointer</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>contains</name> <init>= <expr><call><name>MemoryContextContainsGenericAllocation</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>, <argument><expr><name>pointer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>contains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Make sure this also works for pointers into an offset of a chunk from</comment>
	<comment type="line">//   the right context, and misaligned</comment>
	<expr_stmt><expr><name>contains</name> <operator>=</operator> <call><name>MemoryContextContainsGenericAllocation</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>, <argument><expr><name>pointer</name> <operator>+</operator> <literal type="number">499</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>contains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__MemoryContextContainsGenericAllocation_DoesNotContainAllocationFromAnotherMemoryContext</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mcxt</name> <init>= <expr><call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>ErrorContext</name></expr></argument>,
													 <argument><expr><literal type="string">"A memory context"</literal></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>another_mcxt</name> <init>= <expr><call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>ErrorContext</name></expr></argument>,
													 <argument><expr><literal type="string">"Another memory context"</literal></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>contains</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pointer</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>contains</name> <operator>=</operator> <call><name>MemoryContextContainsGenericAllocation</name><argument_list>(<argument><expr><name>another_mcxt</name></expr></argument>, <argument><expr><name>pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>contains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__MemoryContextContainsGenericAllocation_FalsePositive</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mcxt</name> <init>= <expr><call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>ErrorContext</name></expr></argument>,
													 <argument><expr><literal type="string">"A memory context"</literal></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>another_mcxt</name> <init>= <expr><call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>ErrorContext</name></expr></argument>,
													 <argument><expr><literal type="string">"Another memory context"</literal></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>another_mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pointer</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>contains</name></decl>;</decl_stmt>

	<comment type="line">//  With the previous MemoryContextContains() function, you could get a</comment>
	<comment type="line">//  false positive here if the pointer points into the middle of a palloc'd</comment>
	<comment type="line">//  region (which does happen in some window functions, such as LAG()</comment>
	<comment type="line">//  where the pointer can point to columns within previously allocated memtuples)</comment>
	<comment type="line">//  instead of the beginning, where the memory just before the pointer happens</comment>
	<comment type="line">//  to match the address of the memory context.  This is rare in gpdb7, but</comment>
	<comment type="line">//  we were seeing it happen in gpdb6 when the preceeding memory was all 0's</comment>
	<expr_stmt><expr><name>pointer</name> <operator>+=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>MemoryContext</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>pointer</name><operator>)</operator> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<comment type="line">// check for false positive when memory just before pointer contains</comment>
	<comment type="line">// a null pointer -- this was happening with LAG() function in gpdb6 before</comment>
	<expr_stmt><expr><name>contains</name> <operator>=</operator> <call><name>MemoryContextContainsGenericAllocation</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>, <argument><expr><name>pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>contains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>MemoryContext</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>pointer</name><operator>)</operator> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>=</operator> <name>mcxt</name></expr>;</expr_stmt>

	<comment type="line">// check for false positive when memory just before pointer happens</comment>
	<comment type="line">// to contain the address it's looking for</comment>
	<expr_stmt><expr><name>contains</name> <operator>=</operator> <call><name>MemoryContextContainsGenericAllocation</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>, <argument><expr><name>pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>contains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__MemoryContextContainsGenericAllocation_FalseNegative</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mcxt</name> <init>= <expr><call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>ErrorContext</name></expr></argument>,
													 <argument><expr><literal type="string">"A memory context"</literal></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>another_mcxt</name> <init>= <expr><call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>ErrorContext</name></expr></argument>,
													 <argument><expr><literal type="string">"Another memory context"</literal></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pointer</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>pointer</name> <operator>+=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>MemoryContext</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>pointer</name><operator>)</operator> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>=</operator> <name>another_mcxt</name></expr>;</expr_stmt>

	<comment type="line">// check for a false negative when memory just before pointer contains</comment>
	<comment type="line">// an address it's not looking for</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>contains</name> <init>= <expr><call><name>MemoryContextContainsGenericAllocation</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>, <argument><expr><name>pointer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>contains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__MemoryContextContainsGenericAllocation_MultipleAllocations</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mcxt</name> <init>= <expr><call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>ErrorContext</name></expr></argument>,
													 <argument><expr><literal type="string">"A memory context"</literal></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>Size</name></type> <name>s</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>*</operator> <name>ALLOCSET_DEFAULT_INITSIZE</name></expr>;</condition> <incr><expr><name>s</name> <operator>*=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>MemoryContextContainsGenericAllocation</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>, <argument><expr><call><name>palloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__MemoryContextContainsGenericAllocation_DoesNotContainNullPointer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mcxt</name> <init>= <expr><call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>ErrorContext</name></expr></argument>,
													 <argument><expr><literal type="string">"TestContext"</literal></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>contains</name> <init>= <expr><call><name>MemoryContextContainsGenericAllocation</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>contains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__MemoryContextContainsGenericAllocation_DoesContain</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__MemoryContextContainsGenericAllocation_DoesNotContainAllocationFromAnotherMemoryContext</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__MemoryContextContainsGenericAllocation_MultipleAllocations</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__MemoryContextContainsGenericAllocation_FalsePositive</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__MemoryContextContainsGenericAllocation_FalseNegative</name></expr></argument>)</argument_list></call></expr>,
		<macro><name>unit_test</name><argument_list>(<argument>test__MemoryContextContainsGenericAllocation_DoesNotContainNullPointer</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
