<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/mmgr/test/memprot_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>free</name></cpp:macro> <cpp:value>our_free</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>our_free</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../memprot.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>is_assert_checking</name> <init>=
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
		<expr><name>true</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_EXCEPTION</name><parameter_list>()</parameter_list></cpp:macro>     \
	<cpp:value>expect_any(ExceptionalCondition,conditionName); \
	expect_any(ExceptionalCondition,errorType); \
	expect_any(ExceptionalCondition,fileName); \
	expect_any(ExceptionalCondition,lineNumber); \
    will_be_called_with_sideeffect(ExceptionalCondition, &amp;_ExceptionalCondition, NULL);\

#undef PG_RE_THROW</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_RE_THROW</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>siglongjmp(*PG_exception_stack, 1)</cpp:value></cpp:define>

<comment type="block">/*
 * Saves the expected input of our_free function to check if we correctly free
 * vmem pointer, instead of the user pointer
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>our_free_expected_pointer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<comment type="block">/* Facilitates verification that gp_free actually called free */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>our_free_input_pointer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * An overriden method for "free" (using macro substitution) to verify if free was called
 * with proper vmem pointer
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>our_free</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>our_free_input_pointer</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <name>our_free_expected_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This method will emulate the real ExceptionalCondition
 * function by re-throwing the exception, essentially falling
 * back to the next available PG_CATCH();
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_ExceptionalCondition</name><parameter_list>()</parameter_list>
<block>{<block_content>
     <expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This method sets up memprot.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>MemProtTestSetup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>gp_mp_inited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>memprotOwnerThread</name> <operator>=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This method resets memprot state.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>MemProtTestTeardown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>gp_mp_inited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>CalculateVmemSizeFromUserSize</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>user_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>chosen_vmem_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VmemHeader</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>user_size</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GP_ALLOC_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><name>chosen_vmem_size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FooterChecksumType</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>chosen_vmem_size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This method calculates a new size of a pointer given a ratio to the original size.
 * The returned size will be between the maximum requestable size and zero
 */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>CalculateReallocSize</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>original_size</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>ratio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>ratio</name> <operator>&gt;=</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>original_size</name><operator>)</operator> <operator>*</operator> <name>ratio</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Overflow or exceeding the max allowed allocation size */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ratio</name> <operator>&gt;</operator> <literal type="number">1.0</literal> <operator>&amp;&amp;</operator> <name>new_size</name> <operator>&lt;</operator> <name>original_size</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>new_size</name> <operator>&gt;</operator> <name>MAX_REQUESTABLE_SIZE</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>MAX_REQUESTABLE_SIZE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>new_size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Verifies that the stored size is same as the expected size of the usable memory */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>VerifyStoredSize</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>expected_user_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>stored_size</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VmemHeader</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>VmemHeader</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>stored_size</name> <operator>==</operator> <name>expected_user_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Wrapper around gp_malloc that executes basic sets of tests during allocations */</comment>
<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>AllocateWithCheck</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>chosen_vmem_size</name> <init>= <expr><call><name>CalculateVmemSizeFromUserSize</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Too big allocation should fail assert checking */</comment>
	<if_stmt><if>if <condition>(<expr><name>is_assert_checking</name> <operator>&amp;&amp;</operator> <name>chosen_vmem_size</name> <operator>&gt;</operator> <name>MAX_REQUESTABLE_SIZE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>EXPECT_EXCEPTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* The expect_value's chosen_vmem_size will check the size calculation with overhead */</comment>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>VmemTracker_ReserveVmem</name></expr></argument>, <argument><expr><name>newlyRequestedBytes</name></expr></argument>, <argument><expr><name>chosen_vmem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>VmemTracker_ReserveVmem</name></expr></argument>, <argument><expr><name>MemoryAllocation_Success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>gp_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* size limit is only checked in assert build */</comment>
		<if_stmt><if>if <condition>(<expr><name>is_assert_checking</name> <operator>&amp;&amp;</operator> <name>chosen_vmem_size</name> <operator>&gt;</operator> <name>MAX_REQUESTABLE_SIZE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>size_t</name></type> <name>stored_size</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VmemHeader</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>VmemHeader</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>stored_size</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>ptr</name></expr>;</return>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Calls gp_realloc, testing that the pointer is properly resized. Returns
 * the newly resized pointer.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ReallocateWithCheck</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>requested_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Nothing to check for a null pointer in optimized build as we will just crash
	 * and this is consistent with existing behavior of repalloc.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ptr</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>is_assert_checking</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* The gp_realloc should fail assert for null pointer check */</comment>
			<expr_stmt><expr><call><name>EXPECT_EXCEPTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<block>{<block_content>
				<expr_stmt><expr><call><name>gp_realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>requested_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<block>{<block_content>

			</block_content>}</block>
			<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * For release build or for debug build after failing the assertion in gp_realloc,
		 * we don't have any further execution to check
		 */</comment>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>orig_user_size</name> <init>= <expr><call><name>UserPtr_GetUserPtrSize</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>orig_vmem_size</name> <init>= <expr><call><name>CalculateVmemSizeFromUserSize</name><argument_list>(<argument><expr><name>orig_user_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size_difference</name> <init>= <expr><name>requested_size</name> <operator>-</operator> <name>orig_user_size</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* If the size change is negative, we release vmem */</comment>
	<if_stmt><if>if <condition>(<expr><name>requested_size</name> <operator>&gt;</operator> <name>orig_user_size</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>VmemTracker_ReserveVmem</name></expr></argument>, <argument><expr><name>newlyRequestedBytes</name></expr></argument>, <argument><expr><name>requested_size</name> <operator>-</operator> <name>orig_user_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>VmemTracker_ReserveVmem</name></expr></argument>, <argument><expr><name>MemoryAllocation_Success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>requested_size</name> <operator>&lt;</operator> <name>orig_user_size</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* ReleaseVmem will release the size difference */</comment>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>VmemTracker_ReleaseVmem</name></expr></argument>, <argument><expr><name>toBeFreedRequested</name></expr></argument>, <argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>size_difference</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>VmemTracker_ReleaseVmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>realloc_ptr</name> <init>=	<expr><call><name>gp_realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>requested_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <name>realloc_ptr</name> <operator>||</operator> <name>requested_size</name> <operator>!=</operator> <name>orig_user_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>requested_size</name> <operator>==</operator> <call><name>UserPtr_GetUserPtrSize</name><argument_list>(<argument><expr><name>realloc_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check vmem size has been recalculated */</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>realloc_vmem_size</name> <init>= <expr><name>orig_vmem_size</name> <operator>+</operator> <name>size_difference</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>realloc_vmem_size</name> <operator>==</operator> <call><name>UserPtr_GetVmemPtrSize</name><argument_list>(<argument><expr><name>realloc_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>realloc_ptr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Frees a user pointer, checking against the original user size
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FreeWithCheck</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>vmem_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Nothing to check for a null pointer in optimized build as we will just crash
	 * and this is consistent with existing behavior of pfree.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ptr</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>is_assert_checking</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* The gp_free should fail assert for null pointer check */</comment>
			<expr_stmt><expr><call><name>EXPECT_EXCEPTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<block>{<block_content>
				<expr_stmt><expr><call><name>gp_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<block>{<block_content>

			</block_content>}</block>
			<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * For release build or for debug build after failing the assertion in gp_free,
		 * we don't have any further execution to check
		 */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>stored_size</name> <init>= <expr><call><name>UserPtr_GetUserPtrSize</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>stored_size</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>vmem_size</name> <operator>=</operator> <call><name>CalculateVmemSizeFromUserSize</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>vmem_size</name> <operator>==</operator>  <call><name>UserPtr_GetVmemPtrSize</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>our_free_expected_pointer</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>ptr</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VmemHeader</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/* Set the our_free_input_pointer to null to detect if free was actually called */</comment>
	<expr_stmt><expr><name>our_free_input_pointer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_assert_checking</name> <operator>||</operator> <name>size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* The expect_value's chosen_vmem_size will check the size calculation with overhead */</comment>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>VmemTracker_ReleaseVmem</name></expr></argument>, <argument><expr><name>toBeFreedRequested</name></expr></argument>, <argument><expr><name>vmem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>VmemTracker_ReleaseVmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Verify that the input pointer (supposed to be saved inside our_free to indicate
	 * that it was called) and the expected pointer are not same, before calling gp_free
	 */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>our_free_expected_pointer</name> <operator>!=</operator> <name>our_free_input_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>is_assert_checking</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>EXPECT_EXCEPTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gp_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>!</operator><name>is_assert_checking</name> <operator>||</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* For non-zero size, we expect the free (and our_free) to be called */</comment>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>our_free_input_pointer</name> <operator>==</operator> <name>our_free_expected_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>

	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Checks if we bypass vmem tracker when mp_init is false */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__gp_malloc_no_vmem_tracker_when_mp_init_false</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>gp_mp_inited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>alloc_size</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<comment type="block">/* No expected calls to VMEM tracker as the mp is not initialized */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>alloc</name> <init>= <expr><call><name>gp_malloc</name><argument_list>(<argument><expr><name>alloc_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>alloc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VerifyStoredSize</name><argument_list>(<argument><expr><name>alloc</name></expr></argument>, <argument><expr><name>alloc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Checks if we call vmem tracker when mp_init is true */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__gp_malloc_calls_vmem_tracker_when_mp_init_true</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>gp_mp_inited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>alloc_size</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>VmemTracker_ReserveVmem</name></expr></argument>, <argument><expr><name>newlyRequestedBytes</name></expr></argument>, <argument><expr><call><name>CalculateVmemSizeFromUserSize</name><argument_list>(<argument><expr><name>alloc_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>VmemTracker_ReserveVmem</name></expr></argument>, <argument><expr><name>MemoryAllocation_Success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* No expected calls to VMEM tracker as the mp is not initialized */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>alloc</name> <init>= <expr><call><name>gp_malloc</name><argument_list>(<argument><expr><name>alloc_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>alloc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VerifyStoredSize</name><argument_list>(<argument><expr><name>alloc</name></expr></argument>, <argument><expr><name>alloc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Tests the basic functionality of gp_malloc and gp_free
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__gp_malloc_and_free__basic_tests</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>sizes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">50</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><name>MAX_REQUESTABLE_SIZE</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VmemHeader</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>FOOTER_CHECKSUM_SIZE</name></expr>,
			<expr><literal type="number">1024L</literal> <operator>*</operator> <literal type="number">1024L</literal> <operator>*</operator> <literal type="number">1024L</literal> <operator>*</operator> <literal type="number">2L</literal></expr>, <expr><literal type="number">1024L</literal> <operator>*</operator> <literal type="number">1024L</literal> <operator>*</operator> <literal type="number">1024L</literal> <operator>*</operator> <literal type="number">5L</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>chosen_size</name> <init>= <expr><name><name>sizes</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>AllocateWithCheck</name><argument_list>(<argument><expr><name>chosen_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>FreeWithCheck</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>chosen_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Tests the basic functionality of gp_realloc
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__gp_realloc__basic_tests</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>sizes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">50</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><name>MAX_REQUESTABLE_SIZE</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VmemHeader</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>FOOTER_CHECKSUM_SIZE</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Ratio of new size to original size for realloc calls */</comment>
	<decl_stmt><decl><type><name>float</name></type> <name><name>fractions</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.1</literal></expr>, <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1.5</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>didx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>didx</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fractions</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>fractions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>didx</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name>original_size</name> <init>= <expr><name><name>sizes</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>float</name></type> <name>chosen_fraction</name> <init>= <expr><name><name>fractions</name><index>[<expr><name>didx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>requested_size</name> <init>= <expr><call><name>CalculateReallocSize</name><argument_list>(<argument><expr><name>original_size</name></expr></argument>, <argument><expr><name>chosen_fraction</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>AllocateWithCheck</name><argument_list>(<argument><expr><name>original_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ReallocateWithCheck</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>requested_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FreeWithCheck</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>requested_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__gp_malloc_no_vmem_tracker_when_mp_init_false</name></expr></argument>, <argument><expr><name>MemProtTestSetup</name></expr></argument>, <argument><expr><name>MemProtTestTeardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__gp_malloc_calls_vmem_tracker_when_mp_init_true</name></expr></argument>, <argument><expr><name>MemProtTestSetup</name></expr></argument>, <argument><expr><name>MemProtTestTeardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__gp_malloc_and_free__basic_tests</name></expr></argument>, <argument><expr><name>MemProtTestSetup</name></expr></argument>, <argument><expr><name>MemProtTestTeardown</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__gp_realloc__basic_tests</name></expr></argument>, <argument><expr><name>MemProtTestSetup</name></expr></argument>, <argument><expr><name>MemProtTestTeardown</name></expr></argument>)</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
