<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/mmgr/redzone_handler.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * redzone_handler.c
 *	 Implementation of the red-zone handler that detects when the system
 *	 is running low in vmem (i.e., the system is in red-zone). The red-zone
 *	 handler identifies the session that consumes most vmem and asks it
 *	 to gracefully release its memory.
 *
 * Copyright (c) 2014-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/utils/mmgr/redzone_handler.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/atomics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/vmem_tracker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/session_state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resgroup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resource_manager.h"</cpp:file></cpp:include>

<comment type="block">/* External dependencies within the runaway cleanup framework */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>vmemTrackerInited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>volatile</specifier> <name>int32</name> <modifier>*</modifier></type><name>segmentVmemChunks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>volatile</specifier> <name>EventVersion</name> <modifier>*</modifier></type><name>CurrentVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>volatile</specifier> <name>EventVersion</name> <modifier>*</modifier></type><name>latestRunawayVersion</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>RunawayCleaner_StartCleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int32</name></type> <name>VmemTracker_ConvertVmemMBToChunks</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mb</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHMEM_RUNAWAY_DETECTOR_MUTEX</name></cpp:macro> <cpp:value>"SHMEM_RUNAWAY_DETECTOR_MUTEX"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_SESSION_ID</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<comment type="block">/* The runaway detector activates if the used vmem exceeds this percentage of the vmem quota */</comment>
<decl_stmt><decl><type><name>int</name></type>	<name>runaway_detector_activation_percent</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Number of VMEM chunks at which we consider the VMEM level critical.
 * Derived from chunk size, gp_vmem_protect_limit and RED_ZONE_RATIO.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int32</name></type> <name>redZoneChunks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * When runaway_detector_activation_percent set to 0 or 100, means disable runaway detection,
 * and also disable Red-Zone check for resource group. We use the INT32_MAX to indicate that
 * the current config is disabled Red-Zone check.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DisableRedZoneCheckChunksValue</name></cpp:macro> <cpp:value>INT32_MAX</cpp:value></cpp:define>

<comment type="block">/*
 * A shared memory binary flag (0 or 1) that identifies one process at-a-time as runaway
 * detector. At red-zone each process tries to determine runaway query, but only the first
 * process that succeeds to set this counter to 1 becomes the detector.
 */</comment>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>uint32</name> <modifier>*</modifier></type><name>isRunawayDetector</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>RedZoneHandler_ShmemInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>RedZoneHandler_ReactivateRunawayDetector</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Returns the red-zone cut-off in "chunks" unit
 */</comment>
<function><type><name>int32</name></type>
<name>RedZoneHandler_GetRedZoneLimitChunks</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><name>redZoneChunks</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns the red-zone cut-off in "MB" unit
 */</comment>
<function><type><name>int32</name></type>
<name>RedZoneHandler_GetRedZoneLimitMB</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>VmemTracker_ConvertVmemChunksToMB</name><argument_list>(<argument><expr><name>redZoneChunks</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initializes the red zone handler's shared memory states.
 */</comment>
<function><type><name>void</name></type>
<name>RedZoneHandler_ShmemInit</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>vmemTrackerInited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type>		<name>alreadyInShmem</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>isRunawayDetector</name> <operator>=</operator> <operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator>
								<call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>SHMEM_RUNAWAY_DETECTOR_MUTEX</name></expr></argument>,
										<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>alreadyInShmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>alreadyInShmem</name> <operator>||</operator> <operator>!</operator><name>IsUnderPostmaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>isRunawayDetector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * runaway_detector_activation_percent equals to 0 or 100 is reserved for not
		 * enforcing runaway detection by setting the redZoneChunks to an artificially
		 * high value, that's DisableRedZoneCheckChunksValue.
		 *
		 * Also, during gpinitsystem we may start a QD without initializing the
		 * gp_vmem_protect_limit. This may result in 0 vmem protect limit. In such case,
		 * we ensure that the redZoneChunks is set to a large value.
		 *
		 * When we enable resource group, we will not use redZoneChunks to determine
		 * whether the current process is in red-zone or not, so we can calculate the
		 * redZoneChunks, but it'll never be used.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>runaway_detector_activation_percent</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<name>runaway_detector_activation_percent</name> <operator>!=</operator> <literal type="number">100</literal> <operator>&amp;&amp;</operator>
			<name>gp_vmem_protect_limit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/*
			 * Calculate red zone threshold in MB, and then convert MB to "chunks"
			 * using chunk size for efficient comparison to detect red zone
			 */</comment>
			<expr_stmt><expr><name>redZoneChunks</name> <operator>=</operator> <call><name>VmemTracker_ConvertVmemMBToChunks</name><argument_list>(<argument><expr><name>gp_vmem_protect_limit</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>runaway_detector_activation_percent</name><operator>)</operator> <operator>/</operator> <literal type="number">100.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<comment type="block">/* 0 or 100 means disable red-zone completely */</comment>
			<expr_stmt><expr><name>redZoneChunks</name> <operator>=</operator> <name>DisableRedZoneCheckChunksValue</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>isRunawayDetector</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Returns true if the system is in red-zone (too little VMEM)
 */</comment>
<function><type><name>bool</name></type>
<name>RedZoneHandler_IsVmemRedZone</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>vmemTrackerInited</name> <operator>||</operator> <name>redZoneChunks</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * if runaway_detector_activation_percent be set to 0 or 100, means
	 * disable runaway detection, just return false.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>redZoneChunks</name> <operator>==</operator> <name>DisableRedZoneCheckChunksValue</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>vmemTrackerInited</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>IsResGroupEnabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>IsGroupInRedZone</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><operator>*</operator><name>segmentVmemChunks</name> <operator>&gt;</operator> <name>redZoneChunks</name></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Finds and notifies the top vmem consuming session.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>RedZoneHandler_FlagTopConsumer</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vmemTrackerInited</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>MySessionState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>resGroupId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>expected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>pg_atomic_compare_exchange_u32</name><argument_list>(<argument><expr><operator>(</operator><name>pg_atomic_uint32</name> <operator>*</operator><operator>)</operator> <name>isRunawayDetector</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expected</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* If successful then this process must be the runaway detector */</comment>
	<expr_stmt><expr><call><name>AssertImply</name><argument_list>(<argument><expr><name>success</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>==</operator> <operator>*</operator><name>isRunawayDetector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Someone already determined the runaway query, so nothing to do. This
	 * will also prevent re-entry to this method by a cleaning session.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * In resource group mode, we should acquire ResGroupLock to avoid
	 * resource group slot being changed during flag top consumer in redzone.
	 * Note that flag top consumer is a low frequency action, so the
	 * additional overhead is acceptable.
	 *
	 * Note that we also need to acquire SessionStateLock as well, so the lock
	 * order is important to avoid deadlock. Make sure always acquire
	 * ResGroupLock ahead.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IsResGroupEnabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>ResGroupLock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Grabbing a shared lock prevents others to modify the SessionState
	 * data structure, therefore ensuring that we don't flag someone
	 * who was already dying. A shared lock is enough as we access the
	 * data structure in a read-only manner.
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>SessionStateLock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int32</name></type> <name>maxVmem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>maxActiveVmem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>maxActiveVmemSessionState</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>maxVmemSessionState</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>curSessionState</name> <init>= <expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>usedList</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Find the group which used the most of global memory in resgroup mode.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IsResGroupEnabled</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>	<name>maxGlobalShareMem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>	<name>sessionGroupGSMem</name></decl>;</decl_stmt>

		<while>while <condition>(<expr><name>curSessionState</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>INVALID_SESSION_ID</name> <operator>!=</operator> <name><name>curSessionState</name><operator>-&gt;</operator><name>sessionId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>sessionGroupGSMem</name> <operator>=</operator> <call><name>SessionGetResGroupGlobalShareMemUsage</name><argument_list>(<argument><expr><name>curSessionState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>sessionGroupGSMem</name> <operator>&gt;</operator> <name>maxGlobalShareMem</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>maxGlobalShareMem</name> <operator>=</operator> <name>sessionGroupGSMem</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>resGroupId</name> <operator>=</operator> <call><name>SessionGetResGroupId</name><argument_list>(<argument><expr><name>curSessionState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>curSessionState</name> <operator>=</operator> <name><name>curSessionState</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>curSessionState</name> <operator>=</operator> <name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>usedList</name></name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>curSessionState</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>INVALID_SESSION_ID</name> <operator>!=</operator> <name><name>curSessionState</name><operator>-&gt;</operator><name>sessionId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* 
		 * in resgroup mode, we should only flag top consumer in group which uses
		 * the most of the global shared memory
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>IsResGroupEnabled</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>SessionGetResGroupId</name><argument_list>(<argument><expr><name>curSessionState</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>resGroupId</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>curSessionState</name> <operator>=</operator> <name><name>curSessionState</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>	
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>int32</name></type> <name>curVmem</name> <init>= <expr><name><name>curSessionState</name><operator>-&gt;</operator><name>sessionVmem</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>maxActiveVmem</name> <operator>&lt;=</operator> <name>maxVmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>curVmem</name> <operator>&gt;</operator> <name>maxActiveVmem</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>curVmem</name> <operator>&gt;</operator> <name>maxVmem</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>maxVmemSessionState</name> <operator>=</operator> <name>curSessionState</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>maxVmem</name> <operator>=</operator> <name>curVmem</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * Only consider sessions with at least 1 active process. As we
			 * are *not* grabbings locks, this does not guarantee that by the
			 * time we finish walking all sessions the chosen session will
			 * still have active process.
			 */</comment>
			<if_stmt><if>if  <condition>(<expr><name><name>curSessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>maxActiveVmemSessionState</name> <operator>=</operator> <name>curSessionState</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>maxActiveVmem</name> <operator>=</operator> <name>curVmem</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>curSessionState</name> <operator>=</operator> <name><name>curSessionState</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>maxActiveVmemSessionState</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>maxActiveVmemSessionState</name><operator>-&gt;</operator><name>spinLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Now that we grabbed lock, make sure we have at least 1 active process
		 * before flagging this session for termination
		 */</comment>
		<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>maxActiveVmemSessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * First update the runaway event detection version so that
			 * an active process of the runaway session is forced to clean up before
			 * it deactivates. As we grabbed the spin lock, no process of the runaway
			 * session can deactivate unless we release the lock. The other sessions
			 * don't care what global runaway version they observe as the runaway
			 * event is not pertinent to them.
			 *
			 * We don't need any lock here as the runaway detector is singleton,
			 * and only the detector can update this variable.
			 */</comment>
			<expr_stmt><expr><operator>*</operator><name>latestRunawayVersion</name> <operator>=</operator> <operator>*</operator><name>CurrentVersion</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<comment type="block">/*
			 * Make sure that the runaway event version is not shared with any other
			 * processes, and not shared with any other deactivation/reactivation version
			 */</comment>
			<expr_stmt><expr><operator>*</operator><name>CurrentVersion</name> <operator>=</operator> <operator>*</operator><name>CurrentVersion</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CLEANUP_COUNTDOWN_BEFORE_RUNAWAY</name> <operator>==</operator> <name><name>maxActiveVmemSessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/*
			 * Determine how many processes need to cleanup to mark the session clean.
			 */</comment>
			<expr_stmt><expr><name><name>maxActiveVmemSessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name> <operator>=</operator> <name><name>maxActiveVmemSessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>maxActiveVmemSessionState</name> <operator>==</operator> <name>maxVmemSessionState</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Finally signal the runaway process for cleanup */</comment>
				<expr_stmt><expr><name><name>maxActiveVmemSessionState</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>=</operator> <name>RunawayStatus_PrimaryRunawaySession</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name><name>maxActiveVmemSessionState</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>=</operator> <name>RunawayStatus_SecondaryRunawaySession</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<comment type="block">/* Save the amount of vmem session was holding when it was flagged as runaway */</comment>
			<expr_stmt><expr><name><name>maxActiveVmemSessionState</name><operator>-&gt;</operator><name>sessionVmemRunaway</name></name> <operator>=</operator> <name><name>maxActiveVmemSessionState</name><operator>-&gt;</operator><name>sessionVmem</name></name></expr>;</expr_stmt>

			<comment type="block">/* Save the command count currently running in the runaway session */</comment>
			<expr_stmt><expr><name><name>maxActiveVmemSessionState</name><operator>-&gt;</operator><name>commandCountRunaway</name></name> <operator>=</operator> <name>gp_command_count</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * Failed to find any viable runaway session. Reset runaway detector flag
			 * for another round of runaway determination at a later time. As we couldn't
			 * find any runaway session, the CurrentVersion is not changed.
			 */</comment>
			<expr_stmt><expr><operator>*</operator><name>isRunawayDetector</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>maxActiveVmemSessionState</name><operator>-&gt;</operator><name>spinLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * No active session to mark as runaway. So, reenable the runaway detection process
		 */</comment>
		<expr_stmt><expr><operator>*</operator><name>isRunawayDetector</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SessionStateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsResGroupEnabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>ResGroupLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * In a red-zone this method identifies the top vmem consuming session,
 * and requests it to cleanup. If the red-zone handler determines itself
 * as the runaway session, it also starts the cleanup.
 */</comment>
<function><type><name>void</name></type>
<name>RedZoneHandler_DetectRunawaySession</name><parameter_list>()</parameter_list>
<block>{<block_content>

	<comment type="block">/*
	 * InterruptHoldoffCount &gt; 0 indicates we are in a sensitive code path that doesn't
	 * like a control flow disruption as may happen from a pending die/cancel interrupt.
	 * As we may eventually ERROR out from this method (during RunawayCleaner_StartCleanup)
	 * we want to make sure that HOLD_INTERRUPTS() was not called (i.e., InterruptHoldoffCount == 0).
	 *
	 * What happens if we don't check for InterruptHoldoffCount? One example is LWLockAcquire()
	 * which calls HOLD_INTERRUPTS() to ensure that no unexpected control
	 * flow disruption happens because of FATAL/ERROR as done from die/cancel interrupt
	 * handler. If we ignore InterruptHoldoffCount, the PGSemaphoreLock() (called from LWLockAcquire)
	 * would call CHECK_FOR_INTERRUPTS() and we may throw ERROR if the current session is a runaway.
	 * Unfortunately, LWLockAcquire shares the semaphore with the regular lock manager and
	 * ProcWaitForSignal. Therefore, LWLockAcquire may wake up multiple times during its wait
	 * for a semaphore which may not relate to an actual LWLock release. This requires LWLockAcquire
	 * to keep track of how many of those false wake events it has consumed (by decrementing semaphore
	 * when it shouldn't have done so) and LWLockAcquire rollback the semaphore decrements for
	 * the irrelevant wake up events by re-incrementing once it actually acquires the lock.
	 * Therefore, an unexpected control flow out of the LWLockAcquire before it properly rolled back
	 * may prevent the LWLockAcquire to rollback the false wake events. Although we do call LWLockRelease
	 * during an error handling, that doesn't guarantee that the falsely consumed semaphore wake
	 * events would be rolled back (i.e., semaphore does not get re-incremented during error handling) as
	 * done at the end of LWLockAcquire. This may cause the semaphore to never wake up other waiting
	 * processes and therefore may cause other processes to hang perpetually.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RedZoneHandler_IsVmemRedZone</name><argument_list>()</argument_list></call> <operator>||</operator> <name>InterruptHoldoffCount</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
			<name>CritSectionCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* We don't support runaway detection/termination from non-owner thread */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>MemoryProtection_IsOwnerThread</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>gp_mp_inited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RedZoneHandler_FlagTopConsumer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RunawayCleaner_StartCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Saves VMEM usage of all the sessions into log
 */</comment>
<function><type><name>void</name></type>
<name>RedZoneHandler_LogVmemUsageOfAllSessions</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vmemTrackerInited</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>MySessionState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Grabbing a shared lock ensures that the data structure is not
	 * modified while we are reading. Shared lock is enough as we
	 * are only reading and not modifying the SessionState data structure
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>SessionStateLock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SessionState</name> <modifier>*</modifier></type><name>curSessionState</name> <init>= <expr><name><name>AllSessionStateEntries</name><operator>-&gt;</operator><name>usedList</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<comment type="block">/* Write the header for the subsequent lines of memory usage information */</comment>
		<expr_stmt><expr><call><name>write_stderr</name><argument_list>(<argument><expr><literal type="string">"session_state: session_id, is_runaway, qe_count, active_qe_count, dirty_qe_count, vmem_mb, runaway_vmem_mb, runaway_command_cnt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>curSessionState</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>INVALID_SESSION_ID</name> <operator>!=</operator> <name><name>curSessionState</name><operator>-&gt;</operator><name>sessionId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>write_stderr</name><argument_list>(<argument><expr><literal type="string">"session_state: %d, %d, %d, %d, %d, %d, %d, %d\n"</literal></expr></argument>, <argument><expr><name><name>curSessionState</name><operator>-&gt;</operator><name>sessionId</name></name></expr></argument>,
					<argument><expr><name><name>curSessionState</name><operator>-&gt;</operator><name>runawayStatus</name></name> <operator>!=</operator> <name>RunawayStatus_NotRunaway</name></expr></argument>, <argument><expr><name><name>curSessionState</name><operator>-&gt;</operator><name>pinCount</name></name></expr></argument>,
					<argument><expr><name><name>curSessionState</name><operator>-&gt;</operator><name>activeProcessCount</name></name></expr></argument>, <argument><expr><name><name>curSessionState</name><operator>-&gt;</operator><name>cleanupCountdown</name></name></expr></argument>, <argument><expr><call><name>VmemTracker_ConvertVmemChunksToMB</name><argument_list>(<argument><expr><name><name>curSessionState</name><operator>-&gt;</operator><name>sessionVmem</name></name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>VmemTracker_ConvertVmemChunksToMB</name><argument_list>(<argument><expr><name><name>curSessionState</name><operator>-&gt;</operator><name>sessionVmemRunaway</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>curSessionState</name><operator>-&gt;</operator><name>commandCountRunaway</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>curSessionState</name> <operator>=</operator> <name><name>curSessionState</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SessionStateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SessionStateLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
