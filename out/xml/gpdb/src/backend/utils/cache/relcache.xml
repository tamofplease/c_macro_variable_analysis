<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/cache/relcache.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * relcache.c
 *	  POSTGRES relation descriptor cache code
 *
 * Portions Copyright (c) 2005-2009, Greenplum inc.
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/cache/relcache.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 * INTERFACE ROUTINES
 *		RelationCacheInitialize			- initialize relcache (to empty)
 *		RelationCacheInitializePhase2	- initialize shared-catalog entries
 *		RelationCacheInitializePhase3	- finish initializing relcache
 *		RelationIdGetRelation			- get a reldesc by relation id
 *		RelationClose					- close an open relation
 *
 * NOTES
 *		The following code contains many undocumented hacks.  Please be
 *		careful....
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/multixact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/nbtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/reloptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/sysattr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tableam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tupdesc_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/partition.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_am.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amproc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_attrdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_authid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_auth_members.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_auth_time_constraint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_constraint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opclass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_partitioned_table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_publication.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_rewrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_shseclabel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_statistic_ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_subscription.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_tablespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/schemapg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/policy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/optimizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"partitioning/partbounds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"partitioning/partdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rewrite/rewriteDefine.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rewrite/rowsecurity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/smgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/partcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/relmapper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resowner_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/gp_distribution_policy.h"</cpp:file></cpp:include>         <comment type="block">/* GpPolicy */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>        <comment type="block">/* Gp_role */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbsreh.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELCACHE_INIT_FILEMAGIC</name></cpp:macro>		<cpp:value>0x773266</cpp:value></cpp:define>	<comment type="block">/* version ID value */</comment>

<comment type="block">/*
 * Default policy for whether to apply RECOVER_RELATION_BUILD_MEMORY:
 * do so in clobber-cache builds but not otherwise.  This choice can be
 * overridden at compile time with -DRECOVER_RELATION_BUILD_MEMORY=1 or =0.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RECOVER_RELATION_BUILD_MEMORY</name></cpp:ifndef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLOBBER_CACHE_ALWAYS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CLOBBER_CACHE_RECURSIVELY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECOVER_RELATION_BUILD_MEMORY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECOVER_RELATION_BUILD_MEMORY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 *		hardcoded tuple descriptors, contents generated by genbki.pl
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FormData_pg_attribute</name></type> <name><name>Desc_pg_class</name><index>[<expr><name>Natts_pg_class</name></expr>]</index></name> <init>= <expr><block>{<expr><name>Schema_pg_class</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FormData_pg_attribute</name></type> <name><name>Desc_pg_attribute</name><index>[<expr><name>Natts_pg_attribute</name></expr>]</index></name> <init>= <expr><block>{<expr><name>Schema_pg_attribute</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FormData_pg_attribute</name></type> <name><name>Desc_pg_proc</name><index>[<expr><name>Natts_pg_proc</name></expr>]</index></name> <init>= <expr><block>{<expr><name>Schema_pg_proc</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FormData_pg_attribute</name></type> <name><name>Desc_pg_type</name><index>[<expr><name>Natts_pg_type</name></expr>]</index></name> <init>= <expr><block>{<expr><name>Schema_pg_type</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FormData_pg_attribute</name></type> <name><name>Desc_pg_database</name><index>[<expr><name>Natts_pg_database</name></expr>]</index></name> <init>= <expr><block>{<expr><name>Schema_pg_database</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FormData_pg_attribute</name></type> <name><name>Desc_pg_authid</name><index>[<expr><name>Natts_pg_authid</name></expr>]</index></name> <init>= <expr><block>{<expr><name>Schema_pg_authid</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FormData_pg_attribute</name></type> <name><name>Desc_pg_auth_members</name><index>[<expr><name>Natts_pg_auth_members</name></expr>]</index></name> <init>= <expr><block>{<expr><name>Schema_pg_auth_members</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FormData_pg_attribute</name></type> <name><name>Desc_pg_auth_time_constraint_members</name><index>[<expr><name>Natts_pg_auth_time_constraint</name></expr>]</index></name> <init>= <expr><block>{<expr><name>Schema_pg_auth_time_constraint</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FormData_pg_attribute</name></type> <name><name>Desc_pg_index</name><index>[<expr><name>Natts_pg_index</name></expr>]</index></name> <init>= <expr><block>{<expr><name>Schema_pg_index</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FormData_pg_attribute</name></type> <name><name>Desc_pg_shseclabel</name><index>[<expr><name>Natts_pg_shseclabel</name></expr>]</index></name> <init>= <expr><block>{<expr><name>Schema_pg_shseclabel</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FormData_pg_attribute</name></type> <name><name>Desc_pg_subscription</name><index>[<expr><name>Natts_pg_subscription</name></expr>]</index></name> <init>= <expr><block>{<expr><name>Schema_pg_subscription</name></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 *		Hash tables that index the relation cache
 *
 *		We used to index the cache by both name and OID, but now there
 *		is only an index by OID.
 */</comment>
<typedef>typedef <type><struct>struct <name>relidcacheent</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type>			<name>reloid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>reldesc</name></decl>;</decl_stmt>
}</block></struct></type> <name>RelIdCacheEnt</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>RelationIdCache</name></decl>;</decl_stmt>

<comment type="block">/*
 * This flag is false until we have prepared the critical relcache entries
 * that are needed to do indexscans on the tables read by relcache building.
 */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>criticalRelcachesBuilt</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * This flag is false until we have prepared the critical relcache entries
 * for shared catalogs (which are the tables needed for login).
 */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>criticalSharedRelcachesBuilt</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * This counter counts relcache inval events received since backend startup
 * (but only for rels that are actually in cache).  Presently, we use it only
 * to detect whether data about to be written by write_relcache_init_file()
 * might already be obsolete.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>relcacheInvalsReceived</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * eoxact_list[] stores the OIDs of relations that (might) need AtEOXact
 * cleanup work.  This list intentionally has limited size; if it overflows,
 * we fall back to scanning the whole hashtable.  There is no value in a very
 * large list because (1) at some point, a hash_seq_search scan is faster than
 * retail lookups, and (2) the value of this is to reduce EOXact work for
 * short transactions, which can't have dirtied all that many tables anyway.
 * EOXactListAdd() does not bother to prevent duplicate list entries, so the
 * cleanup processing must be idempotent.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EOXACT_LIST</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>Oid</name></type>	<name><name>eoxact_list</name><index>[<expr><name>MAX_EOXACT_LIST</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>eoxact_list_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>eoxact_list_overflowed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOXactListAdd</name><parameter_list>(<parameter><type><name>rel</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		if (eoxact_list_len &lt; MAX_EOXACT_LIST) \
			eoxact_list[eoxact_list_len++] = (rel)-&gt;rd_id; \
		else \
			eoxact_list_overflowed = true; \
	} while (0)</cpp:value></cpp:define>

<comment type="block">/*
 * EOXactTupleDescArray stores TupleDescs that (might) need AtEOXact
 * cleanup work.  The array expands as needed; there is no hashtable because
 * we don't need to access individual items except at EOXact.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>TupleDesc</name> <modifier>*</modifier></type><name>EOXactTupleDescArray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>NextEOXactTupleDescNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>EOXactTupleDescArrayLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 *		macros to manipulate the lookup hashtable
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RelationCacheInsert</name><parameter_list>(<parameter><type><name>RELATION</name></type></parameter>, <parameter><type><name>replace_allowed</name></type></parameter>)</parameter_list></cpp:macro>	\
<cpp:value>do { \
	RelIdCacheEnt *hentry; bool found; \
	hentry = (RelIdCacheEnt *) hash_search(RelationIdCache, \
										   (void *) &amp;((RELATION)-&gt;rd_id), \
										   HASH_ENTER, &amp;found); \
	if (found) \
	{ \
		<comment type="block">/* see comments in RelationBuildDesc and RelationBuildLocalRelation */</comment> \
		Relation _old_rel = hentry-&gt;reldesc; \
		Assert(replace_allowed); \
		hentry-&gt;reldesc = (RELATION); \
		if (RelationHasReferenceCountZero(_old_rel)) \
			RelationDestroyRelation(_old_rel, false); \
		else if (!IsBootstrapProcessingMode()) \
			elog(WARNING, "leaking still-referenced relcache entry for \"%s\"", \
				 RelationGetRelationName(_old_rel)); \
	} \
	else \
		hentry-&gt;reldesc = (RELATION); \
} while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RelationIdCacheLookup</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>RELATION</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	RelIdCacheEnt *hentry; \
	hentry = (RelIdCacheEnt *) hash_search(RelationIdCache, \
										   (void *) &amp;(ID), \
										   HASH_FIND, NULL); \
	if (hentry) \
		RELATION = hentry-&gt;reldesc; \
	else \
		RELATION = NULL; \
} while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RelationCacheDelete</name><parameter_list>(<parameter><type><name>RELATION</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	RelIdCacheEnt *hentry; \
	hentry = (RelIdCacheEnt *) hash_search(RelationIdCache, \
										   (void *) &amp;((RELATION)-&gt;rd_id), \
										   HASH_REMOVE, NULL); \
	if (hentry == NULL) \
		elog(WARNING, "failed to delete relcache entry for OID %u", \
			 (RELATION)-&gt;rd_id); \
} while(0)</cpp:value></cpp:define>


<comment type="block">/*
 * Special cache for opclass-related information
 *
 * Note: only default support procs get cached, ie, those with
 * lefttype = righttype = opcintype.
 */</comment>
<typedef>typedef <type><struct>struct <name>opclasscacheent</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opclassoid</name></decl>;</decl_stmt>		<comment type="block">/* lookup key: OID of opclass */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>valid</name></decl>;</decl_stmt>			<comment type="block">/* set true after successful fill-in */</comment>
	<decl_stmt><decl><type><name>StrategyNumber</name></type> <name>numSupport</name></decl>;</decl_stmt>	<comment type="block">/* max # of support procs (from pg_am) */</comment>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opcfamily</name></decl>;</decl_stmt>		<comment type="block">/* OID of opclass's family */</comment>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opcintype</name></decl>;</decl_stmt>		<comment type="block">/* OID of opclass's declared input type */</comment>
	<decl_stmt><decl><type><name>RegProcedure</name> <modifier>*</modifier></type><name>supportProcs</name></decl>;</decl_stmt> <comment type="block">/* OIDs of support procedures */</comment>
}</block></struct></type> <name>OpClassCacheEnt</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>OpClassCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<comment type="block">/* non-export function prototypes */</comment>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RelationDestroyRelation</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>remember_tupdesc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RelationClearRelation</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rebuild</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RelationReloadIndexInfo</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RelationReloadNailed</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RelationFlushRelation</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RememberToFreeTupleDescAtEOX</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>td</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AtEOXact_cleanup</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AtEOSubXact_cleanup</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>,
								<parameter><decl><type><name>SubTransactionId</name></type> <name>mySubid</name></decl></parameter>, <parameter><decl><type><name>SubTransactionId</name></type> <name>parentSubid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>load_relcache_init_file</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>shared</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>write_relcache_init_file</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>shared</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>write_item</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>formrdesc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relationName</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relationReltype</name></decl></parameter>,
					  <parameter><decl><type><name>bool</name></type> <name>isshared</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>natts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FormData_pg_attribute</name> <modifier>*</modifier></type><name>attrs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HeapTuple</name></type> <name>ScanPgRelation</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>targetRelId</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>indexOK</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_non_historic</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Relation</name></type> <name>AllocateRelationDesc</name><parameter_list>(<parameter><decl><type><name>Form_pg_class</name></type> <name>relp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RelationParseRelOptions</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RelationBuildTupleDesc</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Relation</name></type> <name>RelationBuildDesc</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>targetRelId</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>insertIt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RelationInitPhysicalAddr</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">//static void RelationInitAppendOnlyInfo(Relation relation);</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>load_critical_index</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>indexoid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>heapoid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>TupleDesc</name></type> <name>GetPgClassDescriptor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>TupleDesc</name></type> <name>GetPgIndexDescriptor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AttrDefaultFetch</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CheckConstraintFetch</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>CheckConstraintCmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>insert_ordered_oid</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>datum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitIndexAmRoutine</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IndexSupportInitialize</name><parameter_list>(<parameter><decl><type><name>oidvector</name> <modifier>*</modifier></type><name>indclass</name></decl></parameter>,
								   <parameter><decl><type><name>RegProcedure</name> <modifier>*</modifier></type><name>indexSupport</name></decl></parameter>,
								   <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>opFamily</name></decl></parameter>,
								   <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>opcInType</name></decl></parameter>,
								   <parameter><decl><type><name>StrategyNumber</name></type> <name>maxSupportNumber</name></decl></parameter>,
								   <parameter><decl><type><name>AttrNumber</name></type> <name>maxAttributeNumber</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpClassCacheEnt</name> <modifier>*</modifier></type><name>LookupOpclassInfo</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>operatorClassOid</name></decl></parameter>,
										  <parameter><decl><type><name>StrategyNumber</name></type> <name>numSupport</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RelationCacheInitFileRemoveInDir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tblspcpath</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>unlink_initfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>initfilename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elevel</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 *		ScanPgRelation
 *
 *		This is used by RelationBuildDesc to find a pg_class
 *		tuple matching targetRelId.  The caller must hold at least
 *		AccessShareLock on the target relid to prevent concurrent-update
 *		scenarios; it isn't guaranteed that all scans used to build the
 *		relcache entry will use the same snapshot.  If, for example,
 *		an attribute were to be added after scanning pg_class and before
 *		scanning pg_attribute, relnatts wouldn't match.
 *
 *		NB: the returned tuple has been copied into palloc'd storage
 *		and must eventually be freed with heap_freetuple.
 */</comment>
<function><type><specifier>static</specifier> <name>HeapTuple</name></type>
<name>ScanPgRelation</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>targetRelId</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>indexOK</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_non_historic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>pg_class_tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>pg_class_desc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>pg_class_scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Snapshot</name></type>	<name>snapshot</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If something goes wrong during backend startup, we might find ourselves
	 * trying to read pg_class before we've selected a database.  That ain't
	 * gonna work, so bail out with a useful error message.  If this happens,
	 * it probably means a relcache entry that needs to be nailed isn't.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"cannot read pg_class without having selected a database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * form a scan key
	 */</comment>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_pg_class_oid</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
				<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>targetRelId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Open pg_class and fetch a tuple.  Force heap scan if we haven't yet
	 * built the critical relcache entries (this includes initdb and startup
	 * without a pg_internal.init file).  The caller can also force a heap
	 * scan by setting indexOK == false.
	 */</comment>
	<expr_stmt><expr><name>pg_class_desc</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>RelationRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The caller might need a tuple that's newer than the one the historic
	 * snapshot; currently the only case requiring to do so is looking up the
	 * relfilenode of non mapped system relations during decoding.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>force_non_historic</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>snapshot</name> <operator>=</operator> <call><name>GetNonHistoricCatalogSnapshot</name><argument_list>(
			<argument><expr><name>RelationRelationId</name></expr></argument>,
			<argument><expr><name>DistributedTransactionContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>snapshot</name> <operator>=</operator> <call><name>GetCatalogSnapshot</name><argument_list>(<argument><expr><name>RelationRelationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>pg_class_scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>pg_class_desc</name></expr></argument>, <argument><expr><name>ClassOidIndexId</name></expr></argument>,
									   <argument><expr><name>indexOK</name> <operator>&amp;&amp;</operator> <name>criticalRelcachesBuilt</name></expr></argument>,
									   <argument><expr><name>snapshot</name></expr></argument>,
									   <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pg_class_tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>pg_class_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Must copy tuple before releasing buffer.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>pg_class_tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>pg_class_tuple</name> <operator>=</operator> <call><name>heap_copytuple</name><argument_list>(<argument><expr><name>pg_class_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* all done */</comment>
	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>pg_class_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>pg_class_desc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>pg_class_tuple</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *		AllocateRelationDesc
 *
 *		This is used to allocate memory for a new relation descriptor
 *		and initialize the rd_rel field from the given pg_class tuple.
 */</comment>
<function><type><specifier>static</specifier> <name>Relation</name></type>
<name>AllocateRelationDesc</name><parameter_list>(<parameter><decl><type><name>Form_pg_class</name></type> <name>relp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>relation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_class</name></type> <name>relationForm</name></decl>;</decl_stmt>

	<comment type="block">/* Relcache entries must live in CacheMemoryContext */</comment>
	<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * allocate and zero space for new relation descriptor
	 */</comment>
	<expr_stmt><expr><name>relation</name> <operator>=</operator> <operator>(</operator><name>Relation</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RelationData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* make sure relation is marked as having no open file yet */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_smgr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Copy the relation tuple form
	 *
	 * We only allocate space for the fixed fields, ie, CLASS_TUPLE_SIZE. The
	 * variable-length fields (relacl, reloptions) are NOT stored in the
	 * relcache --- there'd be little point in it, since we don't copy the
	 * tuple's nulls bitmap and hence wouldn't know if the values are valid.
	 * Bottom line is that relacl *cannot* be retrieved from the relcache. Get
	 * it from the syscache if you need it.  The same goes for the original
	 * form of reloptions (however, we do store the parsed form of reloptions
	 * in rd_options).
	 */</comment>
	<expr_stmt><expr><name>relationForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>CLASS_TUPLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>relationForm</name></expr></argument>, <argument><expr><name>relp</name></expr></argument>, <argument><expr><name>CLASS_TUPLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* initialize relation tuple form */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name></name> <operator>=</operator> <name>relationForm</name></expr>;</expr_stmt>

	<comment type="block">/* and allocate attribute tuple form storage */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name></name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name><name>relationForm</name><operator>-&gt;</operator><name>relnatts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* which we mark as a reference-counted tupdesc */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>tdrefcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>relation</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * RelationParseRelOptions
 *		Convert pg_class.reloptions into pre-parsed rd_options
 *
 * tuple is the real pg_class tuple (not rd_rel!) for relation
 *
 * Note: rd_rel and (if an index) rd_indam must be valid already
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>RelationParseRelOptions</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bytea</name>	   <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>amoptions_function</name></type> <name>amoptsfn</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_options</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Look up any AM-specific parse function; fall out if relkind should not
	 * have options.
	 */</comment>
	<switch>switch <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RELKIND_RELATION</name></expr>:</case>
		<case>case <expr><name>RELKIND_TOASTVALUE</name></expr>:</case>
		<case>case <expr><name>RELKIND_AOSEGMENTS</name></expr>:</case>
		<case>case <expr><name>RELKIND_AOBLOCKDIR</name></expr>:</case>
		<case>case <expr><name>RELKIND_AOVISIMAP</name></expr>:</case>
		<case>case <expr><name>RELKIND_VIEW</name></expr>:</case>
		<case>case <expr><name>RELKIND_MATVIEW</name></expr>:</case>
		<case>case <expr><name>RELKIND_PARTITIONED_TABLE</name></expr>:</case>
			<expr_stmt><expr><name>amoptsfn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_INDEX</name></expr>:</case>
		<case>case <expr><name>RELKIND_PARTITIONED_INDEX</name></expr>:</case>
			<expr_stmt><expr><name>amoptsfn</name> <operator>=</operator> <name><name>relation</name><operator>-&gt;</operator><name>rd_indam</name><operator>-&gt;</operator><name>amoptions</name></name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<return>return;</return>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Fetch reloptions from tuple; have to use a hardwired descriptor because
	 * we might not have any other for pg_class yet (consider executing this
	 * code for pg_class itself)
	 */</comment>
	<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>extractRelOptions</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><call><name>GetPgClassDescriptor</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>amoptsfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Copy parsed data into CacheMemoryContext.  To guard against the
	 * possibility of leaks in the reloptions code, we want to do the actual
	 * parsing in the caller's memory context and copy the results into
	 * CacheMemoryContext after the fact.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>options</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_options</name></name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>,
												  <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_options</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *		RelationBuildTupleDesc
 *
 *		Form the relation's tuple descriptor from information in
 *		the pg_attribute, pg_attrdef &amp; pg_constraint system catalogs.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>RelationBuildTupleDesc</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>pg_attribute_tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>pg_attribute_desc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>pg_attribute_scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>need</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleConstr</name> <modifier>*</modifier></type><name>constr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttrDefault</name> <modifier>*</modifier></type><name>attrdef</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttrMissing</name> <modifier>*</modifier></type><name>attrmiss</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ndef</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* copy some fields from pg_class row to rd_att */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>tdtypeid</name></name> <operator>=</operator> <name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltype</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>tdtypmod</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>	<comment type="block">/* unnecessary, but... */</comment>

	<expr_stmt><expr><name>constr</name> <operator>=</operator> <operator>(</operator><name>TupleConstr</name> <operator>*</operator><operator>)</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>,
												<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleConstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>constr</name><operator>-&gt;</operator><name>has_not_null</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>constr</name><operator>-&gt;</operator><name>has_generated_stored</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Form a scan key that selects only user attributes (attnum &gt; 0).
	 * (Eliminating system attribute rows at the index level is lots faster
	 * than fetching them.)
	 */</comment>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_pg_attribute_attrelid</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
				<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_pg_attribute_attnum</name></expr></argument>,
				<argument><expr><name>BTGreaterStrategyNumber</name></expr></argument>, <argument><expr><name>F_INT2GT</name></expr></argument>,
				<argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Open pg_attribute and begin a scan.  Force heap scan if we haven't yet
	 * built the critical relcache entries (this includes initdb and startup
	 * without a pg_internal.init file).
	 */</comment>
	<expr_stmt><expr><name>pg_attribute_desc</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>AttributeRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pg_attribute_scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>pg_attribute_desc</name></expr></argument>,
										   <argument><expr><name>AttributeRelidNumIndexId</name></expr></argument>,
										   <argument><expr><name>criticalRelcachesBuilt</name></expr></argument>,
										   <argument><expr><name>NULL</name></expr></argument>,
										   <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * add attribute data to relation-&gt;rd_att
	 */</comment>
	<expr_stmt><expr><name>need</name> <operator>=</operator> <call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>pg_attribute_tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>pg_attribute_scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>attnum</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>attp</name> <operator>=</operator> <operator>(</operator><name>Form_pg_attribute</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>pg_attribute_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>attnum</name> <operator>=</operator> <name><name>attp</name><operator>-&gt;</operator><name>attnum</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>attnum</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>attnum</name> <operator>&gt;</operator> <call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid attribute number %d for %s"</literal></expr></argument>,
				 <argument><expr><name><name>attp</name><operator>-&gt;</operator><name>attnum</name></name></expr></argument>, <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name></name></expr></argument>, <argument><expr><name>attnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><name>attp</name></expr></argument>,
			   <argument><expr><name>ATTRIBUTE_FIXED_PART_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Update constraint/default info */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>attp</name><operator>-&gt;</operator><name>attnotnull</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>constr</name><operator>-&gt;</operator><name>has_not_null</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>attp</name><operator>-&gt;</operator><name>attgenerated</name></name> <operator>==</operator> <name>ATTRIBUTE_GENERATED_STORED</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>constr</name><operator>-&gt;</operator><name>has_generated_stored</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* If the column has a default, fill it into the attrdef array */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>attp</name><operator>-&gt;</operator><name>atthasdef</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>attrdef</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>attrdef</name> <operator>=</operator> <operator>(</operator><name>AttrDefault</name> <operator>*</operator><operator>)</operator>
					<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>,
										   <argument><expr><call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>*</operator>
										   <sizeof>sizeof<argument_list>(<argument><expr><name>AttrDefault</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>attrdef</name><index>[<expr><name>ndef</name></expr>]</index></name><operator>.</operator><name>adnum</name> <operator>=</operator> <name>attnum</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>attrdef</name><index>[<expr><name>ndef</name></expr>]</index></name><operator>.</operator><name>adbin</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>ndef</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Likewise for a missing value */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>attp</name><operator>-&gt;</operator><name>atthasmissing</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Datum</name></type>		<name>missingval</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>missingNull</name></decl>;</decl_stmt>

			<comment type="block">/* Do we have a missing value? */</comment>
			<expr_stmt><expr><name>missingval</name> <operator>=</operator> <call><name>heap_getattr</name><argument_list>(<argument><expr><name>pg_attribute_tuple</name></expr></argument>,
									  <argument><expr><name>Anum_pg_attribute_attmissingval</name></expr></argument>,
									  <argument><expr><name><name>pg_attribute_desc</name><operator>-&gt;</operator><name>rd_att</name></name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name>missingNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>missingNull</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Yes, fetch from the array */</comment>
				<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type>		<name>is_null</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Datum</name></type>		<name>missval</name></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>attrmiss</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>attrmiss</name> <operator>=</operator> <operator>(</operator><name>AttrMissing</name> <operator>*</operator><operator>)</operator>
						<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>,
											   <argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relnatts</name></name> <operator>*</operator>
											   <sizeof>sizeof<argument_list>(<argument><expr><name>AttrMissing</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>missval</name> <operator>=</operator> <call><name>array_get_element</name><argument_list>(<argument><expr><name>missingval</name></expr></argument>,
											<argument><expr><literal type="number">1</literal></expr></argument>,
											<argument><expr><operator>&amp;</operator><name>one</name></expr></argument>,
											<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
											<argument><expr><name><name>attp</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>,
											<argument><expr><name><name>attp</name><operator>-&gt;</operator><name>attbyval</name></name></expr></argument>,
											<argument><expr><name><name>attp</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>,
											<argument><expr><operator>&amp;</operator><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>attp</name><operator>-&gt;</operator><name>attbyval</name></name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* for copy by val just copy the datum direct */</comment>
					<expr_stmt><expr><name><name>attrmiss</name><index>[<expr><name>attnum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>am_value</name> <operator>=</operator> <name>missval</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="block">/* otherwise copy in the correct context */</comment>
					<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>attrmiss</name><index>[<expr><name>attnum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>am_value</name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name>missval</name></expr></argument>,
															  <argument><expr><name><name>attp</name><operator>-&gt;</operator><name>attbyval</name></name></expr></argument>,
															  <argument><expr><name><name>attp</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<expr_stmt><expr><name><name>attrmiss</name><index>[<expr><name>attnum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>am_present</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>need</name><operator>--</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>need</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * end the scan and close the attribute relation
	 */</comment>
	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>pg_attribute_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>pg_attribute_desc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>need</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"catalog is missing %d attribute(s) for relid %u"</literal></expr></argument>,
			 <argument><expr><name>need</name></expr></argument>, <argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * The attcacheoff values we read from pg_attribute should all be -1
	 * ("unknown").  Verify this if assert checking is on.  They will be
	 * computed when and if needed during tuple access.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attcacheoff</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * However, we can easily set the attcacheoff value for the first
	 * attribute: it must be zero.  This eliminates the need for special cases
	 * for attnum=1 that used to exist in fastgetattr() and index_getattr().
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attcacheoff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Set up constraint/default info
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>constr</name><operator>-&gt;</operator><name>has_not_null</name></name> <operator>||</operator> <name>ndef</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
		<name>attrmiss</name> <operator>||</operator> <name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relchecks</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>constr</name></name> <operator>=</operator> <name>constr</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>ndef</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>			<comment type="block">/* DEFAULTs */</comment>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>ndef</name> <operator>&lt;</operator> <call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>constr</name><operator>-&gt;</operator><name>defval</name></name> <operator>=</operator> <operator>(</operator><name>AttrDefault</name> <operator>*</operator><operator>)</operator>
					<call><name>repalloc</name><argument_list>(<argument><expr><name>attrdef</name></expr></argument>, <argument><expr><name>ndef</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrDefault</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>constr</name><operator>-&gt;</operator><name>defval</name></name> <operator>=</operator> <name>attrdef</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name><name>constr</name><operator>-&gt;</operator><name>num_defval</name></name> <operator>=</operator> <name>ndef</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>AttrDefaultFetch</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>constr</name><operator>-&gt;</operator><name>num_defval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name><name>constr</name><operator>-&gt;</operator><name>missing</name></name> <operator>=</operator> <name>attrmiss</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relchecks</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>	<comment type="block">/* CHECKs */</comment>
		<block>{<block_content>
			<expr_stmt><expr><name><name>constr</name><operator>-&gt;</operator><name>num_check</name></name> <operator>=</operator> <name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relchecks</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>constr</name><operator>-&gt;</operator><name>check</name></name> <operator>=</operator> <operator>(</operator><name>ConstrCheck</name> <operator>*</operator><operator>)</operator>
				<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>,
									   <argument><expr><name><name>constr</name><operator>-&gt;</operator><name>num_check</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConstrCheck</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CheckConstraintFetch</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>constr</name><operator>-&gt;</operator><name>num_check</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>constr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>constr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *		RelationBuildRuleLock
 *
 *		Form the relation's rewrite rules from information in
 *		the pg_rewrite system catalog.
 *
 * Note: The rule parsetrees are potentially very complex node structures.
 * To allow these trees to be freed when the relcache entry is flushed,
 * we make a private memory context to hold the RuleLock information for
 * each relcache entry that has associated rules.  The context is used
 * just for rule info, not for any other subsidiary data of the relcache
 * entry, because that keeps the update logic in RelationClearRelation()
 * manageable.  The other subsidiary data structures are simple enough
 * to be easy to free explicitly, anyway.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>RelationBuildRuleLock</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>rulescxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>rewrite_tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>rewrite_desc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>rewrite_tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>rewrite_scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RuleLock</name>   <modifier>*</modifier></type><name>rulelock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>numlocks</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RewriteRule</name> <modifier>*</modifier><modifier>*</modifier></type><name>rules</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>maxlocks</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Make the private context.  Assume it'll not contain much data.
	 */</comment>
	<expr_stmt><expr><name>rulescxt</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>,
									 <argument><expr><literal type="string">"relation rules"</literal></expr></argument>,
									 <argument><expr><name>ALLOCSET_SMALL_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rulescxt</name></name> <operator>=</operator> <name>rulescxt</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextCopyAndSetIdentifier</name><argument_list>(<argument><expr><name>rulescxt</name></expr></argument>,
									  <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * allocate an array to hold the rewrite rules (the array is extended if
	 * necessary)
	 */</comment>
	<expr_stmt><expr><name>maxlocks</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rules</name> <operator>=</operator> <operator>(</operator><name>RewriteRule</name> <operator>*</operator><operator>*</operator><operator>)</operator>
		<call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>rulescxt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RewriteRule</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>maxlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>numlocks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * form a scan key
	 */</comment>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>,
				<argument><expr><name>Anum_pg_rewrite_ev_class</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
				<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * open pg_rewrite and begin a scan
	 *
	 * Note: since we scan the rules using RewriteRelRulenameIndexId, we will
	 * be reading the rules in name order, except possibly during
	 * emergency-recovery operations (ie, IgnoreSystemIndexes). This in turn
	 * ensures that rules will be fired in name order.
	 */</comment>
	<expr_stmt><expr><name>rewrite_desc</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>RewriteRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rewrite_tupdesc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rewrite_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rewrite_scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>rewrite_desc</name></expr></argument>,
									  <argument><expr><name>RewriteRelRulenameIndexId</name></expr></argument>,
									  <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
									  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>rewrite_tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>rewrite_scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_rewrite</name></type> <name>rewrite_form</name> <init>= <expr><operator>(</operator><name>Form_pg_rewrite</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>rewrite_tuple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>rule_datum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>rule_str</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RewriteRule</name> <modifier>*</modifier></type><name>rule</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>rule</name> <operator>=</operator> <operator>(</operator><name>RewriteRule</name> <operator>*</operator><operator>)</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>rulescxt</name></expr></argument>,
												  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RewriteRule</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>ruleId</name></name> <operator>=</operator> <name><name>rewrite_form</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <name><name>rewrite_form</name><operator>-&gt;</operator><name>ev_type</name></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <name><name>rewrite_form</name><operator>-&gt;</operator><name>ev_enabled</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>isInstead</name></name> <operator>=</operator> <name><name>rewrite_form</name><operator>-&gt;</operator><name>is_instead</name></name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Must use heap_getattr to fetch ev_action and ev_qual.  Also, the
		 * rule strings are often large enough to be toasted.  To avoid
		 * leaking memory in the caller's context, do the detoasting here so
		 * we can free the detoasted version.
		 */</comment>
		<expr_stmt><expr><name>rule_datum</name> <operator>=</operator> <call><name>heap_getattr</name><argument_list>(<argument><expr><name>rewrite_tuple</name></expr></argument>,
								  <argument><expr><name>Anum_pg_rewrite_ev_action</name></expr></argument>,
								  <argument><expr><name>rewrite_tupdesc</name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rule_str</name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>rule_datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>rulescxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>actions</name></name> <operator>=</operator> <operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>stringToNode</name><argument_list>(<argument><expr><name>rule_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>rule_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>rule_datum</name> <operator>=</operator> <call><name>heap_getattr</name><argument_list>(<argument><expr><name>rewrite_tuple</name></expr></argument>,
								  <argument><expr><name>Anum_pg_rewrite_ev_qual</name></expr></argument>,
								  <argument><expr><name>rewrite_tupdesc</name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rule_str</name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>rule_datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>rulescxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rule</name><operator>-&gt;</operator><name>qual</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>stringToNode</name><argument_list>(<argument><expr><name>rule_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>rule_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * We want the rule's table references to be checked as though by the
		 * table owner, not the user referencing the rule.  Therefore, scan
		 * through the rule's actions and set the checkAsUser field on all
		 * rtable entries.  We have to look at the qual as well, in case it
		 * contains sublinks.
		 *
		 * The reason for doing this when the rule is loaded, rather than when
		 * it is stored, is that otherwise ALTER TABLE OWNER would have to
		 * grovel through stored rules to update checkAsUser fields. Scanning
		 * the rule tree during load is relatively cheap (compared to
		 * constructing it in the first place), so we do it here.
		 */</comment>
		<expr_stmt><expr><call><name>setRuleCheckAsUser</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>rule</name><operator>-&gt;</operator><name>actions</name></name></expr></argument>, <argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relowner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setRuleCheckAsUser</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>qual</name></name></expr></argument>, <argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relowner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>numlocks</name> <operator>&gt;=</operator> <name>maxlocks</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>maxlocks</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>rules</name> <operator>=</operator> <operator>(</operator><name>RewriteRule</name> <operator>*</operator><operator>*</operator><operator>)</operator>
				<call><name>repalloc</name><argument_list>(<argument><expr><name>rules</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RewriteRule</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>maxlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>rules</name><index>[<expr><name>numlocks</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>rule</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * end the scan and close the attribute relation
	 */</comment>
	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>rewrite_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rewrite_desc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * there might not be any rules (if relhasrules is out-of-date)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>numlocks</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rules</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rulescxt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name>rulescxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * form a RuleLock and insert into relation
	 */</comment>
	<expr_stmt><expr><name>rulelock</name> <operator>=</operator> <operator>(</operator><name>RuleLock</name> <operator>*</operator><operator>)</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>rulescxt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RuleLock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rulelock</name><operator>-&gt;</operator><name>numLocks</name></name> <operator>=</operator> <name>numlocks</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rulelock</name><operator>-&gt;</operator><name>rules</name></name> <operator>=</operator> <name>rules</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rules</name></name> <operator>=</operator> <name>rulelock</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *		equalRuleLocks
 *
 *		Determine whether two RuleLocks are equivalent
 *
 *		Probably this should be in the rules code someplace...
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>equalRuleLocks</name><parameter_list>(<parameter><decl><type><name>RuleLock</name> <modifier>*</modifier></type><name>rlock1</name></decl></parameter>, <parameter><decl><type><name>RuleLock</name> <modifier>*</modifier></type><name>rlock2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * As of 7.3 we assume the rule ordering is repeatable, because
	 * RelationBuildRuleLock should read 'em in a consistent order.  So just
	 * compare corresponding slots.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>rlock1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>rlock2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>rlock1</name><operator>-&gt;</operator><name>numLocks</name></name> <operator>!=</operator> <name><name>rlock2</name><operator>-&gt;</operator><name>numLocks</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rlock1</name><operator>-&gt;</operator><name>numLocks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>RewriteRule</name> <modifier>*</modifier></type><name>rule1</name> <init>= <expr><name><name>rlock1</name><operator>-&gt;</operator><name>rules</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>RewriteRule</name> <modifier>*</modifier></type><name>rule2</name> <init>= <expr><name><name>rlock2</name><operator>-&gt;</operator><name>rules</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>rule1</name><operator>-&gt;</operator><name>ruleId</name></name> <operator>!=</operator> <name><name>rule2</name><operator>-&gt;</operator><name>ruleId</name></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>rule1</name><operator>-&gt;</operator><name>event</name></name> <operator>!=</operator> <name><name>rule2</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>rule1</name><operator>-&gt;</operator><name>enabled</name></name> <operator>!=</operator> <name><name>rule2</name><operator>-&gt;</operator><name>enabled</name></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>rule1</name><operator>-&gt;</operator><name>isInstead</name></name> <operator>!=</operator> <name><name>rule2</name><operator>-&gt;</operator><name>isInstead</name></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equal</name><argument_list>(<argument><expr><name><name>rule1</name><operator>-&gt;</operator><name>qual</name></name></expr></argument>, <argument><expr><name><name>rule2</name><operator>-&gt;</operator><name>qual</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equal</name><argument_list>(<argument><expr><name><name>rule1</name><operator>-&gt;</operator><name>actions</name></name></expr></argument>, <argument><expr><name><name>rule2</name><operator>-&gt;</operator><name>actions</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>rlock2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *		equalPolicy
 *
 *		Determine whether two policies are equivalent
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>equalPolicy</name><parameter_list>(<parameter><decl><type><name>RowSecurityPolicy</name> <modifier>*</modifier></type><name>policy1</name></decl></parameter>, <parameter><decl><type><name>RowSecurityPolicy</name> <modifier>*</modifier></type><name>policy2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name>		   <modifier>*</modifier></type><name>r1</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>r2</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>policy1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>policy2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>policy1</name><operator>-&gt;</operator><name>polcmd</name></name> <operator>!=</operator> <name><name>policy2</name><operator>-&gt;</operator><name>polcmd</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>policy1</name><operator>-&gt;</operator><name>hassublinks</name></name> <operator>!=</operator> <name><name>policy2</name><operator>-&gt;</operator><name>hassublinks</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>policy1</name><operator>-&gt;</operator><name>policy_name</name></name></expr></argument>, <argument><expr><name><name>policy2</name><operator>-&gt;</operator><name>policy_name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ARR_DIMS</name><argument_list>(<argument><expr><name><name>policy1</name><operator>-&gt;</operator><name>roles</name></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <call><name>ARR_DIMS</name><argument_list>(<argument><expr><name><name>policy2</name><operator>-&gt;</operator><name>roles</name></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name><name>policy1</name><operator>-&gt;</operator><name>roles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name><name>policy2</name><operator>-&gt;</operator><name>roles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARR_DIMS</name><argument_list>(<argument><expr><name><name>policy1</name><operator>-&gt;</operator><name>roles</name></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>r1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>r2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equal</name><argument_list>(<argument><expr><name><name>policy1</name><operator>-&gt;</operator><name>qual</name></name></expr></argument>, <argument><expr><name><name>policy2</name><operator>-&gt;</operator><name>qual</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equal</name><argument_list>(<argument><expr><name><name>policy1</name><operator>-&gt;</operator><name>with_check_qual</name></name></expr></argument>, <argument><expr><name><name>policy2</name><operator>-&gt;</operator><name>with_check_qual</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>policy2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *		equalRSDesc
 *
 *		Determine whether two RowSecurityDesc's are equivalent
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>equalRSDesc</name><parameter_list>(<parameter><decl><type><name>RowSecurityDesc</name> <modifier>*</modifier></type><name>rsdesc1</name></decl></parameter>, <parameter><decl><type><name>RowSecurityDesc</name> <modifier>*</modifier></type><name>rsdesc2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>rc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rsdesc1</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>rsdesc2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rsdesc1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>rsdesc2</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
		<operator>(</operator><name>rsdesc1</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>rsdesc2</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>rsdesc1</name><operator>-&gt;</operator><name>policies</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>rsdesc2</name><operator>-&gt;</operator><name>policies</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* RelationBuildRowSecurity should build policies in order */</comment>
	<macro><name>forboth</name><argument_list>(<argument>lc</argument>, <argument>rsdesc1-&gt;policies</argument>, <argument>rc</argument>, <argument>rsdesc2-&gt;policies</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RowSecurityPolicy</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><operator>(</operator><name>RowSecurityPolicy</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RowSecurityPolicy</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><name>RowSecurityPolicy</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equalPolicy</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *		RelationBuildDesc
 *
 *		Build a relation descriptor.  The caller must hold at least
 *		AccessShareLock on the target relid.
 *
 *		The new descriptor is inserted into the hash table if insertIt is true.
 *
 *		Returns NULL if no pg_class row could be found for the given relid
 *		(suggesting we are trying to access a just-deleted relation).
 *		Any other error is reported via elog.
 */</comment>
<function><type><specifier>static</specifier> <name>Relation</name></type>
<name>RelationBuildDesc</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>targetRelId</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>insertIt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>relation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>relid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>pg_class_tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_class</name></type> <name>relp</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * This function and its subroutines can allocate a good deal of transient
	 * data in CurrentMemoryContext.  Traditionally we've just leaked that
	 * data, reasoning that the caller's context is at worst of transaction
	 * scope, and relcache loads shouldn't happen so often that it's essential
	 * to recover transient data before end of statement/transaction.  However
	 * that's definitely not true in clobber-cache test builds, and perhaps
	 * it's not true in other cases.  If RECOVER_RELATION_BUILD_MEMORY is not
	 * zero, arrange to allocate the junk in a temporary context that we'll
	 * free before returning.  Make it a child of caller's context so that it
	 * will get cleaned up appropriately if we error out partway through.
	 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RECOVER_RELATION_BUILD_MEMORY</name></expr></cpp:if>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>tmpcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tmpcxt</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>,
								   <argument><expr><literal type="string">"RelationBuildDesc workspace"</literal></expr></argument>,
								   <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>tmpcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * find the tuple in pg_class corresponding to the given relation id
	 */</comment>
	<expr_stmt><expr><name>pg_class_tuple</name> <operator>=</operator> <call><name>ScanPgRelation</name><argument_list>(<argument><expr><name>targetRelId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * if no such tuple exists, return NULL
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>pg_class_tuple</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RECOVER_RELATION_BUILD_MEMORY</name></expr></cpp:if>
		<comment type="block">/* Return to caller's context, and blow away the temporary context */</comment>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name>tmpcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * get information from the pg_class_tuple
	 */</comment>
	<expr_stmt><expr><name>relp</name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>pg_class_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>relid</name> <operator>=</operator> <name><name>relp</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>relid</name> <operator>==</operator> <name>targetRelId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * allocate storage for the relation descriptor, and copy pg_class_tuple
	 * to relation-&gt;rd_rel and new fields into relation-&gt;rd_newfields.
	 */</comment>
	<expr_stmt><expr><name>relation</name> <operator>=</operator> <call><name>AllocateRelationDesc</name><argument_list>(<argument><expr><name>relp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * initialize the relation's relation id (relation-&gt;rd_id)
	 */</comment>
	<expr_stmt><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>relid</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * normal relations are not nailed into the cache; nor can a pre-existing
	 * relation be new.  It could be temp though.  (Actually, it could be new
	 * too, but it's okay to forget that fact if forced to flush the entry.)
	 */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_refcnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_isnailed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_createSubid</name></name> <operator>=</operator> <name>InvalidSubTransactionId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_newRelfilenodeSubid</name></name> <operator>=</operator> <name>InvalidSubTransactionId</name></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relpersistence</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RELPERSISTENCE_UNLOGGED</name></expr>:</case>
		<case>case <expr><name>RELPERSISTENCE_PERMANENT</name></expr>:</case>
			<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_backend</name></name> <operator>=</operator> <name>InvalidBackendId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_islocaltemp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELPERSISTENCE_TEMP</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>isTempOrTempToastNamespace</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relnamespace</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_backend</name></name> <operator>=</operator> <call><name>BackendIdForTempRelations</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_islocaltemp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/*
				 * If it's a temp table, but not one of ours, we have to use
				 * the slow, grotty method to figure out the owning backend.
				 *
				 * Note: it's possible that rd_backend gets set to MyBackendId
				 * here, in case we are looking at a pg_class entry left over
				 * from a crashed backend that coincidentally had the same
				 * BackendId we're using.  We should *not* consider such a
				 * table to be "ours"; this is why we need the separate
				 * rd_islocaltemp flag.  The pg_class entry will get flushed
				 * if/when we clean out the corresponding temp table namespace
				 * in preparation for using it.
				 */</comment>
				<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_backend</name></name> <operator>=</operator> <name>TempRelBackendId</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_backend</name></name> <operator>!=</operator> <name>InvalidBackendId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_islocaltemp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid relpersistence: %c"</literal></expr></argument>,
				 <argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relpersistence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * initialize the tuple descriptor (relation-&gt;rd_att).
	 */</comment>
	<expr_stmt><expr><call><name>RelationBuildTupleDesc</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Fetch rules and triggers that affect this relation
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relhasrules</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RelationBuildRuleLock</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rules</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rulescxt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relhastriggers</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RelationBuildTriggers</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>trigdesc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relrowsecurity</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RelationBuildRowSecurity</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rsdesc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* foreign key data is not loaded till asked for */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_fkeylist</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_fkeyvalid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* if a partitioned table, initialize key and partition descriptor info */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_PARTITIONED_TABLE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RelationBuildPartitionKey</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RelationBuildPartitionDesc</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_partkey</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_partkeycxt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_partdesc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_pdcxt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* ... but partcheck is not loaded till asked for */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_partcheck</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_partcheckvalid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_partcheckcxt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * initialize access method information
	 */</comment>
	<switch>switch <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RELKIND_INDEX</name></expr>:</case>
		<case>case <expr><name>RELKIND_PARTITIONED_INDEX</name></expr>:</case>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name> <operator>!=</operator> <name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RelationInitIndexAccessInfo</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_RELATION</name></expr>:</case>
		<case>case <expr><name>RELKIND_TOASTVALUE</name></expr>:</case>
		<case>case <expr><name>RELKIND_MATVIEW</name></expr>:</case>
		<case>case <expr><name>RELKIND_PARTITIONED_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name> <operator>!=</operator> <name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RelationInitTableAccessMethod</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_SEQUENCE</name></expr>:</case>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name> <operator>==</operator> <name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RelationInitTableAccessMethod</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_VIEW</name></expr>:</case>
		<case>case <expr><name>RELKIND_COMPOSITE_TYPE</name></expr>:</case>
		<case>case <expr><name>RELKIND_FOREIGN_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name> <operator>==</operator> <name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_AOSEGMENTS</name></expr>:</case>
		<case>case <expr><name>RELKIND_AOVISIMAP</name></expr>:</case>
		<case>case <expr><name>RELKIND_AOBLOCKDIR</name></expr>:</case>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name> <operator>!=</operator> <name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RelationInitTableAccessMethod</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/* extract reloptions if any */</comment>
	<expr_stmt><expr><call><name>RelationParseRelOptions</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>pg_class_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * initialize the relation lock manager information
	 */</comment>
	<expr_stmt><expr><call><name>RelationInitLockInfo</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* see lmgr.c */</comment>

	<comment type="block">/*
	 * initialize physical addressing information for the relation
	 */</comment>
	<expr_stmt><expr><call><name>RelationInitPhysicalAddr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* make sure relation is marked as having no open file yet */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_smgr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/*
     * initialize Greenplum Database partitioning info
     */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_RELATION</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsSystemRelation</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
		<name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_PARTITIONED_TABLE</name> <operator>||</operator>
		<name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_FOREIGN_TABLE</name> <operator>||</operator>
		<name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_MATVIEW</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * There are many memory allocations in GpPolicyFetch(), especially 
		 * when targetRelId is a foreign table. These allocations are not bound to RelationData, 
		 * so they cannot be freed during RelationDestroyRelation(),
		 * that is, these allocations will never be freed.
		 */</comment>
		<decl_stmt><decl><type><name>GpPolicy</name> <modifier>*</modifier></type><name>policy</name> <init>= <expr><call><name>GpPolicyFetch</name><argument_list>(<argument><expr><name>targetRelId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_cdbpolicy</name></name> <operator>=</operator> <call><name>GpPolicyCopy</name><argument_list>(<argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * now we can free the memory allocated for pg_class_tuple
	 */</comment>
	<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>pg_class_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Insert newly created relation into relcache hash table, if requested.
	 *
	 * There is one scenario in which we might find a hashtable entry already
	 * present, even though our caller failed to find it: if the relation is a
	 * system catalog or index that's used during relcache load, we might have
	 * recursively created the same relcache entry during the preceding steps.
	 * So allow RelationCacheInsert to delete any already-present relcache
	 * entry for the same OID.  The already-present entry should have refcount
	 * zero (else somebody forgot to close it); in the event that it doesn't,
	 * we'll elog a WARNING and leak the already-present entry.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>insertIt</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RelationCacheInsert</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* It's fully valid */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_isvalid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RECOVER_RELATION_BUILD_MEMORY</name></expr></cpp:if>
	<comment type="block">/* Return to caller's context, and blow away the temporary context */</comment>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name>tmpcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>relation</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize the physical addressing info (RelFileNode) for a relcache entry
 *
 * Note: at the physical level, relations in the pg_global tablespace must
 * be treated as shared, even if relisshared isn't set.  Hence we do not
 * look at relisshared here.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>RelationInitPhysicalAddr</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* these relations kinds never have storage */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RELKIND_HAS_STORAGE</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltablespace</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltablespace</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <name>MyDatabaseTableSpace</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>spcNode</name></name> <operator>==</operator> <name>GLOBALTABLESPACE_OID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <name>MyDatabaseId</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relfilenode</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Even if we are using a decoding snapshot that doesn't represent the
		 * current state of the catalog we need to make sure the filenode
		 * points to the current file since the older file will be gone (or
		 * truncated). The new file will still contain older rows so lookups
		 * in them will work correctly. This wouldn't work correctly if
		 * rewrites were allowed to change the schema in an incompatible way,
		 * but those are prevented both on catalog tables and on user tables
		 * declared as additional catalog tables.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>HistoricSnapshotActive</name><argument_list>()</argument_list></call>
			<operator>&amp;&amp;</operator> <call><name>RelationIsAccessibleInLogicalDecoding</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call>
			<operator>&amp;&amp;</operator> <call><name>IsTransactionState</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>phys_tuple</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Form_pg_class</name></type> <name>physrel</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>phys_tuple</name> <operator>=</operator> <call><name>ScanPgRelation</name><argument_list>(<argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ClassOidIndexId</name></expr></argument>,
										<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>phys_tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find pg_class entry for %u"</literal></expr></argument>,
					 <argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>physrel</name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>phys_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltablespace</name></name> <operator>=</operator> <name><name>physrel</name><operator>-&gt;</operator><name>reltablespace</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relfilenode</name></name> <operator>=</operator> <name><name>physrel</name><operator>-&gt;</operator><name>relfilenode</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>phys_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relfilenode</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Consult the relation mapper */</comment>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name> <operator>=</operator>
			<call><name>RelationMapOidToFilenode</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>,
									 <argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relisshared</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find relation mapping for relation \"%s\", OID %u"</literal></expr></argument>,
				 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Fill in the IndexAmRoutine for an index relation.
 *
 * relation's rd_amhandler and rd_indexcxt must be valid already.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>InitIndexAmRoutine</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexAmRoutine</name> <modifier>*</modifier></type><name>cached</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Call the amhandler in current, short-lived memory context, just in case
	 * it leaks anything (it probably won't, but let's be paranoid).
	 */</comment>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>GetIndexAmRoutine</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_amhandler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* OK, now transfer the data into relation's rd_indexcxt. */</comment>
	<expr_stmt><expr><name>cached</name> <operator>=</operator> <operator>(</operator><name>IndexAmRoutine</name> <operator>*</operator><operator>)</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_indexcxt</name></name></expr></argument>,
												   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IndexAmRoutine</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cached</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IndexAmRoutine</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_indam</name></name> <operator>=</operator> <name>cached</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize index-access-method support data for an index relation
 */</comment>
<function><type><name>void</name></type>
<name>RelationInitIndexAccessInfo</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_am</name></type>	<name>aform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>indcollDatum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>indclassDatum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>indoptionDatum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>oidvector</name>  <modifier>*</modifier></type><name>indcoll</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>oidvector</name>  <modifier>*</modifier></type><name>indclass</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int2vector</name> <modifier>*</modifier></type><name>indoption</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>indexcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>indnatts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>indnkeyatts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>amsupport</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Make a copy of the pg_index entry for the index.  Since pg_index
	 * contains variable-length and possibly-null fields, we have to do this
	 * honestly rather than just treating it as a Form_pg_index struct.
	 */</comment>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>INDEXRELID</name></expr></argument>,
							<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for index %u"</literal></expr></argument>,
			 <argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_indextuple</name></name> <operator>=</operator> <call><name>heap_copytuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_index</name></name> <operator>=</operator> <operator>(</operator><name>Form_pg_index</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_indextuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Look up the index's access method, save the OID of its handler function
	 */</comment>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>AMOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for access method %u"</literal></expr></argument>,
			 <argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>aform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_am</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_amhandler</name></name> <operator>=</operator> <name><name>aform</name><operator>-&gt;</operator><name>amhandler</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>indnatts</name> <operator>=</operator> <call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>indnatts</name> <operator>!=</operator> <call><name>IndexRelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"relnatts disagrees with indnatts for index %u"</literal></expr></argument>,
			 <argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>indnkeyatts</name> <operator>=</operator> <call><name>IndexRelationGetNumberOfKeyAttributes</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Make the private context to hold index access info.  The reason we need
	 * a context, and not just a couple of pallocs, is so that we won't leak
	 * any subsidiary info attached to fmgr lookup records.
	 */</comment>
	<expr_stmt><expr><name>indexcxt</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>,
									 <argument><expr><literal type="string">"index info"</literal></expr></argument>,
									 <argument><expr><name>ALLOCSET_SMALL_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_indexcxt</name></name> <operator>=</operator> <name>indexcxt</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextCopyAndSetIdentifier</name><argument_list>(<argument><expr><name>indexcxt</name></expr></argument>,
									  <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Now we can fetch the index AM's API struct
	 */</comment>
	<expr_stmt><expr><call><name>InitIndexAmRoutine</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Allocate arrays to hold data. Opclasses are not used for included
	 * columns, so allocate them for indnkeyatts only.
	 */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_opfamily</name></name> <operator>=</operator> <operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator>
		<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>indexcxt</name></expr></argument>, <argument><expr><name>indnkeyatts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_opcintype</name></name> <operator>=</operator> <operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator>
		<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>indexcxt</name></expr></argument>, <argument><expr><name>indnkeyatts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>amsupport</name> <operator>=</operator> <name><name>relation</name><operator>-&gt;</operator><name>rd_indam</name><operator>-&gt;</operator><name>amsupport</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>amsupport</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>nsupport</name> <init>= <expr><name>indnatts</name> <operator>*</operator> <name>amsupport</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_support</name></name> <operator>=</operator> <operator>(</operator><name>RegProcedure</name> <operator>*</operator><operator>)</operator>
			<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>indexcxt</name></expr></argument>, <argument><expr><name>nsupport</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RegProcedure</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_supportinfo</name></name> <operator>=</operator> <operator>(</operator><name>FmgrInfo</name> <operator>*</operator><operator>)</operator>
			<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>indexcxt</name></expr></argument>, <argument><expr><name>nsupport</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_support</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_supportinfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_indcollation</name></name> <operator>=</operator> <operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator>
		<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>indexcxt</name></expr></argument>, <argument><expr><name>indnkeyatts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_indoption</name></name> <operator>=</operator> <operator>(</operator><name>int16</name> <operator>*</operator><operator>)</operator>
		<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>indexcxt</name></expr></argument>, <argument><expr><name>indnkeyatts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * indcollation cannot be referenced directly through the C struct,
	 * because it comes after the variable-width indkey field.  Must extract
	 * the datum the hard way...
	 */</comment>
	<expr_stmt><expr><name>indcollDatum</name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_indextuple</name></name></expr></argument>,
							   <argument><expr><name>Anum_pg_index_indcollation</name></expr></argument>,
							   <argument><expr><call><name>GetPgIndexDescriptor</name><argument_list>()</argument_list></call></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>indcoll</name> <operator>=</operator> <operator>(</operator><name>oidvector</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>indcollDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_indcollation</name></name></expr></argument>, <argument><expr><name><name>indcoll</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>indnkeyatts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * indclass cannot be referenced directly through the C struct, because it
	 * comes after the variable-width indkey field.  Must extract the datum
	 * the hard way...
	 */</comment>
	<expr_stmt><expr><name>indclassDatum</name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_indextuple</name></name></expr></argument>,
								<argument><expr><name>Anum_pg_index_indclass</name></expr></argument>,
								<argument><expr><call><name>GetPgIndexDescriptor</name><argument_list>()</argument_list></call></expr></argument>,
								<argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>indclass</name> <operator>=</operator> <operator>(</operator><name>oidvector</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>indclassDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Fill the support procedure OID array, as well as the info about
	 * opfamilies and opclass input types.  (aminfo and supportinfo are left
	 * as zeroes, and are filled on-the-fly when used)
	 */</comment>
	<expr_stmt><expr><call><name>IndexSupportInitialize</name><argument_list>(<argument><expr><name>indclass</name></expr></argument>, <argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_support</name></name></expr></argument>,
						   <argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_opfamily</name></name></expr></argument>, <argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_opcintype</name></name></expr></argument>,
						   <argument><expr><name>amsupport</name></expr></argument>, <argument><expr><name>indnkeyatts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Similarly extract indoption and copy it to the cache entry
	 */</comment>
	<expr_stmt><expr><name>indoptionDatum</name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_indextuple</name></name></expr></argument>,
								 <argument><expr><name>Anum_pg_index_indoption</name></expr></argument>,
								 <argument><expr><call><name>GetPgIndexDescriptor</name><argument_list>()</argument_list></call></expr></argument>,
								 <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>indoption</name> <operator>=</operator> <operator>(</operator><name>int2vector</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>indoptionDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_indoption</name></name></expr></argument>, <argument><expr><name><name>indoption</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>indnkeyatts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * expressions, predicate, exclusion caches will be filled later
	 */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_indexprs</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_indpred</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_exclops</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_exclprocs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_exclstrats</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_amcache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * IndexSupportInitialize
 *		Initializes an index's cached opclass information,
 *		given the index's pg_index.indclass entry.
 *
 * Data is returned into *indexSupport, *opFamily, and *opcInType,
 * which are arrays allocated by the caller.
 *
 * The caller also passes maxSupportNumber and maxAttributeNumber, since these
 * indicate the size of the arrays it has allocated --- but in practice these
 * numbers must always match those obtainable from the system catalog entries
 * for the index and access method.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>IndexSupportInitialize</name><parameter_list>(<parameter><decl><type><name>oidvector</name> <modifier>*</modifier></type><name>indclass</name></decl></parameter>,
					   <parameter><decl><type><name>RegProcedure</name> <modifier>*</modifier></type><name>indexSupport</name></decl></parameter>,
					   <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>opFamily</name></decl></parameter>,
					   <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>opcInType</name></decl></parameter>,
					   <parameter><decl><type><name>StrategyNumber</name></type> <name>maxSupportNumber</name></decl></parameter>,
					   <parameter><decl><type><name>AttrNumber</name></type> <name>maxAttributeNumber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>attIndex</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>attIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>attIndex</name> <operator>&lt;</operator> <name>maxAttributeNumber</name></expr>;</condition> <incr><expr><name>attIndex</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OpClassCacheEnt</name> <modifier>*</modifier></type><name>opcentry</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>indclass</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>attIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"bogus pg_index tuple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* look up the info for this opclass, using a cache */</comment>
		<expr_stmt><expr><name>opcentry</name> <operator>=</operator> <call><name>LookupOpclassInfo</name><argument_list>(<argument><expr><name><name>indclass</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>attIndex</name></expr>]</index></name></expr></argument>,
									 <argument><expr><name>maxSupportNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* copy cached data into relcache entry */</comment>
		<expr_stmt><expr><name><name>opFamily</name><index>[<expr><name>attIndex</name></expr>]</index></name> <operator>=</operator> <name><name>opcentry</name><operator>-&gt;</operator><name>opcfamily</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>opcInType</name><index>[<expr><name>attIndex</name></expr>]</index></name> <operator>=</operator> <name><name>opcentry</name><operator>-&gt;</operator><name>opcintype</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>maxSupportNumber</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>indexSupport</name><index>[<expr><name>attIndex</name> <operator>*</operator> <name>maxSupportNumber</name></expr>]</index></name></expr></argument>,
				   <argument><expr><name><name>opcentry</name><operator>-&gt;</operator><name>supportProcs</name></name></expr></argument>,
				   <argument><expr><name>maxSupportNumber</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RegProcedure</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * LookupOpclassInfo
 *
 * This routine maintains a per-opclass cache of the information needed
 * by IndexSupportInitialize().  This is more efficient than relying on
 * the catalog cache, because we can load all the info about a particular
 * opclass in a single indexscan of pg_amproc.
 *
 * The information from pg_am about expected range of support function
 * numbers is passed in, rather than being looked up, mainly because the
 * caller will have it already.
 *
 * Note there is no provision for flushing the cache.  This is OK at the
 * moment because there is no way to ALTER any interesting properties of an
 * existing opclass --- all you can do is drop it, which will result in
 * a useless but harmless dead entry in the cache.  To support altering
 * opclass membership (not the same as opfamily membership!), we'd need to
 * be able to flush this cache as well as the contents of relcache entries
 * for indexes.
 */</comment>
<function><type><specifier>static</specifier> <name>OpClassCacheEnt</name> <modifier>*</modifier></type>
<name>LookupOpclassInfo</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>operatorClassOid</name></decl></parameter>,
				  <parameter><decl><type><name>StrategyNumber</name></type> <name>numSupport</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OpClassCacheEnt</name> <modifier>*</modifier></type><name>opcentry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>htup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>indexOK</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>OpClassCache</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* First time through: initialize the opclass cache */</comment>
		<decl_stmt><decl><type><name>HASHCTL</name></type>		<name>ctl</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OpClassCacheEnt</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name>OpClassCache</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"Operator class cache"</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Also make sure CacheMemoryContext exists */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CacheMemoryContext</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>CreateCacheMemoryContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>opcentry</name> <operator>=</operator> <operator>(</operator><name>OpClassCacheEnt</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>OpClassCache</name></expr></argument>,
											   <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>operatorClassOid</name></expr></argument>,
											   <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Need to allocate memory for new entry */</comment>
		<expr_stmt><expr><name><name>opcentry</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>	<comment type="block">/* until known OK */</comment>
		<expr_stmt><expr><name><name>opcentry</name><operator>-&gt;</operator><name>numSupport</name></name> <operator>=</operator> <name>numSupport</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>numSupport</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>opcentry</name><operator>-&gt;</operator><name>supportProcs</name></name> <operator>=</operator> <operator>(</operator><name>RegProcedure</name> <operator>*</operator><operator>)</operator>
				<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>,
									   <argument><expr><name>numSupport</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RegProcedure</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>opcentry</name><operator>-&gt;</operator><name>supportProcs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>numSupport</name> <operator>==</operator> <name><name>opcentry</name><operator>-&gt;</operator><name>numSupport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * When testing for cache-flush hazards, we intentionally disable the
	 * operator class cache and force reloading of the info on each call. This
	 * is helpful because we want to test the case where a cache flush occurs
	 * while we are loading the info, and it's very hard to provoke that if
	 * this happens only once per opclass per backend.
	 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLOBBER_CACHE_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name><name>opcentry</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>opcentry</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>opcentry</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Need to fill in new entry.
	 *
	 * To avoid infinite recursion during startup, force heap scans if we're
	 * looking up info for the opclasses used by the indexes we would like to
	 * reference here.
	 */</comment>
	<expr_stmt><expr><name>indexOK</name> <operator>=</operator> <name>criticalRelcachesBuilt</name> <operator>||</operator>
		<operator>(</operator><name>operatorClassOid</name> <operator>!=</operator> <name>OID_BTREE_OPS_OID</name> <operator>&amp;&amp;</operator>
		 <name>operatorClassOid</name> <operator>!=</operator> <name>INT2_BTREE_OPS_OID</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * We have to fetch the pg_opclass row to determine its opfamily and
	 * opcintype, which are needed to look up related operators and functions.
	 * It'd be convenient to use the syscache here, but that probably doesn't
	 * work while bootstrapping.
	 */</comment>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_pg_opclass_oid</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
				<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>operatorClassOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>OperatorClassRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>OpclassOidIndexId</name></expr></argument>, <argument><expr><name>indexOK</name></expr></argument>,
							  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>htup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_opclass</name></type> <name>opclassform</name> <init>= <expr><operator>(</operator><name>Form_pg_opclass</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>htup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>opcentry</name><operator>-&gt;</operator><name>opcfamily</name></name> <operator>=</operator> <name><name>opclassform</name><operator>-&gt;</operator><name>opcfamily</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>opcentry</name><operator>-&gt;</operator><name>opcintype</name></name> <operator>=</operator> <name><name>opclassform</name><operator>-&gt;</operator><name>opcintype</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for opclass %u"</literal></expr></argument>, <argument><expr><name>operatorClassOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Scan pg_amproc to obtain support procs for the opclass.  We only fetch
	 * the default ones (those with lefttype = righttype = opcintype).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>numSupport</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
					<argument><expr><name>Anum_pg_amproc_amprocfamily</name></expr></argument>,
					<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
					<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>opcentry</name><operator>-&gt;</operator><name>opcfamily</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
					<argument><expr><name>Anum_pg_amproc_amproclefttype</name></expr></argument>,
					<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
					<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>opcentry</name><operator>-&gt;</operator><name>opcintype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
					<argument><expr><name>Anum_pg_amproc_amprocrighttype</name></expr></argument>,
					<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
					<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>opcentry</name><operator>-&gt;</operator><name>opcintype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>AccessMethodProcedureRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessMethodProcedureIndexId</name></expr></argument>, <argument><expr><name>indexOK</name></expr></argument>,
								  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>htup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Form_pg_amproc</name></type> <name>amprocform</name> <init>= <expr><operator>(</operator><name>Form_pg_amproc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>htup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>amprocform</name><operator>-&gt;</operator><name>amprocnum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
				<operator>(</operator><name>StrategyNumber</name><operator>)</operator> <name><name>amprocform</name><operator>-&gt;</operator><name>amprocnum</name></name> <operator>&gt;</operator> <name>numSupport</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid amproc number %d for opclass %u"</literal></expr></argument>,
					 <argument><expr><name><name>amprocform</name><operator>-&gt;</operator><name>amprocnum</name></name></expr></argument>, <argument><expr><name>operatorClassOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>opcentry</name><operator>-&gt;</operator><name>supportProcs</name><index>[<expr><name><name>amprocform</name><operator>-&gt;</operator><name>amprocnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
				<name><name>amprocform</name><operator>-&gt;</operator><name>amproc</name></name></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>opcentry</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<return>return <expr><name>opcentry</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Fill in the TableAmRoutine for a relation
 *
 * relation's rd_amhandler must be valid already.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>InitTableAmRoutine</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_tableam</name></name> <operator>=</operator> <call><name>GetTableAmRoutine</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_amhandler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize table access method support for a table like relation
 */</comment>
<function><type><name>void</name></type>
<name>RelationInitTableAccessMethod</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_am</name></type>	<name>aform</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_SEQUENCE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Sequences are currently accessed like heap tables, but it doesn't
		 * seem prudent to show that in the catalog. So just overwrite it
		 * here.
		 */</comment>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_amhandler</name></name> <operator>=</operator> <name>HEAP_TABLE_AM_HANDLER_OID</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsCatalogRelation</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Avoid doing a syscache lookup for catalog tables.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name> <operator>==</operator> <name>HEAP_TABLE_AM_OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_amhandler</name></name> <operator>=</operator> <name>HEAP_TABLE_AM_HANDLER_OID</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * Look up the table access method, save the OID of its handler
		 * function.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name> <operator>!=</operator> <name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>AMOID</name></expr></argument>,
								<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for access method %u"</literal></expr></argument>,
				 <argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>aform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_am</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_amhandler</name></name> <operator>=</operator> <name><name>aform</name><operator>-&gt;</operator><name>amhandler</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*
		 * Greenplum: append-optimized relations should not have a valid
		 * relfrozenxid.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><operator>!</operator><call><name>RelationIsAppendOptimized</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>||</operator>
				<operator>!</operator><call><name>TransactionIdIsValid</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relfrozenxid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Now we can fetch the table AM's API struct
	 */</comment>
	<expr_stmt><expr><call><name>InitTableAmRoutine</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *		formrdesc
 *
 *		This is a special cut-down version of RelationBuildDesc(),
 *		used while initializing the relcache.
 *		The relation descriptor is built just from the supplied parameters,
 *		without actually looking at any system table entries.  We cheat
 *		quite a lot since we only need to work for a few basic system
 *		catalogs.
 *
 * The catalogs this is used for can't have constraints (except attnotnull),
 * default values, rules, or triggers, since we don't cope with any of that.
 * (Well, actually, this only matters for properties that need to be valid
 * during bootstrap or before RelationCacheInitializePhase3 runs, and none of
 * these properties matter then...)
 *
 * NOTE: we assume we are already switched into CacheMemoryContext.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>formrdesc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relationName</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relationReltype</name></decl></parameter>,
		  <parameter><decl><type><name>bool</name></type> <name>isshared</name></decl></parameter>,
		  <parameter><decl><type><name>int</name></type> <name>natts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FormData_pg_attribute</name> <modifier>*</modifier></type><name>attrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>relation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>has_not_null</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * allocate new relation desc, clear all fields of reldesc
	 */</comment>
	<expr_stmt><expr><name>relation</name> <operator>=</operator> <operator>(</operator><name>Relation</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RelationData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* make sure relation is marked as having no open file yet */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_smgr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * initialize reference count: 1 because it is nailed in cache
	 */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_refcnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * all entries built with this routine are nailed-in-cache; none are for
	 * new or temp relations.
	 */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_isnailed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_createSubid</name></name> <operator>=</operator> <name>InvalidSubTransactionId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_newRelfilenodeSubid</name></name> <operator>=</operator> <name>InvalidSubTransactionId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_backend</name></name> <operator>=</operator> <name>InvalidBackendId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_islocaltemp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * initialize relation tuple form
	 *
	 * The data we insert here is pretty incomplete/bogus, but it'll serve to
	 * get us launched.  RelationCacheInitializePhase3() will read the real
	 * data from pg_class and replace what we've done here.  Note in
	 * particular that relowner is left as zero; this cues
	 * RelationCacheInitializePhase3 that the real data isn't there yet.
	 */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name></name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>CLASS_TUPLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>, <argument><expr><name>relationName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relnamespace</name></name> <operator>=</operator> <name>PG_CATALOG_NAMESPACE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltype</name></name> <operator>=</operator> <name>relationReltype</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * It's important to distinguish between shared and non-shared relations,
	 * even at bootstrap time, to make sure we know where they are stored.
	 */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relisshared</name></name> <operator>=</operator> <name>isshared</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isshared</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltablespace</name></name> <operator>=</operator> <name>GLOBALTABLESPACE_OID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* formrdesc is used only for permanent relations */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relpersistence</name></name> <operator>=</operator> <name>RELPERSISTENCE_PERMANENT</name></expr>;</expr_stmt>

	<comment type="block">/* ... and they're always populated, too */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relispopulated</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relreplident</name></name> <operator>=</operator> <name>REPLICA_IDENTITY_NOTHING</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relpages</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltuples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relallvisible</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>=</operator> <name>RELKIND_RELATION</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relnatts</name></name> <operator>=</operator> <operator>(</operator><name>int16</name><operator>)</operator> <name>natts</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name> <operator>=</operator> <name>HEAP_TABLE_AM_OID</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * initialize attribute tuple form
	 *
	 * Unlike the case with the relation tuple, this data had better be right
	 * because it will never be replaced.  The data comes from
	 * src/include/catalog/ headers via genbki.pl.
	 */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name></name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>natts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>tdrefcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>	<comment type="block">/* mark as refcounted */</comment>

	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>tdtypeid</name></name> <operator>=</operator> <name>relationReltype</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>tdtypmod</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>	<comment type="block">/* unnecessary, but... */</comment>

	<comment type="block">/*
	 * initialize tuple desc info
	 */</comment>
	<expr_stmt><expr><name>has_not_null</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><operator>&amp;</operator><name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
			   <argument><expr><name>ATTRIBUTE_FIXED_PART_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>has_not_null</name> <operator>|=</operator> <name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>attnotnull</name></expr>;</expr_stmt>
		<comment type="block">/* make sure attcacheoff is valid */</comment>
		<expr_stmt><expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attcacheoff</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* initialize first attribute's attcacheoff, cf RelationBuildTupleDesc */</comment>
	<expr_stmt><expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attcacheoff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* mark not-null status */</comment>
	<if_stmt><if>if <condition>(<expr><name>has_not_null</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TupleConstr</name> <modifier>*</modifier></type><name>constr</name> <init>= <expr><operator>(</operator><name>TupleConstr</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleConstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>constr</name><operator>-&gt;</operator><name>has_not_null</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>constr</name></name> <operator>=</operator> <name>constr</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * initialize relation id from info in att array (my, this is ugly)
	 */</comment>
	<expr_stmt><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_att</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attrelid</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * All relations made with formrdesc are mapped.  This is necessarily so
	 * because there is no other way to know what filenode they currently
	 * have.  In bootstrap mode, add them to the initial relation mapper data,
	 * specifying that the initial filenode is the same as the OID.
	 */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relfilenode</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IsBootstrapProcessingMode</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RelationMapUpdateMap</name><argument_list>(<argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><name>isshared</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * initialize the relation lock manager information
	 */</comment>
	<expr_stmt><expr><call><name>RelationInitLockInfo</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* see lmgr.c */</comment>

	<comment type="block">/*
	 * initialize physical addressing information for the relation
	 */</comment>
	<expr_stmt><expr><call><name>RelationInitPhysicalAddr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * initialize the table am handler
	 */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name> <operator>=</operator> <name>HEAP_TABLE_AM_OID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_tableam</name></name> <operator>=</operator> <call><name>GetHeapamTableAmRoutine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * initialize the rel-has-index flag, using hardwired knowledge
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IsBootstrapProcessingMode</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* In bootstrap mode, we have no indexes */</comment>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relhasindex</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Otherwise, all the rels formrdesc is used for have indexes */</comment>
		<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relhasindex</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * add new reldesc to relcache
	 */</comment>
	<expr_stmt><expr><call><name>RelationCacheInsert</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* It's fully valid */</comment>
	<expr_stmt><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_isvalid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* ----------------------------------------------------------------
 *				 Relation Descriptor Lookup Interface
 * ----------------------------------------------------------------
 */</comment>

<comment type="block">/*
 *		RelationIdGetRelation
 *
 *		Lookup a reldesc by OID; make one if not already in cache.
 *
 *		Returns NULL if no pg_class row could be found for the given relid
 *		(suggesting we are trying to access a just-deleted relation).
 *		Any other error is reported via elog.
 *
 *		NB: caller should already have at least AccessShareLock on the
 *		relation ID, else there are nasty race conditions.
 *
 *		NB: relation ref count is incremented, or set to 1 if new entry.
 *		Caller should eventually decrement count.  (Usually,
 *		that happens by calling RelationClose().)
 */</comment>
<function><type><name>Relation</name></type>
<name>RelationIdGetRelation</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relationId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>rd</name></decl>;</decl_stmt>

	<comment type="block">/* Make sure we're in an xact, even if this ends up being a cache hit */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsTransactionState</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * first try to find reldesc in the cache
	 */</comment>
	<expr_stmt><expr><call><name>RelationIdCacheLookup</name><argument_list>(<argument><expr><name>relationId</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RelationIncrementReferenceCount</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* revalidate cache entry if necessary */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rd</name><operator>-&gt;</operator><name>rd_isvalid</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Indexes only have a limited number of possible schema changes,
			 * and we don't want to use the full-blown procedure because it's
			 * a headache for indexes that reload itself depends on.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>rd</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_INDEX</name> <operator>||</operator>
				<name><name>rd</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_PARTITIONED_INDEX</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>RelationReloadIndexInfo</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>RelationClearRelation</name><argument_list>(<argument><expr><name>rd</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<comment type="block">/*
			 * Normally entries need to be valid here, but before the relcache
			 * has been initialized, not enough infrastructure exists to
			 * perform pg_class lookups. The structure of such entries doesn't
			 * change, but we still want to update the rd_rel entry. So
			 * rd_isvalid = false is left in place for a later lookup.
			 */</comment>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>rd</name><operator>-&gt;</operator><name>rd_isvalid</name></name> <operator>||</operator>
				   <operator>(</operator><name><name>rd</name><operator>-&gt;</operator><name>rd_isnailed</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>criticalRelcachesBuilt</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>rd</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * no reldesc in the cache, so have RelationBuildDesc() build one and add
	 * it.
	 */</comment>
	<expr_stmt><expr><name>rd</name> <operator>=</operator> <call><name>RelationBuildDesc</name><argument_list>(<argument><expr><name>relationId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RelationIncrementReferenceCount</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>rd</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *				cache invalidation support routines
 * ----------------------------------------------------------------
 */</comment>

<comment type="block">/*
 * RelationIncrementReferenceCount
 *		Increments relation reference count.
 *
 * Note: bootstrap mode has its own weird ideas about relation refcount
 * behavior; we ought to fix it someday, but for now, just disable
 * reference count ownership tracking in bootstrap mode.
 */</comment>
<function><type><name>void</name></type>
<name>RelationIncrementReferenceCount</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ResourceOwnerEnlargeRelationRefs</name><argument_list>(<argument><expr><name>CurrentResourceOwner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_refcnt</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsBootstrapProcessingMode</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ResourceOwnerRememberRelationRef</name><argument_list>(<argument><expr><name>CurrentResourceOwner</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * RelationDecrementReferenceCount
 *		Decrements relation reference count.
 */</comment>
<function><type><name>void</name></type>
<name>RelationDecrementReferenceCount</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_refcnt</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * In CI intermittently ERROR is seen. To help debug the issue, just
		 * for debug builds elevating ERROR to PANIC.
		 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
		<macro><name>elog</name><argument_list>(<argument>PANIC</argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<argument>elog(ERROR,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			 <literal type="string">"Relation decrement reference count found relation %u/%u/%u with bad count (reference count %d)"</literal>,
			 rel-&gt;rd_node.spcNode,
			 rel-&gt;rd_node.dbNode,
			 rel-&gt;rd_node.relNode,
			 rel-&gt;rd_refcnt);
	}
	
	rel-&gt;rd_refcnt -= <literal type="number">1</literal>;
	if (!IsBootstrapProcessingMode())
		ResourceOwnerForgetRelationRef(CurrentResourceOwner, rel);
}

<comment type="block">/*
 * RelationClose - close an open relation
 *
 *	Actually, we just decrement the refcount.
 *
 *	NOTE: if compiled with -DRELCACHE_FORCE_RELEASE then relcache entries
 *	will be freed as soon as their refcount goes to zero.  In combination
 *	with aset.c's CLOBBER_FREED_MEMORY option, this provides a good test
 *	to catch references to already-released relcache entries.  It slows
 *	things down quite a bit, however.
 */</comment>
void
RelationClose(Relation relation)
{
	<comment type="block">/* Note: no locking manipulations needed */</comment>
	RelationDecrementReferenceCount(relation);

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RELCACHE_FORCE_RELEASE</name></cpp:ifdef>
	if (RelationHasReferenceCountZero(relation) &amp;&amp;
		relation-&gt;rd_createSubid == InvalidSubTransactionId &amp;&amp;
		relation-&gt;rd_newRelfilenodeSubid == InvalidSubTransactionId)
		RelationClearRelation(relation, false);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

<comment type="block">/*
 * RelationReloadIndexInfo - reload minimal information for an open index
 *
 *	This function is used only for indexes.  A relcache inval on an index
 *	can mean that its pg_class or pg_index row changed.  There are only
 *	very limited changes that are allowed to an existing index's schema,
 *	so we can update the relcache entry without a complete rebuild; which
 *	is fortunate because we can't rebuild an index entry that is "nailed"
 *	and/or in active use.  We support full replacement of the pg_class row,
 *	as well as updates of a few simple fields of the pg_index row.
 *
 *	We can't necessarily reread the catalog rows right away; we might be
 *	in a failed transaction when we receive the SI notification.  If so,
 *	RelationClearRelation just marks the entry as invalid by setting
 *	rd_isvalid to false.  This routine is called to fix the entry when it
 *	is next needed.
 *
 *	We assume that at the time we are called, we have at least AccessShareLock
 *	on the target index.  (Note: in the calls from RelationClearRelation,
 *	this is legitimate because we know the rel has positive refcount.)
 *
 *	If the target index is an index on pg_class or pg_index, we'd better have
 *	previously gotten at least AccessShareLock on its underlying catalog,
 *	else we are at risk of deadlock against someone trying to exclusive-lock
 *	the heap and index in that order.  This is ensured in current usage by
 *	only applying this to indexes being opened or having positive refcount.
 */</comment>
static void
RelationReloadIndexInfo(Relation relation)
{
	bool		indexOK;
	HeapTuple	pg_class_tuple;
	Form_pg_class relp;

	<comment type="block">/* Should be called only for invalidated indexes */</comment>
	Assert((relation-&gt;rd_rel-&gt;relkind == RELKIND_INDEX ||
			relation-&gt;rd_rel-&gt;relkind == RELKIND_PARTITIONED_INDEX) &amp;&amp;
		   !relation-&gt;rd_isvalid);

	<comment type="block">/* Ensure it's closed at smgr level */</comment>
	RelationCloseSmgr(relation);

	<comment type="block">/* Must free any AM cached data upon relcache flush */</comment>
	if (relation-&gt;rd_amcache)
		pfree(relation-&gt;rd_amcache);
	relation-&gt;rd_amcache = NULL;

	<comment type="block">/*
	 * If it's a shared index, we might be called before backend startup has
	 * finished selecting a database, in which case we have no way to read
	 * pg_class yet.  However, a shared index can never have any significant
	 * schema updates, so it's okay to ignore the invalidation signal.  Just
	 * mark it valid and return without doing anything more.
	 */</comment>
	if (relation-&gt;rd_rel-&gt;relisshared &amp;&amp; !criticalRelcachesBuilt)
	{
		relation-&gt;rd_isvalid = true;
		return;
	}

	<comment type="block">/*
	 * Read the pg_class row
	 *
	 * Don't try to use an indexscan of pg_class_oid_index to reload the info
	 * for pg_class_oid_index ...
	 */</comment>
	indexOK = (RelationGetRelid(relation) != ClassOidIndexId);
	pg_class_tuple = ScanPgRelation(RelationGetRelid(relation), indexOK, false);
	if (!HeapTupleIsValid(pg_class_tuple))
		elog(ERROR, <literal type="string">"could not find pg_class tuple for index %u"</literal>,
			 RelationGetRelid(relation));
	relp = (Form_pg_class) GETSTRUCT(pg_class_tuple);
	memcpy(relation-&gt;rd_rel, relp, CLASS_TUPLE_SIZE);
	<comment type="block">/* Reload reloptions in case they changed */</comment>
	if (relation-&gt;rd_options)
		pfree(relation-&gt;rd_options);
	RelationParseRelOptions(relation, pg_class_tuple);
	<comment type="block">/* done with pg_class tuple */</comment>
	heap_freetuple(pg_class_tuple);
	<comment type="block">/* We must recalculate physical address in case it changed */</comment>
	RelationInitPhysicalAddr(relation);

	<comment type="block">/*
	 * For a non-system index, there are fields of the pg_index row that are
	 * allowed to change, so re-read that row and update the relcache entry.
	 * Most of the info derived from pg_index (such as support function lookup
	 * info) cannot change, and indeed the whole point of this routine is to
	 * update the relcache entry without clobbering that data; so wholesale
	 * replacement is not appropriate.
	 */</comment>
	if (!IsSystemRelation(relation))
	{
		HeapTuple	tuple;
		Form_pg_index index;

		tuple = SearchSysCache1(INDEXRELID,
								ObjectIdGetDatum(RelationGetRelid(relation)));
		if (!HeapTupleIsValid(tuple))
			elog(ERROR, <literal type="string">"cache lookup failed for index %u"</literal>,
				 RelationGetRelid(relation));
		index = (Form_pg_index) GETSTRUCT(tuple);

		<comment type="block">/*
		 * Basically, let's just copy all the bool fields.  There are one or
		 * two of these that can't actually change in the current code, but
		 * it's not worth it to track exactly which ones they are.  None of
		 * the array fields are allowed to change, though.
		 */</comment>
		relation-&gt;rd_index-&gt;indisunique = index-&gt;indisunique;
		relation-&gt;rd_index-&gt;indisprimary = index-&gt;indisprimary;
		relation-&gt;rd_index-&gt;indisexclusion = index-&gt;indisexclusion;
		relation-&gt;rd_index-&gt;indimmediate = index-&gt;indimmediate;
		relation-&gt;rd_index-&gt;indisclustered = index-&gt;indisclustered;
		relation-&gt;rd_index-&gt;indisvalid = index-&gt;indisvalid;
		relation-&gt;rd_index-&gt;indcheckxmin = index-&gt;indcheckxmin;
		relation-&gt;rd_index-&gt;indisready = index-&gt;indisready;
		relation-&gt;rd_index-&gt;indislive = index-&gt;indislive;

		<comment type="block">/* Copy xmin too, as that is needed to make sense of indcheckxmin */</comment>
		HeapTupleHeaderSetXmin(relation-&gt;rd_indextuple-&gt;t_data,
							   HeapTupleHeaderGetXmin(tuple-&gt;t_data));

		ReleaseSysCache(tuple);
	}

	<comment type="block">/* Okay, now it's valid again */</comment>
	relation-&gt;rd_isvalid = true;
}

<comment type="block">/*
 * RelationReloadNailed - reload minimal information for nailed relations.
 *
 * The structure of a nailed relation can never change (which is good, because
 * we rely on knowing their structure to be able to read catalog content). But
 * some parts, e.g. pg_class.relfrozenxid, are still important to have
 * accurate content for. Therefore those need to be reloaded after the arrival
 * of invalidations.
 */</comment>
static void
RelationReloadNailed(Relation relation)
{
	Assert(relation-&gt;rd_isnailed);

	<comment type="block">/*
	 * Redo RelationInitPhysicalAddr in case it is a mapped relation whose
	 * mapping changed.
	 */</comment>
	RelationInitPhysicalAddr(relation);

	<comment type="block">/* flag as needing to be revalidated */</comment>
	relation-&gt;rd_isvalid = false;

	<comment type="block">/*
	 * Can only reread catalog contents if in a transaction.  If the relation
	 * is currently open (not counting the nailed refcount), do so
	 * immediately. Otherwise we've already marked the entry as possibly
	 * invalid, and it'll be fixed when next opened.
	 */</comment>
	if (!IsTransactionState() || relation-&gt;rd_refcnt &lt;= <literal type="number">1</literal>)
		return;

	if (relation-&gt;rd_rel-&gt;relkind == RELKIND_INDEX)
	{
		<comment type="block">/*
		 * If it's a nailed-but-not-mapped index, then we need to re-read the
		 * pg_class row to see if its relfilenode changed.
		 */</comment>
		RelationReloadIndexInfo(relation);
	}
	else
	{
		<comment type="block">/*
		 * Reload a non-index entry.  We can't easily do so if relcaches
		 * aren't yet built, but that's fine because at that stage the
		 * attributes that need to be current (like relfrozenxid) aren't yet
		 * accessed.  To ensure the entry will later be revalidated, we leave
		 * it in invalid state, but allow use (cf. RelationIdGetRelation()).
		 */</comment>
		if (criticalRelcachesBuilt)
		{
			HeapTuple	pg_class_tuple;
			Form_pg_class relp;

			<comment type="block">/*
			 * NB: Mark the entry as valid before starting to scan, to avoid
			 * self-recursion when re-building pg_class.
			 */</comment>
			relation-&gt;rd_isvalid = true;

			pg_class_tuple = ScanPgRelation(RelationGetRelid(relation),
											true, false);
			relp = (Form_pg_class) GETSTRUCT(pg_class_tuple);
			memcpy(relation-&gt;rd_rel, relp, CLASS_TUPLE_SIZE);
			heap_freetuple(pg_class_tuple);

			<comment type="block">/*
			 * Again mark as valid, to protect against concurrently arriving
			 * invalidations.
			 */</comment>
			relation-&gt;rd_isvalid = true;
		}
	}
}

<comment type="block">/*
 * RelationDestroyRelation
 *
 *	Physically delete a relation cache entry and all subsidiary data.
 *	Caller must already have unhooked the entry from the hash table.
 */</comment>
static void
RelationDestroyRelation(Relation relation, bool remember_tupdesc)
{
	Assert(RelationHasReferenceCountZero(relation));

	<comment type="block">/*
	 * Make sure smgr and lower levels close the relation's files, if they
	 * weren't closed already.  (This was probably done by caller, but let's
	 * just be real sure.)
	 */</comment>
	RelationCloseSmgr(relation);

	<comment type="block">/*
	 * Free all the subsidiary data structures of the relcache entry, then the
	 * entry itself.
	 */</comment>
	if (relation-&gt;rd_rel)
		pfree(relation-&gt;rd_rel);
	<comment type="block">/* can't use DecrTupleDescRefCount here */</comment>
	Assert(relation-&gt;rd_att-&gt;tdrefcount &gt; <literal type="number">0</literal>);
	if (--relation-&gt;rd_att-&gt;tdrefcount == <literal type="number">0</literal>)
	{
		<comment type="block">/*
		 * If we Rebuilt a relcache entry during a transaction then its
		 * possible we did that because the TupDesc changed as the result of
		 * an ALTER TABLE that ran at less than AccessExclusiveLock. It's
		 * possible someone copied that TupDesc, in which case the copy would
		 * point to free'd memory. So if we rebuild an entry we keep the
		 * TupDesc around until end of transaction, to be safe.
		 */</comment>
		if (remember_tupdesc)
			RememberToFreeTupleDescAtEOX(relation-&gt;rd_att);
		else
			FreeTupleDesc(relation-&gt;rd_att);
	}
	FreeTriggerDesc(relation-&gt;trigdesc);
	list_free_deep(relation-&gt;rd_fkeylist);
	list_free(relation-&gt;rd_indexlist);
	bms_free(relation-&gt;rd_indexattr);
	bms_free(relation-&gt;rd_keyattr);
	bms_free(relation-&gt;rd_pkattr);
	bms_free(relation-&gt;rd_idattr);
	if (relation-&gt;rd_pubactions)
		pfree(relation-&gt;rd_pubactions);
	if (relation-&gt;rd_options)
		pfree(relation-&gt;rd_options);
	if (relation-&gt;rd_indextuple)
		pfree(relation-&gt;rd_indextuple);
	if (relation-&gt;rd_indexcxt)
		MemoryContextDelete(relation-&gt;rd_indexcxt);
	if (relation-&gt;rd_rulescxt)
		MemoryContextDelete(relation-&gt;rd_rulescxt);
	if (relation-&gt;rd_rsdesc)
		MemoryContextDelete(relation-&gt;rd_rsdesc-&gt;rscxt);
	if (relation-&gt;rd_partkeycxt)
		MemoryContextDelete(relation-&gt;rd_partkeycxt);
	if (relation-&gt;rd_pdcxt)
		MemoryContextDelete(relation-&gt;rd_pdcxt);
	if (relation-&gt;rd_partcheckcxt)
		MemoryContextDelete(relation-&gt;rd_partcheckcxt);
	if (relation-&gt;rd_fdwroutine)
		pfree(relation-&gt;rd_fdwroutine);
	if (relation-&gt;rd_cdbpolicy)
		pfree(relation-&gt;rd_cdbpolicy);

	pfree(relation);
}

<comment type="block">/*
 * RelationClearRelation
 *
 *	 Physically blow away a relation cache entry, or reset it and rebuild
 *	 it from scratch (that is, from catalog entries).  The latter path is
 *	 used when we are notified of a change to an open relation (one with
 *	 refcount &gt; 0).
 *
 *	 NB: when rebuilding, we'd better hold some lock on the relation,
 *	 else the catalog data we need to read could be changing under us.
 *	 Also, a rel to be rebuilt had better have refcnt &gt; 0.  This is because
 *	 a sinval reset could happen while we're accessing the catalogs, and
 *	 the rel would get blown away underneath us by RelationCacheInvalidate
 *	 if it has zero refcnt.
 *
 *	 The "rebuild" parameter is redundant in current usage because it has
 *	 to match the relation's refcnt status, but we keep it as a crosscheck
 *	 that we're doing what the caller expects.
 */</comment>
static void
RelationClearRelation(Relation relation, bool rebuild)
{
	<comment type="block">/*
	 * As per notes above, a rel to be rebuilt MUST have refcnt &gt; 0; while of
	 * course it would be an equally bad idea to blow away one with nonzero
	 * refcnt, since that would leave someone somewhere with a dangling
	 * pointer.  All callers are expected to have verified that this holds.
	 */</comment>
	Assert(rebuild ?
		   !RelationHasReferenceCountZero(relation) :
		   RelationHasReferenceCountZero(relation));

	<comment type="block">/*
	 * Make sure smgr and lower levels close the relation's files, if they
	 * weren't closed already.  If the relation is not getting deleted, the
	 * next smgr access should reopen the files automatically.  This ensures
	 * that the low-level file access state is updated after, say, a vacuum
	 * truncation.
	 */</comment>
	RelationCloseSmgr(relation);

	<comment type="block">/*
	 * Treat nailed-in system relations separately, they always need to be
	 * accessible, so we can't blow them away.
	 */</comment>
	if (relation-&gt;rd_isnailed)
	{
		RelationReloadNailed(relation);
		return;
	}

	<comment type="block">/*
	 * Even non-system indexes should not be blown away if they are open and
	 * have valid index support information.  This avoids problems with active
	 * use of the index support information.  As with nailed indexes, we
	 * re-read the pg_class row to handle possible physical relocation of the
	 * index, and we check for pg_index updates too.
	 */</comment>
	if ((relation-&gt;rd_rel-&gt;relkind == RELKIND_INDEX ||
		 relation-&gt;rd_rel-&gt;relkind == RELKIND_PARTITIONED_INDEX) &amp;&amp;
		relation-&gt;rd_refcnt &gt; <literal type="number">0</literal> &amp;&amp;
		relation-&gt;rd_indexcxt != NULL)
	{
		relation-&gt;rd_isvalid = false;	<comment type="block">/* needs to be revalidated */</comment>
		if (IsTransactionState())
			RelationReloadIndexInfo(relation);
		return;
	}

	<comment type="block">/* Mark it invalid until we've finished rebuild */</comment>
	relation-&gt;rd_isvalid = false;

	<comment type="block">/*
	 * If we're really done with the relcache entry, blow it away. But if
	 * someone is still using it, reconstruct the whole deal without moving
	 * the physical RelationData record (so that the someone's pointer is
	 * still valid).
	 */</comment>
	if (!rebuild)
	{
		<comment type="block">/* Remove it from the hash table */</comment>
		RelationCacheDelete(relation);

		<comment type="block">/* And release storage */</comment>
		RelationDestroyRelation(relation, false);
	}
	else if (!IsTransactionState())
	{
		<comment type="block">/*
		 * If we're not inside a valid transaction, we can't do any catalog
		 * access so it's not possible to rebuild yet.  Just exit, leaving
		 * rd_isvalid = false so that the rebuild will occur when the entry is
		 * next opened.
		 *
		 * Note: it's possible that we come here during subtransaction abort,
		 * and the reason for wanting to rebuild is that the rel is open in
		 * the outer transaction.  In that case it might seem unsafe to not
		 * rebuild immediately, since whatever code has the rel already open
		 * will keep on using the relcache entry as-is.  However, in such a
		 * case the outer transaction should be holding a lock that's
		 * sufficient to prevent any significant change in the rel's schema,
		 * so the existing entry contents should be good enough for its
		 * purposes; at worst we might be behind on statistics updates or the
		 * like.  (See also CheckTableNotInUse() and its callers.)	These same
		 * remarks also apply to the cases above where we exit without having
		 * done RelationReloadIndexInfo() yet.
		 */</comment>
		return;
	}
	else
	{
		<comment type="block">/*
		 * Our strategy for rebuilding an open relcache entry is to build a
		 * new entry from scratch, swap its contents with the old entry, and
		 * finally delete the new entry (along with any infrastructure swapped
		 * over from the old entry).  This is to avoid trouble in case an
		 * error causes us to lose control partway through.  The old entry
		 * will still be marked !rd_isvalid, so we'll try to rebuild it again
		 * on next access.  Meanwhile it's not any less valid than it was
		 * before, so any code that might expect to continue accessing it
		 * isn't hurt by the rebuild failure.  (Consider for example a
		 * subtransaction that ALTERs a table and then gets canceled partway
		 * through the cache entry rebuild.  The outer transaction should
		 * still see the not-modified cache entry as valid.)  The worst
		 * consequence of an error is leaking the necessarily-unreferenced new
		 * entry, and this shouldn't happen often enough for that to be a big
		 * problem.
		 *
		 * When rebuilding an open relcache entry, we must preserve ref count,
		 * rd_createSubid/rd_newRelfilenodeSubid, and rd_toastoid state.  Also
		 * attempt to preserve the pg_class entry (rd_rel), tupledesc,
		 * rewrite-rule, partition key, and partition descriptor substructures
		 * in place, because various places assume that these structures won't
		 * move while they are working with an open relcache entry.  (Note:
		 * the refcount mechanism for tupledescs might someday allow us to
		 * remove this hack for the tupledesc.)
		 *
		 * When rebuilding an open relcache entry, we must preserve ref count
		 * and rd_createSubid/rd_newRelfilenodeSubid state.  Also attempt to
		 * preserve the pg_class entry (rd_rel), tupledesc, and rewrite-rule
		 * substructures in place, because various places assume that these
		 * structures won't move while they are working with an open relcache
		 * entry.  (Note: the refcount mechanism for tupledescs might someday
		 * allow us to remove this hack for the tupledesc.)
		 *
		 * Note that this process does not touch CurrentResourceOwner; which
		 * is good because whatever ref counts the entry may have do not
		 * necessarily belong to that resource owner.
 		 */</comment>
		Relation	newrel;
		Oid			save_relid = RelationGetRelid(relation);
		bool		keep_tupdesc;
		bool		keep_rules;
		bool		keep_gp_policy;
		bool		keep_policies;
		bool		keep_partkey;
		bool		keep_partdesc;

		<comment type="block">/* Build temporary entry, but don't link it into hashtable */</comment>
		newrel = RelationBuildDesc(save_relid, false);
		if (newrel == NULL)
		{
			<comment type="block">/*
			 * We can validly get here, if we're using a historic snapshot in
			 * which a relation, accessed from outside logical decoding, is
			 * still invisible. In that case it's fine to just mark the
			 * relation as invalid and return - it'll fully get reloaded by
			 * the cache reset at the end of logical decoding (or at the next
			 * access).  During normal processing we don't want to ignore this
			 * case as it shouldn't happen there, as explained below.
			 */</comment>
			if (HistoricSnapshotActive())
				return;

			<comment type="block">/*
			 * This shouldn't happen as dropping a relation is intended to be
			 * impossible if still referenced (cf. CheckTableNotInUse()). But
			 * if we get here anyway, we can't just delete the relcache entry,
			 * as it possibly could get accessed later (as e.g. the error
			 * might get trapped and handled via a subtransaction rollback).
			 */</comment>
			elog(ERROR, <literal type="string">"relation %u deleted while still in use"</literal>, save_relid);
		}

		keep_tupdesc = equalTupleDescs(relation-&gt;rd_att, newrel-&gt;rd_att, true);
		keep_rules = equalRuleLocks(relation-&gt;rd_rules, newrel-&gt;rd_rules);
		keep_gp_policy = GpPolicyEqual(relation-&gt;rd_cdbpolicy, newrel-&gt;rd_cdbpolicy);
		keep_policies = equalRSDesc(relation-&gt;rd_rsdesc, newrel-&gt;rd_rsdesc);
		<comment type="block">/* partkey is immutable once set up, so we can always keep it */</comment>
		keep_partkey = (relation-&gt;rd_partkey != NULL);
		keep_partdesc = equalPartitionDescs(relation-&gt;rd_partkey,
											relation-&gt;rd_partdesc,
											newrel-&gt;rd_partdesc);

		<comment type="block">/*
		 * Perform swapping of the relcache entry contents.  Within this
		 * process the old entry is momentarily invalid, so there *must*
		 * be no possibility of CHECK_FOR_INTERRUPTS within this sequence.
		 * Do it in all-in-line code for safety.
		 *
		 * Since the vast majority of fields should be swapped, our method
		 * is to swap the whole structures and then re-swap those few fields
		 * we didn't want swapped.
		 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAPFIELD</name><parameter_list>(<parameter><type><name>fldtype</name></type></parameter>, <parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
		<cpp:value>do { \
			fldtype _tmp = newrel-&gt;fldname; \
			newrel-&gt;fldname = relation-&gt;fldname; \
			relation-&gt;fldname = _tmp; \
		} while (0)</cpp:value></cpp:define>

		<comment type="block">/* swap all Relation struct fields */</comment>
		{
			RelationData tmpstruct;

			memcpy(&amp;tmpstruct, newrel, sizeof(RelationData));
			memcpy(newrel, relation, sizeof(RelationData));
			memcpy(relation, &amp;tmpstruct, sizeof(RelationData));
		}

		<comment type="block">/* rd_smgr must not be swapped, due to back-links from smgr level */</comment>
		SWAPFIELD(SMgrRelation, rd_smgr);
		<comment type="block">/* rd_refcnt must be preserved */</comment>
		SWAPFIELD(int, rd_refcnt);
		<comment type="block">/* isnailed shouldn't change */</comment>
		Assert(newrel-&gt;rd_isnailed == relation-&gt;rd_isnailed);
		<comment type="block">/* creation sub-XIDs must be preserved */</comment>
		SWAPFIELD(SubTransactionId, rd_createSubid);
		SWAPFIELD(SubTransactionId, rd_newRelfilenodeSubid);
		<comment type="block">/* un-swap rd_rel pointers, swap contents instead */</comment>
		SWAPFIELD(Form_pg_class, rd_rel);
		<comment type="block">/* ... but actually, we don't have to update newrel-&gt;rd_rel */</comment>
		memcpy(relation-&gt;rd_rel, newrel-&gt;rd_rel, CLASS_TUPLE_SIZE);
		<comment type="block">/* preserve old tupledesc, rules, policies if no logical change */</comment>
		if (keep_tupdesc)
			SWAPFIELD(TupleDesc, rd_att);
		if (keep_rules)
		{
			SWAPFIELD(RuleLock *, rd_rules);
			SWAPFIELD(MemoryContext, rd_rulescxt);
		}
		<comment type="block">/* also preserve old gp policy if no logical change */</comment>
		if (keep_gp_policy)
			SWAPFIELD(GpPolicy *, rd_cdbpolicy);
		if (keep_policies)
			SWAPFIELD(RowSecurityDesc *, rd_rsdesc);
		<comment type="block">/* toast OID override must be preserved */</comment>
		SWAPFIELD(Oid, rd_toastoid);
		<comment type="block">/* pgstat_info must be preserved */</comment>
		SWAPFIELD(struct PgStat_TableStatus *, pgstat_info);
		<comment type="block">/* preserve old partitioning info if no logical change */</comment>
		if (keep_partkey)
		{
			SWAPFIELD(PartitionKey, rd_partkey);
			SWAPFIELD(MemoryContext, rd_partkeycxt);
		}
		if (keep_partdesc)
		{
			SWAPFIELD(PartitionDesc, rd_partdesc);
			SWAPFIELD(MemoryContext, rd_pdcxt);
		}
		else if (rebuild &amp;&amp; newrel-&gt;rd_pdcxt != NULL)
		{
			<comment type="block">/*
			 * We are rebuilding a partitioned relation with a non-zero
			 * reference count, so keep the old partition descriptor around,
			 * in case there's a PartitionDirectory with a pointer to it.
			 * Attach it to the new rd_pdcxt so that it gets cleaned up
			 * eventually.  In the case where the reference count is 0, this
			 * code is not reached, which should be OK because in that case
			 * there should be no PartitionDirectory with a pointer to the old
			 * entry.
			 *
			 * Note that newrel and relation have already been swapped, so the
			 * "old" partition descriptor is actually the one hanging off of
			 * newrel.
			 */</comment>
			MemoryContextSetParent(newrel-&gt;rd_pdcxt, relation-&gt;rd_pdcxt);
			newrel-&gt;rd_partdesc = NULL;
			newrel-&gt;rd_pdcxt = NULL;
		}

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SWAPFIELD</name></cpp:undef>

		<comment type="block">/* And now we can throw away the temporary entry */</comment>
		RelationDestroyRelation(newrel, !keep_tupdesc);
	}
}

<comment type="block">/*
 * RelationFlushRelation
 *
 *	 Rebuild the relation if it is open (refcount &gt; 0), else blow it away.
 *	 This is used when we receive a cache invalidation event for the rel.
 */</comment>
static void
RelationFlushRelation(Relation relation)
{
	if (relation-&gt;rd_createSubid != InvalidSubTransactionId ||
		relation-&gt;rd_newRelfilenodeSubid != InvalidSubTransactionId)
	{
		<comment type="block">/*
		 * New relcache entries are always rebuilt, not flushed; else we'd
		 * forget the "new" status of the relation, which is a useful
		 * optimization to have.  Ditto for the new-relfilenode status.
		 *
		 * The rel could have zero refcnt here, so temporarily increment the
		 * refcnt to ensure it's safe to rebuild it.  We can assume that the
		 * current transaction has some lock on the rel already.
		 */</comment>
		RelationIncrementReferenceCount(relation);
		RelationClearRelation(relation, true);
		RelationDecrementReferenceCount(relation);
	}
	else
	{
		<comment type="block">/*
		 * Pre-existing rels can be dropped from the relcache if not open.
		 */</comment>
		bool		rebuild = !RelationHasReferenceCountZero(relation);

		RelationClearRelation(relation, rebuild);
	}
}

<comment type="block">/*
 * RelationForgetRelation - unconditionally remove a relcache entry
 *
 *		   External interface for destroying a relcache entry when we
 *		   drop the relation.
 */</comment>
void
RelationForgetRelation(Oid rid)
{
	Relation	relation;

	RelationIdCacheLookup(rid, relation);

	if (!PointerIsValid(relation))
		return;					<comment type="block">/* not in cache, nothing to do */</comment>

	if (!RelationHasReferenceCountZero(relation))
		elog(ERROR, <literal type="string">"relation %u is still open"</literal>, rid);

	<comment type="block">/* Unconditionally destroy the relcache entry */</comment>
	RelationClearRelation(relation, false);
}

<comment type="block">/*
 *		RelationCacheInvalidateEntry
 *
 *		This routine is invoked for SI cache flush messages.
 *
 * Any relcache entry matching the relid must be flushed.  (Note: caller has
 * already determined that the relid belongs to our database or is a shared
 * relation.)
 *
 * We used to skip local relations, on the grounds that they could
 * not be targets of cross-backend SI update messages; but it seems
 * safer to process them, so that our *own* SI update messages will
 * have the same effects during CommandCounterIncrement for both
 * local and nonlocal relations.
 */</comment>
void
RelationCacheInvalidateEntry(Oid relationId)
{
	Relation	relation;

	RelationIdCacheLookup(relationId, relation);

	if (PointerIsValid(relation))
	{
		relcacheInvalsReceived++;
		RelationFlushRelation(relation);
	}
}

<comment type="block">/*
 * RelationCacheInvalidate
 *	 Blow away cached relation descriptors that have zero reference counts,
 *	 and rebuild those with positive reference counts.  Also reset the smgr
 *	 relation cache and re-read relation mapping data.
 *
 *	 This is currently used only to recover from SI message buffer overflow,
 *	 so we do not touch new-in-transaction relations; they cannot be targets
 *	 of cross-backend SI updates (and our own updates now go through a
 *	 separate linked list that isn't limited by the SI message buffer size).
 *	 Likewise, we need not discard new-relfilenode-in-transaction hints,
 *	 since any invalidation of those would be a local event.
 *
 *	 We do this in two phases: the first pass deletes deletable items, and
 *	 the second one rebuilds the rebuildable items.  This is essential for
 *	 safety, because hash_seq_search only copes with concurrent deletion of
 *	 the element it is currently visiting.  If a second SI overflow were to
 *	 occur while we are walking the table, resulting in recursive entry to
 *	 this routine, we could crash because the inner invocation blows away
 *	 the entry next to be visited by the outer scan.  But this way is OK,
 *	 because (a) during the first pass we won't process any more SI messages,
 *	 so hash_seq_search will complete safely; (b) during the second pass we
 *	 only hold onto pointers to nondeletable entries.
 *
 *	 The two-phase approach also makes it easy to update relfilenodes for
 *	 mapped relations before we do anything else, and to ensure that the
 *	 second pass processes nailed-in-cache items before other nondeletable
 *	 items.  This should ensure that system catalogs are up to date before
 *	 we attempt to use them to reload information about other open relations.
 */</comment>
void
RelationCacheInvalidate(void)
{
	HASH_SEQ_STATUS status;
	RelIdCacheEnt *idhentry;
	Relation	relation;
	List	   *rebuildFirstList = NIL;
	List	   *rebuildList = NIL;
	ListCell   *l;

	<comment type="block">/*
	 * Reload relation mapping data before starting to reconstruct cache.
	 */</comment>
	RelationMapInvalidateAll();

	<comment type="block">/* Phase 1 */</comment>
	hash_seq_init(&amp;status, RelationIdCache);

	while ((idhentry = (RelIdCacheEnt *) hash_seq_search(&amp;status)) != NULL)
	{
		relation = idhentry-&gt;reldesc;

		<comment type="block">/* Must close all smgr references to avoid leaving dangling ptrs */</comment>
		RelationCloseSmgr(relation);

		<comment type="block">/*
		 * Ignore new relations; no other backend will manipulate them before
		 * we commit.  Likewise, before replacing a relation's relfilenode, we
		 * shall have acquired AccessExclusiveLock and drained any applicable
		 * pending invalidations.
		 */</comment>
		if (relation-&gt;rd_createSubid != InvalidSubTransactionId ||
			relation-&gt;rd_newRelfilenodeSubid != InvalidSubTransactionId)
			continue;

		relcacheInvalsReceived++;

		if (RelationHasReferenceCountZero(relation))
		{
			<comment type="block">/* Delete this entry immediately */</comment>
			Assert(!relation-&gt;rd_isnailed);
			RelationClearRelation(relation, false);
		}
		else
		{
			<comment type="block">/*
			 * If it's a mapped relation, immediately update its rd_node in
			 * case its relfilenode changed.  We must do this during phase 1
			 * in case the relation is consulted during rebuild of other
			 * relcache entries in phase 2.  It's safe since consulting the
			 * map doesn't involve any access to relcache entries.
			 */</comment>
			if (RelationIsMapped(relation))
				RelationInitPhysicalAddr(relation);

			<comment type="block">/*
			 * Add this entry to list of stuff to rebuild in second pass.
			 * pg_class goes to the front of rebuildFirstList while
			 * pg_class_oid_index goes to the back of rebuildFirstList, so
			 * they are done first and second respectively.  Other nailed
			 * relations go to the front of rebuildList, so they'll be done
			 * next in no particular order; and everything else goes to the
			 * back of rebuildList.
			 */</comment>
			if (RelationGetRelid(relation) == RelationRelationId)
				rebuildFirstList = lcons(relation, rebuildFirstList);
			else if (RelationGetRelid(relation) == ClassOidIndexId)
				rebuildFirstList = lappend(rebuildFirstList, relation);
			else if (relation-&gt;rd_isnailed)
				rebuildList = lcons(relation, rebuildList);
			else
				rebuildList = lappend(rebuildList, relation);
		}
	}

	<comment type="block">/*
	 * Now zap any remaining smgr cache entries.  This must happen before we
	 * start to rebuild entries, since that may involve catalog fetches which
	 * will re-open catalog files.
	 */</comment>
	smgrcloseall();

	<comment type="block">/* Phase 2: rebuild the items found to need rebuild in phase 1 */</comment>
	foreach(l, rebuildFirstList)
	{
		relation = (Relation) lfirst(l);
		RelationClearRelation(relation, true);
	}
	list_free(rebuildFirstList);
	foreach(l, rebuildList)
	{
		relation = (Relation) lfirst(l);
		RelationClearRelation(relation, true);
	}
	list_free(rebuildList);
}

<comment type="block">/*
 * RelationCloseSmgrByOid - close a relcache entry's smgr link
 *
 * Needed in some cases where we are changing a relation's physical mapping.
 * The link will be automatically reopened on next use.
 */</comment>
void
RelationCloseSmgrByOid(Oid relationId)
{
	Relation	relation;

	RelationIdCacheLookup(relationId, relation);

	if (!PointerIsValid(relation))
		return;					<comment type="block">/* not in cache, nothing to do */</comment>

	RelationCloseSmgr(relation);
}

static void
RememberToFreeTupleDescAtEOX(TupleDesc td)
{
	if (EOXactTupleDescArray == NULL)
	{
		MemoryContext oldcxt;

		oldcxt = MemoryContextSwitchTo(CacheMemoryContext);

		EOXactTupleDescArray = (TupleDesc *) palloc(<literal type="number">16</literal> * sizeof(TupleDesc));
		EOXactTupleDescArrayLen = <literal type="number">16</literal>;
		NextEOXactTupleDescNum = <literal type="number">0</literal>;
		MemoryContextSwitchTo(oldcxt);
	}
	else if (NextEOXactTupleDescNum &gt;= EOXactTupleDescArrayLen)
	{
		int32		newlen = EOXactTupleDescArrayLen * <literal type="number">2</literal>;

		Assert(EOXactTupleDescArrayLen &gt; <literal type="number">0</literal>);

		EOXactTupleDescArray = (TupleDesc *) repalloc(EOXactTupleDescArray,
													  newlen * sizeof(TupleDesc));
		EOXactTupleDescArrayLen = newlen;
	}

	EOXactTupleDescArray[NextEOXactTupleDescNum++] = td;
}

<comment type="block">/*
 * AtEOXact_RelationCache
 *
 *	Clean up the relcache at main-transaction commit or abort.
 *
 * Note: this must be called *before* processing invalidation messages.
 * In the case of abort, we don't want to try to rebuild any invalidated
 * cache entries (since we can't safely do database accesses).  Therefore
 * we must reset refcnts before handling pending invalidations.
 *
 * As of PostgreSQL 8.1, relcache refcnts should get released by the
 * ResourceOwner mechanism.  This routine just does a debugging
 * cross-check that no pins remain.  However, we also need to do special
 * cleanup when the current transaction created any relations or made use
 * of forced index lists.
 */</comment>
void
AtEOXact_RelationCache(bool isCommit)
{
	HASH_SEQ_STATUS status;
	RelIdCacheEnt *idhentry;
	int			i;

	<comment type="block">/*
	 * Unless the eoxact_list[] overflowed, we only need to examine the rels
	 * listed in it.  Otherwise fall back on a hash_seq_search scan.
	 *
	 * For simplicity, eoxact_list[] entries are not deleted till end of
	 * top-level transaction, even though we could remove them at
	 * subtransaction end in some cases, or remove relations from the list if
	 * they are cleared for other reasons.  Therefore we should expect the
	 * case that list entries are not found in the hashtable; if not, there's
	 * nothing to do for them.
	 *
	 * MPP-3333: READERS need to *always* scan, otherwise they will not be able
	 * to maintain a coherent view of the storage layer.
	 */</comment>
	if (eoxact_list_overflowed || DistributedTransactionContext == DTX_CONTEXT_QE_READER)
	{
		hash_seq_init(&amp;status, RelationIdCache);
		while ((idhentry = (RelIdCacheEnt *) hash_seq_search(&amp;status)) != NULL)
		{
			AtEOXact_cleanup(idhentry-&gt;reldesc, isCommit);
		}
	}
	else
	{
		for (i = <literal type="number">0</literal>; i &lt; eoxact_list_len; i++)
		{
			idhentry = (RelIdCacheEnt *) hash_search(RelationIdCache,
													 (void *) &amp;eoxact_list[i],
													 HASH_FIND,
													 NULL);
			if (idhentry != NULL)
				AtEOXact_cleanup(idhentry-&gt;reldesc, isCommit);
		}
	}

	if (EOXactTupleDescArrayLen &gt; <literal type="number">0</literal>)
	{
		Assert(EOXactTupleDescArray != NULL);
		for (i = <literal type="number">0</literal>; i &lt; NextEOXactTupleDescNum; i++)
			FreeTupleDesc(EOXactTupleDescArray[i]);
		pfree(EOXactTupleDescArray);
		EOXactTupleDescArray = NULL;
	}

	<comment type="block">/* Now we're out of the transaction and can clear the lists */</comment>
	eoxact_list_len = <literal type="number">0</literal>;
	eoxact_list_overflowed = false;
	NextEOXactTupleDescNum = <literal type="number">0</literal>;
	EOXactTupleDescArrayLen = <literal type="number">0</literal>;
}

<comment type="block">/*
 * AtEOXact_cleanup
 *
 *	Clean up a single rel at main-transaction commit or abort
 *
 * NB: this processing must be idempotent, because EOXactListAdd() doesn't
 * bother to prevent duplicate entries in eoxact_list[].
 */</comment>
static void
AtEOXact_cleanup(Relation relation, bool isCommit)
{
	<comment type="block">/*
	 * The relcache entry's ref count should be back to its normal
	 * not-in-a-transaction state: 0 unless it's nailed in cache.
	 *
	 * In bootstrap mode, this is NOT true, so don't check it --- the
	 * bootstrap code expects relations to stay open across start/commit
	 * transaction calls.  (That seems bogus, but it's not worth fixing.)
	 *
	 * Note: ideally this check would be applied to every relcache entry, not
	 * just those that have eoxact work to do.  But it's not worth forcing a
	 * scan of the whole relcache just for this.  (Moreover, doing so would
	 * mean that assert-enabled testing never tests the hash_search code path
	 * above, which seems a bad idea.)
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	if (!IsBootstrapProcessingMode())
	{
		int			expected_refcnt;

		expected_refcnt = relation-&gt;rd_isnailed ? <literal type="number">1</literal> : <literal type="number">0</literal>;
		Assert(relation-&gt;rd_refcnt == expected_refcnt);
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * QE-readers aren't properly enrolled in transactions, they
	 * just get the snapshot which corresponds -- so here, where
	 * we are maintaining their relcache, we want to just clean
	 * up (almost as if we had aborted). (MPP-3338)
	 */</comment>
	if (DistributedTransactionContext == DTX_CONTEXT_QE_ENTRY_DB_SINGLETON ||
		DistributedTransactionContext == DTX_CONTEXT_QE_READER)
	{
		RelationClearRelation(relation, relation-&gt;rd_isnailed ? true : false);
		return;
	}

	<comment type="block">/*
	 * Is it a relation created in the current transaction?
	 *
	 * During commit, reset the flag to zero, since we are now out of the
	 * creating transaction.  During abort, simply delete the relcache entry
	 * --- it isn't interesting any longer.  (NOTE: if we have forgotten the
	 * new-ness of a new relation due to a forced cache flush, the entry will
	 * get deleted anyway by shared-cache-inval processing of the aborted
	 * pg_class insertion.)
	 */</comment>
	if (relation-&gt;rd_createSubid != InvalidSubTransactionId)
	{
		if (isCommit)
			relation-&gt;rd_createSubid = InvalidSubTransactionId;
		else if (RelationHasReferenceCountZero(relation))
		{
			RelationClearRelation(relation, false);
			return;
		}
		else
		{
			<comment type="block">/*
			 * Hmm, somewhere there's a (leaked?) reference to the relation.
			 * We daren't remove the entry for fear of dereferencing a
			 * dangling pointer later.  Bleat, and mark it as not belonging to
			 * the current transaction.  Hopefully it'll get cleaned up
			 * eventually.  This must be just a WARNING to avoid
			 * error-during-error-recovery loops.
			 */</comment>
			relation-&gt;rd_createSubid = InvalidSubTransactionId;
			elog(WARNING, <literal type="string">"cannot remove relcache entry for \"%s\" because it has nonzero refcount"</literal>,
				 RelationGetRelationName(relation));
		}
	}

	<comment type="block">/*
	 * Likewise, reset the hint about the relfilenode being new.
	 */</comment>
	relation-&gt;rd_newRelfilenodeSubid = InvalidSubTransactionId;
}

<comment type="block">/*
 * AtEOSubXact_RelationCache
 *
 *	Clean up the relcache at sub-transaction commit or abort.
 *
 * Note: this must be called *before* processing invalidation messages.
 */</comment>
void
AtEOSubXact_RelationCache(bool isCommit, SubTransactionId mySubid,
						  SubTransactionId parentSubid)
{
	HASH_SEQ_STATUS status;
	RelIdCacheEnt *idhentry;
	int			i;

	<comment type="block">/*
	 * Unless the eoxact_list[] overflowed, we only need to examine the rels
	 * listed in it.  Otherwise fall back on a hash_seq_search scan.  Same
	 * logic as in AtEOXact_RelationCache.
	 */</comment>
	if (eoxact_list_overflowed || DistributedTransactionContext == DTX_CONTEXT_QE_READER)
	{
		hash_seq_init(&amp;status, RelationIdCache);
		while ((idhentry = (RelIdCacheEnt *) hash_seq_search(&amp;status)) != NULL)
		{
			AtEOSubXact_cleanup(idhentry-&gt;reldesc, isCommit,
								mySubid, parentSubid);
		}
	}
	else
	{
		for (i = <literal type="number">0</literal>; i &lt; eoxact_list_len; i++)
		{
			idhentry = (RelIdCacheEnt *) hash_search(RelationIdCache,
													 (void *) &amp;eoxact_list[i],
													 HASH_FIND,
													 NULL);
			if (idhentry != NULL)
				AtEOSubXact_cleanup(idhentry-&gt;reldesc, isCommit,
									mySubid, parentSubid);
		}
	}

	<comment type="block">/* Don't reset the list; we still need more cleanup later */</comment>
}

<comment type="block">/*
 * AtEOSubXact_cleanup
 *
 *	Clean up a single rel at subtransaction commit or abort
 *
 * NB: this processing must be idempotent, because EOXactListAdd() doesn't
 * bother to prevent duplicate entries in eoxact_list[].
 */</comment>
static void
AtEOSubXact_cleanup(Relation relation, bool isCommit,
					SubTransactionId mySubid, SubTransactionId parentSubid)
{
	<comment type="block">/*
	 * As opposed to AtEOXact_RelationCache, subtransactions
	 * in readers are only caused by internal commands, and
	 * there shouldn't be interaction with global transactions,
	 * (reader gangs commit their transaction independently)
	 * we must not clear the relcache here.
	 */</comment>

	<comment type="block">/*
	 * Is it a relation created in the current subtransaction?
	 *
	 * During subcommit, mark it as belonging to the parent, instead. During
	 * subabort, simply delete the relcache entry.
	 */</comment>
	if (relation-&gt;rd_createSubid == mySubid)
	{
		if (isCommit)
			relation-&gt;rd_createSubid = parentSubid;
		else if (RelationHasReferenceCountZero(relation))
		{
			RelationClearRelation(relation, false);
			return;
		}
		else
		{
			<comment type="block">/*
			 * Hmm, somewhere there's a (leaked?) reference to the relation.
			 * We daren't remove the entry for fear of dereferencing a
			 * dangling pointer later.  Bleat, and transfer it to the parent
			 * subtransaction so we can try again later.  This must be just a
			 * WARNING to avoid error-during-error-recovery loops.
			 */</comment>
			relation-&gt;rd_createSubid = parentSubid;
			elog(WARNING, <literal type="string">"cannot remove relcache entry for \"%s\" because it has nonzero refcount"</literal>,
				 RelationGetRelationName(relation));
		}
	}

	<comment type="block">/*
	 * Likewise, update or drop any new-relfilenode-in-subtransaction hint.
	 */</comment>
	if (relation-&gt;rd_newRelfilenodeSubid == mySubid)
	{
		if (isCommit)
			relation-&gt;rd_newRelfilenodeSubid = parentSubid;
		else
			relation-&gt;rd_newRelfilenodeSubid = InvalidSubTransactionId;
	}
}


<comment type="block">/*
 *		RelationBuildLocalRelation
 *			Build a relcache entry for an about-to-be-created relation,
 *			and enter it into the relcache.
 */</comment>
Relation
RelationBuildLocalRelation(const char *relname,
						   Oid relnamespace,
						   TupleDesc tupDesc,
						   Oid relid,
						   Oid accessmtd,
						   Oid relfilenode,
						   Oid reltablespace,
						   bool shared_relation,
						   bool mapped_relation,
						   char relpersistence,
						   char relkind)
{
	Relation	rel;
	MemoryContext oldcxt;
	int			natts = tupDesc-&gt;natts;
	int			i;
	bool		has_not_null;
	bool		nailit;

	AssertArg(natts &gt;= <literal type="number">0</literal>);

	<comment type="block">/*
	 * check for creation of a rel that must be nailed in cache.
	 *
	 * XXX this list had better match the relations specially handled in
	 * RelationCacheInitializePhase2/3.
	 */</comment>
	switch (relid)
	{
		case DatabaseRelationId:
		case AuthIdRelationId:
		case AuthMemRelationId:
		case AuthTimeConstraintRelationId:
		case RelationRelationId:
		case AttributeRelationId:
		case ProcedureRelationId:
		case TypeRelationId:
			nailit = true;
			break;
		default:
			nailit = false;
			break;
	}

	<comment type="block">/*
	 * check that hardwired list of shared rels matches what's in the
	 * bootstrap .bki file.  If you get a failure here during initdb, you
	 * probably need to fix IsSharedRelation() to match whatever you've done
	 * to the set of shared relations.
	 */</comment>
	if (shared_relation != IsSharedRelation(relid))
		elog(ERROR, <literal type="string">"shared_relation flag for \"%s\" does not match IsSharedRelation(%u)"</literal>,
			 relname, relid);

	<comment type="block">/* Shared relations had better be mapped, too */</comment>
	Assert(mapped_relation || !shared_relation);

	<comment type="block">/*
	 * switch to the cache context to create the relcache entry.
	 */</comment>
	if (!CacheMemoryContext)
		CreateCacheMemoryContext();

	oldcxt = MemoryContextSwitchTo(CacheMemoryContext);

	<comment type="block">/*
	 * allocate a new relation descriptor and fill in basic state fields.
	 */</comment>
	rel = (Relation) palloc0(sizeof(RelationData));

	<comment type="block">/* make sure relation is marked as having no open file yet */</comment>
	rel-&gt;rd_smgr = NULL;

	<comment type="block">/* mark it nailed if appropriate */</comment>
	rel-&gt;rd_isnailed = nailit;

	rel-&gt;rd_refcnt = nailit ? <literal type="number">1</literal> : <literal type="number">0</literal>;

	<comment type="block">/* it's being created in this transaction */</comment>
	rel-&gt;rd_createSubid = GetCurrentSubTransactionId();
	rel-&gt;rd_newRelfilenodeSubid = InvalidSubTransactionId;

	<comment type="block">/*
	 * create a new tuple descriptor from the one passed in.  We do this
	 * partly to copy it into the cache context, and partly because the new
	 * relation can't have any defaults or constraints yet; they have to be
	 * added in later steps, because they require additions to multiple system
	 * catalogs.  We can copy attnotnull constraints here, however.
	 */</comment>
	rel-&gt;rd_att = CreateTupleDescCopy(tupDesc);
	rel-&gt;rd_att-&gt;tdrefcount = <literal type="number">1</literal>;	<comment type="block">/* mark as refcounted */</comment>
	has_not_null = false;
	for (i = <literal type="number">0</literal>; i &lt; natts; i++)
	{
		Form_pg_attribute satt = TupleDescAttr(tupDesc, i);
		Form_pg_attribute datt = TupleDescAttr(rel-&gt;rd_att, i);

		datt-&gt;attidentity = satt-&gt;attidentity;
		datt-&gt;attgenerated = satt-&gt;attgenerated;
		datt-&gt;attnotnull = satt-&gt;attnotnull;
		has_not_null |= satt-&gt;attnotnull;
	}

	if (has_not_null)
	{
		TupleConstr *constr = (TupleConstr *) palloc0(sizeof(TupleConstr));

		constr-&gt;has_not_null = true;
		rel-&gt;rd_att-&gt;constr = constr;
	}

	<comment type="block">/*
	 * initialize relation tuple form (caller may add/override data later)
	 */</comment>
	rel-&gt;rd_rel = (Form_pg_class) palloc0(CLASS_TUPLE_SIZE);

	namestrcpy(&amp;rel-&gt;rd_rel-&gt;relname, relname);
	rel-&gt;rd_rel-&gt;relnamespace = relnamespace;

	rel-&gt;rd_rel-&gt;relkind = relkind;
	rel-&gt;rd_rel-&gt;relnatts = natts;
	rel-&gt;rd_rel-&gt;reltype = InvalidOid;
	<comment type="block">/* needed when bootstrapping: */</comment>
	rel-&gt;rd_rel-&gt;relowner = BOOTSTRAP_SUPERUSERID;

	<comment type="block">/* set up persistence and relcache fields dependent on it */</comment>
	rel-&gt;rd_rel-&gt;relpersistence = relpersistence;
	switch (relpersistence)
	{
		case RELPERSISTENCE_UNLOGGED:
		case RELPERSISTENCE_PERMANENT:
			rel-&gt;rd_backend = InvalidBackendId;
			rel-&gt;rd_islocaltemp = false;
			break;
		case RELPERSISTENCE_TEMP:
			Assert(isTempOrTempToastNamespace(relnamespace));
			rel-&gt;rd_backend = BackendIdForTempRelations();
			rel-&gt;rd_islocaltemp = true;
			break;
		default:
			elog(ERROR, <literal type="string">"invalid relpersistence: %c"</literal>, relpersistence);
			break;
	}

	<comment type="block">/* if it's a materialized view, it's not populated initially */</comment>
	if (relkind == RELKIND_MATVIEW)
		rel-&gt;rd_rel-&gt;relispopulated = false;
	else
		rel-&gt;rd_rel-&gt;relispopulated = true;

	<comment type="block">/* set replica identity -- system catalogs and non-tables don't have one */</comment>
	if (!IsCatalogNamespace(relnamespace) &amp;&amp;
		(relkind == RELKIND_RELATION ||
		 relkind == RELKIND_MATVIEW ||
		 relkind == RELKIND_PARTITIONED_TABLE))
		rel-&gt;rd_rel-&gt;relreplident = REPLICA_IDENTITY_DEFAULT;
	else
		rel-&gt;rd_rel-&gt;relreplident = REPLICA_IDENTITY_NOTHING;

	<comment type="block">/*
	 * Insert relation physical and logical identifiers (OIDs) into the right
	 * places.  For a mapped relation, we set relfilenode to zero and rely on
	 * RelationInitPhysicalAddr to consult the map.
	 *
	 * In GPDB, the table's logical OID is allocated in the master, and might
	 * already be in use as a relfilenode of an existing relation in a segment.
	 *
	 * In binary upgrade mode, however, use the OID also as the relfilenode.
	 * pg_upgrade gets confused if they don't match.
	 */</comment>
	rel-&gt;rd_rel-&gt;relisshared = shared_relation;

	RelationGetRelid(rel) = relid;

	for (i = <literal type="number">0</literal>; i &lt; natts; i++)
		TupleDescAttr(rel-&gt;rd_att, i)-&gt;attrelid = relid;

	rel-&gt;rd_rel-&gt;reltablespace = reltablespace;


	<comment type="block">/*
	 * Further deviation in Greenplum: A new relfilenode must be generated even
	 * for a mapped relation.  OIDs and relfilenodes are generated using two
	 * separate counters.  If OID is reused as relfilenode, like in upstream,
	 * without bumping the relfilenode counter, it may lead to a reuse of this
	 * value as relfilenode in future.  E.g. if this is a non-temp relation and
	 * the future relation happens to be a temp relation.  Shared buffer
	 * manager in Greenplum breaks if this happens, see GPDB_91_MERGE_FIXME in
	 * GetNewRelFileNode() for details.
	 */</comment>
	if (relfilenode == <literal type="number">1</literal> || mapped_relation)
	{
		if (relid &lt; FirstNormalObjectId) <comment type="block">/* bootstrap only */</comment>
			relfilenode = relid;
		else
		{
			relfilenode = GetNewRelFileNode(reltablespace, NULL, relpersistence);
			if (Gp_role == GP_ROLE_EXECUTE || IsBinaryUpgrade)
				AdvanceObjectId(relid);
		}
	}

	if (mapped_relation)
	{
		rel-&gt;rd_rel-&gt;relfilenode = InvalidOid;
		<comment type="block">/* Add it to the active mapping information */</comment>
		RelationMapUpdateMap(relid, relfilenode, shared_relation, true);
	}
	else
		rel-&gt;rd_rel-&gt;relfilenode = relfilenode;

	RelationInitLockInfo(rel);	<comment type="block">/* see lmgr.c */</comment>

	RelationInitPhysicalAddr(rel);

	rel-&gt;rd_rel-&gt;relam = accessmtd;

	if (relkind == RELKIND_RELATION ||
		relkind == RELKIND_SEQUENCE ||
		relkind == RELKIND_TOASTVALUE ||
		relkind == RELKIND_MATVIEW)
		RelationInitTableAccessMethod(rel);

	if (relkind == RELKIND_AOSEGMENTS ||
		relkind == RELKIND_AOVISIMAP ||
		relkind == RELKIND_AOBLOCKDIR)
		RelationInitTableAccessMethod(rel);

	<comment type="block">/*
	 * Okay to insert into the relcache hash table.
	 *
	 * Ordinarily, there should certainly not be an existing hash entry for
	 * the same OID; but during bootstrap, when we create a "real" relcache
	 * entry for one of the bootstrap relations, we'll be overwriting the
	 * phony one created with formrdesc.  So allow that to happen for nailed
	 * rels.
	 */</comment>
	RelationCacheInsert(rel, nailit);

	<comment type="block">/*
	 * Flag relation as needing eoxact cleanup (to clear rd_createSubid). We
	 * can't do this before storing relid in it.
	 */</comment>
	EOXactListAdd(rel);

	<comment type="block">/*
	 * done building relcache entry.
	 */</comment>
	MemoryContextSwitchTo(oldcxt);

	<comment type="block">/* It's fully valid */</comment>
	rel-&gt;rd_isvalid = true;

	<comment type="block">/*
	 * Caller expects us to pin the returned entry.
	 */</comment>
	RelationIncrementReferenceCount(rel);

	return rel;
}


<comment type="block">/*
 * RelationSetNewRelfilenode
 *
 * Assign a new relfilenode (physical file name), and possibly a new
 * persistence setting, to the relation.
 *
 * This allows a full rewrite of the relation to be done with transactional
 * safety (since the filenode assignment can be rolled back).  Note however
 * that there is no simple way to access the relation's old data for the
 * remainder of the current transaction.  This limits the usefulness to cases
 * such as TRUNCATE or rebuilding an index from scratch.
 *
 * Caller must already hold exclusive lock on the relation.
 */</comment>
void
RelationSetNewRelfilenode(Relation relation, char persistence)
{
	Oid			newrelfilenode;
	Relation	pg_class;
	HeapTuple	tuple;
	Form_pg_class classform;
	MultiXactId minmulti = InvalidMultiXactId;
	TransactionId freezeXid = InvalidTransactionId;
	RelFileNode newrnode;

	<comment type="block">/* Allocate a new relfilenode */</comment>
	newrelfilenode = GetNewRelFileNode(relation-&gt;rd_rel-&gt;reltablespace, NULL,
									   persistence);

	<comment type="block">/*
	 * Get a writable copy of the pg_class tuple for the given relation.
	 */</comment>
	pg_class = table_open(RelationRelationId, RowExclusiveLock);

	tuple = SearchSysCacheCopy1(RELOID,
								ObjectIdGetDatum(RelationGetRelid(relation)));
	if (!HeapTupleIsValid(tuple))
		elog(ERROR, <literal type="string">"could not find tuple for relation %u"</literal>,
			 RelationGetRelid(relation));
	classform = (Form_pg_class) GETSTRUCT(tuple);

	<comment type="block">/*
	 * Schedule unlinking of the old storage at transaction commit.
	 */</comment>
	RelationDropStorage(relation);

	<comment type="block">/*
	 * Create storage for the main fork of the new relfilenode.  If it's a
	 * table-like object, call into the table AM to do so, which'll also
	 * create the table's init fork if needed.
	 *
	 * NOTE: If relevant for the AM, any conflict in relfilenode value will be
	 * caught here, if GetNewRelFileNode messes up for any reason.
	 */</comment>
	newrnode = relation-&gt;rd_node;
	newrnode.relNode = newrelfilenode;

	switch (relation-&gt;rd_rel-&gt;relkind)
	{
		case RELKIND_INDEX:
		case RELKIND_SEQUENCE:
			{
				<comment type="block">/* handle these directly, at least for now */</comment>
				SMgrRelation srel;

				srel = RelationCreateStorage(newrnode, persistence,
											 <literal type="number">0</literal> <comment type="block">/* default storage implementation */</comment>);
				smgrclose(srel);
			}
			break;

		case RELKIND_RELATION:
		case RELKIND_TOASTVALUE:
		case RELKIND_MATVIEW:
			table_relation_set_new_filenode(relation, &amp;newrnode,
											persistence,
											&amp;freezeXid, &amp;minmulti);
			break;

		case RELKIND_AOSEGMENTS:
		case RELKIND_AOVISIMAP:
		case RELKIND_AOBLOCKDIR:
			table_relation_set_new_filenode(relation, &amp;newrnode,
											persistence,
											&amp;freezeXid, &amp;minmulti);
			break;

		default:
			<comment type="block">/* we shouldn't be called for anything else */</comment>
			elog(ERROR, <literal type="string">"relation \"%s\" does not have storage"</literal>,
				 RelationGetRelationName(relation));
			break;
	}

	<comment type="block">/*
	 * If we're dealing with a mapped index, pg_class.relfilenode doesn't
	 * change; instead we have to send the update to the relation mapper.
	 *
	 * For mapped indexes, we don't actually change the pg_class entry at all;
	 * this is essential when reindexing pg_class itself.  That leaves us with
	 * possibly-inaccurate values of relpages etc, but those will be fixed up
	 * later.
	 */</comment>
	if (RelationIsMapped(relation))
	{
		<comment type="block">/* This case is only supported for indexes */</comment>
		Assert(relation-&gt;rd_rel-&gt;relkind == RELKIND_INDEX);

		<comment type="block">/* Since we're not updating pg_class, these had better not change */</comment>
		Assert(classform-&gt;relfrozenxid == freezeXid);
		Assert(classform-&gt;relminmxid == minmulti);
		Assert(classform-&gt;relpersistence == persistence);

		<comment type="block">/*
		 * In some code paths it's possible that the tuple update we'd
		 * otherwise do here is the only thing that would assign an XID for
		 * the current transaction.  However, we must have an XID to delete
		 * files, so make sure one is assigned.
		 */</comment>
		(void) GetCurrentTransactionId();

		<comment type="block">/* Do the deed */</comment>
		RelationMapUpdateMap(RelationGetRelid(relation),
							 newrelfilenode,
							 relation-&gt;rd_rel-&gt;relisshared,
							 false);

		<comment type="block">/* Since we're not updating pg_class, must trigger inval manually */</comment>
		CacheInvalidateRelcache(relation);
	}
	else
	{
		<comment type="block">/* Normal case, update the pg_class entry */</comment>
		classform-&gt;relfilenode = newrelfilenode;

		<comment type="block">/* relpages etc. never change for sequences */</comment>
		if (relation-&gt;rd_rel-&gt;relkind != RELKIND_SEQUENCE)
		{
			classform-&gt;relpages = <literal type="number">0</literal>;	<comment type="block">/* it's empty until further notice */</comment>
			classform-&gt;reltuples = <literal type="number">0</literal>;
			classform-&gt;relallvisible = <literal type="number">0</literal>;
		}
		classform-&gt;relfrozenxid = freezeXid;
		classform-&gt;relminmxid = minmulti;
		classform-&gt;relpersistence = persistence;

		CatalogTupleUpdate(pg_class, &amp;tuple-&gt;t_self, tuple);
	}

	heap_freetuple(tuple);

	table_close(pg_class, RowExclusiveLock);

	<comment type="block">/*
	 * Make the pg_class row change or relation map change visible.  This will
	 * cause the relcache entry to get updated, too.
	 */</comment>
	CommandCounterIncrement();

	<comment type="block">/*
	 * Mark the rel as having been given a new relfilenode in the current
	 * (sub) transaction.  This is a hint that can be used to optimize later
	 * operations on the rel in the same transaction.
	 */</comment>
	relation-&gt;rd_newRelfilenodeSubid = GetCurrentSubTransactionId();

	<comment type="block">/* Flag relation as needing eoxact cleanup (to remove the hint) */</comment>
	EOXactListAdd(relation);
}


<comment type="block">/*
 *		RelationCacheInitialize
 *
 *		This initializes the relation descriptor cache.  At the time
 *		that this is invoked, we can't do database access yet (mainly
 *		because the transaction subsystem is not up); all we are doing
 *		is making an empty cache hashtable.  This must be done before
 *		starting the initialization transaction, because otherwise
 *		AtEOXact_RelationCache would crash if that transaction aborts
 *		before we can get the relcache set up.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITRELCACHESIZE</name></cpp:macro>		<cpp:value>400</cpp:value></cpp:define>

void
RelationCacheInitialize(void)
{
	HASHCTL		ctl;

	<comment type="block">/*
	 * make sure cache memory context exists
	 */</comment>
	if (!CacheMemoryContext)
		CreateCacheMemoryContext();

	<comment type="block">/*
	 * create hashtable that indexes the relcache
	 */</comment>
	MemSet(&amp;ctl, <literal type="number">0</literal>, sizeof(ctl));
	ctl.keysize = sizeof(Oid);
	ctl.entrysize = sizeof(RelIdCacheEnt);
	RelationIdCache = hash_create(<literal type="string">"Relcache by OID"</literal>, INITRELCACHESIZE,
								  &amp;ctl, HASH_ELEM | HASH_BLOBS);

	<comment type="block">/*
	 * relation mapper needs to be initialized too
	 */</comment>
	RelationMapInitialize();
}

<comment type="block">/*
 *		RelationCacheInitializePhase2
 *
 *		This is called to prepare for access to shared catalogs during startup.
 *		We must at least set up nailed reldescs for pg_database, pg_authid,
 *		pg_auth_members, and pg_shseclabel. Ideally we'd like to have reldescs
 *		for their indexes, too.  We attempt to load this information from the
 *		shared relcache init file.  If that's missing or broken, just make
 *		phony entries for the catalogs themselves.
 *		RelationCacheInitializePhase3 will clean up as needed.
 */</comment>
void
RelationCacheInitializePhase2(void)
{
	MemoryContext oldcxt;

	<comment type="block">/*
	 * relation mapper needs initialized too
	 */</comment>
	RelationMapInitializePhase2();

	<comment type="block">/*
	 * In bootstrap mode, the shared catalogs aren't there yet anyway, so do
	 * nothing.
	 */</comment>
	if (IsBootstrapProcessingMode())
		return;

	<comment type="block">/*
	 * switch to cache memory context
	 */</comment>
	oldcxt = MemoryContextSwitchTo(CacheMemoryContext);

	<comment type="block">/*
	 * Try to load the shared relcache cache file.  If unsuccessful, bootstrap
	 * the cache with pre-made descriptors for the critical shared catalogs.
	 */</comment>
	if (!load_relcache_init_file(true))
	{
		formrdesc(<literal type="string">"pg_database"</literal>, DatabaseRelation_Rowtype_Id, true,
				  Natts_pg_database, Desc_pg_database);
		formrdesc(<literal type="string">"pg_authid"</literal>, AuthIdRelation_Rowtype_Id, true,
				  Natts_pg_authid, Desc_pg_authid);
		formrdesc(<literal type="string">"pg_auth_members"</literal>, AuthMemRelation_Rowtype_Id, true,
				  Natts_pg_auth_members, Desc_pg_auth_members);
		formrdesc(<literal type="string">"pg_shseclabel"</literal>, SharedSecLabelRelation_Rowtype_Id, true,
				  Natts_pg_shseclabel, Desc_pg_shseclabel);
		formrdesc(<literal type="string">"pg_subscription"</literal>, SubscriptionRelation_Rowtype_Id, true,
				  Natts_pg_subscription, Desc_pg_subscription);
		formrdesc(<literal type="string">"pg_auth_time_constraint"</literal>, AuthTimeConstraint_Rowtype_Id, true,
				  Natts_pg_auth_time_constraint, Desc_pg_auth_time_constraint_members);

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_CRITICAL_SHARED_RELS</name></cpp:macro>	<cpp:value>6</cpp:value></cpp:define>	<comment type="block">/* fix if you change list above */</comment>
	}

	MemoryContextSwitchTo(oldcxt);
}

<comment type="block">/*
 *		RelationCacheInitializePhase3
 *
 *		This is called as soon as the catcache and transaction system
 *		are functional and we have determined MyDatabaseId.  At this point
 *		we can actually read data from the database's system catalogs.
 *		We first try to read pre-computed relcache entries from the local
 *		relcache init file.  If that's missing or broken, make phony entries
 *		for the minimum set of nailed-in-cache relations.  Then (unless
 *		bootstrapping) make sure we have entries for the critical system
 *		indexes.  Once we've done all this, we have enough infrastructure to
 *		open any system catalog or use any catcache.  The last step is to
 *		rewrite the cache files if needed.
 */</comment>
void
RelationCacheInitializePhase3(void)
{
	HASH_SEQ_STATUS status;
	RelIdCacheEnt *idhentry;
	MemoryContext oldcxt;
	bool		needNewCacheFile = !criticalSharedRelcachesBuilt;

	<comment type="block">/*
	 * Relation cache initialization or any sort of heap access is
	 * dangerous before recovery is finished.
	 */</comment>
	if (!EnableHotStandby &amp;&amp; !IsBootstrapProcessingMode() &amp;&amp; RecoveryInProgress())
		elog(ERROR, <literal type="string">"relation cache initialization during recovery or non-bootstrap processes."</literal>);

	<comment type="block">/*
	 * relation mapper needs initialized too
	 */</comment>
	RelationMapInitializePhase3();

	<comment type="block">/*
	 * switch to cache memory context
	 */</comment>
	oldcxt = MemoryContextSwitchTo(CacheMemoryContext);

	<comment type="block">/*
	 * Try to load the local relcache cache file.  If unsuccessful, bootstrap
	 * the cache with pre-made descriptors for the critical "nailed-in" system
	 * catalogs.
	 */</comment>
	if (IsBootstrapProcessingMode() ||
		!load_relcache_init_file(false))
	{
		needNewCacheFile = true;

		formrdesc(<literal type="string">"pg_class"</literal>, RelationRelation_Rowtype_Id, false,
				  Natts_pg_class, Desc_pg_class);
		formrdesc(<literal type="string">"pg_attribute"</literal>, AttributeRelation_Rowtype_Id, false,
				  Natts_pg_attribute, Desc_pg_attribute);
		formrdesc(<literal type="string">"pg_proc"</literal>, ProcedureRelation_Rowtype_Id, false,
				  Natts_pg_proc, Desc_pg_proc);
		formrdesc(<literal type="string">"pg_type"</literal>, TypeRelation_Rowtype_Id, false,
				  Natts_pg_type, Desc_pg_type);

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_CRITICAL_LOCAL_RELS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>	<comment type="block">/* fix if you change list above */</comment>
	}

	MemoryContextSwitchTo(oldcxt);

	<comment type="block">/* In bootstrap mode, the faked-up formrdesc info is all we'll have */</comment>
	if (IsBootstrapProcessingMode())
		return;

	<comment type="block">/*
	 * If we didn't get the critical system indexes loaded into relcache, do
	 * so now.  These are critical because the catcache and/or opclass cache
	 * depend on them for fetches done during relcache load.  Thus, we have an
	 * infinite-recursion problem.  We can break the recursion by doing
	 * heapscans instead of indexscans at certain key spots. To avoid hobbling
	 * performance, we only want to do that until we have the critical indexes
	 * loaded into relcache.  Thus, the flag criticalRelcachesBuilt is used to
	 * decide whether to do heapscan or indexscan at the key spots, and we set
	 * it true after we've loaded the critical indexes.
	 *
	 * The critical indexes are marked as "nailed in cache", partly to make it
	 * easy for load_relcache_init_file to count them, but mainly because we
	 * cannot flush and rebuild them once we've set criticalRelcachesBuilt to
	 * true.  (NOTE: perhaps it would be possible to reload them by
	 * temporarily setting criticalRelcachesBuilt to false again.  For now,
	 * though, we just nail 'em in.)
	 *
	 * RewriteRelRulenameIndexId and TriggerRelidNameIndexId are not critical
	 * in the same way as the others, because the critical catalogs don't
	 * (currently) have any rules or triggers, and so these indexes can be
	 * rebuilt without inducing recursion.  However they are used during
	 * relcache load when a rel does have rules or triggers, so we choose to
	 * nail them for performance reasons.
	 */</comment>
	if (!criticalRelcachesBuilt)
	{
		load_critical_index(ClassOidIndexId,
							RelationRelationId);
		load_critical_index(AttributeRelidNumIndexId,
							AttributeRelationId);
		load_critical_index(IndexRelidIndexId,
							IndexRelationId);
		load_critical_index(OpclassOidIndexId,
							OperatorClassRelationId);
		load_critical_index(AccessMethodProcedureIndexId,
							AccessMethodProcedureRelationId);
		load_critical_index(RewriteRelRulenameIndexId,
							RewriteRelationId);
		load_critical_index(TriggerRelidNameIndexId,
							TriggerRelationId);

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_CRITICAL_LOCAL_INDEXES</name></cpp:macro>	<cpp:value>7</cpp:value></cpp:define>	<comment type="block">/* fix if you change list above */</comment>

		criticalRelcachesBuilt = true;
	}

	<comment type="block">/*
	 * Process critical shared indexes too.
	 *
	 * DatabaseNameIndexId isn't critical for relcache loading, but rather for
	 * initial lookup of MyDatabaseId, without which we'll never find any
	 * non-shared catalogs at all.  Autovacuum calls InitPostgres with a
	 * database OID, so it instead depends on DatabaseOidIndexId.  We also
	 * need to nail up some indexes on pg_authid and pg_auth_members for use
	 * during client authentication.  SharedSecLabelObjectIndexId isn't
	 * critical for the core system, but authentication hooks might be
	 * interested in it.
	 *
	 * GPDB: pg_auth_time_constraint is added to the above list.
	 */</comment>
	if (!criticalSharedRelcachesBuilt)
	{
		load_critical_index(DatabaseNameIndexId,
							DatabaseRelationId);
		load_critical_index(DatabaseOidIndexId,
							DatabaseRelationId);
		load_critical_index(AuthIdRolnameIndexId,
							AuthIdRelationId);
		load_critical_index(AuthIdOidIndexId,
							AuthIdRelationId);
		load_critical_index(AuthMemMemRoleIndexId,
							AuthMemRelationId);
		load_critical_index(SharedSecLabelObjectIndexId,
							SharedSecLabelRelationId);
		load_critical_index(AuthTimeConstraintAuthIdIndexId,
							AuthTimeConstraintRelationId);

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_CRITICAL_SHARED_INDEXES</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>	<comment type="block">/* fix if you change list above */</comment>

		criticalSharedRelcachesBuilt = true;
	}

	<comment type="block">/*
	 * Now, scan all the relcache entries and update anything that might be
	 * wrong in the results from formrdesc or the relcache cache file. If we
	 * faked up relcache entries using formrdesc, then read the real pg_class
	 * rows and replace the fake entries with them. Also, if any of the
	 * relcache entries have rules, triggers, or security policies, load that
	 * info the hard way since it isn't recorded in the cache file.
	 *
	 * Whenever we access the catalogs to read data, there is a possibility of
	 * a shared-inval cache flush causing relcache entries to be removed.
	 * Since hash_seq_search only guarantees to still work after the *current*
	 * entry is removed, it's unsafe to continue the hashtable scan afterward.
	 * We handle this by restarting the scan from scratch after each access.
	 * This is theoretically O(N^2), but the number of entries that actually
	 * need to be fixed is small enough that it doesn't matter.
	 */</comment>
	hash_seq_init(&amp;status, RelationIdCache);

	while ((idhentry = (RelIdCacheEnt *) hash_seq_search(&amp;status)) != NULL)
	{
		Relation	relation = idhentry-&gt;reldesc;
		bool		restart = false;

		<comment type="block">/*
		 * Make sure *this* entry doesn't get flushed while we work with it.
		 */</comment>
		RelationIncrementReferenceCount(relation);

		<comment type="block">/*
		 * If it's a faked-up entry, read the real pg_class tuple.
		 */</comment>
		if (relation-&gt;rd_rel-&gt;relowner == InvalidOid)
		{
			HeapTuple	htup;
			Form_pg_class relp;

			htup = SearchSysCache1(RELOID,
								   ObjectIdGetDatum(RelationGetRelid(relation)));
			if (!HeapTupleIsValid(htup))
				elog(FATAL, <literal type="string">"cache lookup failed for relation %u"</literal>,
					 RelationGetRelid(relation));
			relp = (Form_pg_class) GETSTRUCT(htup);

			<comment type="block">/*
			 * Copy tuple to relation-&gt;rd_rel. (See notes in
			 * AllocateRelationDesc())
			 */</comment>
			memcpy((char *) relation-&gt;rd_rel, (char *) relp, CLASS_TUPLE_SIZE);

			<comment type="block">/* Update rd_options while we have the tuple */</comment>
			if (relation-&gt;rd_options)
				pfree(relation-&gt;rd_options);
			RelationParseRelOptions(relation, htup);

			<comment type="block">/*
			 * Check the values in rd_att were set up correctly.  (We cannot
			 * just copy them over now: formrdesc must have set up the rd_att
			 * data correctly to start with, because it may already have been
			 * copied into one or more catcache entries.)
			 */</comment>
			Assert(relation-&gt;rd_att-&gt;tdtypeid == relp-&gt;reltype);
			Assert(relation-&gt;rd_att-&gt;tdtypmod == -<literal type="number">1</literal>);

			ReleaseSysCache(htup);

			<comment type="block">/* relowner had better be OK now, else we'll loop forever */</comment>
			if (relation-&gt;rd_rel-&gt;relowner == InvalidOid)
				elog(ERROR, <literal type="string">"invalid relowner in pg_class entry for \"%s\""</literal>,
					 RelationGetRelationName(relation));

			restart = true;
		}

		<comment type="block">/*
		 * Fix data that isn't saved in relcache cache file.
		 *
		 * relhasrules or relhastriggers could possibly be wrong or out of
		 * date.  If we don't actually find any rules or triggers, clear the
		 * local copy of the flag so that we don't get into an infinite loop
		 * here.  We don't make any attempt to fix the pg_class entry, though.
		 */</comment>
		if (relation-&gt;rd_rel-&gt;relhasrules &amp;&amp; relation-&gt;rd_rules == NULL)
		{
			RelationBuildRuleLock(relation);
			if (relation-&gt;rd_rules == NULL)
				relation-&gt;rd_rel-&gt;relhasrules = false;
			restart = true;
		}
		if (relation-&gt;rd_rel-&gt;relhastriggers &amp;&amp; relation-&gt;trigdesc == NULL)
		{
			RelationBuildTriggers(relation);
			if (relation-&gt;trigdesc == NULL)
				relation-&gt;rd_rel-&gt;relhastriggers = false;
			restart = true;
		}

		<comment type="block">/*
		 * Re-load the row security policies if the relation has them, since
		 * they are not preserved in the cache.  Note that we can never NOT
		 * have a policy while relrowsecurity is true,
		 * RelationBuildRowSecurity will create a single default-deny policy
		 * if there is no policy defined in pg_policy.
		 */</comment>
		if (relation-&gt;rd_rel-&gt;relrowsecurity &amp;&amp; relation-&gt;rd_rsdesc == NULL)
		{
			RelationBuildRowSecurity(relation);

			Assert(relation-&gt;rd_rsdesc != NULL);
			restart = true;
		}

		<comment type="block">/*
		 * Reload the partition key and descriptor for a partitioned table.
		 */</comment>
		if (relation-&gt;rd_rel-&gt;relkind == RELKIND_PARTITIONED_TABLE &amp;&amp;
			relation-&gt;rd_partkey == NULL)
		{
			RelationBuildPartitionKey(relation);
			Assert(relation-&gt;rd_partkey != NULL);

			restart = true;
		}

		if (relation-&gt;rd_rel-&gt;relkind == RELKIND_PARTITIONED_TABLE &amp;&amp;
			relation-&gt;rd_partdesc == NULL)
		{
			RelationBuildPartitionDesc(relation);
			Assert(relation-&gt;rd_partdesc != NULL);

			restart = true;
		}

		if (relation-&gt;rd_tableam == NULL &amp;&amp;
			(relation-&gt;rd_rel-&gt;relkind == RELKIND_RELATION ||
			 relation-&gt;rd_rel-&gt;relkind == RELKIND_SEQUENCE ||
			 relation-&gt;rd_rel-&gt;relkind == RELKIND_TOASTVALUE ||
			 relation-&gt;rd_rel-&gt;relkind == RELKIND_MATVIEW))
		{
			RelationInitTableAccessMethod(relation);
			Assert(relation-&gt;rd_tableam != NULL);

			restart = true;
		}

		if (relation-&gt;rd_tableam == NULL &amp;&amp;
			(relation-&gt;rd_rel-&gt;relkind == RELKIND_AOSEGMENTS ||
			 relation-&gt;rd_rel-&gt;relkind == RELKIND_AOBLOCKDIR ||
			 relation-&gt;rd_rel-&gt;relkind == RELKIND_AOVISIMAP))
		{
			RelationInitTableAccessMethod(relation);
			Assert(relation-&gt;rd_tableam != NULL);

			restart = true;
		}

		<comment type="block">/* Release hold on the relation */</comment>
		RelationDecrementReferenceCount(relation);

		<comment type="block">/* Now, restart the hashtable scan if needed */</comment>
		if (restart)
		{
			hash_seq_term(&amp;status);
			hash_seq_init(&amp;status, RelationIdCache);
		}
	}

	<comment type="block">/*
	 * Lastly, write out new relcache cache files if needed.  We don't bother
	 * to distinguish cases where only one of the two needs an update.
	 */</comment>
	if (needNewCacheFile)
	{
		<comment type="block">/*
		 * Force all the catcaches to finish initializing and thereby open the
		 * catalogs and indexes they use.  This will preload the relcache with
		 * entries for all the most important system catalogs and indexes, so
		 * that the init files will be most useful for future backends.
		 */</comment>
		InitCatalogCachePhase2();

		<comment type="block">/* now write the files */</comment>
		write_relcache_init_file(true);
		write_relcache_init_file(false);
	}
}

<comment type="block">/*
 * Load one critical system index into the relcache
 *
 * indexoid is the OID of the target index, heapoid is the OID of the catalog
 * it belongs to.
 */</comment>
static void
load_critical_index(Oid indexoid, Oid heapoid)
{
	Relation	ird;

	<comment type="block">/*
	 * We must lock the underlying catalog before locking the index to avoid
	 * deadlock, since RelationBuildDesc might well need to read the catalog,
	 * and if anyone else is exclusive-locking this catalog and index they'll
	 * be doing it in that order.
	 */</comment>
	LockRelationOid(heapoid, AccessShareLock);
	LockRelationOid(indexoid, AccessShareLock);
	ird = RelationBuildDesc(indexoid, true);
	if (ird == NULL)
		elog(PANIC, <literal type="string">"could not open critical system index %u"</literal>, indexoid);
	ird-&gt;rd_isnailed = true;
	ird-&gt;rd_refcnt = <literal type="number">1</literal>;
	UnlockRelationOid(indexoid, AccessShareLock);
	UnlockRelationOid(heapoid, AccessShareLock);
}

<comment type="block">/*
 * GetPgClassDescriptor -- get a predefined tuple descriptor for pg_class
 * GetPgIndexDescriptor -- get a predefined tuple descriptor for pg_index
 *
 * We need this kluge because we have to be able to access non-fixed-width
 * fields of pg_class and pg_index before we have the standard catalog caches
 * available.  We use predefined data that's set up in just the same way as
 * the bootstrapped reldescs used by formrdesc().  The resulting tupdesc is
 * not 100% kosher: it does not have the correct rowtype OID in tdtypeid, nor
 * does it have a TupleConstr field.  But it's good enough for the purpose of
 * extracting fields.
 */</comment>
static TupleDesc
BuildHardcodedDescriptor(int natts, const FormData_pg_attribute *attrs)
{
	TupleDesc	result;
	MemoryContext oldcxt;
	int			i;

	oldcxt = MemoryContextSwitchTo(CacheMemoryContext);

	result = CreateTemplateTupleDesc(natts);
	result-&gt;tdtypeid = RECORDOID;	<comment type="block">/* not right, but we don't care */</comment>
	result-&gt;tdtypmod = -<literal type="number">1</literal>;

	for (i = <literal type="number">0</literal>; i &lt; natts; i++)
	{
		memcpy(TupleDescAttr(result, i), &amp;attrs[i], ATTRIBUTE_FIXED_PART_SIZE);
		<comment type="block">/* make sure attcacheoff is valid */</comment>
		TupleDescAttr(result, i)-&gt;attcacheoff = -<literal type="number">1</literal>;
	}

	<comment type="block">/* initialize first attribute's attcacheoff, cf RelationBuildTupleDesc */</comment>
	TupleDescAttr(result, <literal type="number">0</literal>)-&gt;attcacheoff = <literal type="number">0</literal>;

	<comment type="block">/* Note: we don't bother to set up a TupleConstr entry */</comment>

	MemoryContextSwitchTo(oldcxt);

	return result;
}

static TupleDesc
GetPgClassDescriptor(void)
{
	static TupleDesc pgclassdesc = NULL;

	<comment type="block">/* Already done? */</comment>
	if (pgclassdesc == NULL)
		pgclassdesc = BuildHardcodedDescriptor(Natts_pg_class,
											   Desc_pg_class);

	return pgclassdesc;
}

static TupleDesc
GetPgIndexDescriptor(void)
{
	static TupleDesc pgindexdesc = NULL;

	<comment type="block">/* Already done? */</comment>
	if (pgindexdesc == NULL)
		pgindexdesc = BuildHardcodedDescriptor(Natts_pg_index,
											   Desc_pg_index);

	return pgindexdesc;
}

<comment type="block">/*
 * Load any default attribute value definitions for the relation.
 */</comment>
static void
AttrDefaultFetch(Relation relation)
{
	AttrDefault *attrdef = relation-&gt;rd_att-&gt;constr-&gt;defval;
	int			ndef = relation-&gt;rd_att-&gt;constr-&gt;num_defval;
	Relation	adrel;
	SysScanDesc adscan;
	ScanKeyData skey;
	HeapTuple	htup;
	Datum		val;
	bool		isnull;
	int			found;
	int			i;

	ScanKeyInit(&amp;skey,
				Anum_pg_attrdef_adrelid,
				BTEqualStrategyNumber, F_OIDEQ,
				ObjectIdGetDatum(RelationGetRelid(relation)));

	adrel = table_open(AttrDefaultRelationId, AccessShareLock);
	adscan = systable_beginscan(adrel, AttrDefaultIndexId, true,
								NULL, <literal type="number">1</literal>, &amp;skey);
	found = <literal type="number">0</literal>;

	while (HeapTupleIsValid(htup = systable_getnext(adscan)))
	{
		Form_pg_attrdef adform = (Form_pg_attrdef) GETSTRUCT(htup);
		Form_pg_attribute attr = TupleDescAttr(relation-&gt;rd_att, adform-&gt;adnum - <literal type="number">1</literal>);

		for (i = <literal type="number">0</literal>; i &lt; ndef; i++)
		{
			if (adform-&gt;adnum != attrdef[i].adnum)
				continue;
			if (attrdef[i].adbin != NULL)
				elog(WARNING, <literal type="string">"multiple attrdef records found for attr %s of rel %s"</literal>,
					 NameStr(attr-&gt;attname),
					 RelationGetRelationName(relation));
			else
				found++;

			val = fastgetattr(htup,
							  Anum_pg_attrdef_adbin,
							  adrel-&gt;rd_att, &amp;isnull);
			if (isnull)
				elog(WARNING, <literal type="string">"null adbin for attr %s of rel %s"</literal>,
					 NameStr(attr-&gt;attname),
					 RelationGetRelationName(relation));
			else
			{
				<comment type="block">/* detoast and convert to cstring in caller's context */</comment>
				char	   *s = TextDatumGetCString(val);

				attrdef[i].adbin = MemoryContextStrdup(CacheMemoryContext, s);
				pfree(s);
			}
			break;
		}

		if (i &gt;= ndef)
			elog(WARNING, <literal type="string">"unexpected attrdef record found for attr %d of rel %s"</literal>,
				 adform-&gt;adnum, RelationGetRelationName(relation));
	}

	systable_endscan(adscan);
	table_close(adrel, AccessShareLock);
}

<comment type="block">/*
 * Load any check constraints for the relation.
 */</comment>
static void
CheckConstraintFetch(Relation relation)
{
	ConstrCheck *check = relation-&gt;rd_att-&gt;constr-&gt;check;
	int			ncheck = relation-&gt;rd_att-&gt;constr-&gt;num_check;
	Relation	conrel;
	SysScanDesc conscan;
	ScanKeyData skey[<literal type="number">1</literal>];
	HeapTuple	htup;
	int			found = <literal type="number">0</literal>;

	ScanKeyInit(&amp;skey[<literal type="number">0</literal>],
				Anum_pg_constraint_conrelid,
				BTEqualStrategyNumber, F_OIDEQ,
				ObjectIdGetDatum(RelationGetRelid(relation)));

	conrel = table_open(ConstraintRelationId, AccessShareLock);
	conscan = systable_beginscan(conrel, ConstraintRelidTypidNameIndexId, true,
								 NULL, <literal type="number">1</literal>, skey);

	while (HeapTupleIsValid(htup = systable_getnext(conscan)))
	{
		Form_pg_constraint conform = (Form_pg_constraint) GETSTRUCT(htup);
		Datum		val;
		bool		isnull;
		char	   *s;

		<comment type="block">/* We want check constraints only */</comment>
		if (conform-&gt;contype != CONSTRAINT_CHECK)
			continue;

		if (found &gt;= ncheck)
			elog(ERROR,
			     <literal type="string">"pg_class reports %d constraint record(s) for rel %s, but found extra in pg_constraint"</literal>,
			     ncheck, RelationGetRelationName(relation));

		check[found].ccvalid = conform-&gt;convalidated;
		check[found].ccnoinherit = conform-&gt;connoinherit;
		check[found].ccname = MemoryContextStrdup(CacheMemoryContext,
												  NameStr(conform-&gt;conname));

		<comment type="block">/* Grab and test conbin is actually set */</comment>
		val = fastgetattr(htup,
						  Anum_pg_constraint_conbin,
						  conrel-&gt;rd_att, &amp;isnull);
		if (isnull)
			elog(ERROR, <literal type="string">"null conbin for rel %s"</literal>,
				 RelationGetRelationName(relation));

		<comment type="block">/* detoast and convert to cstring in caller's context */</comment>
		s = TextDatumGetCString(val);
		check[found].ccbin = MemoryContextStrdup(CacheMemoryContext, s);
		pfree(s);

		found++;
	}

	systable_endscan(conscan);
	table_close(conrel, AccessShareLock);

	if (found != ncheck)
		elog(ERROR, <literal type="string">"%d constraint record(s) missing for rel %s"</literal>,
			 ncheck - found, RelationGetRelationName(relation));

	<comment type="block">/* Sort the records so that CHECKs are applied in a deterministic order */</comment>
	if (ncheck &gt; <literal type="number">1</literal>)
		qsort(check, ncheck, sizeof(ConstrCheck), CheckConstraintCmp);
}

<comment type="block">/*
 * qsort comparator to sort ConstrCheck entries by name
 */</comment>
static int
CheckConstraintCmp(const void *a, const void *b)
{
	const ConstrCheck *ca = (const ConstrCheck *) a;
	const ConstrCheck *cb = (const ConstrCheck *) b;

	return strcmp(ca-&gt;ccname, cb-&gt;ccname);
}


<comment type="block">/*
 * RelationGetPartitioningKey -- get GpPolicy struct for distributed relation
 *
 * Returns a copy of the relation's GpPolicy object, palloc'd in
 * the caller's context.  Caller should pfree() it.  If NULL is
 * returned, relation should be accessed locally.
 */</comment>
GpPolicy*
RelationGetPartitioningKey(Relation relation)
{
	return GpPolicyCopy(relation-&gt;rd_cdbpolicy);
}                                       <comment type="block">/* RelationGetPartitioningKey */</comment>


<comment type="block">/*
 * RelationGetFKeyList -- get a list of foreign key info for the relation
 *
 * Returns a list of ForeignKeyCacheInfo structs, one per FK constraining
 * the given relation.  This data is a direct copy of relevant fields from
 * pg_constraint.  The list items are in no particular order.
 *
 * CAUTION: the returned list is part of the relcache's data, and could
 * vanish in a relcache entry reset.  Callers must inspect or copy it
 * before doing anything that might trigger a cache flush, such as
 * system catalog accesses.  copyObject() can be used if desired.
 * (We define it this way because current callers want to filter and
 * modify the list entries anyway, so copying would be a waste of time.)
 */</comment>
List *
RelationGetFKeyList(Relation relation)
{
	List	   *result;
	Relation	conrel;
	SysScanDesc conscan;
	ScanKeyData skey;
	HeapTuple	htup;
	List	   *oldlist;
	MemoryContext oldcxt;

	<comment type="block">/* Quick exit if we already computed the list. */</comment>
	if (relation-&gt;rd_fkeyvalid)
		return relation-&gt;rd_fkeylist;

	<comment type="block">/* Fast path: non-partitioned tables without triggers can't have FKs */</comment>
	if (!relation-&gt;rd_rel-&gt;relhastriggers &amp;&amp;
		relation-&gt;rd_rel-&gt;relkind != RELKIND_PARTITIONED_TABLE)
		return NIL;

	<comment type="block">/*
	 * We build the list we intend to return (in the caller's context) while
	 * doing the scan.  After successfully completing the scan, we copy that
	 * list into the relcache entry.  This avoids cache-context memory leakage
	 * if we get some sort of error partway through.
	 */</comment>
	result = NIL;

	<comment type="block">/* Prepare to scan pg_constraint for entries having conrelid = this rel. */</comment>
	ScanKeyInit(&amp;skey,
				Anum_pg_constraint_conrelid,
				BTEqualStrategyNumber, F_OIDEQ,
				ObjectIdGetDatum(RelationGetRelid(relation)));

	conrel = table_open(ConstraintRelationId, AccessShareLock);
	conscan = systable_beginscan(conrel, ConstraintRelidTypidNameIndexId, true,
								 NULL, <literal type="number">1</literal>, &amp;skey);

	while (HeapTupleIsValid(htup = systable_getnext(conscan)))
	{
		Form_pg_constraint constraint = (Form_pg_constraint) GETSTRUCT(htup);
		ForeignKeyCacheInfo *info;

		<comment type="block">/* consider only foreign keys */</comment>
		if (constraint-&gt;contype != CONSTRAINT_FOREIGN)
			continue;

		info = makeNode(ForeignKeyCacheInfo);
		info-&gt;conoid = constraint-&gt;oid;
		info-&gt;conrelid = constraint-&gt;conrelid;
		info-&gt;confrelid = constraint-&gt;confrelid;

		DeconstructFkConstraintRow(htup, &amp;info-&gt;nkeys,
								   info-&gt;conkey,
								   info-&gt;confkey,
								   info-&gt;conpfeqop,
								   NULL, NULL);

		<comment type="block">/* Add FK's node to the result list */</comment>
		result = lappend(result, info);
	}

	systable_endscan(conscan);
	table_close(conrel, AccessShareLock);

	<comment type="block">/* Now save a copy of the completed list in the relcache entry. */</comment>
	oldcxt = MemoryContextSwitchTo(CacheMemoryContext);
	oldlist = relation-&gt;rd_fkeylist;
	relation-&gt;rd_fkeylist = copyObject(result);
	relation-&gt;rd_fkeyvalid = true;
	MemoryContextSwitchTo(oldcxt);

	<comment type="block">/* Don't leak the old list, if there is one */</comment>
	list_free_deep(oldlist);

	return result;
}

<comment type="block">/*
 * RelationGetIndexList -- get a list of OIDs of indexes on this relation
 *
 * The index list is created only if someone requests it.  We scan pg_index
 * to find relevant indexes, and add the list to the relcache entry so that
 * we won't have to compute it again.  Note that shared cache inval of a
 * relcache entry will delete the old list and set rd_indexvalid to false,
 * so that we must recompute the index list on next request.  This handles
 * creation or deletion of an index.
 *
 * Indexes that are marked not indislive are omitted from the returned list.
 * Such indexes are expected to be dropped momentarily, and should not be
 * touched at all by any caller of this function.
 *
 * The returned list is guaranteed to be sorted in order by OID.  This is
 * needed by the executor, since for index types that we obtain exclusive
 * locks on when updating the index, all backends must lock the indexes in
 * the same order or we will get deadlocks (see ExecOpenIndices()).  Any
 * consistent ordering would do, but ordering by OID is easy.
 *
 * Since shared cache inval causes the relcache's copy of the list to go away,
 * we return a copy of the list palloc'd in the caller's context.  The caller
 * may list_free() the returned list after scanning it. This is necessary
 * since the caller will typically be doing syscache lookups on the relevant
 * indexes, and syscache lookup could cause SI messages to be processed!
 *
 * In exactly the same way, we update rd_pkindex, which is the OID of the
 * relation's primary key index if any, else InvalidOid; and rd_replidindex,
 * which is the pg_class OID of an index to be used as the relation's
 * replication identity index, or InvalidOid if there is no such index.
 */</comment>
List *
RelationGetIndexList(Relation relation)
{
	Relation	indrel;
	SysScanDesc indscan;
	ScanKeyData skey;
	HeapTuple	htup;
	List	   *result;
	List	   *oldlist;
	char		replident = relation-&gt;rd_rel-&gt;relreplident;
	Oid			pkeyIndex = InvalidOid;
	Oid			candidateIndex = InvalidOid;
	MemoryContext oldcxt;

	<comment type="block">/* Quick exit if we already computed the list. */</comment>
	if (relation-&gt;rd_indexvalid)
		return list_copy(relation-&gt;rd_indexlist);

	<comment type="block">/*
	 * We build the list we intend to return (in the caller's context) while
	 * doing the scan.  After successfully completing the scan, we copy that
	 * list into the relcache entry.  This avoids cache-context memory leakage
	 * if we get some sort of error partway through.
	 */</comment>
	result = NIL;

	<comment type="block">/* Prepare to scan pg_index for entries having indrelid = this rel. */</comment>
	ScanKeyInit(&amp;skey,
				Anum_pg_index_indrelid,
				BTEqualStrategyNumber, F_OIDEQ,
				ObjectIdGetDatum(RelationGetRelid(relation)));

	indrel = table_open(IndexRelationId, AccessShareLock);
	indscan = systable_beginscan(indrel, IndexIndrelidIndexId, true,
								 NULL, <literal type="number">1</literal>, &amp;skey);

	while (HeapTupleIsValid(htup = systable_getnext(indscan)))
	{
		Form_pg_index index = (Form_pg_index) GETSTRUCT(htup);

		<comment type="block">/*
		 * Ignore any indexes that are currently being dropped.  This will
		 * prevent them from being searched, inserted into, or considered in
		 * HOT-safety decisions.  It's unsafe to touch such an index at all
		 * since its catalog entries could disappear at any instant.
		 */</comment>
		if (!index-&gt;indislive)
			continue;

		<comment type="block">/* Add index's OID to result list in the proper order */</comment>
		result = insert_ordered_oid(result, index-&gt;indexrelid);

		<comment type="block">/*
		 * Invalid, non-unique, non-immediate or predicate indexes aren't
		 * interesting for either oid indexes or replication identity indexes,
		 * so don't check them.
		 */</comment>
		if (!index-&gt;indisvalid || !index-&gt;indisunique ||
			!index-&gt;indimmediate ||
			!heap_attisnull(htup, Anum_pg_index_indpred, NULL))
			continue;

		<comment type="block">/* remember primary key index if any */</comment>
		if (index-&gt;indisprimary)
			pkeyIndex = index-&gt;indexrelid;

		<comment type="block">/* remember explicitly chosen replica index */</comment>
		if (index-&gt;indisreplident)
			candidateIndex = index-&gt;indexrelid;
	}

	systable_endscan(indscan);

	table_close(indrel, AccessShareLock);

	<comment type="block">/* Now save a copy of the completed list in the relcache entry. */</comment>
	oldcxt = MemoryContextSwitchTo(CacheMemoryContext);
	oldlist = relation-&gt;rd_indexlist;
	relation-&gt;rd_indexlist = list_copy(result);
	relation-&gt;rd_pkindex = pkeyIndex;
	if (replident == REPLICA_IDENTITY_DEFAULT &amp;&amp; OidIsValid(pkeyIndex))
		relation-&gt;rd_replidindex = pkeyIndex;
	else if (replident == REPLICA_IDENTITY_INDEX &amp;&amp; OidIsValid(candidateIndex))
		relation-&gt;rd_replidindex = candidateIndex;
	else
		relation-&gt;rd_replidindex = InvalidOid;
	relation-&gt;rd_indexvalid = true;
	MemoryContextSwitchTo(oldcxt);

	<comment type="block">/* Don't leak the old list, if there is one */</comment>
	list_free(oldlist);

	return result;
}

<comment type="block">/*
 * RelationGetStatExtList
 *		get a list of OIDs of statistics objects on this relation
 *
 * The statistics list is created only if someone requests it, in a way
 * similar to RelationGetIndexList().  We scan pg_statistic_ext to find
 * relevant statistics, and add the list to the relcache entry so that we
 * won't have to compute it again.  Note that shared cache inval of a
 * relcache entry will delete the old list and set rd_statvalid to 0,
 * so that we must recompute the statistics list on next request.  This
 * handles creation or deletion of a statistics object.
 *
 * The returned list is guaranteed to be sorted in order by OID, although
 * this is not currently needed.
 *
 * Since shared cache inval causes the relcache's copy of the list to go away,
 * we return a copy of the list palloc'd in the caller's context.  The caller
 * may list_free() the returned list after scanning it. This is necessary
 * since the caller will typically be doing syscache lookups on the relevant
 * statistics, and syscache lookup could cause SI messages to be processed!
 */</comment>
List *
RelationGetStatExtList(Relation relation)
{
	Relation	indrel;
	SysScanDesc indscan;
	ScanKeyData skey;
	HeapTuple	htup;
	List	   *result;
	List	   *oldlist;
	MemoryContext oldcxt;

	<comment type="block">/* Quick exit if we already computed the list. */</comment>
	if (relation-&gt;rd_statvalid != <literal type="number">0</literal>)
		return list_copy(relation-&gt;rd_statlist);

	<comment type="block">/*
	 * We build the list we intend to return (in the caller's context) while
	 * doing the scan.  After successfully completing the scan, we copy that
	 * list into the relcache entry.  This avoids cache-context memory leakage
	 * if we get some sort of error partway through.
	 */</comment>
	result = NIL;

	<comment type="block">/*
	 * Prepare to scan pg_statistic_ext for entries having stxrelid = this
	 * rel.
	 */</comment>
	ScanKeyInit(&amp;skey,
				Anum_pg_statistic_ext_stxrelid,
				BTEqualStrategyNumber, F_OIDEQ,
				ObjectIdGetDatum(RelationGetRelid(relation)));

	indrel = table_open(StatisticExtRelationId, AccessShareLock);
	indscan = systable_beginscan(indrel, StatisticExtRelidIndexId, true,
								 NULL, <literal type="number">1</literal>, &amp;skey);

	while (HeapTupleIsValid(htup = systable_getnext(indscan)))
	{
		Oid			oid = ((Form_pg_statistic_ext) GETSTRUCT(htup))-&gt;oid;

		result = insert_ordered_oid(result, oid);
	}

	systable_endscan(indscan);

	table_close(indrel, AccessShareLock);

	<comment type="block">/* Now save a copy of the completed list in the relcache entry. */</comment>
	oldcxt = MemoryContextSwitchTo(CacheMemoryContext);
	oldlist = relation-&gt;rd_statlist;
	relation-&gt;rd_statlist = list_copy(result);

	relation-&gt;rd_statvalid = true;
	MemoryContextSwitchTo(oldcxt);

	<comment type="block">/* Don't leak the old list, if there is one */</comment>
	list_free(oldlist);

	return result;
}

<comment type="block">/*
 * insert_ordered_oid
 *		Insert a new Oid into a sorted list of Oids, preserving ordering
 *
 * Building the ordered list this way is O(N^2), but with a pretty small
 * constant, so for the number of entries we expect it will probably be
 * faster than trying to apply qsort().  Most tables don't have very many
 * indexes...
 */</comment>
static List *
insert_ordered_oid(List *list, Oid datum)
{
	ListCell   *prev;

	<comment type="block">/* Does the datum belong at the front? */</comment>
	if (list == NIL || datum &lt; linitial_oid(list))
		return lcons_oid(datum, list);
	<comment type="block">/* No, so find the entry it belongs after */</comment>
	prev = list_head(list);
	for (;;)
	{
		ListCell   *curr = lnext(prev);

		if (curr == NULL || datum &lt; lfirst_oid(curr))
			break;				<comment type="block">/* it belongs after 'prev', before 'curr' */</comment>

		prev = curr;
	}
	<comment type="block">/* Insert datum into list after 'prev' */</comment>
	lappend_cell_oid(list, prev, datum);
	return list;
}

<comment type="block">/*
 * RelationGetPrimaryKeyIndex -- get OID of the relation's primary key index
 *
 * Returns InvalidOid if there is no such index.
 */</comment>
Oid
RelationGetPrimaryKeyIndex(Relation relation)
{
	List	   *ilist;

	if (!relation-&gt;rd_indexvalid)
	{
		<comment type="block">/* RelationGetIndexList does the heavy lifting. */</comment>
		ilist = RelationGetIndexList(relation);
		list_free(ilist);
		Assert(relation-&gt;rd_indexvalid);
	}

	return relation-&gt;rd_pkindex;
}

<comment type="block">/*
 * RelationGetReplicaIndex -- get OID of the relation's replica identity index
 *
 * Returns InvalidOid if there is no such index.
 */</comment>
Oid
RelationGetReplicaIndex(Relation relation)
{
	List	   *ilist;

	if (!relation-&gt;rd_indexvalid)
	{
		<comment type="block">/* RelationGetIndexList does the heavy lifting. */</comment>
		ilist = RelationGetIndexList(relation);
		list_free(ilist);
		Assert(relation-&gt;rd_indexvalid);
	}

	return relation-&gt;rd_replidindex;
}

<comment type="block">/*
 * RelationGetIndexExpressions -- get the index expressions for an index
 *
 * We cache the result of transforming pg_index.indexprs into a node tree.
 * If the rel is not an index or has no expressional columns, we return NIL.
 * Otherwise, the returned tree is copied into the caller's memory context.
 * (We don't want to return a pointer to the relcache copy, since it could
 * disappear due to relcache invalidation.)
 */</comment>
List *
RelationGetIndexExpressions(Relation relation)
{
	List	   *result;
	Datum		exprsDatum;
	bool		isnull;
	char	   *exprsString;
	MemoryContext oldcxt;

	<comment type="block">/* Quick exit if we already computed the result. */</comment>
	if (relation-&gt;rd_indexprs)
		return copyObject(relation-&gt;rd_indexprs);

	<comment type="block">/* Quick exit if there is nothing to do. */</comment>
	if (relation-&gt;rd_indextuple == NULL ||
		heap_attisnull(relation-&gt;rd_indextuple, Anum_pg_index_indexprs, NULL))
		return NIL;

	<comment type="block">/*
	 * We build the tree we intend to return in the caller's context. After
	 * successfully completing the work, we copy it into the relcache entry.
	 * This avoids problems if we get some sort of error partway through.
	 */</comment>
	exprsDatum = heap_getattr(relation-&gt;rd_indextuple,
							  Anum_pg_index_indexprs,
							  GetPgIndexDescriptor(),
							  &amp;isnull);
	Assert(!isnull);
	exprsString = TextDatumGetCString(exprsDatum);
	result = (List *) stringToNode(exprsString);
	pfree(exprsString);

	<comment type="block">/*
	 * Run the expressions through eval_const_expressions. This is not just an
	 * optimization, but is necessary, because the planner will be comparing
	 * them to similarly-processed qual clauses, and may fail to detect valid
	 * matches without this.  We must not use canonicalize_qual, however,
	 * since these aren't qual expressions.
	 */</comment>
	result = (List *) eval_const_expressions(NULL, (Node *) result);

	<comment type="block">/* May as well fix opfuncids too */</comment>
	fix_opfuncids((Node *) result);

	<comment type="block">/* Now save a copy of the completed tree in the relcache entry. */</comment>
	oldcxt = MemoryContextSwitchTo(relation-&gt;rd_indexcxt);
	relation-&gt;rd_indexprs = copyObject(result);
	MemoryContextSwitchTo(oldcxt);

	return result;
}

<comment type="block">/*
 * RelationGetIndexPredicate -- get the index predicate for an index
 *
 * We cache the result of transforming pg_index.indpred into an implicit-AND
 * node tree (suitable for use in planning).
 * If the rel is not an index or has no predicate, we return NIL.
 * Otherwise, the returned tree is copied into the caller's memory context.
 * (We don't want to return a pointer to the relcache copy, since it could
 * disappear due to relcache invalidation.)
 */</comment>
List *
RelationGetIndexPredicate(Relation relation)
{
	List	   *result;
	Datum		predDatum;
	bool		isnull;
	char	   *predString;
	MemoryContext oldcxt;

	<comment type="block">/* Quick exit if we already computed the result. */</comment>
	if (relation-&gt;rd_indpred)
		return copyObject(relation-&gt;rd_indpred);

	<comment type="block">/* Quick exit if there is nothing to do. */</comment>
	if (relation-&gt;rd_indextuple == NULL ||
		heap_attisnull(relation-&gt;rd_indextuple, Anum_pg_index_indpred, NULL))
		return NIL;

	<comment type="block">/*
	 * We build the tree we intend to return in the caller's context. After
	 * successfully completing the work, we copy it into the relcache entry.
	 * This avoids problems if we get some sort of error partway through.
	 */</comment>
	predDatum = heap_getattr(relation-&gt;rd_indextuple,
							 Anum_pg_index_indpred,
							 GetPgIndexDescriptor(),
							 &amp;isnull);
	Assert(!isnull);
	predString = TextDatumGetCString(predDatum);
	result = (List *) stringToNode(predString);
	pfree(predString);

	<comment type="block">/*
	 * Run the expression through const-simplification and canonicalization.
	 * This is not just an optimization, but is necessary, because the planner
	 * will be comparing it to similarly-processed qual clauses, and may fail
	 * to detect valid matches without this.  This must match the processing
	 * done to qual clauses in preprocess_expression()!  (We can skip the
	 * stuff involving subqueries, however, since we don't allow any in index
	 * predicates.)
	 */</comment>
	result = (List *) eval_const_expressions(NULL, (Node *) result);

	result = (List *) canonicalize_qual((Expr *) result, false);

	<comment type="block">/* Also convert to implicit-AND format */</comment>
	result = make_ands_implicit((Expr *) result);

	<comment type="block">/* May as well fix opfuncids too */</comment>
	fix_opfuncids((Node *) result);

	<comment type="block">/* Now save a copy of the completed tree in the relcache entry. */</comment>
	oldcxt = MemoryContextSwitchTo(relation-&gt;rd_indexcxt);
	relation-&gt;rd_indpred = copyObject(result);
	MemoryContextSwitchTo(oldcxt);

	return result;
}

<comment type="block">/*
 * RelationGetIndexAttrBitmap -- get a bitmap of index attribute numbers
 *
 * The result has a bit set for each attribute used anywhere in the index
 * definitions of all the indexes on this relation.  (This includes not only
 * simple index keys, but attributes used in expressions and partial-index
 * predicates.)
 *
 * Depending on attrKind, a bitmap covering the attnums for all index columns,
 * for all potential foreign key columns, or for all columns in the configured
 * replica identity index is returned.
 *
 * Attribute numbers are offset by FirstLowInvalidHeapAttributeNumber so that
 * we can include system attributes (e.g., OID) in the bitmap representation.
 *
 * Caller had better hold at least RowExclusiveLock on the target relation
 * to ensure it is safe (deadlock-free) for us to take locks on the relation's
 * indexes.  Note that since the introduction of CREATE INDEX CONCURRENTLY,
 * that lock level doesn't guarantee a stable set of indexes, so we have to
 * be prepared to retry here in case of a change in the set of indexes.
 *
 * The returned result is palloc'd in the caller's memory context and should
 * be bms_free'd when not needed anymore.
 */</comment>
Bitmapset *
RelationGetIndexAttrBitmap(Relation relation, IndexAttrBitmapKind attrKind)
{
	Bitmapset  *indexattrs;		<comment type="block">/* indexed columns */</comment>
	Bitmapset  *uindexattrs;	<comment type="block">/* columns in unique indexes */</comment>
	Bitmapset  *pkindexattrs;	<comment type="block">/* columns in the primary index */</comment>
	Bitmapset  *idindexattrs;	<comment type="block">/* columns in the replica identity */</comment>
	List	   *indexoidlist;
	List	   *newindexoidlist;
	Oid			relpkindex;
	Oid			relreplindex;
	ListCell   *l;
	MemoryContext oldcxt;

	<comment type="block">/* Quick exit if we already computed the result. */</comment>
	if (relation-&gt;rd_indexattr != NULL)
	{
		switch (attrKind)
		{
			case INDEX_ATTR_BITMAP_ALL:
				return bms_copy(relation-&gt;rd_indexattr);
			case INDEX_ATTR_BITMAP_KEY:
				return bms_copy(relation-&gt;rd_keyattr);
			case INDEX_ATTR_BITMAP_PRIMARY_KEY:
				return bms_copy(relation-&gt;rd_pkattr);
			case INDEX_ATTR_BITMAP_IDENTITY_KEY:
				return bms_copy(relation-&gt;rd_idattr);
			default:
				elog(ERROR, <literal type="string">"unknown attrKind %u"</literal>, attrKind);
		}
	}

	<comment type="block">/* Fast path if definitely no indexes */</comment>
	if (!RelationGetForm(relation)-&gt;relhasindex)
		return NULL;

	<comment type="block">/*
	 * Get cached list of index OIDs. If we have to start over, we do so here.
	 */</comment>
restart:
	indexoidlist = RelationGetIndexList(relation);

	<comment type="block">/* Fall out if no indexes (but relhasindex was set) */</comment>
	if (indexoidlist == NIL)
		return NULL;

	<comment type="block">/*
	 * Copy the rd_pkindex and rd_replidindex values computed by
	 * RelationGetIndexList before proceeding.  This is needed because a
	 * relcache flush could occur inside index_open below, resetting the
	 * fields managed by RelationGetIndexList.  We need to do the work with
	 * stable values of these fields.
	 */</comment>
	relpkindex = relation-&gt;rd_pkindex;
	relreplindex = relation-&gt;rd_replidindex;

	<comment type="block">/*
	 * For each index, add referenced attributes to indexattrs.
	 *
	 * Note: we consider all indexes returned by RelationGetIndexList, even if
	 * they are not indisready or indisvalid.  This is important because an
	 * index for which CREATE INDEX CONCURRENTLY has just started must be
	 * included in HOT-safety decisions (see README.HOT).  If a DROP INDEX
	 * CONCURRENTLY is far enough along that we should ignore the index, it
	 * won't be returned at all by RelationGetIndexList.
	 */</comment>
	indexattrs = NULL;
	uindexattrs = NULL;
	pkindexattrs = NULL;
	idindexattrs = NULL;
	foreach(l, indexoidlist)
	{
		Oid			indexOid = lfirst_oid(l);
		Relation	indexDesc;
		Datum		datum;
		bool		isnull;
		Node	   *indexExpressions;
		Node	   *indexPredicate;
		int			i;
		bool		isKey;		<comment type="block">/* candidate key */</comment>
		bool		isPK;		<comment type="block">/* primary key */</comment>
		bool		isIDKey;	<comment type="block">/* replica identity index */</comment>

		indexDesc = index_open(indexOid, AccessShareLock);

		<comment type="block">/*
		 * Extract index expressions and index predicate.  Note: Don't use
		 * RelationGetIndexExpressions()/RelationGetIndexPredicate(), because
		 * those might run constant expressions evaluation, which needs a
		 * snapshot, which we might not have here.  (Also, it's probably more
		 * sound to collect the bitmaps before any transformations that might
		 * eliminate columns, but the practical impact of this is limited.)
		 */</comment>

		datum = heap_getattr(indexDesc-&gt;rd_indextuple, Anum_pg_index_indexprs,
							 GetPgIndexDescriptor(), &amp;isnull);
		if (!isnull)
			indexExpressions = stringToNode(TextDatumGetCString(datum));
		else
			indexExpressions = NULL;

		datum = heap_getattr(indexDesc-&gt;rd_indextuple, Anum_pg_index_indpred,
							 GetPgIndexDescriptor(), &amp;isnull);
		if (!isnull)
			indexPredicate = stringToNode(TextDatumGetCString(datum));
		else
			indexPredicate = NULL;

		<comment type="block">/* Can this index be referenced by a foreign key? */</comment>
		isKey = indexDesc-&gt;rd_index-&gt;indisunique &amp;&amp;
			indexExpressions == NULL &amp;&amp;
			indexPredicate == NULL;

		<comment type="block">/* Is this a primary key? */</comment>
		isPK = (indexOid == relpkindex);

		<comment type="block">/* Is this index the configured (or default) replica identity? */</comment>
		isIDKey = (indexOid == relreplindex);

		<comment type="block">/* Collect simple attribute references */</comment>
		for (i = <literal type="number">0</literal>; i &lt; indexDesc-&gt;rd_index-&gt;indnatts; i++)
		{
			int			attrnum = indexDesc-&gt;rd_index-&gt;indkey.values[i];

			<comment type="block">/*
			 * Since we have covering indexes with non-key columns, we must
			 * handle them accurately here. non-key columns must be added into
			 * indexattrs, since they are in index, and HOT-update shouldn't
			 * miss them. Obviously, non-key columns couldn't be referenced by
			 * foreign key or identity key. Hence we do not include them into
			 * uindexattrs, pkindexattrs and idindexattrs bitmaps.
			 */</comment>
			if (attrnum != <literal type="number">0</literal>)
			{
				indexattrs = bms_add_member(indexattrs,
											attrnum - FirstLowInvalidHeapAttributeNumber);

				if (isKey &amp;&amp; i &lt; indexDesc-&gt;rd_index-&gt;indnkeyatts)
					uindexattrs = bms_add_member(uindexattrs,
												 attrnum - FirstLowInvalidHeapAttributeNumber);

				if (isPK &amp;&amp; i &lt; indexDesc-&gt;rd_index-&gt;indnkeyatts)
					pkindexattrs = bms_add_member(pkindexattrs,
												  attrnum - FirstLowInvalidHeapAttributeNumber);

				if (isIDKey &amp;&amp; i &lt; indexDesc-&gt;rd_index-&gt;indnkeyatts)
					idindexattrs = bms_add_member(idindexattrs,
												  attrnum - FirstLowInvalidHeapAttributeNumber);
			}
		}

		<comment type="block">/* Collect all attributes used in expressions, too */</comment>
		pull_varattnos(indexExpressions, <literal type="number">1</literal>, &amp;indexattrs);

		<comment type="block">/* Collect all attributes in the index predicate, too */</comment>
		pull_varattnos(indexPredicate, <literal type="number">1</literal>, &amp;indexattrs);

		index_close(indexDesc, AccessShareLock);
	}

	<comment type="block">/*
	 * During one of the index_opens in the above loop, we might have received
	 * a relcache flush event on this relcache entry, which might have been
	 * signaling a change in the rel's index list.  If so, we'd better start
	 * over to ensure we deliver up-to-date attribute bitmaps.
	 */</comment>
	newindexoidlist = RelationGetIndexList(relation);
	if (equal(indexoidlist, newindexoidlist) &amp;&amp;
		relpkindex == relation-&gt;rd_pkindex &amp;&amp;
		relreplindex == relation-&gt;rd_replidindex)
	{
		<comment type="block">/* Still the same index set, so proceed */</comment>
		list_free(newindexoidlist);
		list_free(indexoidlist);
	}
	else
	{
		<comment type="block">/* Gotta do it over ... might as well not leak memory */</comment>
		list_free(newindexoidlist);
		list_free(indexoidlist);
		bms_free(uindexattrs);
		bms_free(pkindexattrs);
		bms_free(idindexattrs);
		bms_free(indexattrs);

		goto restart;
	}

	<comment type="block">/* Don't leak the old values of these bitmaps, if any */</comment>
	bms_free(relation-&gt;rd_indexattr);
	relation-&gt;rd_indexattr = NULL;
	bms_free(relation-&gt;rd_keyattr);
	relation-&gt;rd_keyattr = NULL;
	bms_free(relation-&gt;rd_pkattr);
	relation-&gt;rd_pkattr = NULL;
	bms_free(relation-&gt;rd_idattr);
	relation-&gt;rd_idattr = NULL;

	<comment type="block">/*
	 * Now save copies of the bitmaps in the relcache entry.  We intentionally
	 * set rd_indexattr last, because that's the one that signals validity of
	 * the values; if we run out of memory before making that copy, we won't
	 * leave the relcache entry looking like the other ones are valid but
	 * empty.
	 */</comment>
	oldcxt = MemoryContextSwitchTo(CacheMemoryContext);
	relation-&gt;rd_keyattr = bms_copy(uindexattrs);
	relation-&gt;rd_pkattr = bms_copy(pkindexattrs);
	relation-&gt;rd_idattr = bms_copy(idindexattrs);
	relation-&gt;rd_indexattr = bms_copy(indexattrs);
	MemoryContextSwitchTo(oldcxt);

	<comment type="block">/* We return our original working copy for caller to play with */</comment>
	switch (attrKind)
	{
		case INDEX_ATTR_BITMAP_ALL:
			return indexattrs;
		case INDEX_ATTR_BITMAP_KEY:
			return uindexattrs;
		case INDEX_ATTR_BITMAP_PRIMARY_KEY:
			return pkindexattrs;
		case INDEX_ATTR_BITMAP_IDENTITY_KEY:
			return idindexattrs;
		default:
			elog(ERROR, <literal type="string">"unknown attrKind %u"</literal>, attrKind);
			return NULL;
	}
}

<comment type="block">/*
 * RelationGetExclusionInfo -- get info about index's exclusion constraint
 *
 * This should be called only for an index that is known to have an
 * associated exclusion constraint.  It returns arrays (palloc'd in caller's
 * context) of the exclusion operator OIDs, their underlying functions'
 * OIDs, and their strategy numbers in the index's opclasses.  We cache
 * all this information since it requires a fair amount of work to get.
 */</comment>
void
RelationGetExclusionInfo(Relation indexRelation,
						 Oid **operators,
						 Oid **procs,
						 uint16 **strategies)
{
	int			indnkeyatts;
	Oid		   *ops;
	Oid		   *funcs;
	uint16	   *strats;
	Relation	conrel;
	SysScanDesc conscan;
	ScanKeyData skey[<literal type="number">1</literal>];
	HeapTuple	htup;
	bool		found;
	MemoryContext oldcxt;
	int			i;

	indnkeyatts = IndexRelationGetNumberOfKeyAttributes(indexRelation);

	<comment type="block">/* Allocate result space in caller context */</comment>
	*operators = ops = (Oid *) palloc(sizeof(Oid) * indnkeyatts);
	*procs = funcs = (Oid *) palloc(sizeof(Oid) * indnkeyatts);
	*strategies = strats = (uint16 *) palloc(sizeof(uint16) * indnkeyatts);

	<comment type="block">/* Quick exit if we have the data cached already */</comment>
	if (indexRelation-&gt;rd_exclstrats != NULL)
	{
		memcpy(ops, indexRelation-&gt;rd_exclops, sizeof(Oid) * indnkeyatts);
		memcpy(funcs, indexRelation-&gt;rd_exclprocs, sizeof(Oid) * indnkeyatts);
		memcpy(strats, indexRelation-&gt;rd_exclstrats, sizeof(uint16) * indnkeyatts);
		return;
	}

	<comment type="block">/*
	 * Search pg_constraint for the constraint associated with the index. To
	 * make this not too painfully slow, we use the index on conrelid; that
	 * will hold the parent relation's OID not the index's own OID.
	 *
	 * Note: if we wanted to rely on the constraint name matching the index's
	 * name, we could just do a direct lookup using pg_constraint's unique
	 * index.  For the moment it doesn't seem worth requiring that.
	 */</comment>
	ScanKeyInit(&amp;skey[<literal type="number">0</literal>],
				Anum_pg_constraint_conrelid,
				BTEqualStrategyNumber, F_OIDEQ,
				ObjectIdGetDatum(indexRelation-&gt;rd_index-&gt;indrelid));

	conrel = table_open(ConstraintRelationId, AccessShareLock);
	conscan = systable_beginscan(conrel, ConstraintRelidTypidNameIndexId, true,
								 NULL, <literal type="number">1</literal>, skey);
	found = false;

	while (HeapTupleIsValid(htup = systable_getnext(conscan)))
	{
		Form_pg_constraint conform = (Form_pg_constraint) GETSTRUCT(htup);
		Datum		val;
		bool		isnull;
		ArrayType  *arr;
		int			nelem;

		<comment type="block">/* We want the exclusion constraint owning the index */</comment>
		if (conform-&gt;contype != CONSTRAINT_EXCLUSION ||
			conform-&gt;conindid != RelationGetRelid(indexRelation))
			continue;

		<comment type="block">/* There should be only one */</comment>
		if (found)
			elog(ERROR, <literal type="string">"unexpected exclusion constraint record found for rel %s"</literal>,
				 RelationGetRelationName(indexRelation));
		found = true;

		<comment type="block">/* Extract the operator OIDS from conexclop */</comment>
		val = fastgetattr(htup,
						  Anum_pg_constraint_conexclop,
						  conrel-&gt;rd_att, &amp;isnull);
		if (isnull)
			elog(ERROR, <literal type="string">"null conexclop for rel %s"</literal>,
				 RelationGetRelationName(indexRelation));

		arr = DatumGetArrayTypeP(val);	<comment type="block">/* ensure not toasted */</comment>
		nelem = ARR_DIMS(arr)[<literal type="number">0</literal>];
		if (ARR_NDIM(arr) != <literal type="number">1</literal> ||
			nelem != indnkeyatts ||
			ARR_HASNULL(arr) ||
			ARR_ELEMTYPE(arr) != OIDOID)
			elog(ERROR, <literal type="string">"conexclop is not a 1-D Oid array"</literal>);

		memcpy(ops, ARR_DATA_PTR(arr), sizeof(Oid) * indnkeyatts);
	}

	systable_endscan(conscan);
	table_close(conrel, AccessShareLock);

	if (!found)
		elog(ERROR, <literal type="string">"exclusion constraint record missing for rel %s"</literal>,
			 RelationGetRelationName(indexRelation));

	<comment type="block">/* We need the func OIDs and strategy numbers too */</comment>
	for (i = <literal type="number">0</literal>; i &lt; indnkeyatts; i++)
	{
		funcs[i] = get_opcode(ops[i]);
		strats[i] = get_op_opfamily_strategy(ops[i],
											 indexRelation-&gt;rd_opfamily[i]);
		<comment type="block">/* shouldn't fail, since it was checked at index creation */</comment>
		if (strats[i] == InvalidStrategy)
			elog(ERROR, <literal type="string">"could not find strategy for operator %u in family %u"</literal>,
				 ops[i], indexRelation-&gt;rd_opfamily[i]);
	}

	<comment type="block">/* Save a copy of the results in the relcache entry. */</comment>
	oldcxt = MemoryContextSwitchTo(indexRelation-&gt;rd_indexcxt);
	indexRelation-&gt;rd_exclops = (Oid *) palloc(sizeof(Oid) * indnkeyatts);
	indexRelation-&gt;rd_exclprocs = (Oid *) palloc(sizeof(Oid) * indnkeyatts);
	indexRelation-&gt;rd_exclstrats = (uint16 *) palloc(sizeof(uint16) * indnkeyatts);
	memcpy(indexRelation-&gt;rd_exclops, ops, sizeof(Oid) * indnkeyatts);
	memcpy(indexRelation-&gt;rd_exclprocs, funcs, sizeof(Oid) * indnkeyatts);
	memcpy(indexRelation-&gt;rd_exclstrats, strats, sizeof(uint16) * indnkeyatts);
	MemoryContextSwitchTo(oldcxt);
}

<comment type="block">/*
 * Get publication actions for the given relation.
 */</comment>
struct PublicationActions *
GetRelationPublicationActions(Relation relation)
{
	List	   *puboids;
	ListCell   *lc;
	MemoryContext oldcxt;
	PublicationActions *pubactions = palloc0(sizeof(PublicationActions));

	<comment type="block">/*
	 * If not publishable, it publishes no actions.  (pgoutput_change() will
	 * ignore it.)
	 */</comment>
	if (!is_publishable_relation(relation))
		return pubactions;

	if (relation-&gt;rd_pubactions)
		return memcpy(pubactions, relation-&gt;rd_pubactions,
					  sizeof(PublicationActions));

	<comment type="block">/* Fetch the publication membership info. */</comment>
	puboids = GetRelationPublications(RelationGetRelid(relation));
	puboids = list_concat_unique_oid(puboids, GetAllTablesPublications());

	foreach(lc, puboids)
	{
		Oid			pubid = lfirst_oid(lc);
		HeapTuple	tup;
		Form_pg_publication pubform;

		tup = SearchSysCache1(PUBLICATIONOID, ObjectIdGetDatum(pubid));

		if (!HeapTupleIsValid(tup))
			elog(ERROR, <literal type="string">"cache lookup failed for publication %u"</literal>, pubid);

		pubform = (Form_pg_publication) GETSTRUCT(tup);

		pubactions-&gt;pubinsert |= pubform-&gt;pubinsert;
		pubactions-&gt;pubupdate |= pubform-&gt;pubupdate;
		pubactions-&gt;pubdelete |= pubform-&gt;pubdelete;
		pubactions-&gt;pubtruncate |= pubform-&gt;pubtruncate;

		ReleaseSysCache(tup);

		<comment type="block">/*
		 * If we know everything is replicated, there is no point to check for
		 * other publications.
		 */</comment>
		if (pubactions-&gt;pubinsert &amp;&amp; pubactions-&gt;pubupdate &amp;&amp;
			pubactions-&gt;pubdelete &amp;&amp; pubactions-&gt;pubtruncate)
			break;
	}

	if (relation-&gt;rd_pubactions)
	{
		pfree(relation-&gt;rd_pubactions);
		relation-&gt;rd_pubactions = NULL;
	}

	<comment type="block">/* Now save copy of the actions in the relcache entry. */</comment>
	oldcxt = MemoryContextSwitchTo(CacheMemoryContext);
	relation-&gt;rd_pubactions = palloc(sizeof(PublicationActions));
	memcpy(relation-&gt;rd_pubactions, pubactions, sizeof(PublicationActions));
	MemoryContextSwitchTo(oldcxt);

	return pubactions;
}

<comment type="block">/*
 * Routines to support ereport() reports of relation-related errors
 *
 * These could have been put into elog.c, but it seems like a module layering
 * violation to have elog.c calling relcache or syscache stuff --- and we
 * definitely don't want elog.h including rel.h.  So we put them here.
 */</comment>

<comment type="block">/*
 * errtable --- stores schema_name and table_name of a table
 * within the current errordata.
 */</comment>
int
errtable(Relation rel)
{
	err_generic_string(PG_DIAG_SCHEMA_NAME,
					   get_namespace_name(RelationGetNamespace(rel)));
	err_generic_string(PG_DIAG_TABLE_NAME, RelationGetRelationName(rel));

	return <literal type="number">0</literal>;					<comment type="block">/* return value does not matter */</comment>
}

<comment type="block">/*
 * errtablecol --- stores schema_name, table_name and column_name
 * of a table column within the current errordata.
 *
 * The column is specified by attribute number --- for most callers, this is
 * easier and less error-prone than getting the column name for themselves.
 */</comment>
int
errtablecol(Relation rel, int attnum)
{
	TupleDesc	reldesc = RelationGetDescr(rel);
	const char *colname;

	<comment type="block">/* Use reldesc if it's a user attribute, else consult the catalogs */</comment>
	if (attnum &gt; <literal type="number">0</literal> &amp;&amp; attnum &lt;= reldesc-&gt;natts)
		colname = NameStr(TupleDescAttr(reldesc, attnum - <literal type="number">1</literal>)-&gt;attname);
	else
		colname = get_attname(RelationGetRelid(rel), attnum, false);

	return errtablecolname(rel, colname);
}

<comment type="block">/*
 * errtablecolname --- stores schema_name, table_name and column_name
 * of a table column within the current errordata, where the column name is
 * given directly rather than extracted from the relation's catalog data.
 *
 * Don't use this directly unless errtablecol() is inconvenient for some
 * reason.  This might possibly be needed during intermediate states in ALTER
 * TABLE, for instance.
 */</comment>
int
errtablecolname(Relation rel, const char *colname)
{
	errtable(rel);
	err_generic_string(PG_DIAG_COLUMN_NAME, colname);

	return <literal type="number">0</literal>;					<comment type="block">/* return value does not matter */</comment>
}

<comment type="block">/*
 * errtableconstraint --- stores schema_name, table_name and constraint_name
 * of a table-related constraint within the current errordata.
 */</comment>
int
errtableconstraint(Relation rel, const char *conname)
{
	errtable(rel);
	err_generic_string(PG_DIAG_CONSTRAINT_NAME, conname);

	return <literal type="number">0</literal>;					<comment type="block">/* return value does not matter */</comment>
}


<comment type="block">/*
 *	load_relcache_init_file, write_relcache_init_file
 *
 *		In late 1992, we started regularly having databases with more than
 *		a thousand classes in them.  With this number of classes, it became
 *		critical to do indexed lookups on the system catalogs.
 *
 *		Bootstrapping these lookups is very hard.  We want to be able to
 *		use an index on pg_attribute, for example, but in order to do so,
 *		we must have read pg_attribute for the attributes in the index,
 *		which implies that we need to use the index.
 *
 *		In order to get around the problem, we do the following:
 *
 *		   +  When the database system is initialized (at initdb time), we
 *			  don't use indexes.  We do sequential scans.
 *
 *		   +  When the backend is started up in normal mode, we load an image
 *			  of the appropriate relation descriptors, in internal format,
 *			  from an initialization file in the data/base/... directory.
 *
 *		   +  If the initialization file isn't there, then we create the
 *			  relation descriptors using sequential scans and write 'em to
 *			  the initialization file for use by subsequent backends.
 *
 *		As of Postgres 9.0, there is one local initialization file in each
 *		database, plus one shared initialization file for shared catalogs.
 *
 *		We could dispense with the initialization files and just build the
 *		critical reldescs the hard way on every backend startup, but that
 *		slows down backend startup noticeably.
 *
 *		We can in fact go further, and save more relcache entries than
 *		just the ones that are absolutely critical; this allows us to speed
 *		up backend startup by not having to build such entries the hard way.
 *		Presently, all the catalog and index entries that are referred to
 *		by catcaches are stored in the initialization files.
 *
 *		The same mechanism that detects when catcache and relcache entries
 *		need to be invalidated (due to catalog updates) also arranges to
 *		unlink the initialization files when the contents may be out of date.
 *		The files will then be rebuilt during the next backend startup.
 */</comment>

<comment type="block">/*
 * load_relcache_init_file -- attempt to load cache from the shared
 * or local cache init file
 *
 * If successful, return true and set criticalRelcachesBuilt or
 * criticalSharedRelcachesBuilt to true.
 * If not successful, return false.
 *
 * NOTE: we assume we are already switched into CacheMemoryContext.
 */</comment>
static bool
load_relcache_init_file(bool shared)
{
	FILE	   *fp;
	char		initfilename[MAXPGPATH];
	Relation   *rels;
	int			relno</argument>,
				<argument>num_rels</argument>,
				<argument>max_rels</argument>,
				<argument>nailed_rels</argument>,
				<argument>nailed_indexes</argument>,
				<argument>magic;
	int			i;

	if (shared)
		snprintf(initfilename, sizeof(initfilename), <literal type="string">"global/%s"</literal>,
				 RELCACHE_INIT_FILENAME);
	else
		snprintf(initfilename, sizeof(initfilename), <literal type="string">"%s/%s"</literal>,
				 DatabasePath, RELCACHE_INIT_FILENAME);

	fp = AllocateFile(initfilename, PG_BINARY_R);
	if (fp == NULL)
		return false;

	<comment type="block">/*
	 * Read the index relcache entries from the file.  Note we will not enter
	 * any of them into the cache if the read fails partway through; this
	 * helps to guard against broken init files.
	 */</comment>
	max_rels = <literal type="number">100</literal>;
	rels = (Relation *) palloc(max_rels * sizeof(Relation));
	num_rels = <literal type="number">0</literal>;
	nailed_rels = nailed_indexes = <literal type="number">0</literal>;

	<comment type="block">/* check for correct magic number (compatible version) */</comment>
	if (fread(&amp;magic, <literal type="number">1</literal>, sizeof(magic), fp) != sizeof(magic))
		goto read_failed;
	if (magic != RELCACHE_INIT_FILEMAGIC)
		goto read_failed;

	for (relno = <literal type="number">0</literal>;; relno++)
	{
		Size		len;
		size_t		nread;
		Relation	rel;
		Form_pg_class relform;
		bool		has_not_null;

		<comment type="block">/* first read the relation descriptor length */</comment>
		nread = fread(&amp;len, <literal type="number">1</literal>, sizeof(len), fp);
		if (nread != sizeof(len))
		{
			if (nread == <literal type="number">0</literal>)
				break;			<comment type="block">/* end of file */</comment>
			goto read_failed;
		}

		<comment type="block">/* safety check for incompatible relcache layout */</comment>
		if (len != sizeof(RelationData))
			goto read_failed;

		<comment type="block">/* allocate another relcache header */</comment>
		if (num_rels &gt;= max_rels)
		{
			max_rels *= <literal type="number">2</literal>;
			rels = (Relation *) repalloc(rels, max_rels * sizeof(Relation));
		}

		rel = rels[num_rels++] = (Relation) palloc(len);

		<comment type="block">/* then, read the Relation structure */</comment>
		if (fread(rel, <literal type="number">1</literal>, len, fp) != len)
			goto read_failed;

		<comment type="block">/* next read the relation tuple form */</comment>
		if (fread(&amp;len, <literal type="number">1</literal>, sizeof(len), fp) != sizeof(len))
			goto read_failed;

		relform = (Form_pg_class) palloc(len);
		if (fread(relform, <literal type="number">1</literal>, len, fp) != len)
			goto read_failed;

		rel-&gt;rd_rel = relform;

		<comment type="block">/* initialize attribute tuple forms */</comment>
		rel-&gt;rd_att = CreateTemplateTupleDesc(relform-&gt;relnatts);
		rel-&gt;rd_att-&gt;tdrefcount = <literal type="number">1</literal>;	<comment type="block">/* mark as refcounted */</comment>

		rel-&gt;rd_att-&gt;tdtypeid = relform-&gt;reltype;
		rel-&gt;rd_att-&gt;tdtypmod = -<literal type="number">1</literal>; <comment type="block">/* unnecessary, but... */</comment>

		<comment type="block">/* next read all the attribute tuple form data entries */</comment>
		has_not_null = false;
		for (i = <literal type="number">0</literal>; i &lt; relform-&gt;relnatts; i++)
		{
			Form_pg_attribute attr = TupleDescAttr(rel-&gt;rd_att, i);

			if (fread(&amp;len, <literal type="number">1</literal>, sizeof(len), fp) != sizeof(len))
				goto read_failed;
			if (len != ATTRIBUTE_FIXED_PART_SIZE)
				goto read_failed;
			if (fread(attr, <literal type="number">1</literal>, len, fp) != len)
				goto read_failed;

			has_not_null |= attr-&gt;attnotnull;
		}

		<comment type="block">/* next read the access method specific field */</comment>
		if (fread(&amp;len, <literal type="number">1</literal>, sizeof(len), fp) != sizeof(len))
			goto read_failed;
		if (len &gt; <literal type="number">0</literal>)
		{
			rel-&gt;rd_options = palloc(len);
			if (fread(rel-&gt;rd_options, <literal type="number">1</literal>, len, fp) != len)
				goto read_failed;
			if (len != VARSIZE(rel-&gt;rd_options))
				goto read_failed;	<comment type="block">/* sanity check */</comment>
		}
		else
		{
			rel-&gt;rd_options = NULL;
		}

		<comment type="block">/* mark not-null status */</comment>
		if (has_not_null)
		{
			TupleConstr *constr = (TupleConstr *) palloc0(sizeof(TupleConstr));

			constr-&gt;has_not_null = true;
			rel-&gt;rd_att-&gt;constr = constr;
		}

		<comment type="block">/*
		 * If it's an index, there's more to do.  Note we explicitly ignore
		 * partitioned indexes here.
		 */</comment>
		if (rel-&gt;rd_rel-&gt;relkind == RELKIND_INDEX)
		{
			MemoryContext indexcxt;
			Oid		   *opfamily;
			Oid		   *opcintype;
			RegProcedure *support;
			int			nsupport;
			int16	   *indoption;
			Oid		   *indcollation;

			<comment type="block">/* Count nailed indexes to ensure we have 'em all */</comment>
			if (rel-&gt;rd_isnailed)
				nailed_indexes++;

			<comment type="block">/* next, read the pg_index tuple */</comment>
			if (fread(&amp;len, <literal type="number">1</literal>, sizeof(len), fp) != sizeof(len))
				goto read_failed;

			rel-&gt;rd_indextuple = (HeapTuple) palloc(len);
			if (fread(rel-&gt;rd_indextuple, <literal type="number">1</literal>, len, fp) != len)
				goto read_failed;

			<comment type="block">/* Fix up internal pointers in the tuple -- see heap_copytuple */</comment>
			rel-&gt;rd_indextuple-&gt;t_data = (HeapTupleHeader) ((char *) rel-&gt;rd_indextuple + HEAPTUPLESIZE);
			rel-&gt;rd_index = (Form_pg_index) GETSTRUCT(rel-&gt;rd_indextuple);

			<comment type="block">/*
			 * prepare index info context --- parameters should match
			 * RelationInitIndexAccessInfo
			 */</comment>
			indexcxt = AllocSetContextCreate(CacheMemoryContext,
											 <literal type="string">"index info"</literal>,
											 ALLOCSET_SMALL_SIZES);
			rel-&gt;rd_indexcxt = indexcxt;
			MemoryContextCopyAndSetIdentifier(indexcxt,
											  RelationGetRelationName(rel));

			<comment type="block">/*
			 * Now we can fetch the index AM's API struct.  (We can't store
			 * that in the init file, since it contains function pointers that
			 * might vary across server executions.  Fortunately, it should be
			 * safe to call the amhandler even while bootstrapping indexes.)
			 */</comment>
			InitIndexAmRoutine(rel);

			<comment type="block">/* next, read the vector of opfamily OIDs */</comment>
			if (fread(&amp;len, <literal type="number">1</literal>, sizeof(len), fp) != sizeof(len))
				goto read_failed;

			opfamily = (Oid *) MemoryContextAlloc(indexcxt, len);
			if (fread(opfamily, <literal type="number">1</literal>, len, fp) != len)
				goto read_failed;

			rel-&gt;rd_opfamily = opfamily;

			<comment type="block">/* next, read the vector of opcintype OIDs */</comment>
			if (fread(&amp;len, <literal type="number">1</literal>, sizeof(len), fp) != sizeof(len))
				goto read_failed;

			opcintype = (Oid *) MemoryContextAlloc(indexcxt, len);
			if (fread(opcintype, <literal type="number">1</literal>, len, fp) != len)
				goto read_failed;

			rel-&gt;rd_opcintype = opcintype;

			<comment type="block">/* next, read the vector of support procedure OIDs */</comment>
			if (fread(&amp;len, <literal type="number">1</literal>, sizeof(len), fp) != sizeof(len))
				goto read_failed;
			support = (RegProcedure *) MemoryContextAlloc(indexcxt, len);
			if (fread(support, <literal type="number">1</literal>, len, fp) != len)
				goto read_failed;

			rel-&gt;rd_support = support;

			<comment type="block">/* next, read the vector of collation OIDs */</comment>
			if (fread(&amp;len, <literal type="number">1</literal>, sizeof(len), fp) != sizeof(len))
				goto read_failed;

			indcollation = (Oid *) MemoryContextAlloc(indexcxt, len);
			if (fread(indcollation, <literal type="number">1</literal>, len, fp) != len)
				goto read_failed;

			rel-&gt;rd_indcollation = indcollation;

			<comment type="block">/* finally, read the vector of indoption values */</comment>
			if (fread(&amp;len, <literal type="number">1</literal>, sizeof(len), fp) != sizeof(len))
				goto read_failed;

			indoption = (int16 *) MemoryContextAlloc(indexcxt, len);
			if (fread(indoption, <literal type="number">1</literal>, len, fp) != len)
				goto read_failed;

			rel-&gt;rd_indoption = indoption;

			<comment type="block">/* set up zeroed fmgr-info vector */</comment>
			nsupport = relform-&gt;relnatts * rel-&gt;rd_indam-&gt;amsupport;
			rel-&gt;rd_supportinfo = (FmgrInfo *)
				MemoryContextAllocZero(indexcxt, nsupport * sizeof(FmgrInfo));
		}
		else
		{
			<comment type="block">/* Count nailed rels to ensure we have 'em all */</comment>
			if (rel-&gt;rd_isnailed)
				nailed_rels++;

			<comment type="block">/* Load table AM data */</comment>
			if (rel-&gt;rd_rel-&gt;relkind == RELKIND_RELATION ||
				rel-&gt;rd_rel-&gt;relkind == RELKIND_SEQUENCE ||
				rel-&gt;rd_rel-&gt;relkind == RELKIND_TOASTVALUE ||
				rel-&gt;rd_rel-&gt;relkind == RELKIND_MATVIEW)
				RelationInitTableAccessMethod(rel);

			if (rel-&gt;rd_rel-&gt;relkind == RELKIND_AOSEGMENTS ||
				rel-&gt;rd_rel-&gt;relkind == RELKIND_AOVISIMAP ||
				rel-&gt;rd_rel-&gt;relkind == RELKIND_AOBLOCKDIR)
				RelationInitTableAccessMethod(rel);

			Assert(rel-&gt;rd_index == NULL);
			Assert(rel-&gt;rd_indextuple == NULL);
			Assert(rel-&gt;rd_indexcxt == NULL);
			Assert(rel-&gt;rd_indam == NULL);
			Assert(rel-&gt;rd_opfamily == NULL);
			Assert(rel-&gt;rd_opcintype == NULL);
			Assert(rel-&gt;rd_support == NULL);
			Assert(rel-&gt;rd_supportinfo == NULL);
			Assert(rel-&gt;rd_indoption == NULL);
			Assert(rel-&gt;rd_indcollation == NULL);
		}

		<comment type="block">/*
		 * Rules and triggers are not saved (mainly because the internal
		 * format is complex and subject to change).  They must be rebuilt if
		 * needed by RelationCacheInitializePhase3.  This is not expected to
		 * be a big performance hit since few system catalogs have such. Ditto
		 * for RLS policy data, partition info, index expressions, predicates,
		 * exclusion info, and FDW info.
		 */</comment>
		rel-&gt;rd_rules = NULL;
		rel-&gt;rd_rulescxt = NULL;
		rel-&gt;trigdesc = NULL;
		rel-&gt;rd_rsdesc = NULL;
		rel-&gt;rd_partkey = NULL;
		rel-&gt;rd_partkeycxt = NULL;
		rel-&gt;rd_partdesc = NULL;
		rel-&gt;rd_pdcxt = NULL;
		rel-&gt;rd_partcheck = NIL;
		rel-&gt;rd_partcheckvalid = false;
		rel-&gt;rd_partcheckcxt = NULL;
		rel-&gt;rd_indexprs = NIL;
		rel-&gt;rd_indpred = NIL;
		rel-&gt;rd_exclops = NULL;
		rel-&gt;rd_exclprocs = NULL;
		rel-&gt;rd_exclstrats = NULL;
		rel-&gt;rd_fdwroutine = NULL;

		<comment type="block">/*
		 * Reset transient-state fields in the relcache entry
		 */</comment>
		rel-&gt;rd_smgr = NULL;
		if (rel-&gt;rd_isnailed)
			rel-&gt;rd_refcnt = <literal type="number">1</literal>;
		else
			rel-&gt;rd_refcnt = <literal type="number">0</literal>;
		rel-&gt;rd_indexvalid = false;
		rel-&gt;rd_indexlist = NIL;
		rel-&gt;rd_pkindex = InvalidOid;
		rel-&gt;rd_replidindex = InvalidOid;
		rel-&gt;rd_indexattr = NULL;
		rel-&gt;rd_keyattr = NULL;
		rel-&gt;rd_pkattr = NULL;
		rel-&gt;rd_idattr = NULL;
		rel-&gt;rd_pubactions = NULL;
		rel-&gt;rd_statvalid = false;
		rel-&gt;rd_statlist = NIL;
		rel-&gt;rd_fkeyvalid = false;
		rel-&gt;rd_fkeylist = NIL;
		rel-&gt;rd_createSubid = InvalidSubTransactionId;
		rel-&gt;rd_newRelfilenodeSubid = InvalidSubTransactionId;
		rel-&gt;rd_amcache = NULL;
		MemSet(&amp;rel-&gt;pgstat_info, <literal type="number">0</literal>, sizeof(rel-&gt;pgstat_info));
        rel-&gt;rd_cdbpolicy = NULL;

		<comment type="block">/*
		 * Recompute lock and physical addressing info.  This is needed in
		 * case the pg_internal.init file was copied from some other database
		 * by CREATE DATABASE.
		 */</comment>
		RelationInitLockInfo(rel);
		RelationInitPhysicalAddr(rel);
	}

	<comment type="block">/*
	 * We reached the end of the init file without apparent problem.  Did we
	 * get the right number of nailed items?  This is a useful crosscheck in
	 * case the set of critical rels or indexes changes.  However, that should
	 * not happen in a normally-running system, so let's bleat if it does.
	 *
	 * For the shared init file, we're called before client authentication is
	 * done, which means that elog(WARNING) will go only to the postmaster
	 * log, where it's easily missed.  To ensure that developers notice bad
	 * values of NUM_CRITICAL_SHARED_RELS/NUM_CRITICAL_SHARED_INDEXES, we put
	 * an Assert(false) there.
	 */</comment>
	if (shared)
	{
		if (nailed_rels != NUM_CRITICAL_SHARED_RELS ||
			nailed_indexes != NUM_CRITICAL_SHARED_INDEXES)
		{
			elog(WARNING, <literal type="string">"found %d nailed shared rels and %d nailed shared indexes in init file, but expected %d and %d respectively"</literal>,
				 nailed_rels, nailed_indexes,
				 NUM_CRITICAL_SHARED_RELS, NUM_CRITICAL_SHARED_INDEXES);
			<comment type="block">/* Make sure we get developers' attention about this */</comment>
			Assert(false);
			<comment type="block">/* In production builds, recover by bootstrapping the relcache */</comment>
			goto read_failed;
		}
	}
	else
	{
		if (nailed_rels != NUM_CRITICAL_LOCAL_RELS ||
			nailed_indexes != NUM_CRITICAL_LOCAL_INDEXES)
		{
			elog(WARNING, <literal type="string">"found %d nailed rels and %d nailed indexes in init file, but expected %d and %d respectively"</literal>,
				 nailed_rels, nailed_indexes,
				 NUM_CRITICAL_LOCAL_RELS, NUM_CRITICAL_LOCAL_INDEXES);
			<comment type="block">/* We don't need an Assert() in this case */</comment>
			goto read_failed;
		}
	}

	<comment type="block">/*
	 * OK, all appears well.
	 *
	 * Now insert all the new relcache entries into the cache.
	 */</comment>
	for (relno = <literal type="number">0</literal>; relno &lt; num_rels; relno++)
	{
		RelationCacheInsert(rels[relno], false);
	}

	pfree(rels);
	FreeFile(fp);

	if (shared)
		criticalSharedRelcachesBuilt = true;
	else
		criticalRelcachesBuilt = true;
	return true;

	<comment type="block">/*
	 * init file is broken, so do it the hard way.  We don't bother trying to
	 * free the clutter we just allocated; it's not in the relcache so it
	 * won't hurt.
	 */</comment>
read_failed:
	pfree(rels);
	FreeFile(fp);

	return false;
}

<comment type="block">/*
 * Write out a new initialization file with the current contents
 * of the relcache (either shared rels or local rels, as indicated).
 */</comment>
static void
write_relcache_init_file(bool shared)
{
	FILE	   *fp;
	char		tempfilename[MAXPGPATH];
	char		finalfilename[MAXPGPATH];
	int			magic;
	HASH_SEQ_STATUS status;
	RelIdCacheEnt *idhentry;
	int			i;

	<comment type="block">/*
	 * If we have already received any relcache inval events, there's no
	 * chance of succeeding so we may as well skip the whole thing.
	 */</comment>
	if (relcacheInvalsReceived != <literal type="number">0L</literal>)
		return;

	<comment type="block">/*
	 * We must write a temporary file and rename it into place. Otherwise,
	 * another backend starting at about the same time might crash trying to
	 * read the partially-complete file.
	 */</comment>
	if (shared)
	{
		snprintf(tempfilename, sizeof(tempfilename), <literal type="string">"global/%s.%d"</literal>,
				 RELCACHE_INIT_FILENAME, MyProcPid);
		snprintf(finalfilename, sizeof(finalfilename), <literal type="string">"global/%s"</literal>,
				 RELCACHE_INIT_FILENAME);
	}
	else
	{
		snprintf(tempfilename, sizeof(tempfilename), <literal type="string">"%s/%s.%d"</literal>,
				 DatabasePath, RELCACHE_INIT_FILENAME, MyProcPid);
		snprintf(finalfilename, sizeof(finalfilename), <literal type="string">"%s/%s"</literal>,
				 DatabasePath, RELCACHE_INIT_FILENAME);
	}

	unlink(tempfilename);		<comment type="block">/* in case it exists w/wrong permissions */</comment>

	fp = AllocateFile(tempfilename, PG_BINARY_W);
	if (fp == NULL)
	{
		<comment type="block">/*
		 * We used to consider this a fatal error, but we might as well
		 * continue with backend startup ...
		 */</comment>
		ereport(WARNING,
				(errcode_for_file_access(),
				 errmsg(<literal type="string">"could not create relation-cache initialization file \"%s\": %m"</literal>,
						tempfilename),
				 errdetail(<literal type="string">"Continuing anyway, but there's something wrong."</literal>)));
		return;
	}

	<comment type="block">/*
	 * Write a magic number to serve as a file version identifier.  We can
	 * change the magic number whenever the relcache layout changes.
	 */</comment>
	magic = RELCACHE_INIT_FILEMAGIC;
	if (fwrite(&amp;magic, <literal type="number">1</literal>, sizeof(magic), fp) != sizeof(magic))
		elog(FATAL, <literal type="string">"could not write init file"</literal>);

	<comment type="block">/*
	 * Write all the appropriate reldescs (in no particular order).
	 */</comment>
	hash_seq_init(&amp;status, RelationIdCache);

	while ((idhentry = (RelIdCacheEnt *) hash_seq_search(&amp;status)) != NULL)
	{
		Relation	rel = idhentry-&gt;reldesc;
		Form_pg_class relform = rel-&gt;rd_rel;

		<comment type="block">/* ignore if not correct group */</comment>
		if (relform-&gt;relisshared != shared)
			continue;

		<comment type="block">/*
		 * Ignore if not supposed to be in init file.  We can allow any shared
		 * relation that's been loaded so far to be in the shared init file,
		 * but unshared relations must be ones that should be in the local
		 * file per RelationIdIsInInitFile.  (Note: if you want to change the
		 * criterion for rels to be kept in the init file, see also inval.c.
		 * The reason for filtering here is to be sure that we don't put
		 * anything into the local init file for which a relcache inval would
		 * not cause invalidation of that init file.)
		 */</comment>
		if (!shared &amp;&amp; !RelationIdIsInInitFile(RelationGetRelid(rel)))
		{
			<comment type="block">/* Nailed rels had better get stored. */</comment>
			Assert(!rel-&gt;rd_isnailed);
			continue;
		}

		<comment type="block">/* first write the relcache entry proper */</comment>
		write_item(rel, sizeof(RelationData), fp);

		<comment type="block">/* next write the relation tuple form */</comment>
		write_item(relform, CLASS_TUPLE_SIZE, fp);

		<comment type="block">/* next, do all the attribute tuple form data entries */</comment>
		for (i = <literal type="number">0</literal>; i &lt; relform-&gt;relnatts; i++)
		{
			write_item(TupleDescAttr(rel-&gt;rd_att, i),
					   ATTRIBUTE_FIXED_PART_SIZE, fp);
		}

		<comment type="block">/* next, do the access method specific field */</comment>
		write_item(rel-&gt;rd_options,
				   (rel-&gt;rd_options ? VARSIZE(rel-&gt;rd_options) : <literal type="number">0</literal>),
				   fp);

		<comment type="block">/*
		 * If it's an index, there's more to do. Note we explicitly ignore
		 * partitioned indexes here.
		 */</comment>
		if (rel-&gt;rd_rel-&gt;relkind == RELKIND_INDEX)
		{
			<comment type="block">/* write the pg_index tuple */</comment>
			<comment type="block">/* we assume this was created by heap_copytuple! */</comment>
			write_item(rel-&gt;rd_indextuple,
					   HEAPTUPLESIZE + rel-&gt;rd_indextuple-&gt;t_len,
					   fp);

			<comment type="block">/* next, write the vector of opfamily OIDs */</comment>
			write_item(rel-&gt;rd_opfamily,
					   relform-&gt;relnatts * sizeof(Oid),
					   fp);

			<comment type="block">/* next, write the vector of opcintype OIDs */</comment>
			write_item(rel-&gt;rd_opcintype,
					   relform-&gt;relnatts * sizeof(Oid),
					   fp);

			<comment type="block">/* next, write the vector of support procedure OIDs */</comment>
			write_item(rel-&gt;rd_support,
					   relform-&gt;relnatts * (rel-&gt;rd_indam-&gt;amsupport * sizeof(RegProcedure)),
					   fp);

			<comment type="block">/* next, write the vector of collation OIDs */</comment>
			write_item(rel-&gt;rd_indcollation,
					   relform-&gt;relnatts * sizeof(Oid),
					   fp);

			<comment type="block">/* finally, write the vector of indoption values */</comment>
			write_item(rel-&gt;rd_indoption,
					   relform-&gt;relnatts * sizeof(int16),
					   fp);
		}
	}

	if (FreeFile(fp))
		elog(FATAL, <literal type="string">"could not write init file"</literal>);

	<comment type="block">/*
	 * Now we have to check whether the data we've so painstakingly
	 * accumulated is already obsolete due to someone else's just-committed
	 * catalog changes.  If so, we just delete the temp file and leave it to
	 * the next backend to try again.  (Our own relcache entries will be
	 * updated by SI message processing, but we can't be sure whether what we
	 * wrote out was up-to-date.)
	 *
	 * This mustn't run concurrently with the code that unlinks an init file
	 * and sends SI messages, so grab a serialization lock for the duration.
	 */</comment>
	LWLockAcquire(RelCacheInitLock, LW_EXCLUSIVE);

	<comment type="block">/* Make sure we have seen all incoming SI messages */</comment>
	AcceptInvalidationMessages();

	<comment type="block">/*
	 * If we have received any SI relcache invals since backend start, assume
	 * we may have written out-of-date data.
	 */</comment>
	if (relcacheInvalsReceived == <literal type="number">0L</literal>)
	{
		<comment type="block">/*
		 * OK, rename the temp file to its final name, deleting any
		 * previously-existing init file.
		 *
		 * Note: a failure here is possible under Cygwin, if some other
		 * backend is holding open an unlinked-but-not-yet-gone init file. So
		 * treat this as a noncritical failure; just remove the useless temp
		 * file on failure.
		 */</comment>
		if (rename(tempfilename, finalfilename) &lt; <literal type="number">0</literal>)
			unlink(tempfilename);
	}
	else
	{
		<comment type="block">/* Delete the already-obsolete temp file */</comment>
		unlink(tempfilename);
	}

	LWLockRelease(RelCacheInitLock);
}

<comment type="block">/* write a chunk of data preceded by its length */</comment>
static void
write_item(const void *data, Size len, FILE *fp)
{
	if (fwrite(&amp;len, <literal type="number">1</literal>, sizeof(len), fp) != sizeof(len))
		elog(FATAL, <literal type="string">"could not write init file"</literal>);
	if (fwrite(data, <literal type="number">1</literal>, len, fp) != len)
		elog(FATAL, <literal type="string">"could not write init file"</literal>);
}

<comment type="block">/*
 * Determine whether a given relation (identified by OID) is one of the ones
 * we should store in a relcache init file.
 *
 * We must cache all nailed rels, and for efficiency we should cache every rel
 * that supports a syscache.  The former set is almost but not quite a subset
 * of the latter. The special cases are relations where
 * RelationCacheInitializePhase2/3 chooses to nail for efficiency reasons, but
 * which do not support any syscache.
 */</comment>
bool
RelationIdIsInInitFile(Oid relationId)
{
	if (relationId == SharedSecLabelRelationId ||
		relationId == TriggerRelidNameIndexId ||
		relationId == DatabaseNameIndexId ||
		relationId == SharedSecLabelObjectIndexId)
	{
		<comment type="block">/*
		 * If this Assert fails, we don't need the applicable special case
		 * anymore.
		 */</comment>
		Assert(!RelationSupportsSysCache(relationId));
		return true;
	}
	return RelationSupportsSysCache(relationId);
}

<comment type="block">/*
 * Tells whether any index for the relation is unlogged.
 *
 * Note: There doesn't seem to be any way to have an unlogged index attached
 * to a permanent table, but it seems best to keep this general so that it
 * returns sensible results even when they seem obvious (like for an unlogged
 * table) and to handle possible future unlogged indexes on permanent tables.
 */</comment>
bool
RelationHasUnloggedIndex(Relation rel)
{
	List	   *indexoidlist;
	ListCell   *indexoidscan;
	bool		result = false;

	indexoidlist = RelationGetIndexList(rel);

	foreach(indexoidscan, indexoidlist)
	{
		Oid			indexoid = lfirst_oid(indexoidscan);
		HeapTuple	tp;
		Form_pg_class reltup;

		tp = SearchSysCache1(RELOID, ObjectIdGetDatum(indexoid));
		if (!HeapTupleIsValid(tp))
			elog(ERROR, <literal type="string">"cache lookup failed for relation %u"</literal>, indexoid);
		reltup = (Form_pg_class) GETSTRUCT(tp);

		if (reltup-&gt;relpersistence == RELPERSISTENCE_UNLOGGED)
			result = true;

		ReleaseSysCache(tp);

		if (result == true)
			break;
	}

	list_free(indexoidlist);

	return result;
}

<comment type="block">/*
 * Invalidate (remove) the init file during commit of a transaction that
 * changed one or more of the relation cache entries that are kept in the
 * local init file.
 *
 * To be safe against concurrent inspection or rewriting of the init file,
 * we must take RelCacheInitLock, then remove the old init file, then send
 * the SI messages that include relcache inval for such relations, and then
 * release RelCacheInitLock.  This serializes the whole affair against
 * write_relcache_init_file, so that we can be sure that any other process
 * that's concurrently trying to create a new init file won't move an
 * already-stale version into place after we unlink.  Also, because we unlink
 * before sending the SI messages, a backend that's currently starting cannot
 * read the now-obsolete init file and then miss the SI messages that will
 * force it to update its relcache entries.  (This works because the backend
 * startup sequence gets into the sinval array before trying to load the init
 * file.)
 *
 * We take the lock and do the unlink in RelationCacheInitFilePreInvalidate,
 * then release the lock in RelationCacheInitFilePostInvalidate.  Caller must
 * send any pending SI messages between those calls.
 */</comment>
void
RelationCacheInitFilePreInvalidate(void)
{
	char		localinitfname[MAXPGPATH];
	char		sharedinitfname[MAXPGPATH];

	if (DatabasePath)
		snprintf(localinitfname, sizeof(localinitfname), <literal type="string">"%s/%s"</literal>,
				 DatabasePath, RELCACHE_INIT_FILENAME);
	snprintf(sharedinitfname, sizeof(sharedinitfname), <literal type="string">"global/%s"</literal>,
			 RELCACHE_INIT_FILENAME);

	LWLockAcquire(RelCacheInitLock, LW_EXCLUSIVE);

	<comment type="block">/*
	 * The files might not be there if no backend has been started since the
	 * last removal.  But complain about failures other than ENOENT with
	 * ERROR.  Fortunately, it's not too late to abort the transaction if we
	 * can't get rid of the would-be-obsolete init file.
	 */</comment>
	if (DatabasePath)
		unlink_initfile(localinitfname, ERROR);
	unlink_initfile(sharedinitfname, ERROR);
}

void
RelationCacheInitFilePostInvalidate(void)
{
	LWLockRelease(RelCacheInitLock);
}

<comment type="block">/*
 * Remove the init files during postmaster startup.
 *
 * We used to keep the init files across restarts, but that is unsafe in PITR
 * scenarios, and even in simple crash-recovery cases there are windows for
 * the init files to become out-of-sync with the database.  So now we just
 * remove them during startup and expect the first backend launch to rebuild
 * them.  Of course, this has to happen in each database of the cluster.
 */</comment>
void
RelationCacheInitFileRemove(void)
{
	const char *tblspcdir = <literal type="string">"pg_tblspc"</literal>;
	DIR		   *dir;
	struct dirent *de;
	char		path[MAXPGPATH + <literal type="number">11</literal> + MAX_DBID_STRING_LENGTH + <literal type="number">1</literal> + sizeof(GP_TABLESPACE_VERSION_DIRECTORY)];

	snprintf(path, sizeof(path), <literal type="string">"global/%s"</literal>,
			 RELCACHE_INIT_FILENAME);
	unlink_initfile(path, LOG);

	<comment type="block">/* Scan everything in the default tablespace */</comment>
	RelationCacheInitFileRemoveInDir(<literal type="string">"base"</literal>);

	<comment type="block">/* Scan the tablespace link directory to find non-default tablespaces */</comment>
	dir = AllocateDir(tblspcdir);

	while ((de = ReadDirExtended(dir, tblspcdir, LOG)) != NULL)
	{
		if (strspn(de-&gt;d_name, <literal type="string">"0123456789"</literal>) == strlen(de-&gt;d_name))
		{
			<comment type="block">/* Scan the tablespace dir for per-database dirs */</comment>
			snprintf(path, sizeof(path), <literal type="string">"%s/%s/%s"</literal>,
					 tblspcdir, de-&gt;d_name, GP_TABLESPACE_VERSION_DIRECTORY);
			RelationCacheInitFileRemoveInDir(path);
		}
	}

	FreeDir(dir);
}

<comment type="block">/* Process one per-tablespace directory for RelationCacheInitFileRemove */</comment>
static void
RelationCacheInitFileRemoveInDir(const char *tblspcpath)
{
	DIR		   *dir;
	struct dirent *de;
	char		initfilename[MAXPGPATH * <literal type="number">2</literal>];

	<comment type="block">/* Scan the tablespace directory to find per-database directories */</comment>
	dir = AllocateDir(tblspcpath);

	while ((de = ReadDirExtended(dir, tblspcpath, LOG)) != NULL)
	{
		if (strspn(de-&gt;d_name, <literal type="string">"0123456789"</literal>) == strlen(de-&gt;d_name))
		{
			<comment type="block">/* Try to remove the init file in each database */</comment>
			snprintf(initfilename, sizeof(initfilename), <literal type="string">"%s/%s/%s"</literal>,
					 tblspcpath, de-&gt;d_name, RELCACHE_INIT_FILENAME);
			unlink_initfile(initfilename, LOG);
		}
	}

	FreeDir(dir);
}

static void
unlink_initfile(const char *initfilename, int elevel)
{
	if (unlink(initfilename) &lt; <literal type="number">0</literal>)
	{
		<comment type="block">/* It might not be there, but log any error other than ENOENT */</comment>
		if (errno != ENOENT)
			ereport(elevel,
					(errcode_for_file_access(),
					 errmsg(<literal type="string">"could not remove cache file \"%s\": %m"</literal>,
							initfilename)));
	}
}</argument></argument_list></macro></block_content></block></if></if_stmt></block_content></block></function>
</unit>
