<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/resource_manager/resource_manager.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * resource_manager.c
 *	  GPDB resource manager code.
 *
 * Portions Copyright (c) 2006-2017, Greenplum inc.
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/utils/resource_manager/resource_manager.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/memquota.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/spi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/fts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/walsender.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resource_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/cgroup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/session_state.h"</cpp:file></cpp:include>

<comment type="block">/*
 * GUC variables.
 */</comment>
<decl_stmt><decl><type><name>bool</name></type>	<name>ResourceScheduler</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>						<comment type="block">/* Is scheduling enabled? */</comment>
<decl_stmt><decl><type><name>ResourceManagerPolicy</name></type> <name>Gp_resource_manager_policy</name></decl>;</decl_stmt>

<comment type="block">/*
 * Global variables.
 */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>ResGroupActivated</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>ResManagerShmemInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>IsResQueueEnabled</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_DISPATCH</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>InitResScheduler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>InitResPortalIncrementHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsResGroupEnabled</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ResGroupControlInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>InitResManager</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>IsResQueueEnabled</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_DISPATCH</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>am_walsender</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>gp_resmanager_memory_policy</name> <operator>=</operator> <operator>(</operator><name>ResManagerMemoryPolicy</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>gp_resqueue_memory_policy</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>gp_log_resmanager_memory</name> <operator>=</operator> <operator>&amp;</operator><name>gp_log_resqueue_memory</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>gp_resmanager_print_operator_memory_limits</name> <operator>=</operator> <operator>&amp;</operator><name>gp_resqueue_print_operator_memory_limits</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>gp_resmanager_memory_policy_auto_fixed_mem</name> <operator>=</operator> <operator>&amp;</operator><name>gp_resqueue_memory_policy_auto_fixed_mem</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>InitResQueues</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if  <condition>(<expr><call><name>IsResGroupEnabled</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>(</operator><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_DISPATCH</name> <operator>||</operator> <name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_EXECUTE</name><operator>)</operator> <operator>&amp;&amp;</operator>
			 <name>IsUnderPostmaster</name> <operator>&amp;&amp;</operator>
			 <operator>!</operator><call><name>amAuxiliaryBgWorker</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>!</operator><name>am_walsender</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>am_ftshandler</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>am_faulthandler</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * InitResManager() is called under PostgresMain(), so resource group is not
		 * initialized for auxiliary processes and other special backends. eg
		 * checkpointer, ftsprobe and filerep processes. Wal sender acts like a backend,
		 * so we also need to exclude it.
		 */</comment>
		<expr_stmt><expr><name>gp_resmanager_memory_policy</name> <operator>=</operator> <operator>(</operator><name>ResManagerMemoryPolicy</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>gp_resgroup_memory_policy</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>gp_log_resmanager_memory</name> <operator>=</operator> <operator>&amp;</operator><name>gp_log_resgroup_memory</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>gp_resmanager_memory_policy_auto_fixed_mem</name> <operator>=</operator> <operator>&amp;</operator><name>gp_resgroup_memory_policy_auto_fixed_mem</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>gp_resmanager_print_operator_memory_limits</name> <operator>=</operator> <operator>&amp;</operator><name>gp_resgroup_print_operator_memory_limits</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>InitResGroups</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>cgroupOpsRoutine</name><operator>-&gt;</operator><name>adjustgucs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ResGroupActivated</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>gp_resmanager_memory_policy</name> <operator>=</operator> <operator>&amp;</operator><name>gp_resmanager_memory_policy_default</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>gp_log_resmanager_memory</name> <operator>=</operator> <operator>&amp;</operator><name>gp_log_resmanager_memory_default</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>gp_resmanager_memory_policy_auto_fixed_mem</name> <operator>=</operator> <operator>&amp;</operator><name>gp_resmanager_memory_policy_auto_fixed_mem_default</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>gp_resmanager_print_operator_memory_limits</name> <operator>=</operator> <operator>&amp;</operator><name>gp_resmanager_print_operator_memory_limits_default</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsResManagerMemoryPolicyNone</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SPI_InitMemoryReservation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>MySessionState</name> <operator>&amp;&amp;</operator>
		<operator>!</operator><name>IsBackgroundWorker</name> <operator>&amp;&amp;</operator>
		<operator>(</operator><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_DISPATCH</name> <operator>||</operator> <name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_EXECUTE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPMemoryProtect_TrackStartupMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
