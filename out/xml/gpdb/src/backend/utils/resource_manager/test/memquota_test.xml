<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/resource_manager/test/memquota_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../memquota.c"</cpp:file></cpp:include>

<comment type="block">/* ==================== ComputeMemLimitForChildGroups ==================== */</comment>

<comment type="block">/*
 * Tests that EagerFree computes the memory limits for child groups accurately
 * No rounding error is allowed due to scaleFactor. The sum of the child group
 * memory amounts must equal the sum of the parent group (MPP-23130)
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__ComputeMemLimitForChildGroups_rounding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OperatorGroupNode</name> <modifier>*</modifier></type><name>parentGroup</name> <init>= <expr><operator>(</operator><name>OperatorGroupNode</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OperatorGroupNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OperatorGroupNode</name> <modifier>*</modifier></type><name>childGroup1</name> <init>= <expr><operator>(</operator><name>OperatorGroupNode</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OperatorGroupNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OperatorGroupNode</name> <modifier>*</modifier></type><name>childGroup2</name> <init>= <expr><operator>(</operator><name>OperatorGroupNode</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OperatorGroupNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>parentGroup</name><operator>-&gt;</operator><name>childGroups</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parentGroup</name><operator>-&gt;</operator><name>childGroups</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>parentGroup</name><operator>-&gt;</operator><name>childGroups</name></name></expr></argument>, <argument><expr><name>childGroup1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parentGroup</name><operator>-&gt;</operator><name>childGroups</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>parentGroup</name><operator>-&gt;</operator><name>childGroups</name></name></expr></argument>, <argument><expr><name>childGroup2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>gp_resmanager_memory_policy_auto_fixed_mem</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

	<comment type="block">/* Case where rounding does not cause error */</comment>
	<expr_stmt><expr><name><name>parentGroup</name><operator>-&gt;</operator><name>groupMemKB</name></name> <operator>=</operator> <literal type="number">3000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>childGroup1</name><operator>-&gt;</operator><name>numMemIntenseOps</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>childGroup2</name><operator>-&gt;</operator><name>numMemIntenseOps</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>childGroup1</name><operator>-&gt;</operator><name>numNonMemIntenseOps</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>childGroup2</name><operator>-&gt;</operator><name>numNonMemIntenseOps</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * For these values, we have the following:
	 *   parentGroupMemKB = 3000
	 *
	 *   childGroupMemKB_1 = 1200 ; SF_1 = 0.4
	 *   ===&gt; Calculation with rounding: (1200 / 0.4) * 0.4 = 1200
	 *
	 *   childGroupMemKB_2 = 1800 ; SF_2 = 0.6
	 *   ===&gt; Calculation with rounding: (1800 / 0.6) * 0.6 = 1800
	 *
	 *   Assert: 1200 + 1800 = 3000, PASS
	 */</comment>

	<expr_stmt><expr><call><name>ComputeMemLimitForChildGroups</name><argument_list>(<argument><expr><name>parentGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>childGroup1</name><operator>-&gt;</operator><name>groupMemKB</name></name> <operator>+</operator> <name><name>childGroup2</name><operator>-&gt;</operator><name>groupMemKB</name></name></expr></argument>, <argument><expr><name><name>parentGroup</name><operator>-&gt;</operator><name>groupMemKB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="block">/* Case where rounding would cause error */</comment>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>childGroup1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OperatorGroupNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>childGroup2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OperatorGroupNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>parentGroup</name><operator>-&gt;</operator><name>groupMemKB</name></name> <operator>=</operator> <literal type="number">3000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>childGroup1</name><operator>-&gt;</operator><name>numMemIntenseOps</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>childGroup2</name><operator>-&gt;</operator><name>numMemIntenseOps</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>childGroup1</name><operator>-&gt;</operator><name>numNonMemIntenseOps</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>childGroup2</name><operator>-&gt;</operator><name>numNonMemIntenseOps</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * For these values, we have the following:
	 *   parentGroupMemKB = 3000
	 *
	 *   childGroupMemKB_1 = 1160 ; SF_1 = 0.386667
	 *   ===&gt; Calculation with rounding: (1160 /  0.386667) *  0.386667 = 1160
	 *
	 *   childGroupMemKB_2 = 1840 ; SF_2 = 0.613333
	 *   ===&gt; Calculation with rounding: (1840 / 0.613333) * 0.613333 = 1839 (!)
	 *
	 *   Assert: 1160 + 1839 = 2999, FAIL!!
	 */</comment>

	<expr_stmt><expr><call><name>ComputeMemLimitForChildGroups</name><argument_list>(<argument><expr><name>parentGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>childGroup1</name><operator>-&gt;</operator><name>groupMemKB</name></name> <operator>+</operator> <name><name>childGroup2</name><operator>-&gt;</operator><name>groupMemKB</name></name></expr></argument>, <argument><expr><name><name>parentGroup</name><operator>-&gt;</operator><name>groupMemKB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<comment type="block">/* ==================== main ==================== */</comment>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<macro><name>unit_test</name><argument_list>(<argument>test__ComputeMemLimitForChildGroups_rounding</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
