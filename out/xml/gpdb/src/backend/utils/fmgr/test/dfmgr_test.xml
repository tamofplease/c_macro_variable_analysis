<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/fmgr/test/dfmgr_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_MESSAGE_MAX_LEN</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DLSUFFIX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLSUFFIX</name></cpp:macro> <cpp:value>"To compile dfmgr.c we need to define this"</cpp:value></cpp:define>

<comment type="block">/* Redefine errdetail and errmsg to capture the error detail for later comparison */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>errdetail</name></cpp:macro> <cpp:value>errdetail_internal_impl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>errdetail_internal</name></cpp:macro> <cpp:value>errdetail_internal_impl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>errmsg</name></cpp:macro> <cpp:value>errmsg_impl</cpp:value></cpp:define>
<comment type="block">/*
 * Redefine errfinish to throw an error *only if* the error message matches our
 * expectation. Note, an error is the success case
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>errfinish</name></cpp:macro> <cpp:value>errfinish_impl</cpp:value></cpp:define>
<comment type="block">/*
 * Mock PG_RE_THROW as well, because we are not using real elog.o.
 * The closest mockery is to call siglongjmp().
 */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PG_RE_THROW</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_RE_THROW</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>siglongjmp(*PG_exception_stack, 1)</cpp:value></cpp:define>

<comment type="block">/* Buffer to store the last error mesage from errdetail */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>lastErrorMsg</name><index>[<expr><name>ERROR_MESSAGE_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<comment type="block">/* Buffer to store the expected error message as determined by the test */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>expectedErrorMsg</name><index>[<expr><name>ERROR_MESSAGE_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>testMemoryContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>errfinish_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* We only throw error if the error message matches our expectation */</comment>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>lastErrorMsg</name></expr></argument>, <argument><expr><name>expectedErrorMsg</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>errmsg_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>errdetail_internal_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>StringInfoData</name></type>	<name>buf</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>va_list</name></type>		<name>args</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>appendStringInfoVA</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>lastErrorMsg</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lastErrorMsg</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>lastErrorMsg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dfmgr.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_EREPORT</name><parameter_list>(<parameter><type><name>LOG_LEVEL</name></type></parameter>)</parameter_list></cpp:macro>     \
	<cpp:value>expect_any(errstart, elevel); \
	expect_any(errstart, domain); \
	if (LOG_LEVEL &lt; ERROR) \
	{ \
    	will_return(errstart, false); \
	} \
    else \
    { \
    	will_return(errstart, true);\
    }</cpp:value></cpp:define> \


<comment type="block">/*
 * Tests if we error out if the loaded module's expected Pg_magic_struct
 * is smaller (i.e., we have newer fields)
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__incompatible_module_error__struct_size_mismatch</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pg_magic_struct</name></type> <name>module_magic</name> <init>= <expr><name>PG_MODULE_MAGIC_DATA</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Simulate a smaller structure for the module's Pg_magic_struct */</comment>
	<expr_stmt><expr><name><name>module_magic</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>Pg_magic_struct</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectedErrorMsg</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"Magic block has unexpected length or padding difference."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EXPECT_EREPORT</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>incompatible_module_error</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>module_magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * A utility method that can check header version mismatch error message
 * for different offsets. E.g., mismatch by 1 version, or -1 version tests
 * the error message when module magic's header version is ahead by 1
 * or trailing by 1
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckHeaderVersionMismatch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>diffOffset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pg_magic_struct</name></type> <name>module_magic</name> <init>= <expr><name>PG_MODULE_MAGIC_DATA</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectedErrorMsg</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"Magic block has unexpected length or padding difference."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EXPECT_EREPORT</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>incompatible_module_error</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>module_magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Tests if we error out if the loaded module's headerversion is different than ours
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__incompatible_module_error__headerversion_mismatch</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CheckHeaderVersionMismatch</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CheckHeaderVersionMismatch</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Tests if we don't throw a version mismatch error if the header versions are identical
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__incompatible_module_error__headerversion_identical</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Module magic is identical to ours */</comment>
	<decl_stmt><decl><type><name>Pg_magic_struct</name></type> <name>module_magic</name> <init>= <expr><name>PG_MODULE_MAGIC_DATA</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* We should expect a "default" error */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectedErrorMsg</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"Magic block has unexpected length or padding difference."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EXPECT_EREPORT</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>incompatible_module_error</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>module_magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Sets up the global data structures and the memory context
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>SetupDataStructures</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>lastErrorMsg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>expectedErrorMsg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>TopMemoryContext</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>NULL</name> <operator>==</operator> <name>testMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>testMemoryContext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
        	                      <argument><expr><literal type="string">"Test Context"</literal></expr></argument>,
            	                  <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
                	              <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
                    	          <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>testMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>testMemoryContext</name> <operator>&amp;&amp;</operator>
			<name>CurrentMemoryContext</name> <operator>==</operator> <name>testMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Cleans up memory by reseting testMemoryContext
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>TeardownDataStructures</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>testMemoryContext</name> <operator>&amp;&amp;</operator>
			<name>CurrentMemoryContext</name> <operator>==</operator> <name>testMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name>testMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
        		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__incompatible_module_error__struct_size_mismatch</name></expr></argument>, <argument><expr><name>SetupDataStructures</name></expr></argument>, <argument><expr><name>TeardownDataStructures</name></expr></argument>)</argument_list></call></expr>,
        		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__incompatible_module_error__headerversion_mismatch</name></expr></argument>, <argument><expr><name>SetupDataStructures</name></expr></argument>, <argument><expr><name>TeardownDataStructures</name></expr></argument>)</argument_list></call></expr>,
        		<expr><call><name>unit_test_setup_teardown</name><argument_list>(<argument><expr><name>test__incompatible_module_error__headerversion_identical</name></expr></argument>, <argument><expr><name>SetupDataStructures</name></expr></argument>, <argument><expr><name>TeardownDataStructures</name></expr></argument>)</argument_list></call></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
