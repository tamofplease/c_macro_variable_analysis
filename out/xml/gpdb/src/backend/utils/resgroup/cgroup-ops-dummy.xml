<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/resgroup/cgroup-ops-dummy.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * cgroup-ops-dummy.c
 *    OS dependent resource group operations - dummy implementation
 *
 * Copyright (c) 2017 VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *      src/backend/utils/resgroup/cgroup-ops-dummy.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/cgroup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/cgroup-ops-dummy.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Interfaces for OS dependent operations.
 *
 * Resource group relies on OS dependent group implementation to manage
 * resources like cpu usage, such as cgroup on Linux system.
 * We call it OS group in below function description.
 *
 * So far these operations are mainly for CPU rate limitation and accounting.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unsupported_system</name><parameter_list>()</parameter_list></cpp:macro> \
    <cpp:value>elog(WARNING, "resource group is not supported on this system")</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>CGroupSystemInfo</name></type> <name>cgroupSystemInfoAlpha</name> <init>= <expr><block>{
		<expr><literal type="number">0</literal></expr>,
		<expr><literal type="string">""</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Return the name for the OS group implementation */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>getcgroupname_dummy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="string">"unsupported"</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Probe the configuration for the OS group implementation.
 *
 * Return true if everything is OK, or false is some requirements are not
 * satisfied.  Will not fail in either case.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>probecgroup_dummy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Check whether the OS group implementation is available and usable */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>checkcgroup_dummy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Initialize the OS group */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>initcgroup_dummy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Adjust GUCs for this OS group implementation */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>adjustgucs_dummy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Create the OS group for group.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>createcgroup_dummy</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Assign a process to the OS group. A process can only be assigned to one
 * OS group, if it's already running under other OS group then it'll be moved
 * out that OS group.
 *
 * pid is the process id.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>attachcgroup_dummy</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_cpuset_enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * un-assign all the processes from a cgroup.
 *
 * These processes will be moved to the gpdb default cgroup.
 *
 * This function must be called with the gpdb toplevel dir locked,
 * fd_dir is the fd for this lock, on any failure fd_dir will be closed
 * (and unlocked implicitly) then an error is raised.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>detachcgroup_dummy</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>CGroupComponentType</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Destroy the OS group for group.
 *
 * One OS group can not be dropped if there are processes running under it,
 * if migrate is true these processes will be moved out automatically.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>destroycgroup_dummy</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>migrate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Lock the OS group. While the group is locked it won't be removed by other
 * processes.
 *
 * This function would block if block is true, otherwise it returns with -1
 * immediately.
 *
 * On success, it returns a fd to the OS group, pass it to
 * ResGroupOps_UnLockGroup() to unlock it.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>lockcgroup_dummy</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>CGroupComponentType</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Unblock an OS group.
 *
 * fd is the value returned by lockcgroup_dummy().
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>unlockcgroup_dummy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Set the cpu rate limit for the OS group.
 *
 * cpu_rate_limit should be within [0, 100].
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>setcpulimit_dummy</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cpu_rate_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Set the memory limit for the OS group by value.
 *
 * memory_limit is the limit value in chunks
 *
 * If cgroup supports memory swap, we will write the same limit to
 * memory.memsw.limit and memory.limit.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>setmemorylimitbychunks_dummy</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>memory_limit_chunks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Set the memory limit for the OS group by rate.
 *
 * memory_limit should be within [0, 100].
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>setmemorylimit_dummy</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>memory_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get the cpu usage of the OS group, that is the total cpu time obtained
 * by this OS group, in nano seconds.
 */</comment>
<function><type><specifier>static</specifier> <name>int64</name></type>
<name>getcpuusage_dummy</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the memory usage of the OS group
 *
 * memory usage is returned in chunks
 */</comment>
<function><type><specifier>static</specifier> <name>int32</name></type>
<name>getmemoryusage_dummy</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the memory limit of the OS group
 *
 * memory limit is returned in chunks
 */</comment>
<function><type><specifier>static</specifier> <name>int32</name></type>
<name>getmemorylimitchunks_dummy</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the cpuset of the OS group.
 * @param group: the destination group
 * @param cpuset: the str to be set
 * @param len: the upper limit of the str
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>getcpuset_dummy</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cpuset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Set the cpuset for the OS group.
 * @param group: the destination group
 * @param cpuset: the value to be set
 * The syntax of CPUSET is a combination of the tuples, each tuple represents
 * one core number or the core numbers interval, separated by comma.
 * E.g. 0,1,2-3.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>setcpuset_dummy</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cpuset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Convert the cpu usage to percentage within the duration.
 *
 * usage is the delta of GetCpuUsage() of a duration,
 * duration is in micro seconds.
 *
 * When fully consuming one cpu core the return value will be 100.0 .
 */</comment>
<function><type><specifier>static</specifier> <name>float</name></type>
<name>convertcpuusage_dummy</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>usage</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0.0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32</name></type>
<name>gettotalmemory_dummy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unsupported_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0.0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>CGroupOpsRoutine</name></type> <name>cGroupOpsRoutineDummy</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>getcgroupname</name> <operator>=</operator> <name>getcgroupname_dummy</name></expr>,

		<expr><operator>.</operator><name>probecgroup</name> <operator>=</operator> <name>probecgroup_dummy</name></expr>,
		<expr><operator>.</operator><name>checkcgroup</name> <operator>=</operator> <name>checkcgroup_dummy</name></expr>,
		<expr><operator>.</operator><name>initcgroup</name> <operator>=</operator> <name>initcgroup_dummy</name></expr>,
		<expr><operator>.</operator><name>adjustgucs</name> <operator>=</operator> <name>adjustgucs_dummy</name></expr>,
		<expr><operator>.</operator><name>createcgroup</name> <operator>=</operator> <name>createcgroup_dummy</name></expr>,
		<expr><operator>.</operator><name>destroycgroup</name> <operator>=</operator> <name>destroycgroup_dummy</name></expr>,

		<expr><operator>.</operator><name>attachcgroup</name> <operator>=</operator> <name>attachcgroup_dummy</name></expr>,
		<expr><operator>.</operator><name>detachcgroup</name> <operator>=</operator> <name>detachcgroup_dummy</name></expr>,

		<expr><operator>.</operator><name>lockcgroup</name> <operator>=</operator> <name>lockcgroup_dummy</name></expr>,
		<expr><operator>.</operator><name>unlockcgroup</name> <operator>=</operator> <name>unlockcgroup_dummy</name></expr>,

		<expr><operator>.</operator><name>setcpulimit</name> <operator>=</operator> <name>setcpulimit_dummy</name></expr>,
		<expr><operator>.</operator><name>getcpuusage</name> <operator>=</operator> <name>getcpuusage_dummy</name></expr>,

		<expr><operator>.</operator><name>gettotalmemory</name> <operator>=</operator> <name>gettotalmemory_dummy</name></expr>,
		<expr><operator>.</operator><name>getmemoryusage</name> <operator>=</operator> <name>getmemoryusage_dummy</name></expr>,
		<expr><operator>.</operator><name>setmemorylimit</name> <operator>=</operator> <name>setmemorylimit_dummy</name></expr>,
		<expr><operator>.</operator><name>getmemorylimitchunks</name> <operator>=</operator> <name>getmemorylimitchunks_dummy</name></expr>,
		<expr><operator>.</operator><name>setmemorylimitbychunks</name> <operator>=</operator> <name>setmemorylimitbychunks_dummy</name></expr>,

		<expr><operator>.</operator><name>getcpuset</name> <operator>=</operator> <name>getcpuset_dummy</name></expr>,
		<expr><operator>.</operator><name>setcpuset</name> <operator>=</operator> <name>setcpuset_dummy</name></expr>,

		<expr><operator>.</operator><name>convertcpuusage</name> <operator>=</operator> <name>convertcpuusage_dummy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>CGroupOpsRoutine</name> <modifier>*</modifier></type><name>get_cgroup_routine_dummy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>&amp;</operator><name>cGroupOpsRoutineDummy</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CGroupSystemInfo</name> <modifier>*</modifier></type><name>get_cgroup_sysinfo_dummy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>&amp;</operator><name>cgroupSystemInfoAlpha</name></expr>;</return>
</block_content>}</block></function>
</unit>
