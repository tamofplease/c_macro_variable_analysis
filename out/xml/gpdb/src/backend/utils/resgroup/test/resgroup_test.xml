<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/utils/resgroup/test/resgroup_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../resgroup.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test_with_setup_and_teardown</name><parameter_list>(<parameter><type><name>test_func</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>unit_test_setup_teardown(test_func, setup, teardown)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>MemoryContext</name></type> <name>OrigMessageContext</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* reset the hook function pointer to avoid test pollution. */</comment>
	<expr_stmt><expr><name>resgroup_assign_hook</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* initializations for shouldBypassQuery() */</comment>
	<expr_stmt><expr><name>gp_resource_group_bypass</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>debug_query_string</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>MessageContext</name> <operator>=</operator> <name>OrigMessageContext</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>teardown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* No-op for now. This is just to make CMockery happy. */</comment>
</block_content>}</block></function>

<decl_stmt><decl><type><name>Oid</name></type> <name>decide_resource_group_fake_rv</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>Oid</name></type>
<name>decide_resource_group_fake</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><name>decide_resource_group_fake_rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__decideResGroupId_when_resgroup_assign_hook_is_not_set</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>GetUserId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>GetResGroupIdForRole</name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>GetResGroupIdForRole</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><call><name>decideResGroupId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__decideResGroupId_when_resgroup_assign_hook_is_set</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>decide_resource_group_fake_rv</name> <operator>=</operator> <operator>(</operator><name>Oid</name><operator>)</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>resgroup_assign_hook</name> <operator>=</operator> <name>decide_resource_group_fake</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><call><name>decideResGroupId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__decideResGroupId_when_resgroup_assign_hook_returns_InvalidOid</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>decide_resource_group_fake_rv</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>resgroup_assign_hook</name> <operator>=</operator> <name>decide_resource_group_fake</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>GetUserId</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>GetResGroupIdForRole</name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>GetResGroupIdForRole</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><call><name>decideResGroupId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__CpusetToBitset_bad_arguments</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>cpuset</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cpuset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>!</operator><call><name>CpusetToBitset</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>!</operator><call><name>CpusetToBitset</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>!</operator><call><name>CpusetToBitset</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__CpusetToBitset_normal_case</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>cpusetList</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"0"</literal></expr>,
		<expr><literal type="string">"0,1,2,3,4-10\n"</literal></expr>,
		<expr><literal type="string">"0,2,4,6,10\n"</literal></expr>,
		<expr><literal type="string">"0-10"</literal></expr>,
		<expr><literal type="string">"4,3,2,1\n"</literal></expr>,
		<expr><literal type="string">"4,3,2,1,,,\n"</literal></expr>,
		<expr><literal type="string">"0-0"</literal></expr>,
		<expr><literal type="string">"1000"</literal></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bitmapset</name>	<modifier>*</modifier></type><name>bms1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bms2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cpusetList</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>CpusetToBitset</name><argument_list>(<argument><expr><name><name>cpusetList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">//0</comment>
	<expr_stmt><expr><name>bms1</name> <operator>=</operator> <call><name>CpusetToBitset</name><argument_list>(<argument><expr><name><name>cpusetList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bms2</name> <operator>=</operator> <call><name>bms_make_singleton</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>bms1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>bms2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>bms_equal</name><argument_list>(<argument><expr><name>bms1</name></expr></argument>, <argument><expr><name>bms2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//0,1,2,3,4-10</comment>
	<expr_stmt><expr><name>bms1</name> <operator>=</operator> <call><name>CpusetToBitset</name><argument_list>(<argument><expr><name><name>cpusetList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bms2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>bms2</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>bms2</name></expr></argument>, <argument><expr><call><name>bms_make_singleton</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>bms1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>bms2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>bms_equal</name><argument_list>(<argument><expr><name>bms1</name></expr></argument>, <argument><expr><name>bms2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//0,2,4,6,10</comment>
	<expr_stmt><expr><name>bms1</name> <operator>=</operator> <call><name>CpusetToBitset</name><argument_list>(<argument><expr><name><name>cpusetList</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bms2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>bms2</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>bms2</name></expr></argument>, <argument><expr><call><name>bms_make_singleton</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bms2</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>bms2</name></expr></argument>, <argument><expr><call><name>bms_make_singleton</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bms2</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>bms2</name></expr></argument>, <argument><expr><call><name>bms_make_singleton</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bms2</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>bms2</name></expr></argument>, <argument><expr><call><name>bms_make_singleton</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bms2</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>bms2</name></expr></argument>, <argument><expr><call><name>bms_make_singleton</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>bms1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>bms2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>bms_equal</name><argument_list>(<argument><expr><name>bms1</name></expr></argument>, <argument><expr><name>bms2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//0-10</comment>
	<expr_stmt><expr><name>bms1</name> <operator>=</operator> <call><name>CpusetToBitset</name><argument_list>(<argument><expr><name><name>cpusetList</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bms2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>bms2</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>bms2</name></expr></argument>, <argument><expr><call><name>bms_make_singleton</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>bms1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>bms2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>bms_equal</name><argument_list>(<argument><expr><name>bms1</name></expr></argument>, <argument><expr><name>bms2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//4,3,2,1</comment>
	<expr_stmt><expr><name>bms1</name> <operator>=</operator> <call><name>CpusetToBitset</name><argument_list>(<argument><expr><name><name>cpusetList</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bms2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>bms2</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>bms2</name></expr></argument>, <argument><expr><call><name>bms_make_singleton</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>bms1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>bms2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>bms_equal</name><argument_list>(<argument><expr><name>bms1</name></expr></argument>, <argument><expr><name>bms2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//4,3,2,1,,,</comment>
	<expr_stmt><expr><name>bms1</name> <operator>=</operator> <call><name>CpusetToBitset</name><argument_list>(<argument><expr><name><name>cpusetList</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bms2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>bms2</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>bms2</name></expr></argument>, <argument><expr><call><name>bms_make_singleton</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>bms1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>bms2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>bms_equal</name><argument_list>(<argument><expr><name>bms1</name></expr></argument>, <argument><expr><name>bms2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//0-0</comment>
	<expr_stmt><expr><name>bms1</name> <operator>=</operator> <call><name>CpusetToBitset</name><argument_list>(<argument><expr><name><name>cpusetList</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bms2</name> <operator>=</operator> <call><name>bms_make_singleton</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>bms1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>bms2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>bms_equal</name><argument_list>(<argument><expr><name>bms1</name></expr></argument>, <argument><expr><name>bms2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//1000</comment>
	<expr_stmt><expr><name>bms1</name> <operator>=</operator> <call><name>CpusetToBitset</name><argument_list>(<argument><expr><name><name>cpusetList</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bms2</name> <operator>=</operator> <call><name>bms_make_singleton</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>bms1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>bms2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>bms_equal</name><argument_list>(<argument><expr><name>bms1</name></expr></argument>, <argument><expr><name>bms2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__CpusetToBitset_abnormal_case</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>cpusetList</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="string">""</literal></expr>,
		<expr><literal type="string">" "</literal></expr>,
		<expr><literal type="string">","</literal></expr>,
		<expr><literal type="string">"-1"</literal></expr>,
		<expr><literal type="string">"abc"</literal></expr>,
		<expr><literal type="string">"12a"</literal></expr>,
		<expr><literal type="string">"1 2 3"</literal></expr>,
		<expr><literal type="string">"0-"</literal></expr>,
		<expr><literal type="string">"-"</literal></expr>,
		<expr><literal type="string">"1-0"</literal></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cpusetList</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>!</operator><call><name>CpusetToBitset</name><argument_list>(<argument><expr><name><name>cpusetList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_BitsetToCpuset</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>cpusetList</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>bms</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="line">//</comment>
	<expr_stmt><expr><name>bms</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>bms</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>bms</name></expr></argument>, <argument><expr><call><name>bms_make_singleton</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>BitsetToCpuset</name><argument_list>(<argument><expr><name>bms</name></expr></argument>, <argument><expr><name>cpusetList</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>cpusetList</name></expr></argument>, <argument><expr><literal type="string">"0-7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//</comment>
	<expr_stmt><expr><name>bms</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>bms</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>bms</name></expr></argument>, <argument><expr><call><name>bms_make_singleton</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>BitsetToCpuset</name><argument_list>(<argument><expr><name>bms</name></expr></argument>, <argument><expr><name>cpusetList</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>cpusetList</name></expr></argument>, <argument><expr><literal type="string">"0,2,4,6,8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//</comment>
	<expr_stmt><expr><name>bms</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>bms</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>bms</name></expr></argument>, <argument><expr><call><name>bms_make_singleton</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>BitsetToCpuset</name><argument_list>(<argument><expr><name>bms</name></expr></argument>, <argument><expr><name>cpusetList</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>cpusetList</name></expr></argument>, <argument><expr><literal type="string">"8-23"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//</comment>
	<expr_stmt><expr><name>bms</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>bms</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>bms</name></expr></argument>, <argument><expr><call><name>bms_make_singleton</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>BitsetToCpuset</name><argument_list>(<argument><expr><name>bms</name></expr></argument>, <argument><expr><name>cpusetList</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>cpusetList</name></expr></argument>, <argument><expr><literal type="string">"0-1023"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//</comment>
	<expr_stmt><expr><name>bms</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>bms</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>bms</name></expr></argument>, <argument><expr><call><name>bms_make_singleton</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>BitsetToCpuset</name><argument_list>(<argument><expr><name>bms</name></expr></argument>, <argument><expr><name>cpusetList</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>cpusetList</name></expr></argument>, <argument><expr><literal type="string">"0-15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//</comment>
	<expr_stmt><expr><name>bms</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>bms</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>bms</name></expr></argument>, <argument><expr><call><name>bms_make_singleton</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bms</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>bms</name></expr></argument>, <argument><expr><call><name>bms_make_singleton</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BitsetToCpuset</name><argument_list>(<argument><expr><name>bms</name></expr></argument>, <argument><expr><name>cpusetList</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>cpusetList</name></expr></argument>, <argument><expr><literal type="string">"0,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_CpusetOperation</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>cpuset</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"0-100"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cpusetOperation</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"1-99"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"0,100"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"0,1,2,3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cpusetOperation</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"0,3"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"1-2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"1-10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cpusetOperation</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"3-100"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"1-2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"1-10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cpusetOperation</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"0-100"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"0-100"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"1-10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cpusetOperation</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"100-200"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"1-10,100-200"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"1-10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cpusetOperation</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"5-15"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"1-15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"1-10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cpusetOperation</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"1-10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"1-10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cpusetOperation</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><literal type="string">"1-10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//ResGroupOps_Probe();</comment>
	<comment type="line">//strcpy(cpuset, "1-10");</comment>
	<comment type="line">//cpusetOperation(cpuset, "0-100", 1024, true);</comment>
	<comment type="line">//assert_string_equal(cpuset, "0");</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__shouldBypassQuery__null_query</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>shouldBypassQuery</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__shouldBypassQuery__empty_query</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>shouldBypassQuery</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__shouldBypassQuery__cmd_select</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>shouldBypassQuery</name><argument_list>(<argument><expr><literal type="string">"select 1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__shouldBypassQuery__cmd_set</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>shouldBypassQuery</name><argument_list>(<argument><expr><literal type="string">"set enable_sort to off"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__shouldBypassQuery__cmd_reset</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>shouldBypassQuery</name><argument_list>(<argument><expr><literal type="string">"reset enable_sort"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__shouldBypassQuery__cmd_show</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>shouldBypassQuery</name><argument_list>(<argument><expr><literal type="string">"show enable_sort"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__shouldBypassQuery__cmd_mixed</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>shouldBypassQuery</name><argument_list>(<argument><expr><literal type="string">"select 1; show enable_sort;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>shouldBypassQuery</name><argument_list>(<argument><expr><literal type="string">"show enable_sort; select 1;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>shouldBypassQuery</name><argument_list>(<argument><expr><literal type="string">"reset enable_sort; show enable_sort;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__shouldBypassQuery__forced_bypass_mode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>gp_resource_group_bypass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>shouldBypassQuery</name><argument_list>(<argument><expr><literal type="string">"select 1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__shouldBypassQuery__message_context_is_null</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>MessageContext</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>shouldBypassQuery</name><argument_list>(<argument><expr><literal type="string">"select 1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
			<expr><call><name>test_with_setup_and_teardown</name><argument_list>(<argument><expr><name>test__decideResGroupId_when_resgroup_assign_hook_is_not_set</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>test_with_setup_and_teardown</name><argument_list>(<argument><expr><name>test__decideResGroupId_when_resgroup_assign_hook_is_set</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>test_with_setup_and_teardown</name><argument_list>(<argument><expr><name>test__decideResGroupId_when_resgroup_assign_hook_returns_InvalidOid</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__CpusetToBitset_bad_arguments</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__CpusetToBitset_normal_case</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__CpusetToBitset_abnormal_case</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_BitsetToCpuset</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_CpusetOperation</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>test_with_setup_and_teardown</name><argument_list>(<argument><expr><name>test__shouldBypassQuery__null_query</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>test_with_setup_and_teardown</name><argument_list>(<argument><expr><name>test__shouldBypassQuery__empty_query</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>test_with_setup_and_teardown</name><argument_list>(<argument><expr><name>test__shouldBypassQuery__cmd_select</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>test_with_setup_and_teardown</name><argument_list>(<argument><expr><name>test__shouldBypassQuery__cmd_set</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>test_with_setup_and_teardown</name><argument_list>(<argument><expr><name>test__shouldBypassQuery__cmd_reset</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>test_with_setup_and_teardown</name><argument_list>(<argument><expr><name>test__shouldBypassQuery__cmd_show</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>test_with_setup_and_teardown</name><argument_list>(<argument><expr><name>test__shouldBypassQuery__cmd_mixed</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>test_with_setup_and_teardown</name><argument_list>(<argument><expr><name>test__shouldBypassQuery__forced_bypass_mode</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>test_with_setup_and_teardown</name><argument_list>(<argument><expr><name>test__shouldBypassQuery__message_context_is_null</name></expr></argument>)</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>OrigMessageContext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
											   <argument><expr><literal type="string">"MessageContext"</literal></expr></argument>,
											   <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
											   <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
											   <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
