<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/tsearch/ts_selfuncs.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ts_selfuncs.c
 *	  Selectivity estimation functions for text search operators.
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/backend/tsearch/ts_selfuncs.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_statistic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/selfuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>


<comment type="block">/*
 * The default text search selectivity is chosen to be small enough to
 * encourage indexscans for typical table densities.  See selfuncs.h and
 * DEFAULT_EQ_SEL for details.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TS_MATCH_SEL</name></cpp:macro> <cpp:value>0.005</cpp:value></cpp:define>

<comment type="block">/* lookup table type for binary searching through MCELEMs */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>element</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float4</name></type>		<name>frequency</name></decl>;</decl_stmt>
}</block></struct></type> <name>TextFreq</name>;</typedef>

<comment type="block">/* type of keys for bsearch'ing through an array of TextFreqs */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>lexeme</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>length</name></decl>;</decl_stmt>
}</block></struct></type> <name>LexemeKey</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>Selectivity</name></type> <name>tsquerysel</name><parameter_list>(<parameter><decl><type><name>VariableStatData</name> <modifier>*</modifier></type><name>vardata</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>constval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Selectivity</name></type> <name>mcelem_tsquery_selec</name><parameter_list>(<parameter><decl><type><name>TSQuery</name></type> <name>query</name></decl></parameter>,
										<parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>mcelem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nmcelem</name></decl></parameter>,
										<parameter><decl><type><name>float4</name> <modifier>*</modifier></type><name>numbers</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nnumbers</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Selectivity</name></type> <name>tsquery_opr_selec</name><parameter_list>(<parameter><decl><type><name>QueryItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>,
									 <parameter><decl><type><name>TextFreq</name> <modifier>*</modifier></type><name>lookup</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>float4</name></type> <name>minfreq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>compare_lexeme_textfreq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>e1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>e2</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tsquery_opr_selec_no_stats</name><parameter_list>(<parameter><type><name>query</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>tsquery_opr_selec(GETQUERY(query), GETOPERAND(query), NULL, 0, 0)</cpp:value></cpp:define>


<comment type="block">/*
 *	tsmatchsel -- Selectivity of "@@"
 *
 * restriction selectivity function for tsvector @@ tsquery and
 * tsquery @@ tsvector
 */</comment>
<function><type><name>Datum</name></type>
<name>tsmatchsel</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><operator>(</operator><name>PlannerInfo</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>operator</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>varRelid</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VariableStatData</name></type> <name>vardata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>varonleft</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Selectivity</name></type> <name>selec</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If expression is not variable = something or something = variable, then
	 * punt and return a default estimate.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_restriction_variable</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>varRelid</name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name>vardata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>other</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varonleft</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_FLOAT8</name><argument_list>(<argument><expr><name>DEFAULT_TS_MATCH_SEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Can't do anything useful if the something is not a constant, either.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ReleaseVariableStats</name><argument_list>(<argument><expr><name>vardata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_FLOAT8</name><argument_list>(<argument><expr><name>DEFAULT_TS_MATCH_SEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * The "@@" operator is strict, so we can cope with NULL right away
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>Const</name> <operator>*</operator><operator>)</operator> <name>other</name><operator>)</operator><operator>-&gt;</operator><name>constisnull</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ReleaseVariableStats</name><argument_list>(<argument><expr><name>vardata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_FLOAT8</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * OK, there's a Var and a Const we're dealing with here.  We need the
	 * Const to be a TSQuery, else we can't do anything useful.  We have to
	 * check this because the Var might be the TSQuery not the TSVector.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>Const</name> <operator>*</operator><operator>)</operator> <name>other</name><operator>)</operator><operator>-&gt;</operator><name>consttype</name> <operator>==</operator> <name>TSQUERYOID</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* tsvector @@ tsquery or the other way around */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>vardata</name><operator>.</operator><name>vartype</name></name> <operator>==</operator> <name>TSVECTOROID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>selec</name> <operator>=</operator> <call><name>tsquerysel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vardata</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>Const</name> <operator>*</operator><operator>)</operator> <name>other</name><operator>)</operator><operator>-&gt;</operator><name>constvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* If we can't see the query structure, must punt */</comment>
		<expr_stmt><expr><name>selec</name> <operator>=</operator> <name>DEFAULT_TS_MATCH_SEL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>ReleaseVariableStats</name><argument_list>(<argument><expr><name>vardata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CLAMP_PROBABILITY</name><argument_list>(<argument><expr><name>selec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_FLOAT8</name><argument_list>(<argument><expr><operator>(</operator><name>float8</name><operator>)</operator> <name>selec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 *	tsmatchjoinsel -- join selectivity of "@@"
 *
 * join selectivity function for tsvector @@ tsquery and tsquery @@ tsvector
 */</comment>
<function><type><name>Datum</name></type>
<name>tsmatchjoinsel</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* for the moment we just punt */</comment>
	<expr_stmt><expr><call><name>PG_RETURN_FLOAT8</name><argument_list>(<argument><expr><name>DEFAULT_TS_MATCH_SEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * @@ selectivity for tsvector var vs tsquery constant
 */</comment>
<function><type><specifier>static</specifier> <name>Selectivity</name></type>
<name>tsquerysel</name><parameter_list>(<parameter><decl><type><name>VariableStatData</name> <modifier>*</modifier></type><name>vardata</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>constval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Selectivity</name></type> <name>selec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name></decl>;</decl_stmt>

	<comment type="block">/* The caller made sure the const is a TSQuery, so get it now */</comment>
	<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>DatumGetTSQuery</name><argument_list>(<argument><expr><name>constval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Empty query matches nothing */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>Selectivity</name><operator>)</operator> <literal type="number">0.0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name><name>vardata</name><operator>-&gt;</operator><name>statsTuple</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_statistic</name></type> <name>stats</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AttStatsSlot</name></type> <name>sslot</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>stats</name> <operator>=</operator> <operator>(</operator><name>Form_pg_statistic</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name><name>vardata</name><operator>-&gt;</operator><name>statsTuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* MCELEM will be an array of TEXT elements for a tsvector column */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>get_attstatsslot</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sslot</name></expr></argument>, <argument><expr><name><name>vardata</name><operator>-&gt;</operator><name>statsTuple</name></name></expr></argument>,
							 <argument><expr><name>STATISTIC_KIND_MCELEM</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>,
							 <argument><expr><name>ATTSTATSSLOT_VALUES</name> <operator>|</operator> <name>ATTSTATSSLOT_NUMBERS</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * There is a most-common-elements slot for the tsvector Var, so
			 * use that.
			 */</comment>
			<expr_stmt><expr><name>selec</name> <operator>=</operator> <call><name>mcelem_tsquery_selec</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>sslot</name><operator>.</operator><name>values</name></name></expr></argument>, <argument><expr><name><name>sslot</name><operator>.</operator><name>nvalues</name></name></expr></argument>,
										 <argument><expr><name><name>sslot</name><operator>.</operator><name>numbers</name></name></expr></argument>, <argument><expr><name><name>sslot</name><operator>.</operator><name>nnumbers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free_attstatsslot</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* No most-common-elements info, so do without */</comment>
			<expr_stmt><expr><name>selec</name> <operator>=</operator> <call><name>tsquery_opr_selec_no_stats</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/*
		 * MCE stats count only non-null rows, so adjust for null rows.
		 */</comment>
		<expr_stmt><expr><name>selec</name> <operator>*=</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name><name>stats</name><operator>-&gt;</operator><name>stanullfrac</name></name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* No stats at all, so do without */</comment>
		<expr_stmt><expr><name>selec</name> <operator>=</operator> <call><name>tsquery_opr_selec_no_stats</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* we assume no nulls here, so no stanullfrac correction */</comment>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>selec</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Extract data from the pg_statistic arrays into useful format.
 */</comment>
<function><type><specifier>static</specifier> <name>Selectivity</name></type>
<name>mcelem_tsquery_selec</name><parameter_list>(<parameter><decl><type><name>TSQuery</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>mcelem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nmcelem</name></decl></parameter>,
					 <parameter><decl><type><name>float4</name> <modifier>*</modifier></type><name>numbers</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nnumbers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float4</name></type>		<name>minfreq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TextFreq</name>   <modifier>*</modifier></type><name>lookup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Selectivity</name></type> <name>selec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * There should be two more Numbers than Values, because the last two
	 * cells are taken for minimal and maximal frequency.  Punt if not.
	 *
	 * (Note: the MCELEM statistics slot definition allows for a third extra
	 * number containing the frequency of nulls, but we're not expecting that
	 * to appear for a tsvector column.)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>nnumbers</name> <operator>!=</operator> <name>nmcelem</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>tsquery_opr_selec_no_stats</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Transpose the data into a single array so we can use bsearch().
	 */</comment>
	<expr_stmt><expr><name>lookup</name> <operator>=</operator> <operator>(</operator><name>TextFreq</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TextFreq</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nmcelem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nmcelem</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/*
		 * The text Datums came from an array, so it cannot be compressed or
		 * stored out-of-line -- it's safe to use VARSIZE_ANY*.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>VARATT_IS_COMPRESSED</name><argument_list>(<argument><expr><name><name>mcelem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VARATT_IS_EXTERNAL</name><argument_list>(<argument><expr><name><name>mcelem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lookup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>element</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>mcelem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lookup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frequency</name> <operator>=</operator> <name><name>numbers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Grab the lowest frequency. compute_tsvector_stats() stored it for us in
	 * the one before the last cell of the Numbers array. See ts_typanalyze.c
	 */</comment>
	<expr_stmt><expr><name>minfreq</name> <operator>=</operator> <name><name>numbers</name><index>[<expr><name>nnumbers</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>selec</name> <operator>=</operator> <call><name>tsquery_opr_selec</name><argument_list>(<argument><expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GETOPERAND</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lookup</name></expr></argument>,
							  <argument><expr><name>nmcelem</name></expr></argument>, <argument><expr><name>minfreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>selec</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Traverse the tsquery in preorder, calculating selectivity as:
 *
 *	 selec(left_oper) * selec(right_oper) in AND &amp; PHRASE nodes,
 *
 *	 selec(left_oper) + selec(right_oper) -
 *		selec(left_oper) * selec(right_oper) in OR nodes,
 *
 *	 1 - select(oper) in NOT nodes
 *
 *	 histogram-based estimation in prefix VAL nodes
 *
 *	 freq[val] in exact VAL nodes, if the value is in MCELEM
 *	 min(freq[MCELEM]) / 2 in VAL nodes, if it is not
 *
 * The MCELEM array is already sorted (see ts_typanalyze.c), so we can use
 * binary search for determining freq[MCELEM].
 *
 * If we don't have stats for the tsvector, we still use this logic,
 * except we use default estimates for VAL nodes.  This case is signaled
 * by lookup == NULL.
 */</comment>
<function><type><specifier>static</specifier> <name>Selectivity</name></type>
<name>tsquery_opr_selec</name><parameter_list>(<parameter><decl><type><name>QueryItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>,
				  <parameter><decl><type><name>TextFreq</name> <modifier>*</modifier></type><name>lookup</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>float4</name></type> <name>minfreq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Selectivity</name></type> <name>selec</name></decl>;</decl_stmt>

	<comment type="block">/* since this function recurses, it could be driven to stack overflow */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QI_VAL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>QueryOperand</name> <modifier>*</modifier></type><name>oper</name> <init>= <expr><operator>(</operator><name>QueryOperand</name> <operator>*</operator><operator>)</operator> <name>item</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LexemeKey</name></type>	<name>key</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Prepare the key for bsearch().
		 */</comment>
		<expr_stmt><expr><name><name>key</name><operator>.</operator><name>lexeme</name></name> <operator>=</operator> <name>operand</name> <operator>+</operator> <name><name>oper</name><operator>-&gt;</operator><name>distance</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>oper</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>oper</name><operator>-&gt;</operator><name>prefix</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Prefix match, ie the query item is lexeme:* */</comment>
			<decl_stmt><decl><type><name>Selectivity</name></type> <name>matched</name></decl>,
						<decl><type ref="prev"/><name>allmces</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
						<decl><type ref="prev"/><name>n_matched</name></decl>;</decl_stmt>

			<comment type="block">/*
			 * Our strategy is to scan through the MCELEM list and combine the
			 * frequencies of the ones that match the prefix.  We then
			 * extrapolate the fraction of matching MCELEMs to the remaining
			 * rows, assuming that the MCELEMs are representative of the whole
			 * lexeme population in this respect.  (Compare
			 * histogram_selectivity().)  Note that these are most common
			 * elements not most common values, so they're not mutually
			 * exclusive.  We treat occurrences as independent events.
			 *
			 * This is only a good plan if we have a pretty fair number of
			 * MCELEMs available; we set the threshold at 100.  If no stats or
			 * insufficient stats, arbitrarily use DEFAULT_TS_MATCH_SEL*4.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>lookup</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>length</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><name>Selectivity</name><operator>)</operator> <operator>(</operator><name>DEFAULT_TS_MATCH_SEL</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>allmces</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>n_matched</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>TextFreq</name>   <modifier>*</modifier></type><name>t</name> <init>= <expr><name>lookup</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>tlen</name> <init>= <expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>element</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>tlen</name> <operator>&gt;=</operator> <name><name>key</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator>
					<call><name>strncmp</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>lexeme</name></name></expr></argument>, <argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>element</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name><name>key</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>matched</name> <operator>+=</operator> <name><name>t</name><operator>-&gt;</operator><name>frequency</name></name> <operator>-</operator> <name>matched</name> <operator>*</operator> <name><name>t</name><operator>-&gt;</operator><name>frequency</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>n_matched</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>allmces</name> <operator>+=</operator> <name><name>t</name><operator>-&gt;</operator><name>frequency</name></name> <operator>-</operator> <name>allmces</name> <operator>*</operator> <name><name>t</name><operator>-&gt;</operator><name>frequency</name></name></expr>;</expr_stmt>
			</block_content>}</block></for>

			<comment type="block">/* Clamp to ensure sanity in the face of roundoff error */</comment>
			<expr_stmt><expr><call><name>CLAMP_PROBABILITY</name><argument_list>(<argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CLAMP_PROBABILITY</name><argument_list>(<argument><expr><name>allmces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>selec</name> <operator>=</operator> <name>matched</name> <operator>+</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>allmces</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>n_matched</name> <operator>/</operator> <name>length</name><operator>)</operator></expr>;</expr_stmt>

			<comment type="block">/*
			 * In any case, never believe that a prefix match has selectivity
			 * less than we would assign for a non-MCELEM lexeme.  This
			 * preserves the property that "word:*" should be estimated to
			 * match at least as many rows as "word" would be.
			 */</comment>
			<expr_stmt><expr><name>selec</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><call><name>Min</name><argument_list>(<argument><expr><name>DEFAULT_TS_MATCH_SEL</name></expr></argument>, <argument><expr><name>minfreq</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>selec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* Regular exact lexeme match */</comment>
			<decl_stmt><decl><type><name>TextFreq</name>   <modifier>*</modifier></type><name>searchres</name></decl>;</decl_stmt>

			<comment type="block">/* If no stats for the variable, use DEFAULT_TS_MATCH_SEL */</comment>
			<if_stmt><if>if <condition>(<expr><name>lookup</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><name>Selectivity</name><operator>)</operator> <name>DEFAULT_TS_MATCH_SEL</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>searchres</name> <operator>=</operator> <operator>(</operator><name>TextFreq</name> <operator>*</operator><operator>)</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>lookup</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
											 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TextFreq</name></expr></argument>)</argument_list></sizeof></expr></argument>,
											 <argument><expr><name>compare_lexeme_textfreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>searchres</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * The element is in MCELEM.  Return precise selectivity (or
				 * at least as precise as ANALYZE could find out).
				 */</comment>
				<expr_stmt><expr><name>selec</name> <operator>=</operator> <name><name>searchres</name><operator>-&gt;</operator><name>frequency</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/*
				 * The element is not in MCELEM.  Punt, but assume that the
				 * selectivity cannot be more than minfreq / 2.
				 */</comment>
				<expr_stmt><expr><name>selec</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>DEFAULT_TS_MATCH_SEL</name></expr></argument>, <argument><expr><name>minfreq</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Current TSQuery node is an operator */</comment>
		<decl_stmt><decl><type><name>Selectivity</name></type> <name>s1</name></decl>,
					<decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>oper</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>OP_NOT</name></expr>:</case>
				<expr_stmt><expr><name>selec</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <call><name>tsquery_opr_selec</name><argument_list>(<argument><expr><name>item</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>operand</name></expr></argument>,
												<argument><expr><name>lookup</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>minfreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>OP_PHRASE</name></expr>:</case>
			<case>case <expr><name>OP_AND</name></expr>:</case>
				<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>tsquery_opr_selec</name><argument_list>(<argument><expr><name>item</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>operand</name></expr></argument>,
									   <argument><expr><name>lookup</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>minfreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>tsquery_opr_selec</name><argument_list>(<argument><expr><name>item</name> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>operand</name></expr></argument>,
									   <argument><expr><name>lookup</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>minfreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>selec</name> <operator>=</operator> <name>s1</name> <operator>*</operator> <name>s2</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>OP_OR</name></expr>:</case>
				<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>tsquery_opr_selec</name><argument_list>(<argument><expr><name>item</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>operand</name></expr></argument>,
									   <argument><expr><name>lookup</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>minfreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>tsquery_opr_selec</name><argument_list>(<argument><expr><name>item</name> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>operand</name></expr></argument>,
									   <argument><expr><name>lookup</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>minfreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>selec</name> <operator>=</operator> <name>s1</name> <operator>+</operator> <name>s2</name> <operator>-</operator> <name>s1</name> <operator>*</operator> <name>s2</name></expr>;</expr_stmt>
				<break>break;</break>

			<default>default:</default>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized operator: %d"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>oper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>selec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>		<comment type="block">/* keep compiler quiet */</comment>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Clamp intermediate results to stay sane despite roundoff error */</comment>
	<expr_stmt><expr><call><name>CLAMP_PROBABILITY</name><argument_list>(<argument><expr><name>selec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>selec</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * bsearch() comparator for a lexeme (non-NULL terminated string with length)
 * and a TextFreq. Use length, then byte-for-byte comparison, because that's
 * how ANALYZE code sorted data before storing it in a statistic tuple.
 * See ts_typanalyze.c for details.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_lexeme_textfreq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>e1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>e2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>LexemeKey</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>LexemeKey</name> <operator>*</operator><operator>)</operator> <name>e1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TextFreq</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TextFreq</name> <operator>*</operator><operator>)</operator> <name>e2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len1</name></decl>,
				<decl><type ref="prev"/><name>len2</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len1</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len2</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>element</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Compare lengths first, possibly avoiding a strncmp call */</comment>
	<if_stmt><if>if <condition>(<expr><name>len1</name> <operator>&gt;</operator> <name>len2</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>len1</name> <operator>&lt;</operator> <name>len2</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Fall back on byte-for-byte comparison */</comment>
	<return>return <expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>, <argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>element</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
