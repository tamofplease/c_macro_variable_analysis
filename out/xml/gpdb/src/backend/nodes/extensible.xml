<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/nodes/extensible.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * extensible.c
 *	  Support for extensible node types
 *
 * Loadable modules can define what are in effect new types of nodes using
 * the routines in this file.  All such nodes are flagged T_ExtensibleNode,
 * with the extnodename field distinguishing the specific type.  Use
 * RegisterExtensibleNodeMethods to register a new type of extensible node,
 * and GetExtensibleNodeMethods to get information about a previously
 * registered type of extensible node.
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/nodes/extensible.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/extensible.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/hsearch.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>extensible_node_methods</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>custom_scan_methods</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>char</name></type>		<name><name>extnodename</name><index>[<expr><name>EXTNODENAME_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>extnodemethods</name></decl>;</decl_stmt>
}</block></struct></type> <name>ExtensibleNodeEntry</name>;</typedef>

<comment type="block">/*
 * An internal function to register a new callback structure
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>RegisterExtensibleNodeEntry</name><parameter_list>(<parameter><decl><type><name>HTAB</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_htable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>htable_label</name></decl></parameter>,
							<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extnodename</name></decl></parameter>,
							<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>extnodemethods</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtensibleNodeEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_htable</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HASHCTL</name></type>		<name>ctl</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HASHCTL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <name>EXTNODENAME_MAX_LEN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ExtensibleNodeEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<expr_stmt><expr><operator>*</operator><name>p_htable</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><name>htable_label</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>HASH_ELEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>extnodename</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>EXTNODENAME_MAX_LEN</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"extensible node name is too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>ExtensibleNodeEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><operator>*</operator><name>p_htable</name></expr></argument>,
												<argument><expr><name>extnodename</name></expr></argument>,
												<argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DUPLICATE_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"extensible node type \"%s\" already exists"</literal></expr></argument>,
						<argument><expr><name>extnodename</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>extnodemethods</name></name> <operator>=</operator> <name>extnodemethods</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Register a new type of extensible node.
 */</comment>
<function><type><name>void</name></type>
<name>RegisterExtensibleNodeMethods</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExtensibleNodeMethods</name> <modifier>*</modifier></type><name>methods</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>RegisterExtensibleNodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extensible_node_methods</name></expr></argument>,
								<argument><expr><literal type="string">"Extensible Node Methods"</literal></expr></argument>,
								<argument><expr><name><name>methods</name><operator>-&gt;</operator><name>extnodename</name></name></expr></argument>,
								<argument><expr><name>methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Register a new type of custom scan node
 */</comment>
<function><type><name>void</name></type>
<name>RegisterCustomScanMethods</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CustomScanMethods</name> <modifier>*</modifier></type><name>methods</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>RegisterExtensibleNodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>custom_scan_methods</name></expr></argument>,
								<argument><expr><literal type="string">"Custom Scan Methods"</literal></expr></argument>,
								<argument><expr><name><name>methods</name><operator>-&gt;</operator><name>CustomName</name></name></expr></argument>,
								<argument><expr><name>methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * An internal routine to get an ExtensibleNodeEntry by the given identifier
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>GetExtensibleNodeEntry</name><parameter_list>(<parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>htable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extnodename</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtensibleNodeEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>htable</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>ExtensibleNodeEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>htable</name></expr></argument>,
													<argument><expr><name>extnodename</name></expr></argument>,
													<argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>missing_ok</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ExtensibleNodeMethods \"%s\" was not registered"</literal></expr></argument>,
						<argument><expr><name>extnodename</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>extnodemethods</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the methods for a given type of extensible node.
 */</comment>
<function><type><specifier>const</specifier> <name>ExtensibleNodeMethods</name> <modifier>*</modifier></type>
<name>GetExtensibleNodeMethods</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extnodename</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><specifier>const</specifier> <name>ExtensibleNodeMethods</name> <operator>*</operator><operator>)</operator>
		<call><name>GetExtensibleNodeEntry</name><argument_list>(<argument><expr><name>extensible_node_methods</name></expr></argument>,
							   <argument><expr><name>extnodename</name></expr></argument>,
							   <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the methods for a given name of CustomScanMethods
 */</comment>
<function><type><specifier>const</specifier> <name>CustomScanMethods</name> <modifier>*</modifier></type>
<name>GetCustomScanMethods</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CustomName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><specifier>const</specifier> <name>CustomScanMethods</name> <operator>*</operator><operator>)</operator>
		<call><name>GetExtensibleNodeEntry</name><argument_list>(<argument><expr><name>custom_scan_methods</name></expr></argument>,
							   <argument><expr><name>CustomName</name></expr></argument>,
							   <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
