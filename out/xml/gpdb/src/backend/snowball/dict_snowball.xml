<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/snowball/dict_snowball.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * dict_snowball.c
 *		Snowball dictionary
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/snowball/dict_snowball.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_utils.h"</cpp:file></cpp:include>

<comment type="block">/* Some platforms define MAXINT and/or MININT, causing conflicts */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MAXINT</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAXINT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MININT</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MININT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Now we can include the original Snowball header.h */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/header.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_ISO_8859_1_danish.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_ISO_8859_1_dutch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_ISO_8859_1_english.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_ISO_8859_1_finnish.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_ISO_8859_1_french.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_ISO_8859_1_german.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_ISO_8859_1_indonesian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_ISO_8859_1_irish.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_ISO_8859_1_italian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_ISO_8859_1_norwegian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_ISO_8859_1_porter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_ISO_8859_1_portuguese.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_ISO_8859_1_spanish.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_ISO_8859_1_swedish.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_ISO_8859_2_hungarian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_ISO_8859_2_romanian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_KOI8_R_russian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_arabic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_danish.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_dutch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_english.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_finnish.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_french.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_german.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_hungarian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_indonesian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_irish.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_italian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_lithuanian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_nepali.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_norwegian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_porter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_portuguese.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_romanian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_russian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_spanish.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_swedish.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_tamil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowball/libstemmer/stem_UTF_8_turkish.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dsnowball_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dsnowball_lexize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* List of supported modules */</comment>
<typedef>typedef <type><struct>struct <name>stemmer_module</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_enc</name></type>		<name>enc</name></decl>;</decl_stmt>
	<function_decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type>(<modifier>*</modifier><name>create</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type>		(<modifier>*</modifier><name>close</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>int</name></type>			(<modifier>*</modifier><name>stem</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>stemmer_module</name>;</typedef>

<comment type="block">/* Args: stemmer name, PG code for encoding, Snowball's name for encoding */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STEMMER_MODULE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>,<parameter><type><name>senc</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>{#name, enc, name##_##senc##_create_env, name##_##senc##_close_env, name##_##senc##_stem}</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>stemmer_module</name></type> <name><name>stemmer_modules</name><index>[]</index></name> <init>=
<expr><block>{
	<comment type="block">/*
	 * Stemmers list from Snowball distribution
	 */</comment>
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>danish</name></expr></argument>, <argument><expr><name>PG_LATIN1</name></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>dutch</name></expr></argument>, <argument><expr><name>PG_LATIN1</name></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>english</name></expr></argument>, <argument><expr><name>PG_LATIN1</name></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>finnish</name></expr></argument>, <argument><expr><name>PG_LATIN1</name></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>french</name></expr></argument>, <argument><expr><name>PG_LATIN1</name></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>german</name></expr></argument>, <argument><expr><name>PG_LATIN1</name></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>indonesian</name></expr></argument>, <argument><expr><name>PG_LATIN1</name></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>irish</name></expr></argument>, <argument><expr><name>PG_LATIN1</name></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>italian</name></expr></argument>, <argument><expr><name>PG_LATIN1</name></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>norwegian</name></expr></argument>, <argument><expr><name>PG_LATIN1</name></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>porter</name></expr></argument>, <argument><expr><name>PG_LATIN1</name></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>portuguese</name></expr></argument>, <argument><expr><name>PG_LATIN1</name></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>spanish</name></expr></argument>, <argument><expr><name>PG_LATIN1</name></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>swedish</name></expr></argument>, <argument><expr><name>PG_LATIN1</name></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>hungarian</name></expr></argument>, <argument><expr><name>PG_LATIN2</name></expr></argument>, <argument><expr><name>ISO_8859_2</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>romanian</name></expr></argument>, <argument><expr><name>PG_LATIN2</name></expr></argument>, <argument><expr><name>ISO_8859_2</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>russian</name></expr></argument>, <argument><expr><name>PG_KOI8R</name></expr></argument>, <argument><expr><name>KOI8_R</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>arabic</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>danish</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>dutch</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>english</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>finnish</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>french</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>german</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>hungarian</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>indonesian</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>irish</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>italian</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>lithuanian</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>nepali</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>norwegian</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>porter</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>portuguese</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>romanian</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>russian</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>spanish</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>swedish</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>tamil</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>turkish</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>,

	<comment type="block">/*
	 * Stemmer with PG_SQL_ASCII encoding should be valid for any server
	 * encoding
	 */</comment>
	<expr><call><name>STEMMER_MODULE</name><argument_list>(<argument><expr><name>english</name></expr></argument>, <argument><expr><name>PG_SQL_ASCII</name></expr></argument>, <argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>,

	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr> <comment type="block">/* list end marker */</comment>
}</block></expr></init></decl>;</decl_stmt>


<typedef>typedef <type><struct>struct <name>DictSnowball</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StopList</name></type>	<name>stoplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>needrecode</name></decl>;</decl_stmt>		<comment type="block">/* needs recoding before/after call stem */</comment>
	<function_decl><type><name>int</name></type>			(<modifier>*</modifier><name>stem</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>;</function_decl>

	<comment type="block">/*
	 * snowball saves alloced memory between calls, so we should run it in our
	 * private memory context. Note, init function is executed in long lived
	 * context, so we just remember CurrentMemoryContext
	 */</comment>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>dictCtx</name></decl>;</decl_stmt>
}</block></struct></type> <name>DictSnowball</name>;</typedef>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>locate_stem_module</name><parameter_list>(<parameter><decl><type><name>DictSnowball</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>stemmer_module</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * First, try to find exact match of stemmer module. Stemmer with
	 * PG_SQL_ASCII encoding is treated as working with any server encoding
	 */</comment>
	<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name>stemmer_modules</name></expr>;</init> <condition><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>enc</name></name> <operator>==</operator> <name>PG_SQL_ASCII</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>enc</name></name> <operator>==</operator> <call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
			<call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>stem</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>stem</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <call><name><name>m</name><operator>-&gt;</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>needrecode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Second, try to find stemmer for needed language for UTF8 encoding.
	 */</comment>
	<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name>stemmer_modules</name></expr>;</init> <condition><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>enc</name></name> <operator>==</operator> <name>PG_UTF8</name> <operator>&amp;&amp;</operator> <call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>stem</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>stem</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <call><name><name>m</name><operator>-&gt;</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>needrecode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"no Snowball stemmer available for language \"%s\" and encoding \"%s\""</literal></expr></argument>,
					<argument><expr><name>lang</name></expr></argument>, <argument><expr><call><name>GetDatabaseEncodingName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>dsnowball_init</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>dictoptions</name> <init>= <expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DictSnowball</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>stoploaded</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>DictSnowball</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DictSnowball</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>dictoptions</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>defel</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"stopwords"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>stoploaded</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"multiple StopWords parameters"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>readstoplist</name><argument_list>(<argument><expr><call><name>defGetString</name><argument_list>(<argument><expr><name>defel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>stoplist</name></name></expr></argument>, <argument><expr><name>lowerstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>stoploaded</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>stem</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"multiple Language parameters"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>locate_stem_module</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>defGetString</name><argument_list>(<argument><expr><name>defel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unrecognized Snowball parameter: \"%s\""</literal></expr></argument>,
							<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>stem</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"missing Language parameter"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>dictCtx</name></name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>dsnowball_lexize</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DictSnowball</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>DictSnowball</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>len</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>txt</name> <init>= <expr><call><name>lowerstr_with_len</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSLexeme</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>txt</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>searchstoplist</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>stoplist</name></name><operator>)</operator></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>saveCtx</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * recode to utf8 if stemmer is utf8 and doesn't match server encoding
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>needrecode</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>recoded</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>recoded</name> <operator>=</operator> <call><name>pg_server_to_any</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>recoded</name> <operator>!=</operator> <name>txt</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>txt</name> <operator>=</operator> <name>recoded</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* see comment about d-&gt;dictCtx */</comment>
		<expr_stmt><expr><name>saveCtx</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>dictCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SN_set_current</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>symbol</name> <operator>*</operator><operator>)</operator> <name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>stem</name></name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>saveCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>txt</name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>z</name><operator>-&gt;</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>txt</name><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* back recode if needed */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>needrecode</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>recoded</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>recoded</name> <operator>=</operator> <call><name>pg_any_to_server</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>recoded</name> <operator>!=</operator> <name>txt</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>txt</name> <operator>=</operator> <name>recoded</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>lexeme</name></name> <operator>=</operator> <name>txt</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
