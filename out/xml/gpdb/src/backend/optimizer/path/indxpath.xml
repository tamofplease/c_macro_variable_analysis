<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/optimizer/path/indxpath.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * indxpath.c
 *	  Routines to determine which indexes are usable for scanning a
 *	  given relation, and create Paths accordingly.
 *
 * Portions Copyright (c) 2006-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/optimizer/path/indxpath.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/stratnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/sysattr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_am.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_operator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opfamily.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/supportnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/cost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/optimizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/pathnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/paths.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/prep.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/restrictinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/selfuncs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/subselect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parsetree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/index_selfuncs.h"</cpp:file></cpp:include>


<comment type="block">/* XXX see PartCollMatchesExprColl */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IndexCollMatchesExprColl</name><parameter_list>(<parameter><type><name>idxcollation</name></type></parameter>, <parameter><type><name>exprcollation</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((idxcollation) == InvalidOid || (idxcollation) == (exprcollation))</cpp:value></cpp:define>

<comment type="block">/* Whether we are looking for plain indexscan, bitmap scan, or either */</comment>
<typedef>typedef <type><enum>enum
<block>{
	<decl><name>ST_INDEXSCAN</name></decl>,				<comment type="block">/* must support amgettuple */</comment>
	<decl><name>ST_BITMAPSCAN</name></decl>,				<comment type="block">/* must support amgetbitmap */</comment>
	<decl><name>ST_ANYSCAN</name></decl>					<comment type="block">/* either is okay */</comment>
}</block></enum></type> <name>ScanTypeControl</name>;</typedef>

<comment type="block">/* Data structure for collecting qual clauses that match an index */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>bool</name></type>		<name>nonempty</name></decl>;</decl_stmt>		<comment type="block">/* True if lists are not all empty */</comment>
	<comment type="block">/* Lists of IndexClause nodes, one list per index column */</comment>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name><name>indexclauses</name><index>[<expr><name>INDEX_MAX_KEYS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>IndexClauseSet</name>;</typedef>

<comment type="block">/* Per-path data used within choose_bitmap_and() */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>Path</name>	   <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>			<comment type="block">/* IndexPath, BitmapAndPath, or BitmapOrPath */</comment>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>quals</name></decl>;</decl_stmt>			<comment type="block">/* the WHERE clauses it uses */</comment>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>preds</name></decl>;</decl_stmt>			<comment type="block">/* predicates of its partial index(es) */</comment>
	<decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>clauseids</name></decl>;</decl_stmt>		<comment type="block">/* quals+preds represented as a bitmapset */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>unclassifiable</name></decl>;</decl_stmt> <comment type="block">/* has too many quals+preds to process? */</comment>
}</block></struct></type> <name>PathClauseUsage</name>;</typedef>

<comment type="block">/* Callback argument for ec_member_matches_indexcol */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl>;</decl_stmt>		<comment type="block">/* index we're considering */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>indexcol</name></decl>;</decl_stmt>		<comment type="block">/* index column we want to match to */</comment>
}</block></struct></type> <name>ec_member_matches_arg</name>;</typedef>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>consider_index_join_clauses</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
										<parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
										<parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>rclauseset</name></decl></parameter>,
										<parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>jclauseset</name></decl></parameter>,
										<parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>eclauseset</name></decl></parameter>,
										<parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>bitindexpaths</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>consider_index_join_outer_rels</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
										   <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
										   <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>rclauseset</name></decl></parameter>,
										   <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>jclauseset</name></decl></parameter>,
										   <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>eclauseset</name></decl></parameter>,
										   <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>bitindexpaths</name></decl></parameter>,
										   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>indexjoinclauses</name></decl></parameter>,
										   <parameter><decl><type><name>int</name></type> <name>considered_clauses</name></decl></parameter>,
										   <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>considered_relids</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_join_index_paths</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
								 <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
								 <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>rclauseset</name></decl></parameter>,
								 <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>jclauseset</name></decl></parameter>,
								 <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>eclauseset</name></decl></parameter>,
								 <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>bitindexpaths</name></decl></parameter>,
								 <parameter><decl><type><name>Relids</name></type> <name>relids</name></decl></parameter>,
								 <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>considered_relids</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>eclass_already_used</name><parameter_list>(<parameter><decl><type><name>EquivalenceClass</name> <modifier>*</modifier></type><name>parent_ec</name></decl></parameter>, <parameter><decl><type><name>Relids</name></type> <name>oldrelids</name></decl></parameter>,
								<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>indexjoinclauses</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>bms_equal_any</name><parameter_list>(<parameter><decl><type><name>Relids</name></type> <name>relids</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>relids_list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_index_paths</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
							<parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>clauses</name></decl></parameter>,
							<parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>bitindexpaths</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>build_index_paths</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
							   <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>clauses</name></decl></parameter>,
							   <parameter><decl><type><name>bool</name></type> <name>useful_predicate</name></decl></parameter>,
							   <parameter><decl><type><name>ScanTypeControl</name></type> <name>scantype</name></decl></parameter>,
							   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>skip_nonnative_saop</name></decl></parameter>,
							   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>skip_lower_saop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>build_paths_for_OR</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
								<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>clauses</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>other_clauses</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>generate_bitmap_or_paths</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
									  <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>clauses</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>other_clauses</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Path</name> <modifier>*</modifier></type><name>choose_bitmap_and</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
							   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>paths</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>path_usage_comparator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Cost</name></type> <name>bitmap_scan_cost_est</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
								 <parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>ipath</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Cost</name></type> <name>bitmap_and_cost_est</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
								<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>paths</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PathClauseUsage</name> <modifier>*</modifier></type><name>classify_index_clause_usage</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
													<parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>clauselist</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Relids</name></type> <name>get_bitmap_tree_required_outer</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>bitmapqual</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>find_indexpath_quals</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>bitmapqual</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>quals</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>preds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>find_list_position</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodelist</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_index_only</name><parameter_list>(<parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>get_loop_count</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>cur_relid</name></decl></parameter>, <parameter><decl><type><name>Relids</name></type> <name>outer_relids</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>adjust_rowcount_for_semijoins</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
											<parameter><decl><type><name>Index</name></type> <name>cur_relid</name></decl></parameter>,
											<parameter><decl><type><name>Index</name></type> <name>outer_relid</name></decl></parameter>,
											<parameter><decl><type><name>double</name></type> <name>rowcount</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>approximate_joinrel_size</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Relids</name></type> <name>relids</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>match_restriction_clauses_to_index</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
											   <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
											   <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>clauseset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>match_join_clauses_to_index</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
										<parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
										<parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>clauseset</name></decl></parameter>,
										<parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>joinorclauses</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>match_eclass_clauses_to_index</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
										  <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
										  <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>clauseset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>match_clauses_to_index</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
								   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>clauses</name></decl></parameter>,
								   <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
								   <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>clauseset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>match_clause_to_index</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
								  <parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
								  <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
								  <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>clauseset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>IndexClause</name> <modifier>*</modifier></type><name>match_clause_to_indexcol</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
											 <parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
											 <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
											 <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>IndexClause</name> <modifier>*</modifier></type><name>match_boolean_index_clause</name><parameter_list>(<parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
											   <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>, <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>IndexClause</name> <modifier>*</modifier></type><name>match_opclause_to_indexcol</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
											   <parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
											   <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
											   <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>IndexClause</name> <modifier>*</modifier></type><name>match_funcclause_to_indexcol</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
												 <parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
												 <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
												 <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>IndexClause</name> <modifier>*</modifier></type><name>get_index_clause_from_support</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
												  <parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
												  <parameter><decl><type><name>Oid</name></type> <name>funcid</name></decl></parameter>,
												  <parameter><decl><type><name>int</name></type> <name>indexarg</name></decl></parameter>,
												  <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
												  <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>IndexClause</name> <modifier>*</modifier></type><name>match_saopclause_to_indexcol</name><parameter_list>(<parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
												 <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
												 <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>IndexClause</name> <modifier>*</modifier></type><name>match_rowcompare_to_indexcol</name><parameter_list>(<parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
												 <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
												 <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>IndexClause</name> <modifier>*</modifier></type><name>expand_indexqual_rowcompare</name><parameter_list>(<parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
												<parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
												<parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
												<parameter><decl><type><name>Oid</name></type> <name>expr_op</name></decl></parameter>,
												<parameter><decl><type><name>bool</name></type> <name>var_on_left</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>match_pathkeys_to_index</name><parameter_list>(<parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>pathkeys</name></decl></parameter>,
									<parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>orderby_clauses_p</name></decl></parameter>,
									<parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>clause_columns_p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Expr</name> <modifier>*</modifier></type><name>match_clause_to_ordering_op</name><parameter_list>(<parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
										 <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>pk_opfamily</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ec_member_matches_indexcol</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
									   <parameter><decl><type><name>EquivalenceClass</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>EquivalenceMember</name> <modifier>*</modifier></type><name>em</name></decl></parameter>,
									   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * create_index_paths()
 *	  Generate all interesting index paths for the given relation.
 *	  Candidate paths are added to the rel's pathlist (using add_path).
 *
 * To be considered for an index scan, an index must match one or more
 * restriction clauses or join clauses from the query's qual condition,
 * or match the query's ORDER BY condition, or have a predicate that
 * matches the query's qual condition.
 *
 * There are two basic kinds of index scans.  A "plain" index scan uses
 * only restriction clauses (possibly none at all) in its indexqual,
 * so it can be applied in any context.  A "parameterized" index scan uses
 * join clauses (plus restriction clauses, if available) in its indexqual.
 * When joining such a scan to one of the relations supplying the other
 * variables used in its indexqual, the parameterized scan must appear as
 * the inner relation of a nestloop join; it can't be used on the outer side,
 * nor in a merge or hash join.  In that context, values for the other rels'
 * attributes are available and fixed during any one scan of the indexpath.
 *
 * An IndexPath is generated and submitted to add_path() for each plain or
 * parameterized index scan this routine deems potentially interesting for
 * the current query.
 *
 * 'rel' is the relation for which we want to generate index paths
 *
 * Note: check_index_predicates() must have been run previously for this rel.
 *
 * Note: in cases involving LATERAL references in the relation's tlist, it's
 * possible that rel-&gt;lateral_relids is nonempty.  Currently, we include
 * lateral_relids into the parameterization reported for each path, but don't
 * take it into account otherwise.  The fact that any such rels *must* be
 * available as parameter sources perhaps should influence our choices of
 * index quals ... but for now, it doesn't seem worth troubling over.
 * In particular, comments below about "unparameterized" paths should be read
 * as meaning "unparameterized so far as the indexquals are concerned".
 */</comment>
<function><type><name>void</name></type>
<name>create_index_paths</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>indexpaths</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>bitindexpaths</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>bitjoinpaths</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>joinorclauses</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IndexClauseSet</name></type> <name>rclauseset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IndexClauseSet</name></type> <name>jclauseset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IndexClauseSet</name></type> <name>eclauseset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<comment type="block">/* Skip the whole mess if no indexes */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>indexlist</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Bitmap paths are collected and then dealt with at the end */</comment>
	<expr_stmt><expr><name>bitindexpaths</name> <operator>=</operator> <name>bitjoinpaths</name> <operator>=</operator> <name>joinorclauses</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

	<comment type="block">/* Examine each index in turn */</comment>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>rel-&gt;indexlist</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><operator>(</operator><name>IndexOptInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Protect limited-size array in IndexClauseSets */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>nkeycolumns</name></name> <operator>&lt;=</operator> <name>INDEX_MAX_KEYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Ignore partial indexes that do not match the query.
		 * (generate_bitmap_or_paths() might be able to do something with
		 * them, but that's of no concern here.)
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>indpred</name></name> <operator>!=</operator> <name>NIL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>index</name><operator>-&gt;</operator><name>predOK</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Identify the restriction clauses that can match the index.
		 */</comment>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rclauseset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rclauseset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>match_restriction_clauses_to_index</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rclauseset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Build index paths from the restriction clauses.  These will be
		 * non-parameterized paths.  Plain paths go directly to add_path(),
		 * bitmap paths are added to bitindexpaths to be handled below.
		 */</comment>
		<expr_stmt><expr><call><name>get_index_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rclauseset</name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>bitindexpaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Identify the join clauses that can match the index.  For the moment
		 * we keep them separate from the restriction clauses.  Note that this
		 * step finds only "loose" join clauses that have not been merged into
		 * EquivalenceClasses.  Also, collect join OR clauses for later.
		 */</comment>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jclauseset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jclauseset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>match_join_clauses_to_index</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>jclauseset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>joinorclauses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Look for EquivalenceClasses that can generate joinclauses matching
		 * the index.
		 */</comment>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eclauseset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>eclauseset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>match_eclass_clauses_to_index</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name>eclauseset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If we found any plain or eclass join clauses, build parameterized
		 * index paths using them.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>jclauseset</name><operator>.</operator><name>nonempty</name></name> <operator>||</operator> <name><name>eclauseset</name><operator>.</operator><name>nonempty</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>consider_index_join_clauses</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>rclauseset</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>jclauseset</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>eclauseset</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>bitjoinpaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/*
	 * Generate BitmapOrPaths for any suitable OR-clauses present in the
	 * restriction list.  Add these to bitindexpaths.
	 */</comment>
	<expr_stmt><expr><name>indexpaths</name> <operator>=</operator> <call><name>generate_bitmap_or_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,
										  <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>baserestrictinfo</name></name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bitindexpaths</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>bitindexpaths</name></expr></argument>, <argument><expr><name>indexpaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Likewise, generate BitmapOrPaths for any suitable OR-clauses present in
	 * the joinclause list.  Add these to bitjoinpaths.
	 */</comment>
	<expr_stmt><expr><name>indexpaths</name> <operator>=</operator> <call><name>generate_bitmap_or_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,
										  <argument><expr><name>joinorclauses</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>baserestrictinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bitjoinpaths</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>bitjoinpaths</name></expr></argument>, <argument><expr><name>indexpaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we found anything usable, generate a BitmapHeapPath for the most
	 * promising combination of restriction bitmap index paths.  Note there
	 * will be only one such path no matter how many indexes exist.  This
	 * should be sufficient since there's basically only one figure of merit
	 * (total cost) for such a path.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>bitindexpaths</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Path</name>	   <modifier>*</modifier></type><name>bitmapqual</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BitmapHeapPath</name> <modifier>*</modifier></type><name>bpath</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>bitmapqual</name> <operator>=</operator> <call><name>choose_bitmap_and</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>bitindexpaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>bpath</name> <operator>=</operator> <call><name>create_bitmap_heap_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>bitmapqual</name></expr></argument>,
										<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>lateral_relids</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_path</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name>bpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* create a partial bitmap heap path */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>consider_parallel</name></name> <operator>&amp;&amp;</operator> <name><name>rel</name><operator>-&gt;</operator><name>lateral_relids</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>create_partial_bitmap_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>bitmapqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Likewise, if we found anything usable, generate BitmapHeapPaths for the
	 * most promising combinations of join bitmap index paths.  Our strategy
	 * is to generate one such path for each distinct parameterization seen
	 * among the available bitmap index paths.  This may look pretty
	 * expensive, but usually there won't be very many distinct
	 * parameterizations.  (This logic is quite similar to that in
	 * consider_index_join_clauses, but we're working with whole paths not
	 * individual clauses.)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>bitjoinpaths</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>path_outer</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>all_path_outers</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * path_outer holds the parameterization of each path in bitjoinpaths
		 * (to save recalculating that several times), while all_path_outers
		 * holds all distinct parameterization sets.
		 */</comment>
		<expr_stmt><expr><name>path_outer</name> <operator>=</operator> <name>all_path_outers</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>bitjoinpaths</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Path</name>	   <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Relids</name></type>		<name>required_outer</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>required_outer</name> <operator>=</operator> <call><name>get_bitmap_tree_required_outer</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>path_outer</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>path_outer</name></expr></argument>, <argument><expr><name>required_outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bms_equal_any</name><argument_list>(<argument><expr><name>required_outer</name></expr></argument>, <argument><expr><name>all_path_outers</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>all_path_outers</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>all_path_outers</name></expr></argument>, <argument><expr><name>required_outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block>

		<comment type="block">/* Now, for each distinct parameterization set ... */</comment>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>all_path_outers</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Relids</name></type>		<name>max_outers</name> <init>= <expr><operator>(</operator><name>Relids</name><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>this_path_set</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Path</name>	   <modifier>*</modifier></type><name>bitmapqual</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Relids</name></type>		<name>required_outer</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>double</name></type>		<name>loop_count</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>BitmapHeapPath</name> <modifier>*</modifier></type><name>bpath</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lcp</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lco</name></decl>;</decl_stmt>

			<comment type="block">/* Identify all the bitmap join paths needing no more than that */</comment>
			<expr_stmt><expr><name>this_path_set</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
			<macro><name>forboth</name><argument_list>(<argument>lcp</argument>, <argument>bitjoinpaths</argument>, <argument>lco</argument>, <argument>path_outer</argument>)</argument_list></macro>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Path</name>	   <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Relids</name></type>		<name>p_outers</name> <init>= <expr><operator>(</operator><name>Relids</name><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lco</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>bms_is_subset</name><argument_list>(<argument><expr><name>p_outers</name></expr></argument>, <argument><expr><name>max_outers</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>this_path_set</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>this_path_set</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>

			<comment type="block">/*
			 * Add in restriction bitmap paths, since they can be used
			 * together with any join paths.
			 */</comment>
			<expr_stmt><expr><name>this_path_set</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>this_path_set</name></expr></argument>, <argument><expr><name>bitindexpaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Select best AND combination for this parameterization */</comment>
			<expr_stmt><expr><name>bitmapqual</name> <operator>=</operator> <call><name>choose_bitmap_and</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>this_path_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* And push that path into the mix */</comment>
			<expr_stmt><expr><name>required_outer</name> <operator>=</operator> <call><name>get_bitmap_tree_required_outer</name><argument_list>(<argument><expr><name>bitmapqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>loop_count</name> <operator>=</operator> <call><name>get_loop_count</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>required_outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>bpath</name> <operator>=</operator> <call><name>create_bitmap_heap_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>bitmapqual</name></expr></argument>,
											<argument><expr><name>required_outer</name></expr></argument>, <argument><expr><name>loop_count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>add_path</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name>bpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * consider_index_join_clauses
 *	  Given sets of join clauses for an index, decide which parameterized
 *	  index paths to build.
 *
 * Plain indexpaths are sent directly to add_path, while potential
 * bitmap indexpaths are added to *bitindexpaths for later processing.
 *
 * 'rel' is the index's heap relation
 * 'index' is the index for which we want to generate paths
 * 'rclauseset' is the collection of indexable restriction clauses
 * 'jclauseset' is the collection of indexable simple join clauses
 * 'eclauseset' is the collection of indexable clauses from EquivalenceClasses
 * '*bitindexpaths' is the list to add bitmap paths to
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>consider_index_join_clauses</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
							<parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
							<parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>rclauseset</name></decl></parameter>,
							<parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>jclauseset</name></decl></parameter>,
							<parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>eclauseset</name></decl></parameter>,
							<parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>bitindexpaths</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>considered_clauses</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>considered_relids</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>indexcol</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * The strategy here is to identify every potentially useful set of outer
	 * rels that can provide indexable join clauses.  For each such set,
	 * select all the join clauses available from those outer rels, add on all
	 * the indexable restriction clauses, and generate plain and/or bitmap
	 * index paths for that set of clauses.  This is based on the assumption
	 * that it's always better to apply a clause as an indexqual than as a
	 * filter (qpqual); which is where an available clause would end up being
	 * applied if we omit it from the indexquals.
	 *
	 * This looks expensive, but in most practical cases there won't be very
	 * many distinct sets of outer rels to consider.  As a safety valve when
	 * that's not true, we use a heuristic: limit the number of outer rel sets
	 * considered to a multiple of the number of clauses considered.  (We'll
	 * always consider using each individual join clause, though.)
	 *
	 * For simplicity in selecting relevant clauses, we represent each set of
	 * outer rels as a maximum set of clause_relids --- that is, the indexed
	 * relation itself is also included in the relids set.  considered_relids
	 * lists all relids sets we've already tried.
	 */</comment>
	<for>for <control>(<init><expr><name>indexcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>indexcol</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>nkeycolumns</name></name></expr>;</condition> <incr><expr><name>indexcol</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* Consider each applicable simple join clause */</comment>
		<expr_stmt><expr><name>considered_clauses</name> <operator>+=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>jclauseset</name><operator>-&gt;</operator><name>indexclauses</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>consider_index_join_outer_rels</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
									   <argument><expr><name>rclauseset</name></expr></argument>, <argument><expr><name>jclauseset</name></expr></argument>, <argument><expr><name>eclauseset</name></expr></argument>,
									   <argument><expr><name>bitindexpaths</name></expr></argument>,
									   <argument><expr><name><name>jclauseset</name><operator>-&gt;</operator><name>indexclauses</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr></argument>,
									   <argument><expr><name>considered_clauses</name></expr></argument>,
									   <argument><expr><operator>&amp;</operator><name>considered_relids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Consider each applicable eclass join clause */</comment>
		<expr_stmt><expr><name>considered_clauses</name> <operator>+=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>eclauseset</name><operator>-&gt;</operator><name>indexclauses</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>consider_index_join_outer_rels</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
									   <argument><expr><name>rclauseset</name></expr></argument>, <argument><expr><name>jclauseset</name></expr></argument>, <argument><expr><name>eclauseset</name></expr></argument>,
									   <argument><expr><name>bitindexpaths</name></expr></argument>,
									   <argument><expr><name><name>eclauseset</name><operator>-&gt;</operator><name>indexclauses</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr></argument>,
									   <argument><expr><name>considered_clauses</name></expr></argument>,
									   <argument><expr><operator>&amp;</operator><name>considered_relids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * consider_index_join_outer_rels
 *	  Generate parameterized paths based on clause relids in the clause list.
 *
 * Workhorse for consider_index_join_clauses; see notes therein for rationale.
 *
 * 'rel', 'index', 'rclauseset', 'jclauseset', 'eclauseset', and
 *		'bitindexpaths' as above
 * 'indexjoinclauses' is a list of IndexClauses for join clauses
 * 'considered_clauses' is the total number of clauses considered (so far)
 * '*considered_relids' is a list of all relids sets already considered
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>consider_index_join_outer_rels</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
							   <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
							   <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>rclauseset</name></decl></parameter>,
							   <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>jclauseset</name></decl></parameter>,
							   <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>eclauseset</name></decl></parameter>,
							   <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>bitindexpaths</name></decl></parameter>,
							   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>indexjoinclauses</name></decl></parameter>,
							   <parameter><decl><type><name>int</name></type> <name>considered_clauses</name></decl></parameter>,
							   <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>considered_relids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<comment type="block">/* Examine relids of each joinclause in the given list */</comment>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>indexjoinclauses</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IndexClause</name> <modifier>*</modifier></type><name>iclause</name> <init>= <expr><operator>(</operator><name>IndexClause</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Relids</name></type>		<name>clause_relids</name> <init>= <expr><name><name>iclause</name><operator>-&gt;</operator><name>rinfo</name><operator>-&gt;</operator><name>clause_relids</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>EquivalenceClass</name> <modifier>*</modifier></type><name>parent_ec</name> <init>= <expr><name><name>iclause</name><operator>-&gt;</operator><name>rinfo</name><operator>-&gt;</operator><name>parent_ec</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc2</name></decl>;</decl_stmt>

		<comment type="block">/* If we already tried its relids set, no need to do so again */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>bms_equal_any</name><argument_list>(<argument><expr><name>clause_relids</name></expr></argument>, <argument><expr><operator>*</operator><name>considered_relids</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Generate the union of this clause's relids set with each
		 * previously-tried set.  This ensures we try this clause along with
		 * every interesting subset of previous clauses.  However, to avoid
		 * exponential growth of planning time when there are many clauses,
		 * limit the number of relid sets accepted to 10 * considered_clauses.
		 *
		 * Note: get_join_index_paths adds entries to *considered_relids, but
		 * it prepends them to the list, so that we won't visit new entries
		 * during the inner foreach loop.  No real harm would be done if we
		 * did, since the subset check would reject them; but it would waste
		 * some cycles.
		 */</comment>
		<macro><name>foreach</name><argument_list>(<argument>lc2</argument>, <argument>*considered_relids</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Relids</name></type>		<name>oldrelids</name> <init>= <expr><operator>(</operator><name>Relids</name><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * If either is a subset of the other, no new set is possible.
			 * This isn't a complete test for redundancy, but it's easy and
			 * cheap.  get_join_index_paths will check more carefully if we
			 * already generated the same relids set.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>bms_subset_compare</name><argument_list>(<argument><expr><name>clause_relids</name></expr></argument>, <argument><expr><name>oldrelids</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BMS_DIFFERENT</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * If this clause was derived from an equivalence class, the
			 * clause list may contain other clauses derived from the same
			 * eclass.  We should not consider that combining this clause with
			 * one of those clauses generates a usefully different
			 * parameterization; so skip if any clause derived from the same
			 * eclass would already have been included when using oldrelids.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>parent_ec</name> <operator>&amp;&amp;</operator>
				<call><name>eclass_already_used</name><argument_list>(<argument><expr><name>parent_ec</name></expr></argument>, <argument><expr><name>oldrelids</name></expr></argument>,
									<argument><expr><name>indexjoinclauses</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * If the number of relid sets considered exceeds our heuristic
			 * limit, stop considering combinations of clauses.  We'll still
			 * consider the current clause alone, though (below this loop).
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><operator>*</operator><name>considered_relids</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">10</literal> <operator>*</operator> <name>considered_clauses</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<comment type="block">/* OK, try the union set */</comment>
			<expr_stmt><expr><call><name>get_join_index_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
								 <argument><expr><name>rclauseset</name></expr></argument>, <argument><expr><name>jclauseset</name></expr></argument>, <argument><expr><name>eclauseset</name></expr></argument>,
								 <argument><expr><name>bitindexpaths</name></expr></argument>,
								 <argument><expr><call><name>bms_union</name><argument_list>(<argument><expr><name>clause_relids</name></expr></argument>, <argument><expr><name>oldrelids</name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><name>considered_relids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<comment type="block">/* Also try this set of relids by itself */</comment>
		<expr_stmt><expr><call><name>get_join_index_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
							 <argument><expr><name>rclauseset</name></expr></argument>, <argument><expr><name>jclauseset</name></expr></argument>, <argument><expr><name>eclauseset</name></expr></argument>,
							 <argument><expr><name>bitindexpaths</name></expr></argument>,
							 <argument><expr><name>clause_relids</name></expr></argument>,
							 <argument><expr><name>considered_relids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/*
 * get_join_index_paths
 *	  Generate index paths using clauses from the specified outer relations.
 *	  In addition to generating paths, relids is added to *considered_relids
 *	  if not already present.
 *
 * Workhorse for consider_index_join_clauses; see notes therein for rationale.
 *
 * 'rel', 'index', 'rclauseset', 'jclauseset', 'eclauseset',
 *		'bitindexpaths', 'considered_relids' as above
 * 'relids' is the current set of relids to consider (the target rel plus
 *		one or more outer rels)
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_join_index_paths</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
					 <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
					 <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>rclauseset</name></decl></parameter>,
					 <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>jclauseset</name></decl></parameter>,
					 <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>eclauseset</name></decl></parameter>,
					 <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>bitindexpaths</name></decl></parameter>,
					 <parameter><decl><type><name>Relids</name></type> <name>relids</name></decl></parameter>,
					 <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>considered_relids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexClauseSet</name></type> <name>clauseset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>indexcol</name></decl>;</decl_stmt>

	<comment type="block">/* If we already considered this relids set, don't repeat the work */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>bms_equal_any</name><argument_list>(<argument><expr><name>relids</name></expr></argument>, <argument><expr><operator>*</operator><name>considered_relids</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Identify indexclauses usable with this relids set */</comment>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clauseset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>clauseset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>indexcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>indexcol</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>nkeycolumns</name></name></expr>;</condition> <incr><expr><name>indexcol</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

		<comment type="block">/* First find applicable simple join clauses */</comment>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>jclauseset-&gt;indexclauses[indexcol]</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>IndexClause</name> <modifier>*</modifier></type><name>iclause</name> <init>= <expr><operator>(</operator><name>IndexClause</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>bms_is_subset</name><argument_list>(<argument><expr><name><name>iclause</name><operator>-&gt;</operator><name>rinfo</name><operator>-&gt;</operator><name>clause_relids</name></name></expr></argument>, <argument><expr><name>relids</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>clauseset</name><operator>.</operator><name>indexclauses</name><index>[<expr><name>indexcol</name></expr>]</index></name> <operator>=</operator>
					<call><name>lappend</name><argument_list>(<argument><expr><name><name>clauseset</name><operator>.</operator><name>indexclauses</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr></argument>, <argument><expr><name>iclause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block>

		<comment type="block">/*
		 * Add applicable eclass join clauses.  The clauses generated for each
		 * column are redundant (cf generate_implied_equalities_for_column),
		 * so we need at most one.  This is the only exception to the general
		 * rule of using all available index clauses.
		 */</comment>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>eclauseset-&gt;indexclauses[indexcol]</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>IndexClause</name> <modifier>*</modifier></type><name>iclause</name> <init>= <expr><operator>(</operator><name>IndexClause</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>bms_is_subset</name><argument_list>(<argument><expr><name><name>iclause</name><operator>-&gt;</operator><name>rinfo</name><operator>-&gt;</operator><name>clause_relids</name></name></expr></argument>, <argument><expr><name>relids</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>clauseset</name><operator>.</operator><name>indexclauses</name><index>[<expr><name>indexcol</name></expr>]</index></name> <operator>=</operator>
					<call><name>lappend</name><argument_list>(<argument><expr><name><name>clauseset</name><operator>.</operator><name>indexclauses</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr></argument>, <argument><expr><name>iclause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>

		<comment type="block">/* Add restriction clauses (this is nondestructive to rclauseset) */</comment>
		<expr_stmt><expr><name><name>clauseset</name><operator>.</operator><name>indexclauses</name><index>[<expr><name>indexcol</name></expr>]</index></name> <operator>=</operator>
			<call><name>list_concat</name><argument_list>(<argument><expr><name><name>clauseset</name><operator>.</operator><name>indexclauses</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr></argument>,
						<argument><expr><name><name>rclauseset</name><operator>-&gt;</operator><name>indexclauses</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>clauseset</name><operator>.</operator><name>indexclauses</name><index>[<expr><name>indexcol</name></expr>]</index></name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>clauseset</name><operator>.</operator><name>nonempty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* We should have found something, else caller passed silly relids */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>clauseset</name><operator>.</operator><name>nonempty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Build index path(s) using the collected set of clauses */</comment>
	<expr_stmt><expr><call><name>get_index_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clauseset</name></expr></argument>, <argument><expr><name>bitindexpaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Remember we considered paths for this set of relids.  We use lcons not
	 * lappend to avoid confusing the loop in consider_index_join_outer_rels.
	 */</comment>
	<expr_stmt><expr><operator>*</operator><name>considered_relids</name> <operator>=</operator> <call><name>lcons</name><argument_list>(<argument><expr><name>relids</name></expr></argument>, <argument><expr><operator>*</operator><name>considered_relids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * eclass_already_used
 *		True if any join clause usable with oldrelids was generated from
 *		the specified equivalence class.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>eclass_already_used</name><parameter_list>(<parameter><decl><type><name>EquivalenceClass</name> <modifier>*</modifier></type><name>parent_ec</name></decl></parameter>, <parameter><decl><type><name>Relids</name></type> <name>oldrelids</name></decl></parameter>,
					<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>indexjoinclauses</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>indexjoinclauses</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IndexClause</name> <modifier>*</modifier></type><name>iclause</name> <init>= <expr><operator>(</operator><name>IndexClause</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name> <init>= <expr><name><name>iclause</name><operator>-&gt;</operator><name>rinfo</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>rinfo</name><operator>-&gt;</operator><name>parent_ec</name></name> <operator>==</operator> <name>parent_ec</name> <operator>&amp;&amp;</operator>
			<call><name>bms_is_subset</name><argument_list>(<argument><expr><name><name>rinfo</name><operator>-&gt;</operator><name>clause_relids</name></name></expr></argument>, <argument><expr><name>oldrelids</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * bms_equal_any
 *		True if relids is bms_equal to any member of relids_list
 *
 * Perhaps this should be in bitmapset.c someday.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>bms_equal_any</name><parameter_list>(<parameter><decl><type><name>Relids</name></type> <name>relids</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>relids_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>relids_list</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>bms_equal</name><argument_list>(<argument><expr><name>relids</name></expr></argument>, <argument><expr><operator>(</operator><name>Relids</name><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * get_index_paths
 *	  Given an index and a set of index clauses for it, construct IndexPaths.
 *
 * Plain indexpaths are sent directly to add_path, while potential
 * bitmap indexpaths are added to *bitindexpaths for later processing.
 *
 * This is a fairly simple frontend to build_index_paths().  Its reason for
 * existence is mainly to handle ScalarArrayOpExpr quals properly.  If the
 * index AM supports them natively, we should just include them in simple
 * index paths.  If not, we should exclude them while building simple index
 * paths, and then make a separate attempt to include them in bitmap paths.
 * Furthermore, we should consider excluding lower-order ScalarArrayOpExpr
 * quals so as to create ordered paths.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_index_paths</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
				<parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>clauses</name></decl></parameter>,
				<parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>bitindexpaths</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>indexpaths</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>skip_nonnative_saop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>skip_lower_saop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Build simple index paths using the clauses.  Allow ScalarArrayOpExpr
	 * clauses only if the index AM supports them natively, and skip any such
	 * clauses for index columns after the first (so that we produce ordered
	 * paths if possible).
	 */</comment>
	<expr_stmt><expr><name>indexpaths</name> <operator>=</operator> <call><name>build_index_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,
								   <argument><expr><name>index</name></expr></argument>, <argument><expr><name>clauses</name></expr></argument>,
								   <argument><expr><name><name>index</name><operator>-&gt;</operator><name>predOK</name></name></expr></argument>,
								   <argument><expr><name>ST_ANYSCAN</name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name>skip_nonnative_saop</name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name>skip_lower_saop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we skipped any lower-order ScalarArrayOpExprs on an index with an AM
	 * that supports them, then try again including those clauses.  This will
	 * produce paths with more selectivity but no ordering.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>skip_lower_saop</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>indexpaths</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>indexpaths</name></expr></argument>,
								 <argument><expr><call><name>build_index_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,
												   <argument><expr><name>index</name></expr></argument>, <argument><expr><name>clauses</name></expr></argument>,
												   <argument><expr><name><name>index</name><operator>-&gt;</operator><name>predOK</name></name></expr></argument>,
												   <argument><expr><name>ST_ANYSCAN</name></expr></argument>,
												   <argument><expr><operator>&amp;</operator><name>skip_nonnative_saop</name></expr></argument>,
												   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Submit all the ones that can form plain IndexScan plans to add_path. (A
	 * plain IndexPath can represent either a plain IndexScan or an
	 * IndexOnlyScan, but for our purposes here that distinction does not
	 * matter.  However, some of the indexes might support only bitmap scans,
	 * and those we mustn't submit to add_path here.)
	 *
	 * Also, pick out the ones that are usable as bitmap scans.  For that, we
	 * must discard indexes that don't support bitmap scans, and we also are
	 * only interested in paths that have some selectivity; we should discard
	 * anything that was generated solely for ordering purposes.
	 */</comment>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>indexpaths</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IndexPath</name>  <modifier>*</modifier></type><name>ipath</name> <init>= <expr><operator>(</operator><name>IndexPath</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * Random access to Append-Only is slow because AO doesn't use the buffer
		 * pool and we want to avoid decompressing blocks multiple times.  So,
		 * only consider bitmap paths because they are processed in TID order.
		 * The appendonlyam.c module will optimize fetches in TID order by keeping
		 * the last decompressed block between fetch calls.
		 * Index scan path on GPDB's bitmap index should works the same as bitmap paths.
		 *
		 * GPDB_12_MERGE_FIXME: Also there is no code in place in order to be
		 * able to use index only scans on AO/AOCO relations. However it is
		 * suboptimal to have to expose the relation's access method here. There
		 * are no straight forward solutions though.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>amhasgettuple</name></name> <operator>&amp;&amp;</operator>
				<operator>(</operator><operator>(</operator><name><name>rel</name><operator>-&gt;</operator><name>relam</name></name> <operator>!=</operator> <name>AO_ROW_TABLE_AM_OID</name> <operator>&amp;&amp;</operator>
				 <name><name>rel</name><operator>-&gt;</operator><name>relam</name></name> <operator>!=</operator> <name>AO_COLUMN_TABLE_AM_OID</name><operator>)</operator> <operator>||</operator>
				 <name><name>index</name><operator>-&gt;</operator><name>amcostestimate</name></name> <operator>==</operator> <name>bmcostestimate</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>add_path</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name>ipath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>amhasgetbitmap</name></name> <operator>&amp;&amp;</operator>
			<operator>(</operator><name><name>ipath</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>pathkeys</name></name> <operator>==</operator> <name>NIL</name> <operator>||</operator>
			 <name><name>ipath</name><operator>-&gt;</operator><name>indexselectivity</name></name> <operator>&lt;</operator> <literal type="number">1.0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>bitindexpaths</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>bitindexpaths</name></expr></argument>, <argument><expr><name>ipath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/*
	 * If there were ScalarArrayOpExpr clauses that the index can't handle
	 * natively, generate bitmap scan paths relying on executor-managed
	 * ScalarArrayOpExpr.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>skip_nonnative_saop</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>indexpaths</name> <operator>=</operator> <call><name>build_index_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,
									   <argument><expr><name>index</name></expr></argument>, <argument><expr><name>clauses</name></expr></argument>,
									   <argument><expr><name>false</name></expr></argument>,
									   <argument><expr><name>ST_BITMAPSCAN</name></expr></argument>,
									   <argument><expr><name>NULL</name></expr></argument>,
									   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>bitindexpaths</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><operator>*</operator><name>bitindexpaths</name></expr></argument>, <argument><expr><name>indexpaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * build_index_paths
 *	  Given an index and a set of index clauses for it, construct zero
 *	  or more IndexPaths. It also constructs zero or more partial IndexPaths.
 *
 * We return a list of paths because (1) this routine checks some cases
 * that should cause us to not generate any IndexPath, and (2) in some
 * cases we want to consider both a forward and a backward scan, so as
 * to obtain both sort orders.  Note that the paths are just returned
 * to the caller and not immediately fed to add_path().
 *
 * At top level, useful_predicate should be exactly the index's predOK flag
 * (ie, true if it has a predicate that was proven from the restriction
 * clauses).  When working on an arm of an OR clause, useful_predicate
 * should be true if the predicate required the current OR list to be proven.
 * Note that this routine should never be called at all if the index has an
 * unprovable predicate.
 *
 * scantype indicates whether we want to create plain indexscans, bitmap
 * indexscans, or both.  When it's ST_BITMAPSCAN, we will not consider
 * index ordering while deciding if a Path is worth generating.
 *
 * If skip_nonnative_saop is non-NULL, we ignore ScalarArrayOpExpr clauses
 * unless the index AM supports them directly, and we set *skip_nonnative_saop
 * to true if we found any such clauses (caller must initialize the variable
 * to false).  If it's NULL, we do not ignore ScalarArrayOpExpr clauses.
 *
 * If skip_lower_saop is non-NULL, we ignore ScalarArrayOpExpr clauses for
 * non-first index columns, and we set *skip_lower_saop to true if we found
 * any such clauses (caller must initialize the variable to false).  If it's
 * NULL, we do not ignore non-first ScalarArrayOpExpr clauses, but they will
 * result in considering the scan's output to be unordered.
 *
 * 'rel' is the index's heap relation
 * 'index' is the index for which we want to generate paths
 * 'clauses' is the collection of indexable clauses (IndexClause nodes)
 * 'useful_predicate' indicates whether the index has a useful predicate
 * 'scantype' indicates whether we need plain or bitmap scan support
 * 'skip_nonnative_saop' indicates whether to accept SAOP if index AM doesn't
 * 'skip_lower_saop' indicates whether to accept non-first-column SAOP
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>build_index_paths</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
				  <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>clauses</name></decl></parameter>,
				  <parameter><decl><type><name>bool</name></type> <name>useful_predicate</name></decl></parameter>,
				  <parameter><decl><type><name>ScanTypeControl</name></type> <name>scantype</name></decl></parameter>,
				  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>skip_nonnative_saop</name></decl></parameter>,
				  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>skip_lower_saop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IndexPath</name>  <modifier>*</modifier></type><name>ipath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>index_clauses</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relids</name></type>		<name>outer_relids</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>loop_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>orderbyclauses</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>orderbyclausecols</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>index_pathkeys</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>useful_pathkeys</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found_lower_saop_clause</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>pathkeys_possibly_useful</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>index_is_ordered</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>index_only_scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>indexcol</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Check that index supports the desired scan type(s)
	 */</comment>
	<switch>switch <condition>(<expr><name>scantype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ST_INDEXSCAN</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>index</name><operator>-&gt;</operator><name>amhasgettuple</name></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>NIL</name></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ST_BITMAPSCAN</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>index</name><operator>-&gt;</operator><name>amhasgetbitmap</name></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>NIL</name></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ST_ANYSCAN</name></expr>:</case>
			<comment type="block">/* either or both are OK */</comment>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * 1. Combine the per-column IndexClause lists into an overall list.
	 *
	 * In the resulting list, clauses are ordered by index key, so that the
	 * column numbers form a nondecreasing sequence.  (This order is depended
	 * on by btree and possibly other places.)  The list can be empty, if the
	 * index AM allows that.
	 *
	 * found_lower_saop_clause is set true if we accept a ScalarArrayOpExpr
	 * index clause for a non-first index column.  This prevents us from
	 * assuming that the scan result is ordered.  (Actually, the result is
	 * still ordered if there are equality constraints for all earlier
	 * columns, but it seems too expensive and non-modular for this code to be
	 * aware of that refinement.)
	 *
	 * We also build a Relids set showing which outer rels are required by the
	 * selected clauses.  Any lateral_relids are included in that, but not
	 * otherwise accounted for.
	 */</comment>
	<expr_stmt><expr><name>index_clauses</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>found_lower_saop_clause</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>outer_relids</name> <operator>=</operator> <call><name>bms_copy</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>lateral_relids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>indexcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>indexcol</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>nkeycolumns</name></name></expr>;</condition> <incr><expr><name>indexcol</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>clauses-&gt;indexclauses[indexcol]</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>IndexClause</name> <modifier>*</modifier></type><name>iclause</name> <init>= <expr><operator>(</operator><name>IndexClause</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name> <init>= <expr><name><name>iclause</name><operator>-&gt;</operator><name>rinfo</name></name></expr></init></decl>;</decl_stmt>

			<comment type="block">/* We might need to omit ScalarArrayOpExpr clauses */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr></argument>, <argument><expr><name>ScalarArrayOpExpr</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>index</name><operator>-&gt;</operator><name>amsearcharray</name></name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>skip_nonnative_saop</name></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* Ignore because not supported by index */</comment>
						<expr_stmt><expr><operator>*</operator><name>skip_nonnative_saop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						<continue>continue;</continue>
					</block_content>}</block></if></if_stmt>
					<comment type="block">/* Caller had better intend this only for bitmap scan */</comment>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>scantype</name> <operator>==</operator> <name>ST_BITMAPSCAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>indexcol</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>skip_lower_saop</name></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* Caller doesn't want to lose index ordering */</comment>
						<expr_stmt><expr><operator>*</operator><name>skip_lower_saop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						<continue>continue;</continue>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>found_lower_saop_clause</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* OK to include this clause */</comment>
			<expr_stmt><expr><name>index_clauses</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>index_clauses</name></expr></argument>, <argument><expr><name>iclause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>outer_relids</name> <operator>=</operator> <call><name>bms_add_members</name><argument_list>(<argument><expr><name>outer_relids</name></expr></argument>,
										   <argument><expr><name><name>rinfo</name><operator>-&gt;</operator><name>clause_relids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<comment type="block">/*
		 * If no clauses match the first index column, check for amoptionalkey
		 * restriction.  We can't generate a scan over an index with
		 * amoptionalkey = false unless there's at least one index clause.
		 * (When working on columns after the first, this test cannot fail. It
		 * is always okay for columns after the first to not have any
		 * clauses.)
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>index_clauses</name> <operator>==</operator> <name>NIL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>index</name><operator>-&gt;</operator><name>amoptionalkey</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NIL</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* We do not want the index's rel itself listed in outer_relids */</comment>
	<expr_stmt><expr><name>outer_relids</name> <operator>=</operator> <call><name>bms_del_member</name><argument_list>(<argument><expr><name>outer_relids</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Enforce convention that outer_relids is exactly NULL if empty */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>bms_is_empty</name><argument_list>(<argument><expr><name>outer_relids</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>outer_relids</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Compute loop_count for cost estimation purposes */</comment>
	<expr_stmt><expr><name>loop_count</name> <operator>=</operator> <call><name>get_loop_count</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>outer_relids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * 2. Compute pathkeys describing index's ordering, if any, then see how
	 * many of them are actually useful for this query.  This is not relevant
	 * if we are only trying to build bitmap indexscans, nor if we have to
	 * assume the scan is unordered.
	 */</comment>
	<expr_stmt><expr><name>pathkeys_possibly_useful</name> <operator>=</operator> <operator>(</operator><name>scantype</name> <operator>!=</operator> <name>ST_BITMAPSCAN</name> <operator>&amp;&amp;</operator>
								<operator>!</operator><name>found_lower_saop_clause</name> <operator>&amp;&amp;</operator>
								<call><name>has_useful_pathkeys</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>index_is_ordered</name> <operator>=</operator> <operator>(</operator><name><name>index</name><operator>-&gt;</operator><name>sortopfamily</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>index_is_ordered</name> <operator>&amp;&amp;</operator> <name>pathkeys_possibly_useful</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>index_pathkeys</name> <operator>=</operator> <call><name>build_index_pathkeys</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
											  <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>useful_pathkeys</name> <operator>=</operator> <call><name>truncate_useless_pathkeys</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,
													<argument><expr><name>index_pathkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>orderbyclauses</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>orderbyclausecols</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>amcanorderbyop</name></name> <operator>&amp;&amp;</operator> <name>pathkeys_possibly_useful</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* see if we can generate ordering operators for query_pathkeys */</comment>
		<expr_stmt><expr><call><name>match_pathkeys_to_index</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>query_pathkeys</name></name></expr></argument>,
								<argument><expr><operator>&amp;</operator><name>orderbyclauses</name></expr></argument>,
								<argument><expr><operator>&amp;</operator><name>orderbyclausecols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>orderbyclauses</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>useful_pathkeys</name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>query_pathkeys</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>useful_pathkeys</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>useful_pathkeys</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>orderbyclauses</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>orderbyclausecols</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * 3. Check if an index-only scan is possible.  If we're not building
	 * plain indexscans, this isn't relevant since bitmap scans don't support
	 * index data retrieval anyway.
	 */</comment>
	<expr_stmt><expr><name>index_only_scan</name> <operator>=</operator> <operator>(</operator><name>scantype</name> <operator>!=</operator> <name>ST_BITMAPSCAN</name> <operator>&amp;&amp;</operator>
					   <call><name>check_index_only</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * 4. Generate an indexscan path if there are relevant restriction clauses
	 * in the current clauses, OR the index ordering is potentially useful for
	 * later merging or final output ordering, OR the index has a useful
	 * predicate, OR an index-only scan is possible.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>index_clauses</name> <operator>!=</operator> <name>NIL</name> <operator>||</operator> <name>useful_pathkeys</name> <operator>!=</operator> <name>NIL</name> <operator>||</operator> <name>useful_predicate</name> <operator>||</operator>
		<name>index_only_scan</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ipath</name> <operator>=</operator> <call><name>create_index_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
								  <argument><expr><name>index_clauses</name></expr></argument>,
								  <argument><expr><name>orderbyclauses</name></expr></argument>,
								  <argument><expr><name>orderbyclausecols</name></expr></argument>,
								  <argument><expr><name>useful_pathkeys</name></expr></argument>,
								  <argument><expr><ternary><condition><expr><name>index_is_ordered</name></expr> ?</condition><then>
								  <expr><name>ForwardScanDirection</name></expr> </then><else>:
								  <expr><name>NoMovementScanDirection</name></expr></else></ternary></expr></argument>,
								  <argument><expr><name>index_only_scan</name></expr></argument>,
								  <argument><expr><name>outer_relids</name></expr></argument>,
								  <argument><expr><name>loop_count</name></expr></argument>,
								  <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>ipath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If appropriate, consider parallel index scan.  We don't allow
		 * parallel index scan for bitmap index scans.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>amcanparallel</name></name> <operator>&amp;&amp;</operator>
			<name><name>rel</name><operator>-&gt;</operator><name>consider_parallel</name></name> <operator>&amp;&amp;</operator> <name>outer_relids</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
			<name>scantype</name> <operator>!=</operator> <name>ST_BITMAPSCAN</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>ipath</name> <operator>=</operator> <call><name>create_index_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
									  <argument><expr><name>index_clauses</name></expr></argument>,
									  <argument><expr><name>orderbyclauses</name></expr></argument>,
									  <argument><expr><name>orderbyclausecols</name></expr></argument>,
									  <argument><expr><name>useful_pathkeys</name></expr></argument>,
									  <argument><expr><ternary><condition><expr><name>index_is_ordered</name></expr> ?</condition><then>
									  <expr><name>ForwardScanDirection</name></expr> </then><else>:
									  <expr><name>NoMovementScanDirection</name></expr></else></ternary></expr></argument>,
									  <argument><expr><name>index_only_scan</name></expr></argument>,
									  <argument><expr><name>outer_relids</name></expr></argument>,
									  <argument><expr><name>loop_count</name></expr></argument>,
									  <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * if, after costing the path, we find that it's not worth using
			 * parallel workers, just free it.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>ipath</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>parallel_workers</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>add_partial_path</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name>ipath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>ipath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * 5. If the index is ordered, a backwards scan might be interesting.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>index_is_ordered</name> <operator>&amp;&amp;</operator> <name>pathkeys_possibly_useful</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>index_pathkeys</name> <operator>=</operator> <call><name>build_index_pathkeys</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
											  <argument><expr><name>BackwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>useful_pathkeys</name> <operator>=</operator> <call><name>truncate_useless_pathkeys</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,
													<argument><expr><name>index_pathkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>useful_pathkeys</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>ipath</name> <operator>=</operator> <call><name>create_index_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
									  <argument><expr><name>index_clauses</name></expr></argument>,
									  <argument><expr><name>NIL</name></expr></argument>,
									  <argument><expr><name>NIL</name></expr></argument>,
									  <argument><expr><name>useful_pathkeys</name></expr></argument>,
									  <argument><expr><name>BackwardScanDirection</name></expr></argument>,
									  <argument><expr><name>index_only_scan</name></expr></argument>,
									  <argument><expr><name>outer_relids</name></expr></argument>,
									  <argument><expr><name>loop_count</name></expr></argument>,
									  <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>ipath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* If appropriate, consider parallel index scan */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>amcanparallel</name></name> <operator>&amp;&amp;</operator>
				<name><name>rel</name><operator>-&gt;</operator><name>consider_parallel</name></name> <operator>&amp;&amp;</operator> <name>outer_relids</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
				<name>scantype</name> <operator>!=</operator> <name>ST_BITMAPSCAN</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>ipath</name> <operator>=</operator> <call><name>create_index_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
										  <argument><expr><name>index_clauses</name></expr></argument>,
										  <argument><expr><name>NIL</name></expr></argument>,
										  <argument><expr><name>NIL</name></expr></argument>,
										  <argument><expr><name>useful_pathkeys</name></expr></argument>,
										  <argument><expr><name>BackwardScanDirection</name></expr></argument>,
										  <argument><expr><name>index_only_scan</name></expr></argument>,
										  <argument><expr><name>outer_relids</name></expr></argument>,
										  <argument><expr><name>loop_count</name></expr></argument>,
										  <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * if, after costing the path, we find that it's not worth
				 * using parallel workers, just free it.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>ipath</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>parallel_workers</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>add_partial_path</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name>ipath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>ipath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * build_paths_for_OR
 *	  Given a list of restriction clauses from one arm of an OR clause,
 *	  construct all matching IndexPaths for the relation.
 *
 * Here we must scan all indexes of the relation, since a bitmap OR tree
 * can use multiple indexes.
 *
 * The caller actually supplies two lists of restriction clauses: some
 * "current" ones and some "other" ones.  Both lists can be used freely
 * to match keys of the index, but an index must use at least one of the
 * "current" clauses to be considered usable.  The motivation for this is
 * examples like
 *		WHERE (x = 42) AND (... OR (y = 52 AND z = 77) OR ....)
 * While we are considering the y/z subclause of the OR, we can use "x = 42"
 * as one of the available index conditions; but we shouldn't match the
 * subclause to any index on x alone, because such a Path would already have
 * been generated at the upper level.  So we could use an index on x,y,z
 * or an index on x,y for the OR subclause, but not an index on just x.
 * When dealing with a partial index, a match of the index predicate to
 * one of the "current" clauses also makes the index usable.
 *
 * 'rel' is the relation for which we want to generate index paths
 * 'clauses' is the current list of clauses (RestrictInfo nodes)
 * 'other_clauses' is the list of additional upper-level clauses
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>build_paths_for_OR</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
				   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>clauses</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>other_clauses</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>all_clauses</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* not computed till needed */</comment>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>rel-&gt;indexlist</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><operator>(</operator><name>IndexOptInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>IndexClauseSet</name></type> <name>clauseset</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>indexpaths</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>useful_predicate</name></decl>;</decl_stmt>

		<comment type="block">/* Ignore index if it doesn't support bitmap scans */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>index</name><operator>-&gt;</operator><name>amhasgetbitmap</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Ignore partial indexes that do not match the query.  If a partial
		 * index is marked predOK then we know it's OK.  Otherwise, we have to
		 * test whether the added clauses are sufficient to imply the
		 * predicate. If so, we can use the index in the current context.
		 *
		 * We set useful_predicate to true iff the predicate was proven using
		 * the current set of clauses.  This is needed to prevent matching a
		 * predOK index to an arm of an OR, which would be a legal but
		 * pointlessly inefficient plan.  (A better plan will be generated by
		 * just scanning the predOK index alone, no OR.)
		 */</comment>
		<expr_stmt><expr><name>useful_predicate</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>indpred</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>predOK</name></name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Usable, but don't set useful_predicate */</comment>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* Form all_clauses if not done already */</comment>
				<if_stmt><if>if <condition>(<expr><name>all_clauses</name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>all_clauses</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><call><name>list_copy</name><argument_list>(<argument><expr><name>clauses</name></expr></argument>)</argument_list></call></expr></argument>,
											  <argument><expr><name>other_clauses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>predicate_implied_by</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>indpred</name></name></expr></argument>, <argument><expr><name>all_clauses</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>	<comment type="block">/* can't use it at all */</comment>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>predicate_implied_by</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>indpred</name></name></expr></argument>, <argument><expr><name>other_clauses</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>useful_predicate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Identify the restriction clauses that can match the index.
		 */</comment>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clauseset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>clauseset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>match_clauses_to_index</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>clauses</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clauseset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If no matches so far, and the index predicate isn't useful, we
		 * don't want it.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>clauseset</name><operator>.</operator><name>nonempty</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>useful_predicate</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Add "other" restriction clauses to the clauseset.
		 */</comment>
		<expr_stmt><expr><call><name>match_clauses_to_index</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>other_clauses</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clauseset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Construct paths if possible.
		 */</comment>
		<expr_stmt><expr><name>indexpaths</name> <operator>=</operator> <call><name>build_index_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,
									   <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clauseset</name></expr></argument>,
									   <argument><expr><name>useful_predicate</name></expr></argument>,
									   <argument><expr><name>ST_BITMAPSCAN</name></expr></argument>,
									   <argument><expr><name>NULL</name></expr></argument>,
									   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>indexpaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * generate_bitmap_or_paths
 *		Look through the list of clauses to find OR clauses, and generate
 *		a BitmapOrPath for each one we can handle that way.  Return a list
 *		of the generated BitmapOrPaths.
 *
 * other_clauses is a list of additional clauses that can be assumed true
 * for the purpose of generating indexquals, but are not to be searched for
 * ORs.  (See build_paths_for_OR() for motivation.)
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>generate_bitmap_or_paths</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
						 <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>clauses</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>other_clauses</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>all_clauses</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We can use both the current and other clauses as context for
	 * build_paths_for_OR; no need to remove ORs from the lists.
	 */</comment>
	<expr_stmt><expr><name>all_clauses</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><call><name>list_copy</name><argument_list>(<argument><expr><name>clauses</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>other_clauses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>clauses</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name> <init>= <expr><call><name>lfirst_node</name><argument_list>(<argument><expr><name>RestrictInfo</name></expr></argument>, <argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>pathlist</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Path</name>	   <modifier>*</modifier></type><name>bitmapqual</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>j</name></decl>;</decl_stmt>

		<comment type="block">/* Ignore RestrictInfos that aren't ORs */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>restriction_is_or_clause</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * We must be able to match at least one index to each of the arms of
		 * the OR, else we can't use it.
		 */</comment>
		<expr_stmt><expr><name>pathlist</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		<macro><name>foreach</name><argument_list>(<argument>j</argument>, <argument>((BoolExpr *) rinfo-&gt;orclause)-&gt;args</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>orarg</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>indlist</name></decl>;</decl_stmt>

			<comment type="block">/* OR arguments should be ANDs or sub-RestrictInfos */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>is_andclause</name><argument_list>(<argument><expr><name>orarg</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>andargs</name> <init>= <expr><operator>(</operator><operator>(</operator><name>BoolExpr</name> <operator>*</operator><operator>)</operator> <name>orarg</name><operator>)</operator><operator>-&gt;</operator><name>args</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>indlist</name> <operator>=</operator> <call><name>build_paths_for_OR</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,
											 <argument><expr><name>andargs</name></expr></argument>,
											 <argument><expr><name>all_clauses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Recurse in case there are sub-ORs */</comment>
				<expr_stmt><expr><name>indlist</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>indlist</name></expr></argument>,
									  <argument><expr><call><name>generate_bitmap_or_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,
															   <argument><expr><name>andargs</name></expr></argument>,
															   <argument><expr><name>all_clauses</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>RestrictInfo</name></expr></argument>, <argument><expr><name>orarg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>orargs</name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>restriction_is_or_clause</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>orargs</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>indlist</name> <operator>=</operator> <call><name>build_paths_for_OR</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,
											 <argument><expr><name>orargs</name></expr></argument>,
											 <argument><expr><name>all_clauses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<comment type="block">/*
			 * If nothing matched this arm, we can't do anything with this OR
			 * clause.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>indlist</name> <operator>==</operator> <name>NIL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>pathlist</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * OK, pick the most promising AND combination, and add it to
			 * pathlist.
			 */</comment>
			<expr_stmt><expr><name>bitmapqual</name> <operator>=</operator> <call><name>choose_bitmap_and</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>indlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pathlist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>pathlist</name></expr></argument>, <argument><expr><name>bitmapqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<comment type="block">/*
		 * If we have a match for every arm, then turn them into a
		 * BitmapOrPath, and add to result list.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>pathlist</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>bitmapqual</name> <operator>=</operator> <operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>create_bitmap_or_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>pathlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>bitmapqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * choose_bitmap_and
 *		Given a nonempty list of bitmap paths, AND them into one path.
 *
 * This is a nontrivial decision since we can legally use any subset of the
 * given path set.  We want to choose a good tradeoff between selectivity
 * and cost of computing the bitmap.
 *
 * The result is either a single one of the inputs, or a BitmapAndPath
 * combining multiple inputs.
 */</comment>
<function><type><specifier>static</specifier> <name>Path</name> <modifier>*</modifier></type>
<name>choose_bitmap_and</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>paths</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>npaths</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PathClauseUsage</name> <modifier>*</modifier><modifier>*</modifier></type><name>pathinfoarray</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PathClauseUsage</name> <modifier>*</modifier></type><name>pathinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>clauselist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>bestpaths</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cost</name></type>		<name>bestcost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>npaths</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block">/* else caller error */</comment>
	<if_stmt><if>if <condition>(<expr><name>npaths</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>	<comment type="block">/* easy case */</comment>

	<comment type="block">/*
	 * In theory we should consider every nonempty subset of the given paths.
	 * In practice that seems like overkill, given the crude nature of the
	 * estimates, not to mention the possible effects of higher-level AND and
	 * OR clauses.  Moreover, it's completely impractical if there are a large
	 * number of paths, since the work would grow as O(2^N).
	 *
	 * As a heuristic, we first check for paths using exactly the same sets of
	 * WHERE clauses + index predicate conditions, and reject all but the
	 * cheapest-to-scan in any such group.  This primarily gets rid of indexes
	 * that include the interesting columns but also irrelevant columns.  (In
	 * situations where the DBA has gone overboard on creating variant
	 * indexes, this can make for a very large reduction in the number of
	 * paths considered further.)
	 *
	 * We then sort the surviving paths with the cheapest-to-scan first, and
	 * for each path, consider using that path alone as the basis for a bitmap
	 * scan.  Then we consider bitmap AND scans formed from that path plus
	 * each subsequent (higher-cost) path, adding on a subsequent path if it
	 * results in a reduction in the estimated total scan cost. This means we
	 * consider about O(N^2) rather than O(2^N) path combinations, which is
	 * quite tolerable, especially given than N is usually reasonably small
	 * because of the prefiltering step.  The cheapest of these is returned.
	 *
	 * We will only consider AND combinations in which no two indexes use the
	 * same WHERE clause.  This is a bit of a kluge: it's needed because
	 * costsize.c and clausesel.c aren't very smart about redundant clauses.
	 * They will usually double-count the redundant clauses, producing a
	 * too-small selectivity that makes a redundant AND step look like it
	 * reduces the total cost.  Perhaps someday that code will be smarter and
	 * we can remove this limitation.  (But note that this also defends
	 * against flat-out duplicate input paths, which can happen because
	 * match_join_clauses_to_index will find the same OR join clauses that
	 * extract_restriction_or_clauses has pulled OR restriction clauses out
	 * of.)
	 *
	 * For the same reason, we reject AND combinations in which an index
	 * predicate clause duplicates another clause.  Here we find it necessary
	 * to be even stricter: we'll reject a partial index if any of its
	 * predicate clauses are implied by the set of WHERE clauses and predicate
	 * clauses used so far.  This covers cases such as a condition "x = 42"
	 * used with a plain index, followed by a clauseless scan of a partial
	 * index "WHERE x &gt;= 40 AND x &lt; 50".  The partial index has been accepted
	 * only because "x = 42" was present, and so allowing it would partially
	 * double-count selectivity.  (We could use predicate_implied_by on
	 * regular qual clauses too, to have a more intelligent, but much more
	 * expensive, check for redundancy --- but in most cases simple equality
	 * seems to suffice.)
	 */</comment>

	<comment type="block">/*
	 * Extract clause usage info and detect any paths that use exactly the
	 * same set of clauses; keep only the cheapest-to-scan of any such groups.
	 * The surviving paths are put into an array for qsort'ing.
	 */</comment>
	<expr_stmt><expr><name>pathinfoarray</name> <operator>=</operator> <operator>(</operator><name>PathClauseUsage</name> <operator>*</operator><operator>*</operator><operator>)</operator>
		<call><name>palloc</name><argument_list>(<argument><expr><name>npaths</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PathClauseUsage</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>clauselist</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>npaths</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>paths</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Path</name>	   <modifier>*</modifier></type><name>ipath</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>pathinfo</name> <operator>=</operator> <call><name>classify_index_clause_usage</name><argument_list>(<argument><expr><name>ipath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clauselist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* If it's unclassifiable, treat it as distinct from all others */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pathinfo</name><operator>-&gt;</operator><name>unclassifiable</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>pathinfoarray</name><index>[<expr><name>npaths</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pathinfo</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>npaths</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pathinfoarray</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>unclassifiable</name> <operator>&amp;&amp;</operator>
				<call><name>bms_equal</name><argument_list>(<argument><expr><name><name>pathinfo</name><operator>-&gt;</operator><name>clauseids</name></name></expr></argument>, <argument><expr><name><name>pathinfoarray</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>clauseids</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>npaths</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* duplicate clauseids, keep the cheaper one */</comment>
			<decl_stmt><decl><type><name>Cost</name></type>		<name>ncost</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Cost</name></type>		<name>ocost</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Selectivity</name></type> <name>nselec</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Selectivity</name></type> <name>oselec</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>cost_bitmap_tree_node</name><argument_list>(<argument><expr><name><name>pathinfo</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncost</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nselec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>cost_bitmap_tree_node</name><argument_list>(<argument><expr><name><name>pathinfoarray</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ocost</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oselec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ncost</name> <operator>&lt;</operator> <name>ocost</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>pathinfoarray</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pathinfo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* not duplicate clauseids, add to array */</comment>
			<expr_stmt><expr><name><name>pathinfoarray</name><index>[<expr><name>npaths</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pathinfo</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block>

	<comment type="block">/* If only one surviving path, we're done */</comment>
	<if_stmt><if>if <condition>(<expr><name>npaths</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>pathinfoarray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>path</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Sort the surviving paths by index access cost */</comment>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>pathinfoarray</name></expr></argument>, <argument><expr><name>npaths</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PathClauseUsage</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
		  <argument><expr><name>path_usage_comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * For each surviving index, consider it as an "AND group leader", and see
	 * whether adding on any of the later indexes results in an AND path with
	 * cheaper total cost than before.  Then take the cheapest AND group.
	 *
	 * Note: paths that are either clauseless or unclassifiable will have
	 * empty clauseids, so that they will not be rejected by the clauseids
	 * filter here, nor will they cause later paths to be rejected by it.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>npaths</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Cost</name></type>		<name>costsofar</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>qualsofar</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>clauseidsofar</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lastcell</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>pathinfo</name> <operator>=</operator> <name><name>pathinfoarray</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>paths</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name><name>pathinfo</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>costsofar</name> <operator>=</operator> <call><name>bitmap_scan_cost_est</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>pathinfo</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>qualsofar</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><call><name>list_copy</name><argument_list>(<argument><expr><name><name>pathinfo</name><operator>-&gt;</operator><name>quals</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>list_copy</name><argument_list>(<argument><expr><name><name>pathinfo</name><operator>-&gt;</operator><name>preds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>clauseidsofar</name> <operator>=</operator> <call><name>bms_copy</name><argument_list>(<argument><expr><name><name>pathinfo</name><operator>-&gt;</operator><name>clauseids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>lastcell</name> <operator>=</operator> <call><name>list_head</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* for quick deletions */</comment>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>npaths</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Cost</name></type>		<name>newcost</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>pathinfo</name> <operator>=</operator> <name><name>pathinfoarray</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			<comment type="block">/* Check for redundancy */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>bms_overlap</name><argument_list>(<argument><expr><name><name>pathinfo</name><operator>-&gt;</operator><name>clauseids</name></name></expr></argument>, <argument><expr><name>clauseidsofar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>		<comment type="block">/* consider it redundant */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>pathinfo</name><operator>-&gt;</operator><name>preds</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>bool</name></type>		<name>redundant</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

				<comment type="block">/* we check each predicate clause separately */</comment>
				<macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>pathinfo-&gt;preds</argument>)</argument_list></macro>
				<block>{<block_content>
					<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>np</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><call><name>predicate_implied_by</name><argument_list>(<argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><name>np</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qualsofar</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>redundant</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						<break>break;</break>	<comment type="block">/* out of inner foreach loop */</comment>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block>
				<if_stmt><if>if <condition>(<expr><name>redundant</name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* tentatively add new path to paths, so we can estimate cost */</comment>
			<expr_stmt><expr><name>paths</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name><name>pathinfo</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>newcost</name> <operator>=</operator> <call><name>bitmap_and_cost_est</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>newcost</name> <operator>&lt;</operator> <name>costsofar</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* keep new path in paths, update subsidiary variables */</comment>
				<expr_stmt><expr><name>costsofar</name> <operator>=</operator> <name>newcost</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>qualsofar</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>qualsofar</name></expr></argument>,
										<argument><expr><call><name>list_copy</name><argument_list>(<argument><expr><name><name>pathinfo</name><operator>-&gt;</operator><name>quals</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>qualsofar</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>qualsofar</name></expr></argument>,
										<argument><expr><call><name>list_copy</name><argument_list>(<argument><expr><name><name>pathinfo</name><operator>-&gt;</operator><name>preds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>clauseidsofar</name> <operator>=</operator> <call><name>bms_add_members</name><argument_list>(<argument><expr><name>clauseidsofar</name></expr></argument>,
												<argument><expr><name><name>pathinfo</name><operator>-&gt;</operator><name>clauseids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>lastcell</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>lastcell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* reject new path, remove it from paths list */</comment>
				<expr_stmt><expr><name>paths</name> <operator>=</operator> <call><name>list_delete_cell</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><call><name>lnext</name><argument_list>(<argument><expr><name>lastcell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lastcell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>lnext</name><argument_list>(<argument><expr><name>lastcell</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/* Keep the cheapest AND-group (or singleton) */</comment>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>costsofar</name> <operator>&lt;</operator> <name>bestcost</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>bestpaths</name> <operator>=</operator> <name>paths</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>bestcost</name> <operator>=</operator> <name>costsofar</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* some easy cleanup (we don't try real hard though) */</comment>
		<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>qualsofar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>bestpaths</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>bestpaths</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>	<comment type="block">/* no need for AND */</comment>
	<return>return <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>create_bitmap_and_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>bestpaths</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* qsort comparator to sort in increasing index access cost order */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>path_usage_comparator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PathClauseUsage</name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><operator>*</operator><operator>(</operator><name>PathClauseUsage</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PathClauseUsage</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><operator>*</operator><operator>(</operator><name>PathClauseUsage</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cost</name></type>		<name>acost</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cost</name></type>		<name>bcost</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Selectivity</name></type> <name>aselec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Selectivity</name></type> <name>bselec</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>cost_bitmap_tree_node</name><argument_list>(<argument><expr><name><name>pa</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acost</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aselec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cost_bitmap_tree_node</name><argument_list>(<argument><expr><name><name>pb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bcost</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bselec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If costs are the same, sort by selectivity.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>acost</name> <operator>&lt;</operator> <name>bcost</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>acost</name> <operator>&gt;</operator> <name>bcost</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>aselec</name> <operator>&lt;</operator> <name>bselec</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>aselec</name> <operator>&gt;</operator> <name>bselec</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Estimate the cost of actually executing a bitmap scan with a single
 * index path (no BitmapAnd, at least not at this level; but it could be
 * a BitmapOr).
 */</comment>
<function><type><specifier>static</specifier> <name>Cost</name></type>
<name>bitmap_scan_cost_est</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>ipath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BitmapHeapPath</name></type> <name>bpath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relids</name></type>		<name>required_outer</name></decl>;</decl_stmt>

	<comment type="block">/* Identify required outer rels, in case it's a parameterized scan */</comment>
	<expr_stmt><expr><name>required_outer</name> <operator>=</operator> <call><name>get_bitmap_tree_required_outer</name><argument_list>(<argument><expr><name>ipath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Set up a dummy BitmapHeapPath */</comment>
	<expr_stmt><expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_BitmapHeapPath</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>pathtype</name></name> <operator>=</operator> <name>T_BitmapHeapScan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>rel</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>pathtarget</name></name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>reltarget</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>param_info</name></name> <operator>=</operator> <call><name>get_baserel_parampathinfo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,
													  <argument><expr><name>required_outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>pathkeys</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bpath</name><operator>.</operator><name>bitmapqual</name></name> <operator>=</operator> <name>ipath</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check the cost of temporary path without considering parallelism.
	 * Parallel bitmap heap path will be considered at later stage.
	 */</comment>
	<expr_stmt><expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>parallel_workers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cost_bitmap_heap_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bpath</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,
						  <argument><expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>param_info</name></name></expr></argument>,
						  <argument><expr><name>ipath</name></expr></argument>,
						  <argument><expr><call><name>get_loop_count</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>required_outer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>total_cost</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Estimate the cost of actually executing a BitmapAnd scan with the given
 * inputs.
 */</comment>
<function><type><specifier>static</specifier> <name>Cost</name></type>
<name>bitmap_and_cost_est</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>paths</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BitmapAndPath</name></type> <name>apath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitmapHeapPath</name></type> <name>bpath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relids</name></type>		<name>required_outer</name></decl>;</decl_stmt>

	<comment type="block">/* Set up a dummy BitmapAndPath */</comment>
	<expr_stmt><expr><name><name>apath</name><operator>.</operator><name>path</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_BitmapAndPath</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>apath</name><operator>.</operator><name>path</name><operator>.</operator><name>pathtype</name></name> <operator>=</operator> <name>T_BitmapAnd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>apath</name><operator>.</operator><name>path</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>rel</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>apath</name><operator>.</operator><name>path</name><operator>.</operator><name>pathtarget</name></name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>reltarget</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>apath</name><operator>.</operator><name>path</name><operator>.</operator><name>param_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>	<comment type="block">/* not used in bitmap trees */</comment>
	<expr_stmt><expr><name><name>apath</name><operator>.</operator><name>path</name><operator>.</operator><name>pathkeys</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>apath</name><operator>.</operator><name>bitmapquals</name></name> <operator>=</operator> <name>paths</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cost_bitmap_and_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>apath</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Identify required outer rels, in case it's a parameterized scan */</comment>
	<expr_stmt><expr><name>required_outer</name> <operator>=</operator> <call><name>get_bitmap_tree_required_outer</name><argument_list>(<argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>apath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Set up a dummy BitmapHeapPath */</comment>
	<expr_stmt><expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_BitmapHeapPath</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>pathtype</name></name> <operator>=</operator> <name>T_BitmapHeapScan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>rel</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>pathtarget</name></name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>reltarget</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>param_info</name></name> <operator>=</operator> <call><name>get_baserel_parampathinfo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,
													  <argument><expr><name>required_outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>pathkeys</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bpath</name><operator>.</operator><name>bitmapqual</name></name> <operator>=</operator> <operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>apath</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check the cost of temporary path without considering parallelism.
	 * Parallel bitmap heap path will be considered at later stage.
	 */</comment>
	<expr_stmt><expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>parallel_workers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Now we can do cost_bitmap_heap_scan */</comment>
	<expr_stmt><expr><call><name>cost_bitmap_heap_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bpath</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,
						  <argument><expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>param_info</name></name></expr></argument>,
						  <argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>apath</name></expr></argument>,
						  <argument><expr><call><name>get_loop_count</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>required_outer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>bpath</name><operator>.</operator><name>path</name><operator>.</operator><name>total_cost</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * classify_index_clause_usage
 *		Construct a PathClauseUsage struct describing the WHERE clauses and
 *		index predicate clauses used by the given indexscan path.
 *		We consider two clauses the same if they are equal().
 *
 * At some point we might want to migrate this info into the Path data
 * structure proper, but for the moment it's only needed within
 * choose_bitmap_and().
 *
 * *clauselist is used and expanded as needed to identify all the distinct
 * clauses seen across successive calls.  Caller must initialize it to NIL
 * before first call of a set.
 */</comment>
<function><type><specifier>static</specifier> <name>PathClauseUsage</name> <modifier>*</modifier></type>
<name>classify_index_clause_usage</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>clauselist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PathClauseUsage</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>clauseids</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>PathClauseUsage</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PathClauseUsage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>

	<comment type="block">/* Recursively find the quals and preds used by the path */</comment>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>quals</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>preds</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>find_indexpath_quals</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>quals</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>preds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Some machine-generated queries have outlandish numbers of qual clauses.
	 * To avoid getting into O(N^2) behavior even in this preliminary
	 * classification step, we want to limit the number of entries we can
	 * accumulate in *clauselist.  Treat any path with more than 100 quals +
	 * preds as unclassifiable, which will cause calling code to consider it
	 * distinct from all other paths.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>quals</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>preds</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>clauseids</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>unclassifiable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Build up a bitmapset representing the quals and preds */</comment>
	<expr_stmt><expr><name>clauseids</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>result-&gt;quals</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>clauseids</name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name>clauseids</name></expr></argument>,
								   <argument><expr><call><name>find_list_position</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>clauselist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>result-&gt;preds</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>clauseids</name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name>clauseids</name></expr></argument>,
								   <argument><expr><call><name>find_list_position</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>clauselist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>clauseids</name></name> <operator>=</operator> <name>clauseids</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>unclassifiable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * get_bitmap_tree_required_outer
 *		Find the required outer rels for a bitmap tree (index/and/or)
 *
 * We don't associate any particular parameterization with a BitmapAnd or
 * BitmapOr node; however, the IndexPaths have parameterization info, in
 * their capacity as standalone access paths.  The parameterization required
 * for the bitmap heap scan node is the union of rels referenced in the
 * child IndexPaths.
 */</comment>
<function><type><specifier>static</specifier> <name>Relids</name></type>
<name>get_bitmap_tree_required_outer</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>bitmapqual</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relids</name></type>		<name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>bitmapqual</name></expr></argument>, <argument><expr><name>IndexPath</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><call><name>bms_copy</name><argument_list>(<argument><expr><call><name>PATH_REQ_OUTER</name><argument_list>(<argument><expr><name>bitmapqual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>bitmapqual</name></expr></argument>, <argument><expr><name>BitmapAndPath</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>((BitmapAndPath *) bitmapqual)-&gt;bitmapquals</argument>)</argument_list></macro>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bms_join</name><argument_list>(<argument><expr><name>result</name></expr></argument>,
							  <argument><expr><call><name>get_bitmap_tree_required_outer</name><argument_list>(<argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>bitmapqual</name></expr></argument>, <argument><expr><name>BitmapOrPath</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>((BitmapOrPath *) bitmapqual)-&gt;bitmapquals</argument>)</argument_list></macro>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bms_join</name><argument_list>(<argument><expr><name>result</name></expr></argument>,
							  <argument><expr><call><name>get_bitmap_tree_required_outer</name><argument_list>(<argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized node type: %d"</literal></expr></argument>, <argument><expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>bitmapqual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * find_indexpath_quals
 *
 * Given the Path structure for a plain or bitmap indexscan, extract lists
 * of all the index clauses and index predicate conditions used in the Path.
 * These are appended to the initial contents of *quals and *preds (hence
 * caller should initialize those to NIL).
 *
 * Note we are not trying to produce an accurate representation of the AND/OR
 * semantics of the Path, but just find out all the base conditions used.
 *
 * The result lists contain pointers to the expressions used in the Path,
 * but all the list cells are freshly built, so it's safe to destructively
 * modify the lists (eg, by concat'ing with other lists).
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>find_indexpath_quals</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>bitmapqual</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>quals</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>preds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>bitmapqual</name></expr></argument>, <argument><expr><name>BitmapAndPath</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BitmapAndPath</name> <modifier>*</modifier></type><name>apath</name> <init>= <expr><operator>(</operator><name>BitmapAndPath</name> <operator>*</operator><operator>)</operator> <name>bitmapqual</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

		<macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>apath-&gt;bitmapquals</argument>)</argument_list></macro>
		<block>{<block_content>
			<expr_stmt><expr><call><name>find_indexpath_quals</name><argument_list>(<argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>quals</name></expr></argument>, <argument><expr><name>preds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>bitmapqual</name></expr></argument>, <argument><expr><name>BitmapOrPath</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BitmapOrPath</name> <modifier>*</modifier></type><name>opath</name> <init>= <expr><operator>(</operator><name>BitmapOrPath</name> <operator>*</operator><operator>)</operator> <name>bitmapqual</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

		<macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>opath-&gt;bitmapquals</argument>)</argument_list></macro>
		<block>{<block_content>
			<expr_stmt><expr><call><name>find_indexpath_quals</name><argument_list>(<argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>quals</name></expr></argument>, <argument><expr><name>preds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>bitmapqual</name></expr></argument>, <argument><expr><name>IndexPath</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IndexPath</name>  <modifier>*</modifier></type><name>ipath</name> <init>= <expr><operator>(</operator><name>IndexPath</name> <operator>*</operator><operator>)</operator> <name>bitmapqual</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

		<macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>ipath-&gt;indexclauses</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>IndexClause</name> <modifier>*</modifier></type><name>iclause</name> <init>= <expr><operator>(</operator><name>IndexClause</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><operator>*</operator><name>quals</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>quals</name></expr></argument>, <argument><expr><name><name>iclause</name><operator>-&gt;</operator><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><operator>*</operator><name>preds</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><operator>*</operator><name>preds</name></expr></argument>, <argument><expr><call><name>list_copy</name><argument_list>(<argument><expr><name><name>ipath</name><operator>-&gt;</operator><name>indexinfo</name><operator>-&gt;</operator><name>indpred</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized node type: %d"</literal></expr></argument>, <argument><expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>bitmapqual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * find_list_position
 *		Return the given node's position (counting from 0) in the given
 *		list of nodes.  If it's not equal() to any existing list member,
 *		add it at the end, and return that position.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>find_list_position</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodelist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>*nodelist</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>oldnode</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>equal</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>oldnode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><operator>*</operator><name>nodelist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>nodelist</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * check_index_only
 *		Determine whether an index-only scan is possible for this index.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_index_only</name><parameter_list>(<parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>attrs_used</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>index_canreturn_attrs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>index_cannotreturn_attrs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* Index-only scans must be enabled */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enable_indexonlyscan</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Check that all needed attributes of the relation are available from the
	 * index.
	 */</comment>

	<comment type="block">/*
	 * First, identify all the attributes needed for joins or final output.
	 * Note: we must look at rel's targetlist, not the attr_needed data,
	 * because attr_needed isn't computed for inheritance child rels.
	 */</comment>
	<expr_stmt><expr><call><name>pull_varattnos</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>rel</name><operator>-&gt;</operator><name>reltarget</name><operator>-&gt;</operator><name>exprs</name></name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrs_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Add all the attributes used by restriction clauses; but consider only
	 * those clauses not implied by the index predicate, since ones that are
	 * so implied don't need to be checked explicitly in the plan.
	 *
	 * Note: attributes used only in index quals would not be needed at
	 * runtime either, if we are certain that the index is not lossy.  However
	 * it'd be complicated to account for that accurately, and it doesn't
	 * matter in most cases, since we'd conclude that such attributes are
	 * available from the index anyway.
	 */</comment>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>index-&gt;indrestrictinfo</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name> <init>= <expr><operator>(</operator><name>RestrictInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>pull_varattnos</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrs_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/*
	 * Construct a bitmapset of columns that the index can return back in an
	 * index-only scan.  If there are multiple index columns containing the
	 * same attribute, all of them must be capable of returning the value,
	 * since we might recheck operators on any of them.  (Potentially we could
	 * be smarter about that, but it's such a weird situation that it doesn't
	 * seem worth spending a lot of sweat on.)
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>ncolumns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>attno</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>indexkeys</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * For the moment, we just ignore index expressions.  It might be nice
		 * to do something with them, later.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>attno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>canreturn</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>index_canreturn_attrs</name> <operator>=</operator>
				<call><name>bms_add_member</name><argument_list>(<argument><expr><name>index_canreturn_attrs</name></expr></argument>,
							   <argument><expr><name>attno</name> <operator>-</operator> <name>FirstLowInvalidHeapAttributeNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>index_cannotreturn_attrs</name> <operator>=</operator>
				<call><name>bms_add_member</name><argument_list>(<argument><expr><name>index_cannotreturn_attrs</name></expr></argument>,
							   <argument><expr><name>attno</name> <operator>-</operator> <name>FirstLowInvalidHeapAttributeNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>index_canreturn_attrs</name> <operator>=</operator> <call><name>bms_del_members</name><argument_list>(<argument><expr><name>index_canreturn_attrs</name></expr></argument>,
											<argument><expr><name>index_cannotreturn_attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Do we have all the necessary attributes? */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bms_is_subset</name><argument_list>(<argument><expr><name>attrs_used</name></expr></argument>, <argument><expr><name>index_canreturn_attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name>attrs_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name>index_canreturn_attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name>index_cannotreturn_attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get_loop_count
 *		Choose the loop count estimate to use for costing a parameterized path
 *		with the given set of outer relids.
 *
 * Since we produce parameterized paths before we've begun to generate join
 * relations, it's impossible to predict exactly how many times a parameterized
 * path will be iterated; we don't know the size of the relation that will be
 * on the outside of the nestloop.  However, we should try to account for
 * multiple iterations somehow in costing the path.  The heuristic embodied
 * here is to use the rowcount of the smallest other base relation needed in
 * the join clauses used by the path.  (We could alternatively consider the
 * largest one, but that seems too optimistic.)  This is of course the right
 * answer for single-other-relation cases, and it seems like a reasonable
 * zero-order approximation for multiway-join cases.
 *
 * In addition, we check to see if the other side of each join clause is on
 * the inside of some semijoin that the current relation is on the outside of.
 * If so, the only way that a parameterized path could be used is if the
 * semijoin RHS has been unique-ified, so we should use the number of unique
 * RHS rows rather than using the relation's raw rowcount.
 *
 * Note: for this to work, allpaths.c must establish all baserel size
 * estimates before it begins to compute paths, or at least before it
 * calls create_index_paths().
 */</comment>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>get_loop_count</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>cur_relid</name></decl></parameter>, <parameter><decl><type><name>Relids</name></type> <name>outer_relids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>outer_relid</name></decl>;</decl_stmt>

	<comment type="block">/* For a non-parameterized path, just return 1.0 quickly */</comment>
	<if_stmt><if>if <condition>(<expr><name>outer_relids</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1.0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>outer_relid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>outer_relid</name> <operator>=</operator> <call><name>bms_next_member</name><argument_list>(<argument><expr><name>outer_relids</name></expr></argument>, <argument><expr><name>outer_relid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>outer_rel</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type>		<name>rowcount</name></decl>;</decl_stmt>

		<comment type="block">/* Paranoia: ignore bogus relid indexes */</comment>
		<if_stmt><if>if <condition>(<expr><name>outer_relid</name> <operator>&gt;=</operator> <name><name>root</name><operator>-&gt;</operator><name>simple_rel_array_size</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>outer_rel</name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>simple_rel_array</name><index>[<expr><name>outer_relid</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>outer_rel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>outer_rel</name><operator>-&gt;</operator><name>relid</name></name> <operator>==</operator> <name>outer_relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* sanity check on array */</comment>

		<comment type="block">/* Other relation could be proven empty, if so ignore */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>IS_DUMMY_REL</name><argument_list>(<argument><expr><name>outer_rel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* Otherwise, rel's rows estimate should be valid by now */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>outer_rel</name><operator>-&gt;</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Check to see if rel is on the inside of any semijoins */</comment>
		<expr_stmt><expr><name>rowcount</name> <operator>=</operator> <call><name>adjust_rowcount_for_semijoins</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
												 <argument><expr><name>cur_relid</name></expr></argument>,
												 <argument><expr><name>outer_relid</name></expr></argument>,
												 <argument><expr><name><name>outer_rel</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Remember smallest row count estimate among the outer rels */</comment>
		<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0.0</literal> <operator>||</operator> <name>result</name> <operator>&gt;</operator> <name>rowcount</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>rowcount</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<comment type="block">/* Return 1.0 if we found no valid relations (shouldn't happen) */</comment>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>result</name> <operator>&gt;</operator> <literal type="number">0.0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>result</name></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check to see if outer_relid is on the inside of any semijoin that cur_relid
 * is on the outside of.  If so, replace rowcount with the estimated number of
 * unique rows from the semijoin RHS (assuming that's smaller, which it might
 * not be).  The estimate is crude but it's the best we can do at this stage
 * of the proceedings.
 */</comment>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>adjust_rowcount_for_semijoins</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
							  <parameter><decl><type><name>Index</name></type> <name>cur_relid</name></decl></parameter>,
							  <parameter><decl><type><name>Index</name></type> <name>outer_relid</name></decl></parameter>,
							  <parameter><decl><type><name>double</name></type> <name>rowcount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>root-&gt;join_info_list</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SpecialJoinInfo</name> <modifier>*</modifier></type><name>sjinfo</name> <init>= <expr><operator>(</operator><name>SpecialJoinInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>sjinfo</name><operator>-&gt;</operator><name>jointype</name></name> <operator>==</operator> <name>JOIN_SEMI</name> <operator>&amp;&amp;</operator>
			<call><name>bms_is_member</name><argument_list>(<argument><expr><name>cur_relid</name></expr></argument>, <argument><expr><name><name>sjinfo</name><operator>-&gt;</operator><name>syn_lefthand</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>bms_is_member</name><argument_list>(<argument><expr><name>outer_relid</name></expr></argument>, <argument><expr><name><name>sjinfo</name><operator>-&gt;</operator><name>syn_righthand</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Estimate number of unique-ified rows */</comment>
			<decl_stmt><decl><type><name>double</name></type>		<name>nraw</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>double</name></type>		<name>nunique</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>nraw</name> <operator>=</operator> <call><name>approximate_joinrel_size</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>sjinfo</name><operator>-&gt;</operator><name>syn_righthand</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>nunique</name> <operator>=</operator> <call><name>estimate_num_groups</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
										  <argument><expr><name><name>sjinfo</name><operator>-&gt;</operator><name>semi_rhs_exprs</name></name></expr></argument>,
										  <argument><expr><name>nraw</name></expr></argument>,
										  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>rowcount</name> <operator>&gt;</operator> <name>nunique</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>rowcount</name> <operator>=</operator> <name>nunique</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<return>return <expr><name>rowcount</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Make an approximate estimate of the size of a joinrel.
 *
 * We don't have enough info at this point to get a good estimate, so we
 * just multiply the base relation sizes together.  Fortunately, this is
 * the right answer anyway for the most common case with a single relation
 * on the RHS of a semijoin.  Also, estimate_num_groups() has only a weak
 * dependency on its input_rows argument (it basically uses it as a clamp).
 * So we might be able to get a fairly decent end result even with a severe
 * overestimate of the RHS's raw size.
 */</comment>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>approximate_joinrel_size</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Relids</name></type> <name>relids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type>		<name>rowcount</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>relid</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>relid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>relid</name> <operator>=</operator> <call><name>bms_next_member</name><argument_list>(<argument><expr><name>relids</name></expr></argument>, <argument><expr><name>relid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl>;</decl_stmt>

		<comment type="block">/* Paranoia: ignore bogus relid indexes */</comment>
		<if_stmt><if>if <condition>(<expr><name>relid</name> <operator>&gt;=</operator> <name><name>root</name><operator>-&gt;</operator><name>simple_rel_array_size</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>rel</name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>simple_rel_array</name><index>[<expr><name>relid</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relid</name></name> <operator>==</operator> <name>relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* sanity check on array */</comment>

		<comment type="block">/* Relation could be proven empty, if so ignore */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>IS_DUMMY_REL</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* Otherwise, rel's rows estimate should be valid by now */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Accumulate product */</comment>
		<expr_stmt><expr><name>rowcount</name> <operator>*=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>rowcount</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************************
 *				----  ROUTINES TO CHECK QUERY CLAUSES  ----
 ****************************************************************************/</comment>

<comment type="block">/*
 * match_restriction_clauses_to_index
 *	  Identify restriction clauses for the rel that match the index.
 *	  Matching clauses are added to *clauseset.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>match_restriction_clauses_to_index</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
								   <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
								   <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>clauseset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* We can ignore clauses that are implied by the index predicate */</comment>
	<expr_stmt><expr><call><name>match_clauses_to_index</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>index</name><operator>-&gt;</operator><name>indrestrictinfo</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>clauseset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * match_join_clauses_to_index
 *	  Identify join clauses for the rel that match the index.
 *	  Matching clauses are added to *clauseset.
 *	  Also, add any potentially usable join OR clauses to *joinorclauses.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>match_join_clauses_to_index</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
							<parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
							<parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>clauseset</name></decl></parameter>,
							<parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>joinorclauses</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<comment type="block">/* Scan the rel's join clauses */</comment>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>rel-&gt;joininfo</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name> <init>= <expr><operator>(</operator><name>RestrictInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Check if clause can be moved to this rel */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>join_clause_is_movable_to</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* Potentially usable, so see if it matches the index or is an OR */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>restriction_is_or_clause</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>joinorclauses</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>joinorclauses</name></expr></argument>, <argument><expr><name>rinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>match_clause_to_index</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rinfo</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>clauseset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/*
 * match_eclass_clauses_to_index
 *	  Identify EquivalenceClass join clauses for the rel that match the index.
 *	  Matching clauses are added to *clauseset.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>match_eclass_clauses_to_index</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
							  <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>clauseset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>indexcol</name></decl>;</decl_stmt>

	<comment type="block">/* No work if rel is not in any such ECs */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>index</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>has_eclass_joins</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>indexcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>indexcol</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>nkeycolumns</name></name></expr>;</condition> <incr><expr><name>indexcol</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ec_member_matches_arg</name></type> <name>arg</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>clauses</name></decl>;</decl_stmt>

		<comment type="block">/* Generate clauses, skipping any that join to lateral_referencers */</comment>
		<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>indexcol</name></name> <operator>=</operator> <name>indexcol</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>clauses</name> <operator>=</operator> <call><name>generate_implied_equalities_for_column</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
														 <argument><expr><name><name>index</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>,
														 <argument><expr><name>ec_member_matches_indexcol</name></expr></argument>,
														 <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>arg</name></expr></argument>,
														 <argument><expr><name><name>index</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>lateral_referencers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * We have to check whether the results actually do match the index,
		 * since for non-btree indexes the EC's equality operators might not
		 * be in the index opclass (cf ec_member_matches_indexcol).
		 */</comment>
		<expr_stmt><expr><call><name>match_clauses_to_index</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>clauses</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>clauseset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * match_clauses_to_index
 *	  Perform match_clause_to_index() for each clause in a list.
 *	  Matching clauses are added to *clauseset.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>match_clauses_to_index</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
					   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>clauses</name></decl></parameter>,
					   <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
					   <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>clauseset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>clauses</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name> <init>= <expr><call><name>lfirst_node</name><argument_list>(<argument><expr><name>RestrictInfo</name></expr></argument>, <argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>match_clause_to_index</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rinfo</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>clauseset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/*
 * match_clause_to_index
 *	  Test whether a qual clause can be used with an index.
 *
 * If the clause is usable, add an IndexClause entry for it to the appropriate
 * list in *clauseset.  (*clauseset must be initialized to zeroes before first
 * call.)
 *
 * Note: in some circumstances we may find the same RestrictInfos coming from
 * multiple places.  Defend against redundant outputs by refusing to add a
 * clause twice (pointer equality should be a good enough check for this).
 *
 * Note: it's possible that a badly-defined index could have multiple matching
 * columns.  We always select the first match if so; this avoids scenarios
 * wherein we get an inflated idea of the index's selectivity by using the
 * same clause multiple times with different index columns.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>match_clause_to_index</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
					  <parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
					  <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
					  <parameter><decl><type><name>IndexClauseSet</name> <modifier>*</modifier></type><name>clauseset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>indexcol</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>rinfo</name><operator>-&gt;</operator><name>contain_outer_query_references</name></name> <operator>&amp;&amp;</operator>
		<operator>(</operator><call><name>GpPolicyIsPartitioned</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>cdbpolicy</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
		 <call><name>GpPolicyIsReplicated</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>cdbpolicy</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Don't allow pushing down a qual that needs to be evaluted
		 * in the outer query locus.
		 */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Never match pseudoconstants to indexes.  (Normally a match could not
	 * happen anyway, since a pseudoconstant clause couldn't contain a Var,
	 * but what if someone builds an expression index on a constant? It's not
	 * totally unreasonable to do so with a partial index, either.)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>rinfo</name><operator>-&gt;</operator><name>pseudoconstant</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If clause can't be used as an indexqual because it must wait till after
	 * some lower-security-level restriction clause, reject it.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>restriction_is_securely_promotable</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>, <argument><expr><name><name>index</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* OK, check each index key column for a match */</comment>
	<for>for <control>(<init><expr><name>indexcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>indexcol</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>nkeycolumns</name></name></expr>;</condition> <incr><expr><name>indexcol</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IndexClause</name> <modifier>*</modifier></type><name>iclause</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

		<comment type="block">/* Ignore duplicates */</comment>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>clauseset-&gt;indexclauses[indexcol]</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>IndexClause</name> <modifier>*</modifier></type><name>iclause</name> <init>= <expr><operator>(</operator><name>IndexClause</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>iclause</name><operator>-&gt;</operator><name>rinfo</name></name> <operator>==</operator> <name>rinfo</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return;</return></block_content></block></if></if_stmt>
		</block_content>}</block>

		<comment type="block">/* OK, try to match the clause to the index column */</comment>
		<expr_stmt><expr><name>iclause</name> <operator>=</operator> <call><name>match_clause_to_indexcol</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
										   <argument><expr><name>rinfo</name></expr></argument>,
										   <argument><expr><name>indexcol</name></expr></argument>,
										   <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>iclause</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Success, so record it */</comment>
			<expr_stmt><expr><name><name>clauseset</name><operator>-&gt;</operator><name>indexclauses</name><index>[<expr><name>indexcol</name></expr>]</index></name> <operator>=</operator>
				<call><name>lappend</name><argument_list>(<argument><expr><name><name>clauseset</name><operator>-&gt;</operator><name>indexclauses</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr></argument>, <argument><expr><name>iclause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>clauseset</name><operator>-&gt;</operator><name>nonempty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * match_clause_to_indexcol()
 *	  Determine whether a restriction clause matches a column of an index,
 *	  and if so, build an IndexClause node describing the details.
 *
 *	  To match an index normally, an operator clause:
 *
 *	  (1)  must be in the form (indexkey op const) or (const op indexkey);
 *		   and
 *	  (2)  must contain an operator which is in the index's operator family
 *		   for this column; and
 *	  (3)  must match the collation of the index, if collation is relevant.
 *
 *	  Our definition of "const" is exceedingly liberal: we allow anything that
 *	  doesn't involve a volatile function or a Var of the index's relation.
 *	  In particular, Vars belonging to other relations of the query are
 *	  accepted here, since a clause of that form can be used in a
 *	  parameterized indexscan.  It's the responsibility of higher code levels
 *	  to manage restriction and join clauses appropriately.
 *
 *	  Note: we do need to check for Vars of the index's relation on the
 *	  "const" side of the clause, since clauses like (a.f1 OP (b.f2 OP a.f3))
 *	  are not processable by a parameterized indexscan on a.f1, whereas
 *	  something like (a.f1 OP (b.f2 OP c.f3)) is.
 *
 *	  Presently, the executor can only deal with indexquals that have the
 *	  indexkey on the left, so we can only use clauses that have the indexkey
 *	  on the right if we can commute the clause to put the key on the left.
 *	  We handle that by generating an IndexClause with the correctly-commuted
 *	  opclause as a derived indexqual.
 *
 *	  If the index has a collation, the clause must have the same collation.
 *	  For collation-less indexes, we assume it doesn't matter; this is
 *	  necessary for cases like "hstore ? text", wherein hstore's operators
 *	  don't care about collation but the clause will get marked with a
 *	  collation anyway because of the text argument.  (This logic is
 *	  embodied in the macro IndexCollMatchesExprColl.)
 *
 *	  It is also possible to match RowCompareExpr clauses to indexes (but
 *	  currently, only btree indexes handle this).
 *
 *	  It is also possible to match ScalarArrayOpExpr clauses to indexes, when
 *	  the clause is of the form "indexkey op ANY (arrayconst)".
 *
 *	  For boolean indexes, it is also possible to match the clause directly
 *	  to the indexkey; or perhaps the clause is (NOT indexkey).
 *
 *	  And, last but not least, some operators and functions can be processed
 *	  to derive (typically lossy) indexquals from a clause that isn't in
 *	  itself indexable.  If we see that any operand of an OpExpr or FuncExpr
 *	  matches the index key, and the function has a planner support function
 *	  attached to it, we'll invoke the support function to see if such an
 *	  indexqual can be built.
 *
 * 'rinfo' is the clause to be tested (as a RestrictInfo node).
 * 'indexcol' is a column number of 'index' (counting from 0).
 * 'index' is the index of interest.
 *
 * Returns an IndexClause if the clause can be used with this index key,
 * or NULL if not.
 *
 * NOTE:  returns NULL if clause is an OR or AND clause; it is the
 * responsibility of higher-level routines to cope with those.
 */</comment>
<function><type><specifier>static</specifier> <name>IndexClause</name> <modifier>*</modifier></type>
<name>match_clause_to_indexcol</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
						 <parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
						 <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
						 <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexClause</name> <modifier>*</modifier></type><name>iclause</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Expr</name>	   <modifier>*</modifier></type><name>clause</name> <init>= <expr><name><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opfamily</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>indexcol</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>nkeycolumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Historically this code has coped with NULL clauses.  That's probably
	 * not possible anymore, but we might as well continue to cope.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>clause</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* First check for boolean-index cases. */</comment>
	<expr_stmt><expr><name>opfamily</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>opfamily</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IsBooleanOpfamily</name><argument_list>(<argument><expr><name>opfamily</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>iclause</name> <operator>=</operator> <call><name>match_boolean_index_clause</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>iclause</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>iclause</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Clause must be an opclause, funcclause, ScalarArrayOpExpr, or
	 * RowCompareExpr.  Or, if the index supports it, we can handle IS
	 * NULL/NOT NULL clauses.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name>OpExpr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><call><name>match_opclause_to_indexcol</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rinfo</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name>FuncExpr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><call><name>match_funcclause_to_indexcol</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rinfo</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name>ScalarArrayOpExpr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><call><name>match_saopclause_to_indexcol</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name>RowCompareExpr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><call><name>match_rowcompare_to_indexcol</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>amsearchnulls</name></name> <operator>&amp;&amp;</operator> <call><name>IsA</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name>NullTest</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NullTest</name>   <modifier>*</modifier></type><name>nt</name> <init>= <expr><operator>(</operator><name>NullTest</name> <operator>*</operator><operator>)</operator> <name>clause</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nt</name><operator>-&gt;</operator><name>argisrow</name></name> <operator>&amp;&amp;</operator>
			<call><name>match_index_to_operand</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>nt</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>iclause</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>IndexClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>rinfo</name></name> <operator>=</operator> <name>rinfo</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexquals</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>lossy</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcol</name></name> <operator>=</operator> <name>indexcol</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcols</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
			<return>return <expr><name>iclause</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * match_boolean_index_clause
 *	  Recognize restriction clauses that can be matched to a boolean index.
 *
 * The idea here is that, for an index on a boolean column that supports the
 * BooleanEqualOperator, we can transform a plain reference to the indexkey
 * into "indexkey = true", or "NOT indexkey" into "indexkey = false", etc,
 * so as to make the expression indexable using the index's "=" operator.
 * Since Postgres 8.1, we must do this because constant simplification does
 * the reverse transformation; without this code there'd be no way to use
 * such an index at all.
 *
 * This should be called only when IsBooleanOpfamily() recognizes the
 * index's operator family.  We check to see if the clause matches the
 * index's key, and if so, build a suitable IndexClause.
 */</comment>
<function><type><specifier>static</specifier> <name>IndexClause</name> <modifier>*</modifier></type>
<name>match_boolean_index_clause</name><parameter_list>(<parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
						   <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
						   <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>clause</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Expr</name>	   <modifier>*</modifier></type><name>op</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Direct match? */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>match_index_to_operand</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* convert to indexkey = TRUE */</comment>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>make_opclause</name><argument_list>(<argument><expr><name>BooleanEqualOperator</name></expr></argument>, <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
						   <argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>clause</name></expr></argument>,
						   <argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>makeBoolConst</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* NOT clause? */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>is_notclause</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>get_notclausearg</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>match_index_to_operand</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* convert to indexkey = FALSE */</comment>
			<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>make_opclause</name><argument_list>(<argument><expr><name>BooleanEqualOperator</name></expr></argument>, <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
							   <argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></argument>,
							   <argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>makeBoolConst</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/*
	 * Since we only consider clauses at top level of WHERE, we can convert
	 * indexkey IS TRUE and indexkey IS FALSE to index searches as well.  The
	 * different meaning for NULL isn't important.
	 */</comment>
	<if type="elseif">else if <condition>(<expr><name>clause</name> <operator>&amp;&amp;</operator> <call><name>IsA</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name>BooleanTest</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BooleanTest</name> <modifier>*</modifier></type><name>btest</name> <init>= <expr><operator>(</operator><name>BooleanTest</name> <operator>*</operator><operator>)</operator> <name>clause</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>btest</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>btest</name><operator>-&gt;</operator><name>booltesttype</name></name> <operator>==</operator> <name>IS_TRUE</name> <operator>&amp;&amp;</operator>
			<call><name>match_index_to_operand</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* convert to indexkey = TRUE */</comment>
			<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>make_opclause</name><argument_list>(<argument><expr><name>BooleanEqualOperator</name></expr></argument>, <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
							   <argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></argument>,
							   <argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>makeBoolConst</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>btest</name><operator>-&gt;</operator><name>booltesttype</name></name> <operator>==</operator> <name>IS_FALSE</name> <operator>&amp;&amp;</operator>
				 <call><name>match_index_to_operand</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* convert to indexkey = FALSE */</comment>
			<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>make_opclause</name><argument_list>(<argument><expr><name>BooleanEqualOperator</name></expr></argument>, <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
							   <argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></argument>,
							   <argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>makeBoolConst</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If we successfully made an operator clause from the given qual, we must
	 * wrap it in an IndexClause.  It's not lossy.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IndexClause</name> <modifier>*</modifier></type><name>iclause</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>IndexClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>rinfo</name></name> <operator>=</operator> <name>rinfo</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexquals</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>make_simple_restrictinfo</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>lossy</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcol</name></name> <operator>=</operator> <name>indexcol</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcols</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		<return>return <expr><name>iclause</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * match_opclause_to_indexcol()
 *	  Handles the OpExpr case for match_clause_to_indexcol(),
 *	  which see for comments.
 */</comment>
<function><type><specifier>static</specifier> <name>IndexClause</name> <modifier>*</modifier></type>
<name>match_opclause_to_indexcol</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
						   <parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
						   <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
						   <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexClause</name> <modifier>*</modifier></type><name>iclause</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpExpr</name>	   <modifier>*</modifier></type><name>clause</name> <init>= <expr><operator>(</operator><name>OpExpr</name> <operator>*</operator><operator>)</operator> <name><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>leftop</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>rightop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>expr_op</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>expr_coll</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Index</name></type>		<name>index_relid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opfamily</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>idxcollation</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Only binary operators need apply.  (In theory, a planner support
	 * function could do something with a unary operator, but it seems
	 * unlikely to be worth the cycles to check.)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>clause</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>leftop</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>clause</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rightop</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lsecond</name><argument_list>(<argument><expr><name><name>clause</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>expr_op</name> <operator>=</operator> <name><name>clause</name><operator>-&gt;</operator><name>opno</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>expr_coll</name> <operator>=</operator> <name><name>clause</name><operator>-&gt;</operator><name>inputcollid</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>index_relid</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>opfamily</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>opfamily</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>idxcollation</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>indexcollations</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check for clauses of the form: (indexkey operator constant) or
	 * (constant operator indexkey).  See match_clause_to_indexcol's notes
	 * about const-ness.
	 *
	 * Note that we don't ask the support function about clauses that don't
	 * have one of these forms.  Again, in principle it might be possible to
	 * do something, but it seems unlikely to be worth the cycles to check.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>match_index_to_operand</name><argument_list>(<argument><expr><name>leftop</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>bms_is_member</name><argument_list>(<argument><expr><name>index_relid</name></expr></argument>, <argument><expr><name><name>rinfo</name><operator>-&gt;</operator><name>right_relids</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>contain_volatile_functions</name><argument_list>(<argument><expr><name>rightop</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>IndexCollMatchesExprColl</name><argument_list>(<argument><expr><name>idxcollation</name></expr></argument>, <argument><expr><name>expr_coll</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>op_in_opfamily</name><argument_list>(<argument><expr><name>expr_op</name></expr></argument>, <argument><expr><name>opfamily</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>iclause</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>IndexClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>rinfo</name></name> <operator>=</operator> <name>rinfo</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexquals</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>lossy</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcol</name></name> <operator>=</operator> <name>indexcol</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcols</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
			<return>return <expr><name>iclause</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * If we didn't find a member of the index's opfamily, try the support
		 * function for the operator's underlying function.
		 */</comment>
		<expr_stmt><expr><call><name>set_opfuncid</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* make sure we have opfuncid */</comment>
		<return>return <expr><call><name>get_index_clause_from_support</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
											 <argument><expr><name>rinfo</name></expr></argument>,
											 <argument><expr><name><name>clause</name><operator>-&gt;</operator><name>opfuncid</name></name></expr></argument>,
											 <argument><expr><literal type="number">0</literal></expr></argument>, <comment type="block">/* indexarg on left */</comment>
											 <argument><expr><name>indexcol</name></expr></argument>,
											 <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>match_index_to_operand</name><argument_list>(<argument><expr><name>rightop</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>bms_is_member</name><argument_list>(<argument><expr><name>index_relid</name></expr></argument>, <argument><expr><name><name>rinfo</name><operator>-&gt;</operator><name>left_relids</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>contain_volatile_functions</name><argument_list>(<argument><expr><name>leftop</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>IndexCollMatchesExprColl</name><argument_list>(<argument><expr><name>idxcollation</name></expr></argument>, <argument><expr><name>expr_coll</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Oid</name></type>			<name>comm_op</name> <init>= <expr><call><name>get_commutator</name><argument_list>(<argument><expr><name>expr_op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>comm_op</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
				<call><name>op_in_opfamily</name><argument_list>(<argument><expr><name>comm_op</name></expr></argument>, <argument><expr><name>opfamily</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>commrinfo</name></decl>;</decl_stmt>

				<comment type="block">/* Build a commuted OpExpr and RestrictInfo */</comment>
				<expr_stmt><expr><name>commrinfo</name> <operator>=</operator> <call><name>commute_restrictinfo</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>, <argument><expr><name>comm_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Make an IndexClause showing that as a derived qual */</comment>
				<expr_stmt><expr><name>iclause</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>IndexClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>rinfo</name></name> <operator>=</operator> <name>rinfo</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexquals</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>commrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>lossy</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcol</name></name> <operator>=</operator> <name>indexcol</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcols</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
				<return>return <expr><name>iclause</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * If we didn't find a member of the index's opfamily, try the support
		 * function for the operator's underlying function.
		 */</comment>
		<expr_stmt><expr><call><name>set_opfuncid</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* make sure we have opfuncid */</comment>
		<return>return <expr><call><name>get_index_clause_from_support</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
											 <argument><expr><name>rinfo</name></expr></argument>,
											 <argument><expr><name><name>clause</name><operator>-&gt;</operator><name>opfuncid</name></name></expr></argument>,
											 <argument><expr><literal type="number">1</literal></expr></argument>, <comment type="block">/* indexarg on right */</comment>
											 <argument><expr><name>indexcol</name></expr></argument>,
											 <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * match_funcclause_to_indexcol()
 *	  Handles the FuncExpr case for match_clause_to_indexcol(),
 *	  which see for comments.
 */</comment>
<function><type><specifier>static</specifier> <name>IndexClause</name> <modifier>*</modifier></type>
<name>match_funcclause_to_indexcol</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
							 <parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
							 <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
							 <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncExpr</name>   <modifier>*</modifier></type><name>clause</name> <init>= <expr><operator>(</operator><name>FuncExpr</name> <operator>*</operator><operator>)</operator> <name><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>indexarg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We have no built-in intelligence about function clauses, but if there's
	 * a planner support function, it might be able to do something.  But, to
	 * cut down on wasted planning cycles, only call the support function if
	 * at least one argument matches the target index column.
	 *
	 * Note that we don't insist on the other arguments being pseudoconstants;
	 * the support function has to check that.  This is to allow cases where
	 * only some of the other arguments need to be included in the indexqual.
	 */</comment>
	<expr_stmt><expr><name>indexarg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>clause-&gt;args</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>match_index_to_operand</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><call><name>get_index_clause_from_support</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
												 <argument><expr><name>rinfo</name></expr></argument>,
												 <argument><expr><name><name>clause</name><operator>-&gt;</operator><name>funcid</name></name></expr></argument>,
												 <argument><expr><name>indexarg</name></expr></argument>,
												 <argument><expr><name>indexcol</name></expr></argument>,
												 <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>indexarg</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get_index_clause_from_support()
 *		If the function has a planner support function, try to construct
 *		an IndexClause using indexquals created by the support function.
 */</comment>
<function><type><specifier>static</specifier> <name>IndexClause</name> <modifier>*</modifier></type>
<name>get_index_clause_from_support</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
							  <parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
							  <parameter><decl><type><name>Oid</name></type> <name>funcid</name></decl></parameter>,
							  <parameter><decl><type><name>int</name></type> <name>indexarg</name></decl></parameter>,
							  <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
							  <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>prosupport</name> <init>= <expr><call><name>get_func_support</name><argument_list>(<argument><expr><name>funcid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SupportRequestIndexCondition</name></type> <name>req</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>sresult</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>prosupport</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_SupportRequestIndexCondition</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>root</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>funcid</name></name> <operator>=</operator> <name>funcid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>node</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>indexarg</name></name> <operator>=</operator> <name>indexarg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>indexcol</name></name> <operator>=</operator> <name>indexcol</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>opfamily</name></name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>opfamily</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>indexcollation</name></name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>indexcollations</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>lossy</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>			<comment type="block">/* default assumption */</comment>

	<expr_stmt><expr><name>sresult</name> <operator>=</operator> <operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator>
		<call><name>DatumGetPointer</name><argument_list>(<argument><expr><call><name>OidFunctionCall1</name><argument_list>(<argument><expr><name>prosupport</name></expr></argument>,
										 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>sresult</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IndexClause</name> <modifier>*</modifier></type><name>iclause</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>IndexClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>indexquals</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * The support function API says it should just give back bare
		 * clauses, so here we must wrap each one in a RestrictInfo.
		 */</comment>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>sresult</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Expr</name>	   <modifier>*</modifier></type><name>clause</name> <init>= <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>indexquals</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>indexquals</name></expr></argument>, <argument><expr><call><name>make_simple_restrictinfo</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>rinfo</name></name> <operator>=</operator> <name>rinfo</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexquals</name></name> <operator>=</operator> <name>indexquals</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>lossy</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>lossy</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcol</name></name> <operator>=</operator> <name>indexcol</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcols</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

		<return>return <expr><name>iclause</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * match_saopclause_to_indexcol()
 *	  Handles the ScalarArrayOpExpr case for match_clause_to_indexcol(),
 *	  which see for comments.
 */</comment>
<function><type><specifier>static</specifier> <name>IndexClause</name> <modifier>*</modifier></type>
<name>match_saopclause_to_indexcol</name><parameter_list>(<parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
							 <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
							 <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScalarArrayOpExpr</name> <modifier>*</modifier></type><name>saop</name> <init>= <expr><operator>(</operator><name>ScalarArrayOpExpr</name> <operator>*</operator><operator>)</operator> <name><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>leftop</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>rightop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relids</name></type>		<name>right_relids</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>expr_op</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>expr_coll</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Index</name></type>		<name>index_relid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opfamily</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>idxcollation</name></decl>;</decl_stmt>

	<comment type="block">/* We only accept ANY clauses, not ALL */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>saop</name><operator>-&gt;</operator><name>useOr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>leftop</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>saop</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rightop</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lsecond</name><argument_list>(<argument><expr><name><name>saop</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>right_relids</name> <operator>=</operator> <call><name>pull_varnos</name><argument_list>(<argument><expr><name>rightop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>expr_op</name> <operator>=</operator> <name><name>saop</name><operator>-&gt;</operator><name>opno</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>expr_coll</name> <operator>=</operator> <name><name>saop</name><operator>-&gt;</operator><name>inputcollid</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>index_relid</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>opfamily</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>opfamily</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>idxcollation</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>indexcollations</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * We must have indexkey on the left and a pseudo-constant array argument.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>match_index_to_operand</name><argument_list>(<argument><expr><name>leftop</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>bms_is_member</name><argument_list>(<argument><expr><name>index_relid</name></expr></argument>, <argument><expr><name>right_relids</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>contain_volatile_functions</name><argument_list>(<argument><expr><name>rightop</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>IndexCollMatchesExprColl</name><argument_list>(<argument><expr><name>idxcollation</name></expr></argument>, <argument><expr><name>expr_coll</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>op_in_opfamily</name><argument_list>(<argument><expr><name>expr_op</name></expr></argument>, <argument><expr><name>opfamily</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>IndexClause</name> <modifier>*</modifier></type><name>iclause</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>IndexClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>rinfo</name></name> <operator>=</operator> <name>rinfo</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexquals</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>lossy</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcol</name></name> <operator>=</operator> <name>indexcol</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcols</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
			<return>return <expr><name>iclause</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * We do not currently ask support functions about ScalarArrayOpExprs,
		 * though in principle we could.
		 */</comment>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * match_rowcompare_to_indexcol()
 *	  Handles the RowCompareExpr case for match_clause_to_indexcol(),
 *	  which see for comments.
 *
 * In this routine we check whether the first column of the row comparison
 * matches the target index column.  This is sufficient to guarantee that some
 * index condition can be constructed from the RowCompareExpr --- the rest
 * is handled by expand_indexqual_rowcompare().
 */</comment>
<function><type><specifier>static</specifier> <name>IndexClause</name> <modifier>*</modifier></type>
<name>match_rowcompare_to_indexcol</name><parameter_list>(<parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
							 <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
							 <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RowCompareExpr</name> <modifier>*</modifier></type><name>clause</name> <init>= <expr><operator>(</operator><name>RowCompareExpr</name> <operator>*</operator><operator>)</operator> <name><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Index</name></type>		<name>index_relid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opfamily</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>idxcollation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>leftop</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>rightop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>var_on_left</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>expr_op</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>expr_coll</name></decl>;</decl_stmt>

	<comment type="block">/* Forget it if we're not dealing with a btree index */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>relam</name></name> <operator>!=</operator> <name>BTREE_AM_OID</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>index_relid</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>opfamily</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>opfamily</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>idxcollation</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>indexcollations</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * We could do the matching on the basis of insisting that the opfamily
	 * shown in the RowCompareExpr be the same as the index column's opfamily,
	 * but that could fail in the presence of reverse-sort opfamilies: it'd be
	 * a matter of chance whether RowCompareExpr had picked the forward or
	 * reverse-sort family.  So look only at the operator, and match if it is
	 * a member of the index's opfamily (after commutation, if the indexkey is
	 * on the right).  We'll worry later about whether any additional
	 * operators are matchable to the index.
	 */</comment>
	<expr_stmt><expr><name>leftop</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>clause</name><operator>-&gt;</operator><name>largs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rightop</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>clause</name><operator>-&gt;</operator><name>rargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>expr_op</name> <operator>=</operator> <call><name>linitial_oid</name><argument_list>(<argument><expr><name><name>clause</name><operator>-&gt;</operator><name>opnos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>expr_coll</name> <operator>=</operator> <call><name>linitial_oid</name><argument_list>(<argument><expr><name><name>clause</name><operator>-&gt;</operator><name>inputcollids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Collations must match, if relevant */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IndexCollMatchesExprColl</name><argument_list>(<argument><expr><name>idxcollation</name></expr></argument>, <argument><expr><name>expr_coll</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * These syntactic tests are the same as in match_opclause_to_indexcol()
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>match_index_to_operand</name><argument_list>(<argument><expr><name>leftop</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>bms_is_member</name><argument_list>(<argument><expr><name>index_relid</name></expr></argument>, <argument><expr><call><name>pull_varnos</name><argument_list>(<argument><expr><name>rightop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>contain_volatile_functions</name><argument_list>(<argument><expr><name>rightop</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* OK, indexkey is on left */</comment>
		<expr_stmt><expr><name>var_on_left</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>match_index_to_operand</name><argument_list>(<argument><expr><name>rightop</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>!</operator><call><name>bms_is_member</name><argument_list>(<argument><expr><name>index_relid</name></expr></argument>, <argument><expr><call><name>pull_varnos</name><argument_list>(<argument><expr><name>leftop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>!</operator><call><name>contain_volatile_functions</name><argument_list>(<argument><expr><name>leftop</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* indexkey is on right, so commute the operator */</comment>
		<expr_stmt><expr><name>expr_op</name> <operator>=</operator> <call><name>get_commutator</name><argument_list>(<argument><expr><name>expr_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>expr_op</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>var_on_left</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

	<comment type="block">/* We're good if the operator is the right type of opfamily member */</comment>
	<switch>switch <condition>(<expr><call><name>get_op_opfamily_strategy</name><argument_list>(<argument><expr><name>expr_op</name></expr></argument>, <argument><expr><name>opfamily</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BTLessStrategyNumber</name></expr>:</case>
		<case>case <expr><name>BTLessEqualStrategyNumber</name></expr>:</case>
		<case>case <expr><name>BTGreaterEqualStrategyNumber</name></expr>:</case>
		<case>case <expr><name>BTGreaterStrategyNumber</name></expr>:</case>
			<return>return <expr><call><name>expand_indexqual_rowcompare</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>,
											   <argument><expr><name>indexcol</name></expr></argument>,
											   <argument><expr><name>index</name></expr></argument>,
											   <argument><expr><name>expr_op</name></expr></argument>,
											   <argument><expr><name>var_on_left</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * expand_indexqual_rowcompare --- expand a single indexqual condition
 *		that is a RowCompareExpr
 *
 * It's already known that the first column of the row comparison matches
 * the specified column of the index.  We can use additional columns of the
 * row comparison as index qualifications, so long as they match the index
 * in the "same direction", ie, the indexkeys are all on the same side of the
 * clause and the operators are all the same-type members of the opfamilies.
 *
 * If all the columns of the RowCompareExpr match in this way, we just use it
 * as-is, except for possibly commuting it to put the indexkeys on the left.
 *
 * Otherwise, we build a shortened RowCompareExpr (if more than one
 * column matches) or a simple OpExpr (if the first-column match is all
 * there is).  In these cases the modified clause is always "&lt;=" or "&gt;="
 * even when the original was "&lt;" or "&gt;" --- this is necessary to match all
 * the rows that could match the original.  (We are building a lossy version
 * of the row comparison when we do this, so we set lossy = true.)
 *
 * Note: this is really just the last half of match_rowcompare_to_indexcol,
 * but we split it out for comprehensibility.
 */</comment>
<function><type><specifier>static</specifier> <name>IndexClause</name> <modifier>*</modifier></type>
<name>expand_indexqual_rowcompare</name><parameter_list>(<parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
							<parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
							<parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
							<parameter><decl><type><name>Oid</name></type> <name>expr_op</name></decl></parameter>,
							<parameter><decl><type><name>bool</name></type> <name>var_on_left</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexClause</name> <modifier>*</modifier></type><name>iclause</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>IndexClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RowCompareExpr</name> <modifier>*</modifier></type><name>clause</name> <init>= <expr><operator>(</operator><name>RowCompareExpr</name> <operator>*</operator><operator>)</operator> <name><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>op_strategy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>op_lefttype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>op_righttype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>matching_cols</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>expr_ops</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>opfamilies</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>lefttypes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>righttypes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>new_ops</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>var_args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>non_var_args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>vargs_cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>nargs_cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>opnos_cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>collids_cell</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>rinfo</name></name> <operator>=</operator> <name>rinfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcol</name></name> <operator>=</operator> <name>indexcol</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_on_left</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>var_args</name> <operator>=</operator> <name><name>clause</name><operator>-&gt;</operator><name>largs</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>non_var_args</name> <operator>=</operator> <name><name>clause</name><operator>-&gt;</operator><name>rargs</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>var_args</name> <operator>=</operator> <name><name>clause</name><operator>-&gt;</operator><name>rargs</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>non_var_args</name> <operator>=</operator> <name><name>clause</name><operator>-&gt;</operator><name>largs</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>get_op_opfamily_properties</name><argument_list>(<argument><expr><name>expr_op</name></expr></argument>, <argument><expr><name><name>index</name><operator>-&gt;</operator><name>opfamily</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name>op_strategy</name></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name>op_lefttype</name></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name>op_righttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize returned list of which index columns are used */</comment>
	<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcols</name></name> <operator>=</operator> <call><name>list_make1_int</name><argument_list>(<argument><expr><name>indexcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Build lists of ops, opfamilies and operator datatypes in case needed */</comment>
	<expr_stmt><expr><name>expr_ops</name> <operator>=</operator> <call><name>list_make1_oid</name><argument_list>(<argument><expr><name>expr_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>opfamilies</name> <operator>=</operator> <call><name>list_make1_oid</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>opfamily</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lefttypes</name> <operator>=</operator> <call><name>list_make1_oid</name><argument_list>(<argument><expr><name>op_lefttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>righttypes</name> <operator>=</operator> <call><name>list_make1_oid</name><argument_list>(<argument><expr><name>op_righttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * See how many of the remaining columns match some index column in the
	 * same way.  As in match_clause_to_indexcol(), the "other" side of any
	 * potential index condition is OK as long as it doesn't use Vars from the
	 * indexed relation.
	 */</comment>
	<expr_stmt><expr><name>matching_cols</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>vargs_cell</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><call><name>list_head</name><argument_list>(<argument><expr><name>var_args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nargs_cell</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><call><name>list_head</name><argument_list>(<argument><expr><name>non_var_args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>opnos_cell</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><call><name>list_head</name><argument_list>(<argument><expr><name><name>clause</name><operator>-&gt;</operator><name>opnos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>collids_cell</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><call><name>list_head</name><argument_list>(<argument><expr><name><name>clause</name><operator>-&gt;</operator><name>inputcollids</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>vargs_cell</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>varop</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>vargs_cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>constop</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>nargs_cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>expr_op</name> <operator>=</operator> <call><name>lfirst_oid</name><argument_list>(<argument><expr><name>opnos_cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_on_left</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* indexkey is on right, so commute the operator */</comment>
			<expr_stmt><expr><name>expr_op</name> <operator>=</operator> <call><name>get_commutator</name><argument_list>(<argument><expr><name>expr_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>expr_op</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>			<comment type="block">/* operator is not usable */</comment>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>bms_is_member</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><call><name>pull_varnos</name><argument_list>(<argument><expr><name>constop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>				<comment type="block">/* no good, Var on wrong side */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>contain_volatile_functions</name><argument_list>(<argument><expr><name>constop</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>				<comment type="block">/* no good, volatile comparison value */</comment>

		<comment type="block">/*
		 * The Var side can match any key column of the index.
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>nkeycolumns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>match_index_to_operand</name><argument_list>(<argument><expr><name>varop</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
				<call><name>get_op_opfamily_strategy</name><argument_list>(<argument><expr><name>expr_op</name></expr></argument>,
										 <argument><expr><name><name>index</name><operator>-&gt;</operator><name>opfamily</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>op_strategy</name> <operator>&amp;&amp;</operator>
				<call><name>IndexCollMatchesExprColl</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>indexcollations</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
										 <argument><expr><call><name>lfirst_oid</name><argument_list>(<argument><expr><name>collids_cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>index</name><operator>-&gt;</operator><name>nkeycolumns</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>				<comment type="block">/* no match found */</comment>

		<comment type="block">/* Add column number to returned list */</comment>
		<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcols</name></name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcols</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Add operator info to lists */</comment>
		<expr_stmt><expr><call><name>get_op_opfamily_properties</name><argument_list>(<argument><expr><name>expr_op</name></expr></argument>, <argument><expr><name><name>index</name><operator>-&gt;</operator><name>opfamily</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name>op_strategy</name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name>op_lefttype</name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name>op_righttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>expr_ops</name> <operator>=</operator> <call><name>lappend_oid</name><argument_list>(<argument><expr><name>expr_ops</name></expr></argument>, <argument><expr><name>expr_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>opfamilies</name> <operator>=</operator> <call><name>lappend_oid</name><argument_list>(<argument><expr><name>opfamilies</name></expr></argument>, <argument><expr><name><name>index</name><operator>-&gt;</operator><name>opfamily</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>lefttypes</name> <operator>=</operator> <call><name>lappend_oid</name><argument_list>(<argument><expr><name>lefttypes</name></expr></argument>, <argument><expr><name>op_lefttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>righttypes</name> <operator>=</operator> <call><name>lappend_oid</name><argument_list>(<argument><expr><name>righttypes</name></expr></argument>, <argument><expr><name>op_righttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* This column matches, keep scanning */</comment>
		<expr_stmt><expr><name>matching_cols</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>vargs_cell</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>vargs_cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nargs_cell</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>nargs_cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>opnos_cell</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>opnos_cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>collids_cell</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>collids_cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Result is non-lossy if all columns are usable as index quals */</comment>
	<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>lossy</name></name> <operator>=</operator> <operator>(</operator><name>matching_cols</name> <operator>!=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>clause</name><operator>-&gt;</operator><name>opnos</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * We can use rinfo-&gt;clause as-is if we have var on left and it's all
	 * usable as index quals.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>var_on_left</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>iclause</name><operator>-&gt;</operator><name>lossy</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexquals</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * We have to generate a modified rowcompare (possibly just one
		 * OpExpr).  The painful part of this is changing &lt; to &lt;= or &gt; to &gt;=,
		 * so deal with that first.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iclause</name><operator>-&gt;</operator><name>lossy</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* very easy, just use the commuted operators */</comment>
			<expr_stmt><expr><name>new_ops</name> <operator>=</operator> <name>expr_ops</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>op_strategy</name> <operator>==</operator> <name>BTLessEqualStrategyNumber</name> <operator>||</operator>
				 <name>op_strategy</name> <operator>==</operator> <name>BTGreaterEqualStrategyNumber</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* easy, just use the same (possibly commuted) operators */</comment>
			<expr_stmt><expr><name>new_ops</name> <operator>=</operator> <call><name>list_truncate</name><argument_list>(<argument><expr><name>expr_ops</name></expr></argument>, <argument><expr><name>matching_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>opfamilies_cell</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lefttypes_cell</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>righttypes_cell</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>op_strategy</name> <operator>==</operator> <name>BTLessStrategyNumber</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>op_strategy</name> <operator>=</operator> <name>BTLessEqualStrategyNumber</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>op_strategy</name> <operator>==</operator> <name>BTGreaterStrategyNumber</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>op_strategy</name> <operator>=</operator> <name>BTGreaterEqualStrategyNumber</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected strategy number %d"</literal></expr></argument>, <argument><expr><name>op_strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>new_ops</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
			<macro><name>forthree</name><argument_list>(<argument>opfamilies_cell</argument>, <argument>opfamilies</argument>,
					 <argument>lefttypes_cell</argument>, <argument>lefttypes</argument>,
					 <argument>righttypes_cell</argument>, <argument>righttypes</argument>)</argument_list></macro>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>opfam</name> <init>= <expr><call><name>lfirst_oid</name><argument_list>(<argument><expr><name>opfamilies_cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>lefttype</name> <init>= <expr><call><name>lfirst_oid</name><argument_list>(<argument><expr><name>lefttypes_cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>righttype</name> <init>= <expr><call><name>lfirst_oid</name><argument_list>(<argument><expr><name>righttypes_cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>expr_op</name> <operator>=</operator> <call><name>get_opfamily_member</name><argument_list>(<argument><expr><name>opfam</name></expr></argument>, <argument><expr><name>lefttype</name></expr></argument>, <argument><expr><name>righttype</name></expr></argument>,
											  <argument><expr><name>op_strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>expr_op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* should not happen */</comment>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"missing operator %d(%u,%u) in opfamily %u"</literal></expr></argument>,
						 <argument><expr><name>op_strategy</name></expr></argument>, <argument><expr><name>lefttype</name></expr></argument>, <argument><expr><name>righttype</name></expr></argument>, <argument><expr><name>opfam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>new_ops</name> <operator>=</operator> <call><name>lappend_oid</name><argument_list>(<argument><expr><name>new_ops</name></expr></argument>, <argument><expr><name>expr_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* If we have more than one matching col, create a subset rowcompare */</comment>
		<if_stmt><if>if <condition>(<expr><name>matching_cols</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>RowCompareExpr</name> <modifier>*</modifier></type><name>rc</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RowCompareExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rctype</name></name> <operator>=</operator> <operator>(</operator><name>RowCompareType</name><operator>)</operator> <name>op_strategy</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>opnos</name></name> <operator>=</operator> <name>new_ops</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>opfamilies</name></name> <operator>=</operator> <call><name>list_truncate</name><argument_list>(<argument><expr><call><name>list_copy</name><argument_list>(<argument><expr><name><name>clause</name><operator>-&gt;</operator><name>opfamilies</name></name></expr></argument>)</argument_list></call></expr></argument>,
										   <argument><expr><name>matching_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>inputcollids</name></name> <operator>=</operator> <call><name>list_truncate</name><argument_list>(<argument><expr><call><name>list_copy</name><argument_list>(<argument><expr><name><name>clause</name><operator>-&gt;</operator><name>inputcollids</name></name></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>matching_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>largs</name></name> <operator>=</operator> <call><name>list_truncate</name><argument_list>(<argument><expr><call><name>copyObject</name><argument_list>(<argument><expr><name>var_args</name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name>matching_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rargs</name></name> <operator>=</operator> <call><name>list_truncate</name><argument_list>(<argument><expr><call><name>copyObject</name><argument_list>(<argument><expr><name>non_var_args</name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name>matching_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexquals</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>make_simple_restrictinfo</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>Expr</name>	   <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

			<comment type="block">/* We don't report an index column list in this case */</comment>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexcols</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>make_opclause</name><argument_list>(<argument><expr><call><name>linitial_oid</name><argument_list>(<argument><expr><name>new_ops</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
							   <argument><expr><call><name>copyObject</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>var_args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><call><name>copyObject</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>non_var_args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><name>InvalidOid</name></expr></argument>,
							   <argument><expr><call><name>linitial_oid</name><argument_list>(<argument><expr><name><name>clause</name><operator>-&gt;</operator><name>inputcollids</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iclause</name><operator>-&gt;</operator><name>indexquals</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>make_simple_restrictinfo</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>iclause</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************************
 *				----  ROUTINES TO CHECK ORDERING OPERATORS	----
 ****************************************************************************/</comment>

<comment type="block">/*
 * match_pathkeys_to_index
 *		Test whether an index can produce output ordered according to the
 *		given pathkeys using "ordering operators".
 *
 * If it can, return a list of suitable ORDER BY expressions, each of the form
 * "indexedcol operator pseudoconstant", along with an integer list of the
 * index column numbers (zero based) that each clause would be used with.
 * NIL lists are returned if the ordering is not achievable this way.
 *
 * On success, the result list is ordered by pathkeys, and in fact is
 * one-to-one with the requested pathkeys.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>match_pathkeys_to_index</name><parameter_list>(<parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>pathkeys</name></decl></parameter>,
						<parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>orderby_clauses_p</name></decl></parameter>,
						<parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>clause_columns_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>orderby_clauses</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>clause_columns</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc1</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>orderby_clauses_p</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>	<comment type="block">/* set default results */</comment>
	<expr_stmt><expr><operator>*</operator><name>clause_columns_p</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

	<comment type="block">/* Only indexes with the amcanorderbyop property are interesting here */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>index</name><operator>-&gt;</operator><name>amcanorderbyop</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc1</argument>, <argument>pathkeys</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PathKey</name>    <modifier>*</modifier></type><name>pathkey</name> <init>= <expr><operator>(</operator><name>PathKey</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc2</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Note: for any failure to match, we just return NIL immediately.
		 * There is no value in matching just some of the pathkeys.
		 */</comment>

		<comment type="block">/* Pathkey must request default sort order for the target opfamily */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pathkey</name><operator>-&gt;</operator><name>pk_strategy</name></name> <operator>!=</operator> <name>BTLessStrategyNumber</name> <operator>||</operator>
			<name><name>pathkey</name><operator>-&gt;</operator><name>pk_nulls_first</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<comment type="block">/* If eclass is volatile, no hope of using an indexscan */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pathkey</name><operator>-&gt;</operator><name>pk_eclass</name><operator>-&gt;</operator><name>ec_has_volatile</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Try to match eclass member expression(s) to index.  Note that child
		 * EC members are considered, but only when they belong to the target
		 * relation.  (Unlike regular members, the same expression could be a
		 * child member of more than one EC.  Therefore, the same index could
		 * be considered to match more than one pathkey list, which is OK
		 * here.  See also get_eclass_for_sort_expr.)
		 */</comment>
		<macro><name>foreach</name><argument_list>(<argument>lc2</argument>, <argument>pathkey-&gt;pk_eclass-&gt;ec_members</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>EquivalenceMember</name> <modifier>*</modifier></type><name>member</name> <init>= <expr><operator>(</operator><name>EquivalenceMember</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>indexcol</name></decl>;</decl_stmt>

			<comment type="block">/* No possibility of match if it references other relations */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bms_equal</name><argument_list>(<argument><expr><name><name>member</name><operator>-&gt;</operator><name>em_relids</name></name></expr></argument>, <argument><expr><name><name>index</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>relids</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * We allow any column of the index to match each pathkey; they
			 * don't have to match left-to-right as you might expect.  This is
			 * correct for GiST, and it doesn't matter for SP-GiST because
			 * that doesn't handle multiple columns anyway, and no other
			 * existing AMs support amcanorderbyop.  We might need different
			 * logic in future for other implementations.
			 */</comment>
			<for>for <control>(<init><expr><name>indexcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>indexcol</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>nkeycolumns</name></name></expr>;</condition> <incr><expr><name>indexcol</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Expr</name>	   <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>match_clause_to_ordering_op</name><argument_list>(<argument><expr><name>index</name></expr></argument>,
												   <argument><expr><name>indexcol</name></expr></argument>,
												   <argument><expr><name><name>member</name><operator>-&gt;</operator><name>em_expr</name></name></expr></argument>,
												   <argument><expr><name><name>pathkey</name><operator>-&gt;</operator><name>pk_opfamily</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>expr</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>orderby_clauses</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>orderby_clauses</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>clause_columns</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>clause_columns</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>

			<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* don't want to look at remaining members */</comment>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>				<comment type="block">/* fail if no match for this pathkey */</comment>
			<return>return;</return></block_content></block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><operator>*</operator><name>orderby_clauses_p</name> <operator>=</operator> <name>orderby_clauses</name></expr>;</expr_stmt>	<comment type="block">/* success! */</comment>
	<expr_stmt><expr><operator>*</operator><name>clause_columns_p</name> <operator>=</operator> <name>clause_columns</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * match_clause_to_ordering_op
 *	  Determines whether an ordering operator expression matches an
 *	  index column.
 *
 *	  This is similar to, but simpler than, match_clause_to_indexcol.
 *	  We only care about simple OpExpr cases.  The input is a bare
 *	  expression that is being ordered by, which must be of the form
 *	  (indexkey op const) or (const op indexkey) where op is an ordering
 *	  operator for the column's opfamily.
 *
 * 'index' is the index of interest.
 * 'indexcol' is a column number of 'index' (counting from 0).
 * 'clause' is the ordering expression to be tested.
 * 'pk_opfamily' is the btree opfamily describing the required sort order.
 *
 * Note that we currently do not consider the collation of the ordering
 * operator's result.  In practical cases the result type will be numeric
 * and thus have no collation, and it's not very clear what to match to
 * if it did have a collation.  The index's collation should match the
 * ordering operator's input collation, not its result.
 *
 * If successful, return 'clause' as-is if the indexkey is on the left,
 * otherwise a commuted copy of 'clause'.  If no match, return NULL.
 */</comment>
<function><type><specifier>static</specifier> <name>Expr</name> <modifier>*</modifier></type>
<name>match_clause_to_ordering_op</name><parameter_list>(<parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
							<parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
							<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>,
							<parameter><decl><type><name>Oid</name></type> <name>pk_opfamily</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opfamily</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>idxcollation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>leftop</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>rightop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>expr_op</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>expr_coll</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>sortfamily</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>commuted</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>indexcol</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>nkeycolumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>opfamily</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>opfamily</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>idxcollation</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>indexcollations</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Clause must be a binary opclause.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_opclause</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>leftop</name> <operator>=</operator> <call><name>get_leftop</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rightop</name> <operator>=</operator> <call><name>get_rightop</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>leftop</name> <operator>||</operator> <operator>!</operator><name>rightop</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>expr_op</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>OpExpr</name> <operator>*</operator><operator>)</operator> <name>clause</name><operator>)</operator><operator>-&gt;</operator><name>opno</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>expr_coll</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>OpExpr</name> <operator>*</operator><operator>)</operator> <name>clause</name><operator>)</operator><operator>-&gt;</operator><name>inputcollid</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * We can forget the whole thing right away if wrong collation.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IndexCollMatchesExprColl</name><argument_list>(<argument><expr><name>idxcollation</name></expr></argument>, <argument><expr><name>expr_coll</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Check for clauses of the form: (indexkey operator constant) or
	 * (constant operator indexkey).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>match_index_to_operand</name><argument_list>(<argument><expr><name>leftop</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>contain_var_clause</name><argument_list>(<argument><expr><name>rightop</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>contain_volatile_functions</name><argument_list>(<argument><expr><name>rightop</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>commuted</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>match_index_to_operand</name><argument_list>(<argument><expr><name>rightop</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>!</operator><call><name>contain_var_clause</name><argument_list>(<argument><expr><name>leftop</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>!</operator><call><name>contain_volatile_functions</name><argument_list>(<argument><expr><name>leftop</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Might match, but we need a commuted operator */</comment>
		<expr_stmt><expr><name>expr_op</name> <operator>=</operator> <call><name>get_commutator</name><argument_list>(<argument><expr><name>expr_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>expr_op</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>commuted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * Is the (commuted) operator an ordering operator for the opfamily? And
	 * if so, does it yield the right sorting semantics?
	 */</comment>
	<expr_stmt><expr><name>sortfamily</name> <operator>=</operator> <call><name>get_op_opfamily_sortfamily</name><argument_list>(<argument><expr><name>expr_op</name></expr></argument>, <argument><expr><name>opfamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>sortfamily</name> <operator>!=</operator> <name>pk_opfamily</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* We have a match.  Return clause or a commuted version thereof. */</comment>
	<if_stmt><if>if <condition>(<expr><name>commuted</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OpExpr</name>	   <modifier>*</modifier></type><name>newclause</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>OpExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* flat-copy all the fields of clause */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newclause</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpExpr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* commute it */</comment>
		<expr_stmt><expr><name><name>newclause</name><operator>-&gt;</operator><name>opno</name></name> <operator>=</operator> <name>expr_op</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newclause</name><operator>-&gt;</operator><name>opfuncid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newclause</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>rightop</name></expr></argument>, <argument><expr><name>leftop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>clause</name> <operator>=</operator> <operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>newclause</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>clause</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************************
 *				----  ROUTINES TO DO PARTIAL INDEX PREDICATE TESTS	----
 ****************************************************************************/</comment>

<comment type="block">/*
 * check_index_predicates
 *		Set the predicate-derived IndexOptInfo fields for each index
 *		of the specified relation.
 *
 * predOK is set true if the index is partial and its predicate is satisfied
 * for this query, ie the query's WHERE clauses imply the predicate.
 *
 * indrestrictinfo is set to the relation's baserestrictinfo list less any
 * conditions that are implied by the index's predicate.  (Obviously, for a
 * non-partial index, this is the same as baserestrictinfo.)  Such conditions
 * can be dropped from the plan when using the index, in certain cases.
 *
 * At one time it was possible for this to get re-run after adding more
 * restrictions to the rel, thus possibly letting us prove more indexes OK.
 * That doesn't happen any more (at least not in the core code's usage),
 * but this code still supports it in case extensions want to mess with the
 * baserestrictinfo list.  We assume that adding more restrictions can't make
 * an index not predOK.  We must recompute indrestrictinfo each time, though,
 * to make sure any newly-added restrictions get into it if needed.
 */</comment>
<function><type><name>void</name></type>
<name>check_index_predicates</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>clauselist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>have_partial</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_target_rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relids</name></type>		<name>otherrels</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<comment type="block">/* Indexes are available only on base or "other" member relations. */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IS_SIMPLE_REL</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Initialize the indrestrictinfo lists to be identical to
	 * baserestrictinfo, and check whether there are any partial indexes.  If
	 * not, this is all we need to do.
	 */</comment>
	<expr_stmt><expr><name>have_partial</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>rel-&gt;indexlist</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><operator>(</operator><name>IndexOptInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>indrestrictinfo</name></name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>baserestrictinfo</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>indpred</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>have_partial</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>have_partial</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Construct a list of clauses that we can assume true for the purpose of
	 * proving the index(es) usable.  Restriction clauses for the rel are
	 * always usable, and so are any join clauses that are "movable to" this
	 * rel.  Also, we can consider any EC-derivable join clauses (which must
	 * be "movable to" this rel, by definition).
	 */</comment>
	<expr_stmt><expr><name>clauselist</name> <operator>=</operator> <call><name>list_copy</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>baserestrictinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Scan the rel's join clauses */</comment>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>rel-&gt;joininfo</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name> <init>= <expr><operator>(</operator><name>RestrictInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Check if clause can be moved to this rel */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>join_clause_is_movable_to</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>clauselist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>clauselist</name></expr></argument>, <argument><expr><name>rinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/*
	 * Add on any equivalence-derivable join clauses.  Computing the correct
	 * relid sets for generate_join_implied_equalities is slightly tricky
	 * because the rel could be a child rel rather than a true baserel, and in
	 * that case we must remove its parents' relid(s) from all_baserels.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>reloptkind</name></name> <operator>==</operator> <name>RELOPT_OTHER_MEMBER_REL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>otherrels</name> <operator>=</operator> <call><name>bms_difference</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>all_baserels</name></name></expr></argument>,
								   <argument><expr><call><name>find_childrel_parents</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>otherrels</name> <operator>=</operator> <call><name>bms_difference</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>all_baserels</name></name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bms_is_empty</name><argument_list>(<argument><expr><name>otherrels</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>clauselist</name> <operator>=</operator>
			<call><name>list_concat</name><argument_list>(<argument><expr><name>clauselist</name></expr></argument>,
						<argument><expr><call><name>generate_join_implied_equalities</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
														 <argument><expr><call><name>bms_union</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relids</name></name></expr></argument>,
																   <argument><expr><name>otherrels</name></expr></argument>)</argument_list></call></expr></argument>,
														 <argument><expr><name>otherrels</name></expr></argument>,
														 <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Normally we remove quals that are implied by a partial index's
	 * predicate from indrestrictinfo, indicating that they need not be
	 * checked explicitly by an indexscan plan using this index.  However, if
	 * the rel is a target relation of UPDATE/DELETE/SELECT FOR UPDATE, we
	 * cannot remove such quals from the plan, because they need to be in the
	 * plan so that they will be properly rechecked by EvalPlanQual testing.
	 * Some day we might want to remove such quals from the main plan anyway
	 * and pass them through to EvalPlanQual via a side channel; but for now,
	 * we just don't remove implied quals at all for target relations.
	 */</comment>
	<expr_stmt><expr><name>is_target_rel</name> <operator>=</operator> <operator>(</operator><name><name>rel</name><operator>-&gt;</operator><name>relid</name></name> <operator>==</operator> <name><name>root</name><operator>-&gt;</operator><name>parse</name><operator>-&gt;</operator><name>resultRelation</name></name> <operator>||</operator>
					 <call><name>get_plan_rowmark</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>rowMarks</name></name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Now try to prove each index predicate true, and compute the
	 * indrestrictinfo lists for partial indexes.  Note that we compute the
	 * indrestrictinfo list even for non-predOK indexes; this might seem
	 * wasteful, but we may be able to use such indexes in OR clauses, cf
	 * generate_bitmap_or_paths().
	 */</comment>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>rel-&gt;indexlist</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><operator>(</operator><name>IndexOptInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lcr</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>indpred</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>			<comment type="block">/* ignore non-partial indexes here */</comment>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>index</name><operator>-&gt;</operator><name>predOK</name></name></expr>)</condition><block type="pseudo"><block_content>		<comment type="block">/* don't repeat work if already proven OK */</comment>
			<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>predOK</name></name> <operator>=</operator> <call><name>predicate_implied_by</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>indpred</name></name></expr></argument>, <argument><expr><name>clauselist</name></expr></argument>,
												 <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* If rel is an update target, leave indrestrictinfo as set above */</comment>
		<if_stmt><if>if <condition>(<expr><name>is_target_rel</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* Else compute indrestrictinfo as the non-implied quals */</comment>
		<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>indrestrictinfo</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		<macro><name>foreach</name><argument_list>(<argument>lcr</argument>, <argument>rel-&gt;baserestrictinfo</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name> <init>= <expr><operator>(</operator><name>RestrictInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lcr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/* predicate_implied_by() assumes first arg is immutable */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>contain_mutable_functions</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
				<operator>!</operator><call><name>predicate_implied_by</name><argument_list>(<argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><name><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name><name>index</name><operator>-&gt;</operator><name>indpred</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>indrestrictinfo</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>indrestrictinfo</name></name></expr></argument>, <argument><expr><name>rinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************
 *				----  ROUTINES TO CHECK EXTERNALLY-VISIBLE CONDITIONS  ----
 ****************************************************************************/</comment>

<comment type="block">/*
 * ec_member_matches_indexcol
 *	  Test whether an EquivalenceClass member matches an index column.
 *
 * This is a callback for use by generate_implied_equalities_for_column.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ec_member_matches_indexcol</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
						   <parameter><decl><type><name>EquivalenceClass</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>EquivalenceMember</name> <modifier>*</modifier></type><name>em</name></decl></parameter>,
						   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ec_member_matches_arg</name> <operator>*</operator><operator>)</operator> <name>arg</name><operator>)</operator><operator>-&gt;</operator><name>index</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>indexcol</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ec_member_matches_arg</name> <operator>*</operator><operator>)</operator> <name>arg</name><operator>)</operator><operator>-&gt;</operator><name>indexcol</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>curFamily</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>curCollation</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>indexcol</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>nkeycolumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>curFamily</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>opfamily</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>curCollation</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>indexcollations</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If it's a btree index, we can reject it if its opfamily isn't
	 * compatible with the EC, since no clause generated from the EC could be
	 * used with the index.  For non-btree indexes, we can't easily tell
	 * whether clauses generated from the EC could be used with the index, so
	 * don't check the opfamily.  This might mean we return "true" for a
	 * useless EC, so we have to recheck the results of
	 * generate_implied_equalities_for_column; see
	 * match_eclass_clauses_to_index.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>relam</name></name> <operator>==</operator> <name>BTREE_AM_OID</name> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>list_member_oid</name><argument_list>(<argument><expr><name><name>ec</name><operator>-&gt;</operator><name>ec_opfamilies</name></name></expr></argument>, <argument><expr><name>curFamily</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* We insist on collation match for all index types, though */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IndexCollMatchesExprColl</name><argument_list>(<argument><expr><name>curCollation</name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>ec_collation</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>match_index_to_operand</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>em</name><operator>-&gt;</operator><name>em_expr</name></name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * relation_has_unique_index_for
 *	  Determine whether the relation provably has at most one row satisfying
 *	  a set of equality conditions, because the conditions constrain all
 *	  columns of some unique index.
 *
 * The conditions can be represented in either or both of two ways:
 * 1. A list of RestrictInfo nodes, where the caller has already determined
 * that each condition is a mergejoinable equality with an expression in
 * this relation on one side, and an expression not involving this relation
 * on the other.  The transient outer_is_left flag is used to identify which
 * side we should look at: left side if outer_is_left is false, right side
 * if it is true.
 * 2. A list of expressions in this relation, and a corresponding list of
 * equality operators. The caller must have already checked that the operators
 * represent equality.  (Note: the operators could be cross-type; the
 * expressions should correspond to their RHS inputs.)
 *
 * The caller need only supply equality conditions arising from joins;
 * this routine automatically adds in any usable baserestrictinfo clauses.
 * (Note that the passed-in restrictlist will be destructively modified!)
 */</comment>
<function><type><name>bool</name></type>
<name>relation_has_unique_index_for</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
							  <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>restrictlist</name></decl></parameter>,
							  <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>exprlist</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>oprlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>ic</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>exprlist</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>oprlist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Short-circuit if no indexes... */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>indexlist</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Examine the rel's restriction clauses for usable var = const clauses
	 * that we can add to the restrictlist.
	 */</comment>
	<macro><name>foreach</name><argument_list>(<argument>ic</argument>, <argument>rel-&gt;baserestrictinfo</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>restrictinfo</name> <init>= <expr><operator>(</operator><name>RestrictInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * Note: can_join won't be set for a restriction clause, but
		 * mergeopfamilies will be if it has a mergejoinable operator and
		 * doesn't contain volatile functions.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>restrictinfo</name><operator>-&gt;</operator><name>mergeopfamilies</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>			<comment type="block">/* not mergejoinable */</comment>

		<comment type="block">/*
		 * The clause certainly doesn't refer to anything but the given rel.
		 * If either side is pseudoconstant then we can use it.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>bms_is_empty</name><argument_list>(<argument><expr><name><name>restrictinfo</name><operator>-&gt;</operator><name>left_relids</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* righthand side is inner */</comment>
			<expr_stmt><expr><name><name>restrictinfo</name><operator>-&gt;</operator><name>outer_is_left</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>bms_is_empty</name><argument_list>(<argument><expr><name><name>restrictinfo</name><operator>-&gt;</operator><name>right_relids</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* lefthand side is inner */</comment>
			<expr_stmt><expr><name><name>restrictinfo</name><operator>-&gt;</operator><name>outer_is_left</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></else></if_stmt>

		<comment type="block">/* OK, add to list */</comment>
		<expr_stmt><expr><name>restrictlist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>restrictlist</name></expr></argument>, <argument><expr><name>restrictinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/* Short-circuit the easy case */</comment>
	<if_stmt><if>if <condition>(<expr><name>restrictlist</name> <operator>==</operator> <name>NIL</name> <operator>&amp;&amp;</operator> <name>exprlist</name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Examine each index of the relation ... */</comment>
	<macro><name>foreach</name><argument_list>(<argument>ic</argument>, <argument>rel-&gt;indexlist</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>ind</name> <init>= <expr><operator>(</operator><name>IndexOptInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>c</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * If the index is not unique, or not immediately enforced, or if it's
		 * a partial index that doesn't match the query, it's useless here.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ind</name><operator>-&gt;</operator><name>unique</name></name> <operator>||</operator> <operator>!</operator><name><name>ind</name><operator>-&gt;</operator><name>immediate</name></name> <operator>||</operator>
			<operator>(</operator><name><name>ind</name><operator>-&gt;</operator><name>indpred</name></name> <operator>!=</operator> <name>NIL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ind</name><operator>-&gt;</operator><name>predOK</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Try to find each index column in the lists of conditions.  This is
		 * O(N^2) or worse, but we expect all the lists to be short.
		 */</comment>
		<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>ind</name><operator>-&gt;</operator><name>nkeycolumns</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>matched</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc2</name></decl>;</decl_stmt>

			<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>restrictlist</argument>)</argument_list></macro>
			<block>{<block_content>
				<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name> <init>= <expr><operator>(</operator><name>RestrictInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>rexpr</name></decl>;</decl_stmt>

				<comment type="block">/*
				 * The condition's equality operator must be a member of the
				 * index opfamily, else it is not asserting the right kind of
				 * equality behavior for this index.  We check this first
				 * since it's probably cheaper than match_index_to_operand().
				 */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>list_member_oid</name><argument_list>(<argument><expr><name><name>rinfo</name><operator>-&gt;</operator><name>mergeopfamilies</name></name></expr></argument>, <argument><expr><name><name>ind</name><operator>-&gt;</operator><name>opfamily</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<comment type="block">/*
				 * XXX at some point we may need to check collations here too.
				 * For the moment we assume all collations reduce to the same
				 * notion of equality.
				 */</comment>

				<comment type="block">/* OK, see if the condition operand matches the index key */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>rinfo</name><operator>-&gt;</operator><name>outer_is_left</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>rexpr</name> <operator>=</operator> <call><name>get_rightop</name><argument_list>(<argument><expr><name><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>rexpr</name> <operator>=</operator> <call><name>get_leftop</name><argument_list>(<argument><expr><name><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>match_index_to_operand</name><argument_list>(<argument><expr><name>rexpr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <comment type="block">/* column is unique */</comment>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block>

			<if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<macro><name>forboth</name><argument_list>(<argument>lc</argument>, <argument>exprlist</argument>, <argument>lc2</argument>, <argument>oprlist</argument>)</argument_list></macro>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>expr</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>opr</name> <init>= <expr><call><name>lfirst_oid</name><argument_list>(<argument><expr><name>lc2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<comment type="block">/* See if the expression matches the index key */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>match_index_to_operand</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<comment type="block">/*
				 * The equality operator must be a member of the index
				 * opfamily, else it is not asserting the right kind of
				 * equality behavior for this index.  We assume the caller
				 * determined it is an equality operator, so we don't need to
				 * check any more tightly than this.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>op_in_opfamily</name><argument_list>(<argument><expr><name>opr</name></expr></argument>, <argument><expr><name><name>ind</name><operator>-&gt;</operator><name>opfamily</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<comment type="block">/*
				 * XXX at some point we may need to check collations here too.
				 * For the moment we assume all collations reduce to the same
				 * notion of equality.
				 */</comment>

				<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <comment type="block">/* column is unique */</comment>
				<break>break;</break>
			</block_content>}</block>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>matched</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>			<comment type="block">/* no match; this index doesn't help us */</comment>
		</block_content>}</block></for>

		<comment type="block">/* Matched all key columns of this index? */</comment>
		<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>ind</name><operator>-&gt;</operator><name>nkeycolumns</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * indexcol_is_bool_constant_for_query
 *
 * If an index column is constrained to have a constant value by the query's
 * WHERE conditions, then it's irrelevant for sort-order considerations.
 * Usually that means we have a restriction clause WHERE indexcol = constant,
 * which gets turned into an EquivalenceClass containing a constant, which
 * is recognized as redundant by build_index_pathkeys().  But if the index
 * column is a boolean variable (or expression), then we are not going to
 * see WHERE indexcol = constant, because expression preprocessing will have
 * simplified that to "WHERE indexcol" or "WHERE NOT indexcol".  So we are not
 * going to have a matching EquivalenceClass (unless the query also contains
 * "ORDER BY indexcol").  To allow such cases to work the same as they would
 * for non-boolean values, this function is provided to detect whether the
 * specified index column matches a boolean restriction clause.
 */</comment>
<function><type><name>bool</name></type>
<name>indexcol_is_bool_constant_for_query</name><parameter_list>(<parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<comment type="block">/* If the index isn't boolean, we can't possibly get a match */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsBooleanOpfamily</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>opfamily</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Check each restriction clause for the index's rel */</comment>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>index-&gt;rel-&gt;baserestrictinfo</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name> <init>= <expr><operator>(</operator><name>RestrictInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * As in match_clause_to_indexcol, never match pseudoconstants to
		 * indexes.  (It might be semantically okay to do so here, but the
		 * odds of getting a match are negligible, so don't waste the cycles.)
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>rinfo</name><operator>-&gt;</operator><name>pseudoconstant</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* See if we can match the clause's expression to the index column */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>match_boolean_index_clause</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>, <argument><expr><name>indexcol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************************
 *				----  ROUTINES TO CHECK OPERANDS  ----
 ****************************************************************************/</comment>

<comment type="block">/*
 * match_index_to_operand()
 *	  Generalized test for a match between an index's key
 *	  and the operand on one side of a restriction or join clause.
 *
 * operand: the nodetree to be compared to the index
 * indexcol: the column number of the index (counting from 0)
 * index: the index of interest
 *
 * Note that we aren't interested in collations here; the caller must check
 * for a collation match, if it's dealing with an operator where that matters.
 *
 * This is exported for use in selfuncs.c.
 */</comment>
<function><type><name>bool</name></type>
<name>match_index_to_operand</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>,
					   <parameter><decl><type><name>int</name></type> <name>indexcol</name></decl></parameter>,
					   <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>indkey</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Ignore any RelabelType node above the operand.   This is needed to be
	 * able to apply indexscanning in binary-compatible-operator cases. Note:
	 * we can assume there is at most one RelabelType node;
	 * eval_const_expressions() will have simplified if more than one.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>operand</name> <operator>&amp;&amp;</operator> <call><name>IsA</name><argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>RelabelType</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>operand</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>RelabelType</name> <operator>*</operator><operator>)</operator> <name>operand</name><operator>)</operator><operator>-&gt;</operator><name>arg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>indkey</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>indexkeys</name><index>[<expr><name>indexcol</name></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>indkey</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Simple index column; operand must be a matching Var.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>operand</name> <operator>&amp;&amp;</operator> <call><name>IsA</name><argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>Var</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<name><name>index</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>relid</name></name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>Var</name> <operator>*</operator><operator>)</operator> <name>operand</name><operator>)</operator><operator>-&gt;</operator><name>varno</name> <operator>&amp;&amp;</operator>
			<name>indkey</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>Var</name> <operator>*</operator><operator>)</operator> <name>operand</name><operator>)</operator><operator>-&gt;</operator><name>varattno</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * Index expression; find the correct expression.  (This search could
		 * be avoided, at the cost of complicating all the callers of this
		 * routine; doesn't seem worth it.)
		 */</comment>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>indexpr_item</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>indexkey</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>indexpr_item</name> <operator>=</operator> <call><name>list_head</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>indexprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>indexcol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>indexkeys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>indexpr_item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"wrong number of index expressions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>indexpr_item</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>indexpr_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>indexpr_item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"wrong number of index expressions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>indexkey</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>indexpr_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Does it match the operand?  Again, strip any relabeling.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>indexkey</name> <operator>&amp;&amp;</operator> <call><name>IsA</name><argument_list>(<argument><expr><name>indexkey</name></expr></argument>, <argument><expr><name>RelabelType</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>indexkey</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>RelabelType</name> <operator>*</operator><operator>)</operator> <name>indexkey</name><operator>)</operator><operator>-&gt;</operator><name>arg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>equal</name><argument_list>(<argument><expr><name>indexkey</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * is_pseudo_constant_for_index()
 *	  Test whether the given expression can be used as an indexscan
 *	  comparison value.
 *
 * An indexscan comparison value must not contain any volatile functions,
 * and it can't contain any Vars of the index's own table.  Vars of
 * other tables are okay, though; in that case we'd be producing an
 * indexqual usable in a parameterized indexscan.  This is, therefore,
 * a weaker condition than is_pseudo_constant_clause().
 *
 * This function is exported for use by planner support functions,
 * which will have available the IndexOptInfo, but not any RestrictInfo
 * infrastructure.  It is making the same test made by functions above
 * such as match_opclause_to_indexcol(), but those rely where possible
 * on RestrictInfo information about variable membership.
 *
 * expr: the nodetree to be checked
 * index: the index of interest
 */</comment>
<function><type><name>bool</name></type>
<name>is_pseudo_constant_for_index</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* pull_varnos is cheaper than volatility check, so do that first */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>bms_is_member</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><call><name>pull_varnos</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* no good, contains Var of table */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>contain_volatile_functions</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* no good, volatile comparison value */</comment>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
