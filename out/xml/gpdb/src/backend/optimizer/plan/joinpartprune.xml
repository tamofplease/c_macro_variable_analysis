<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/optimizer/plan/joinpartprune.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * joinpartprune.c
 *	  Transforms to produce plans that achieve dynamic partition elimination.
 *
 * This file contains GPDB specific code, to perform partition pruning
 * based on tuples seen on the "other" side of a join. Join pruning is
 * performed in co-operation between an Append node and a PartitionSelector
 * node. If you have a join between a partitioned table and something else:
 *
 * Hash Join
 *  Hash Join Cond: partitioned_table.id = othertable.id
 *   -&gt; Append
 *      -&gt; Seq Scan partition1
 *      -&gt; Seq Scan partition2
 *      -&gt; Seq Scan partition3
 *   -&gt; Hash
 *      -&gt; SeqScan othertable
 *         Filter: &lt;other conditions&gt;
 *
 * it would be good to skip those partitions that cannot contain any
 * tuples coming from the other side of the join. To do that, we
 * transform the plan into this:
 *
 * Join
 *  Join Cond: partitioned_table.id = othertable.id
 *   -&gt; Append
 *       Partition Selectors: $0
 *            -&gt; Seq Scan partition1
 *            -&gt; Seq Scan partition2
 *            -&gt; Seq Scan partition3
 *   -&gt; Hash
 *      -&gt; PartitionSelector (selector id: $0)
 *         Filter: othertable.id
 *         -&gt; SeqScan othertable
 *            Filter: &lt;other conditions&gt;
 *
 * While the executor builds the Hash table, the Partition Selector
 * computes for each row which partitions in partitioned_table can contain
 * tuples matching the join condition. After we have built the hash
 * table, and start to evaluate the outer side of the join, we can
 * skip those partitions that we didn't see any matching inner tuples
 * for. The Partition Selector constructs a list of surviving partitions,
 * and the Append node skips ones that didn't survive.
 *
 * Planning these join pruning plans happens in the create_plan() stage:
 *
 * 1. Whenever a join is being processed, create_*join_plan() calls
 *    the push_partition_selector_candidate_for_join() function.
 *    push_partition_selector_candidate_for_join() decides if it's possible
 *    to put a partition selector to the inner side of the join, and if so,
 *    it records information about the join in a stack, in
 *    root-&gt;partition_selector_candidates. (In this phase, we don't yet
 *    determine if a Partition Selector would actually be useful, only
 *    if it would be valid to place one at this join.)
 *
 * 2. When create_append_plan() is called to create an Append plan for
 *    a partitioned table on the outer side of the join, create_append_plan()
 *    calls make_partition_join_pruneinfos() to check if any of the partitions
 *    could be pruned based on any of the joins recorded in the
 *    root-&gt;partition_selector_candidates stack. If so, it builds the pruning
 *    steps into a PartitionPruneInfo struct, and adds it to the stack entry.
 *    At this point, we have decided that a Partition Selector will be used at
 *    the join.
 *
 * 3. After finishing the outer side of the join, the create_*join_plan()
 *    calls pop_and_inject_partition_selectors(). If we decided to use
 *    any Partition Selectors at this join, the Partition Selectors are added
 *    to the inner side of the join.
 *
 *
 * Note: All this happens in the create_plan() stage,  after we have already
 * constructed the paths and decided the plan shape, so the possibility of
 * pruning doesn't affect cost estimates or the chosen plan shape. That's not
 * great, but will do for now...
 *
 * Portions Copyright (c) 2011-2013, EMC Corporation
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	  src/backend/optimizer/plan/joinpartprune.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/clauses.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/joinpartprune.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/paramassign.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/planmain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/pathnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"partitioning/partprune.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>Path</name> <modifier>*</modifier></type><name>create_partition_selector_path</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
											<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>subpath</name></decl></parameter>,
											<parameter><decl><type><name>int</name></type> <name>paramid</name></decl></parameter>,
											<parameter><decl><type><name>PartitionPruneInfo</name> <modifier>*</modifier></type><name>pruneinfo</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Check if a Partition Selector could be placed at this join.
 *
 * This doesn't check if it would actually be useful here; that decision
 * is made in create_append_plan(). This merely checks if this is the
 * right kind of join.
 */</comment>
<function><type><name>void</name></type>
<name>push_partition_selector_candidate_for_join</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>JoinPath</name> <modifier>*</modifier></type><name>join_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Path</name>	   <modifier>*</modifier></type><name>innerpath</name> <init>= <expr><name><name>join_path</name><operator>-&gt;</operator><name>innerjoinpath</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relids</name></type>		<name>inner_relids</name> <init>= <expr><name><name>innerpath</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>relids</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>good_type</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PartitionSelectorCandidateInfo</name> <modifier>*</modifier></type><name>candidate</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>!=</operator> <name>GP_ROLE_DISPATCH</name> <operator>||</operator> <operator>!</operator><name>gp_dynamic_partition_pruning</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>partition_selector_candidates</name></name> <operator>=</operator> <call><name>lcons</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>partition_selector_candidates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>join_path</name><operator>-&gt;</operator><name>jointype</name></name> <operator>==</operator> <name>JOIN_INNER</name> <operator>||</operator>
		  <name><name>join_path</name><operator>-&gt;</operator><name>jointype</name></name> <operator>==</operator> <name>JOIN_RIGHT</name> <operator>||</operator>
		  <name><name>join_path</name><operator>-&gt;</operator><name>jointype</name></name> <operator>==</operator> <name>JOIN_SEMI</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>partition_selector_candidates</name></name> <operator>=</operator> <call><name>lcons</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>partition_selector_candidates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * For the partition selector in the inner side of the join to have any
	 * effect on the scans in the outer side, the inner side must be evaluated
	 * first. For a hash join, that is always true.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>join_path</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>pathtype</name></name> <operator>==</operator> <name>T_HashJoin</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>good_type</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/*
	 * If we're doing a merge join, and will sort the inner side, then the sort
	 * will process all the inner rows before scanning the outer side. The Sort
	 * node will later be placed on top of the PartitionSelector we create here.
	 */</comment>
	<if type="elseif">else if <condition>(<expr><name><name>join_path</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>pathtype</name></name> <operator>==</operator> <name>T_MergeJoin</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>MergePath</name> <operator>*</operator><operator>)</operator> <name>join_path</name><operator>)</operator><operator>-&gt;</operator><name>innersortkeys</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>good_type</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/*
	 * For a nested loop join, if there happens to be a Material node on the inner
	 * side, then we can place the Partition Selector below it. Even though a nested
	 * loop join will rescan the inner side, the Material or Sort will be executed
	 * all in one go.
	 *
	 * We could add a Material node, if there isn't one already, but a Material
	 * node is expensive. It would almost certainly make this plan worse than
	 * something else that the planner considered and rejected.
	 */</comment>
	<if type="elseif">else if <condition>(<expr><name><name>join_path</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>pathtype</name></name> <operator>==</operator> <name>T_NestLoop</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>path_contains_inner_index</name><argument_list>(<argument><expr><name>innerpath</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>innerpath</name></expr></argument>, <argument><expr><name>MaterialPath</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>good_type</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>good_type</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>join_path</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>pathtype</name></name> <operator>==</operator> <name>T_MergeJoin</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>innerpath</name></expr></argument>, <argument><expr><name>MaterialPath</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>good_type</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>MergePath</name> <operator>*</operator><operator>)</operator> <name>join_path</name><operator>)</operator><operator>-&gt;</operator><name>innersortkeys</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>good_type</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>good_type</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>good_type</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>good_type</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>partition_selector_candidates</name></name> <operator>=</operator> <call><name>lcons</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>partition_selector_candidates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* OK! */</comment>
	<expr_stmt><expr><name>candidate</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PartitionSelectorCandidateInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>candidate</name><operator>-&gt;</operator><name>joinrestrictinfo</name></name> <operator>=</operator> <name><name>join_path</name><operator>-&gt;</operator><name>joinrestrictinfo</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>candidate</name><operator>-&gt;</operator><name>inner_relids</name></name> <operator>=</operator> <name>inner_relids</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>candidate</name><operator>-&gt;</operator><name>slice</name></name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>curSlice</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>candidate</name><operator>-&gt;</operator><name>selectors</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>partition_selector_candidates</name></name> <operator>=</operator> <call><name>lcons</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>partition_selector_candidates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Called after processing the outer side of a join. If the outer side
 * contained any Append nodes that want to do join pruning at this join,
 * adds Partition Selector nodes to the inner path, and returns 'true'.
 *
 * NB: This modifies the original Path. That's ugly, but this is only
 * used in the create_plan() stage where we've already decided the plan.
 * If we wanted to do this earlier while we could still affect the
 * plan shape, we shouldn't do that.
 */</comment>
<function><type><name>bool</name></type>
<name>pop_and_inject_partition_selectors</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>JoinPath</name> <modifier>*</modifier></type><name>jpath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionSelectorCandidateInfo</name> <modifier>*</modifier></type><name>candidate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MaterialPath</name> <modifier>*</modifier></type><name>origmat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Path</name>	   <modifier>*</modifier></type><name>subpath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>candidate</name> <operator>=</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>partition_selector_candidates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>partition_selector_candidates</name></name> <operator>=</operator>
		<call><name>list_delete_first</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>partition_selector_candidates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>candidate</name> <operator>||</operator> <operator>!</operator><name><name>candidate</name><operator>-&gt;</operator><name>selectors</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>subpath</name> <operator>=</operator> <name><name>jpath</name><operator>-&gt;</operator><name>innerjoinpath</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If the inner side contains a Material, then we put the Partition
	 * Selector under the Material node. The Material shields us from
	 * rescanning, and ensures that the inner side is scanned fully before
	 * the outer side.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>subpath</name></expr></argument>, <argument><expr><name>MaterialPath</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>origmat</name> <operator>=</operator> <operator>(</operator><name>MaterialPath</name> <operator>*</operator><operator>)</operator> <name>subpath</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>subpath</name> <operator>=</operator> <name><name>origmat</name><operator>-&gt;</operator><name>subpath</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* inject paths for the Partition Selectors to inner path */</comment>
	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>candidate-&gt;selectors</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PartitionSelectorInfo</name> <modifier>*</modifier></type><name>psinfo</name> <init>= <expr><operator>(</operator><name>PartitionSelectorInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>create_partition_selector_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
												 <argument><expr><name>subpath</name></expr></argument>,
												 <argument><expr><name><name>psinfo</name><operator>-&gt;</operator><name>paramid</name></name></expr></argument>,
												 <argument><expr><name><name>psinfo</name><operator>-&gt;</operator><name>part_prune_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>origmat</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>origmat</name><operator>-&gt;</operator><name>subpath</name></name> <operator>=</operator> <name>subpath</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>subpath</name> <operator>=</operator> <operator>&amp;</operator><name><name>origmat</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>

		<comment type="block">/*
		 * The inner side, with the Partition Selector, must be fully executed
		 * before the outer side.
		 */</comment>
		<expr_stmt><expr><name><name>origmat</name><operator>-&gt;</operator><name>cdb_strict</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>jpath</name><operator>-&gt;</operator><name>innerjoinpath</name></name> <operator>=</operator> <name>subpath</name></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* create a PartitionSelectorPath, for the inner side of a join. */</comment>
<function><type><specifier>static</specifier> <name>Path</name> <modifier>*</modifier></type>
<name>create_partition_selector_path</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
							   <parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>subpath</name></decl></parameter>,
							   <parameter><decl><type><name>int</name></type> <name>paramid</name></decl></parameter>,
							   <parameter><decl><type><name>PartitionPruneInfo</name> <modifier>*</modifier></type><name>pruneinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionSelectorPath</name> <modifier>*</modifier></type><name>pathnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PartitionSelectorPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pathnode</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>pathtype</name></name> <operator>=</operator> <name>T_PartitionSelector</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pathnode</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name><name>subpath</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pathnode</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>startup_cost</name></name> <operator>=</operator> <name><name>subpath</name><operator>-&gt;</operator><name>startup_cost</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pathnode</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>total_cost</name></name> <operator>=</operator> <name><name>subpath</name><operator>-&gt;</operator><name>total_cost</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pathnode</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>pathkeys</name></name> <operator>=</operator> <name><name>subpath</name><operator>-&gt;</operator><name>pathkeys</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pathnode</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>locus</name></name> <operator>=</operator> <name><name>subpath</name><operator>-&gt;</operator><name>locus</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pathnode</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>motionHazard</name></name> <operator>=</operator> <name><name>subpath</name><operator>-&gt;</operator><name>motionHazard</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pathnode</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>rescannable</name></name> <operator>=</operator> <name><name>subpath</name><operator>-&gt;</operator><name>rescannable</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pathnode</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>sameslice_relids</name></name> <operator>=</operator> <name><name>subpath</name><operator>-&gt;</operator><name>sameslice_relids</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pathnode</name><operator>-&gt;</operator><name>subpath</name></name> <operator>=</operator> <name>subpath</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pathnode</name><operator>-&gt;</operator><name>paramid</name></name> <operator>=</operator> <name>paramid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pathnode</name><operator>-&gt;</operator><name>part_prune_info</name></name> <operator>=</operator> <name>pruneinfo</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name>pathnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create a PartitionSelector plan from a Path.
 *
 * This would logically belong in createplan.c, but let's keep everything
 * related to Partition Selectors in this file.
 */</comment>
<function><type><name>Plan</name> <modifier>*</modifier></type>
<name>create_partition_selector_plan</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>PartitionSelectorPath</name> <modifier>*</modifier></type><name>best_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionSelector</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Plan</name>	   <modifier>*</modifier></type><name>subplan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PartitionPruneInfo</name> <modifier>*</modifier></type><name>part_prune_info</name> <init>= <expr><name><name>best_path</name><operator>-&gt;</operator><name>part_prune_info</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>part_prune_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>subplan</name> <operator>=</operator> <call><name>create_plan_recurse</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>best_path</name><operator>-&gt;</operator><name>subpath</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ps</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>PartitionSelector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>plan</name><operator>.</operator><name>targetlist</name></name> <operator>=</operator> <name><name>subplan</name><operator>-&gt;</operator><name>targetlist</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>plan</name><operator>.</operator><name>qual</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>plan</name><operator>.</operator><name>lefttree</name></name> <operator>=</operator> <name>subplan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>plan</name><operator>.</operator><name>righttree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>plan</name><operator>.</operator><name>startup_cost</name></name> <operator>=</operator> <name><name>subplan</name><operator>-&gt;</operator><name>startup_cost</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>plan</name><operator>.</operator><name>total_cost</name></name> <operator>=</operator> <name><name>subplan</name><operator>-&gt;</operator><name>total_cost</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>plan</name><operator>.</operator><name>plan_rows</name></name> <operator>=</operator> <name><name>subplan</name><operator>-&gt;</operator><name>plan_rows</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>plan</name><operator>.</operator><name>plan_width</name></name> <operator>=</operator> <name><name>subplan</name><operator>-&gt;</operator><name>plan_width</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>part_prune_info</name></name> <operator>=</operator> <name>part_prune_info</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>paramid</name></name> <operator>=</operator> <name><name>best_path</name><operator>-&gt;</operator><name>paramid</name></name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>ps</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Gather information needed to do join pruning.
 *
 * This is called from create_append_plan(), but the pruning steps are
 * actually put into the Partition Selector node on the other side of
 * the join.
 *
 * Returns list of special executor Param IDs that will contain
 * the results of the Partition Selectors at runtime.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>make_partition_join_pruneinfos</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>parentrel</name></decl></parameter>,
							   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>subpaths</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>partitioned_rels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionPruneInfo</name> <modifier>*</modifier></type><name>part_prune_info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>root-&gt;partition_selector_candidates</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PartitionSelectorCandidateInfo</name> <modifier>*</modifier></type><name>candidate</name> <init>=
			<expr><operator>(</operator><name>PartitionSelectorCandidateInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>candidate</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Does the outer side contain this dynamic scan? And it must be in
		 * the same slice as the join! XXX
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>candidate</name><operator>-&gt;</operator><name>slice</name></name> <operator>!=</operator> <name><name>root</name><operator>-&gt;</operator><name>curSlice</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * There's a Motion between this Partition Selector candidate and
			 * this Append. That won't work, the parameter containing the
			 * partition pruning results cannot be passed through a Motion.
			 * No need to look further, none of the nodes above this candidate
			 * can be in the same slice either.
			 */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>part_prune_info</name> <operator>=</operator>
			<call><name>make_partition_pruneinfo_ext</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>parentrel</name></expr></argument>,
										 <argument><expr><name>subpaths</name></expr></argument>, <argument><expr><name>partitioned_rels</name></expr></argument>,
										 <argument><expr><name><name>candidate</name><operator>-&gt;</operator><name>joinrestrictinfo</name></name></expr></argument>,
										 <argument><expr><name><name>candidate</name><operator>-&gt;</operator><name>inner_relids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>part_prune_info</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Stash the prune steps for the Partition Selector that
			 * will be put on the other side of the join.
			 */</comment>
			<decl_stmt><decl><type><name>PartitionSelectorInfo</name> <modifier>*</modifier></type><name>psinfo</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>psinfo</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PartitionSelectorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>psinfo</name><operator>-&gt;</operator><name>part_prune_info</name></name> <operator>=</operator> <name>part_prune_info</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>psinfo</name><operator>-&gt;</operator><name>paramid</name></name> <operator>=</operator> <call><name>assign_special_exec_param</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>candidate</name><operator>-&gt;</operator><name>selectors</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>candidate</name><operator>-&gt;</operator><name>selectors</name></name></expr></argument>, <argument><expr><name>psinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>psinfo</name><operator>-&gt;</operator><name>paramid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
