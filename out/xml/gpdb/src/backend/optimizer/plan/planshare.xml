<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/optimizer/plan/planshare.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * planshare.c
 *	  Plan shared plan
 *
 * Portions Copyright (c) 2007-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	  src/backend/optimizer/plan/planshare.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/clauses.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/cost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/pathnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/paths.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/planmain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/subselect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/planshare.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>ShareInputScan</name> <modifier>*</modifier></type>
<name>make_shareinputscan</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Plan</name> <modifier>*</modifier></type><name>inputplan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ShareInputScan</name> <modifier>*</modifier></type><name>sisc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Path</name></type>		<name>sipath</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sisc</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ShareInputScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>sisc</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>targetlist</name></name> <operator>=</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name><name>inputplan</name><operator>-&gt;</operator><name>targetlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sisc</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>lefttree</name></name> <operator>=</operator> <name>inputplan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sisc</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>flow</name></name> <operator>=</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name><name>inputplan</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>sisc</name><operator>-&gt;</operator><name>cross_slice</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sisc</name><operator>-&gt;</operator><name>producer_slice_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sisc</name><operator>-&gt;</operator><name>this_slice_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sisc</name><operator>-&gt;</operator><name>nconsumers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sisc</name><operator>-&gt;</operator><name>discard_output</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>sisc</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>qual</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sisc</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>righttree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cost_shareinputscan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sipath</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>inputplan</name><operator>-&gt;</operator><name>total_cost</name></name></expr></argument>, <argument><expr><name><name>inputplan</name><operator>-&gt;</operator><name>plan_rows</name></name></expr></argument>, <argument><expr><name><name>inputplan</name><operator>-&gt;</operator><name>plan_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>sisc</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>startup_cost</name></name> <operator>=</operator> <name><name>sipath</name><operator>.</operator><name>startup_cost</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sisc</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>total_cost</name></name> <operator>=</operator> <name><name>sipath</name><operator>.</operator><name>total_cost</name></name></expr>;</expr_stmt> 
	<expr_stmt><expr><name><name>sisc</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>plan_rows</name></name> <operator>=</operator> <name><name>inputplan</name><operator>-&gt;</operator><name>plan_rows</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sisc</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>plan_width</name></name> <operator>=</operator> <name><name>inputplan</name><operator>-&gt;</operator><name>plan_width</name></name></expr>;</expr_stmt>

	<return>return <expr><name>sisc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Prepare a subplan for sharing. After this, you can call
 * share_prepared_plan() as many times as you want to share this plan.
 *
 * This doesn't do much at the moment. One little optimization is that
 * if the subplan is a ShareInputScan, we make the new ShareInputScans
 * be siblings of that, rather than creating a ShareInputScan on
 * top of a ShareInputScan.
 */</comment>
<function><type><name>Plan</name> <modifier>*</modifier></type>
<name>prepare_plan_for_sharing</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Plan</name> <modifier>*</modifier></type><name>common</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Plan</name> <modifier>*</modifier></type><name>shared</name> <init>= <expr><name>common</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>common</name></expr></argument>, <argument><expr><name>ShareInputScan</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>shared</name> <operator>=</operator> <name><name>common</name><operator>-&gt;</operator><name>lefttree</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>shared</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create a ShareInputScan to scan the given subplan. The subplan
 * must've been prepared for sharing by calling
 * prepare_plan_for_sharing().
 */</comment>
<function><type><name>Plan</name> <modifier>*</modifier></type>
<name>share_prepared_plan</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Plan</name> <modifier>*</modifier></type><name>common</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <call><name>make_shareinputscan</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>common</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
