<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/commands/resgroupcmds.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * resgroupcmds.c
 *	  Commands for manipulating resource group.
 *
 * Portions Copyright (c) 2006-2017, Greenplum inc.
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 * IDENTIFICATION
 *    src/backend/commands/resgroupcmds.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/oid_dispatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_authid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_resgroup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_resgroupcapability.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbdisp_query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbdispatchresult.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/comment.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/resgroupcmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datetime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resgroup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/cgroup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resource_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resowner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESGROUP_DEFAULT_CONCURRENCY</name></cpp:macro> <cpp:value>(20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESGROUP_DEFAULT_MEM_SHARED_QUOTA</name></cpp:macro> <cpp:value>(80)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESGROUP_DEFAULT_MEM_SPILL_RATIO</name></cpp:macro> <cpp:value>RESGROUP_FALLBACK_MEMORY_SPILL_RATIO</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESGROUP_DEFAULT_MEMORY_LIMIT</name></cpp:macro> <cpp:value>RESGROUP_UNLIMITED_MEMORY_LIMIT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESGROUP_DEFAULT_MEM_AUDITOR</name></cpp:macro> <cpp:value>(RESGROUP_MEMORY_AUDITOR_VMTRACKER)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESGROUP_INVALID_MEM_AUDITOR</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESGROUP_MIN_CONCURRENCY</name></cpp:macro>	<cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESGROUP_MAX_CONCURRENCY</name></cpp:macro>	<cpp:value>(MaxConnections)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESGROUP_MIN_CPU_RATE_LIMIT</name></cpp:macro>	<cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESGROUP_MAX_CPU_RATE_LIMIT</name></cpp:macro>	<cpp:value>(100)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESGROUP_MIN_MEMORY_LIMIT</name></cpp:macro>	<cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESGROUP_MAX_MEMORY_LIMIT</name></cpp:macro>	<cpp:value>(100)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESGROUP_MIN_MEMORY_SHARED_QUOTA</name></cpp:macro>	<cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESGROUP_MAX_MEMORY_SHARED_QUOTA</name></cpp:macro>	<cpp:value>(100)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESGROUP_MIN_MEMORY_SPILL_RATIO</name></cpp:macro>		<cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESGROUP_MAX_MEMORY_SPILL_RATIO</name></cpp:macro>		<cpp:value>(100)</cpp:value></cpp:define>

<comment type="block">/*
 * The names must be in the same order as ResGroupMemAuditorType.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ResGroupMemAuditorName</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><literal type="string">"vmtracker"</literal></expr>,	<comment type="line">// RESGROUP_MEMORY_AUDITOR_VMTRACKER</comment>
	<expr><literal type="string">"cgroup"</literal></expr>		<comment type="line">// RESGROUP_MEMORY_AUDITOR_CGROUP</comment>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>str2Int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ResGroupLimitType</name></type> <name>getResgroupOptionType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>defname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ResGroupCap</name></type> <name>getResgroupOptionValue</name><parameter_list>(<parameter><decl><type><name>DefElem</name> <modifier>*</modifier></type><name>defel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getResgroupOptionName</name><parameter_list>(<parameter><decl><type><name>ResGroupLimitType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>checkResgroupCapLimit</name><parameter_list>(<parameter><decl><type><name>ResGroupLimitType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ResGroupCap</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>checkResgroupCapConflicts</name><parameter_list>(<parameter><decl><type><name>ResGroupCaps</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>parseStmtOptions</name><parameter_list>(<parameter><decl><type><name>CreateResourceGroupStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>ResGroupCaps</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>validateCapabilities</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>groupid</name></decl></parameter>, <parameter><decl><type><name>ResGroupCaps</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>newGroup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>insertResgroupCapabilityEntry</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>groupid</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>updateResgroupCapabilityEntry</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>,
										  <parameter><decl><type><name>Oid</name></type> <name>groupId</name></decl></parameter>,
										  <parameter><decl><type><name>ResGroupLimitType</name></type> <name>limitType</name></decl></parameter>,
										  <parameter><decl><type><name>ResGroupCap</name></type> <name>value</name></decl></parameter>,
										  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strValue</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>insertResgroupCapabilities</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>ResGroupCaps</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>deleteResgroupCapabilities</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>groupid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>checkAuthIdForDrop</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>groupId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>createResgroupCallback</name><parameter_list>(<parameter><decl><type><name>XactEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dropResgroupCallback</name><parameter_list>(<parameter><decl><type><name>XactEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>alterResgroupCallback</name><parameter_list>(<parameter><decl><type><name>XactEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getResGroupMemAuditor</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>checkCpusetSyntax</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cpuset</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * CREATE RESOURCE GROUP
 */</comment>
<function><type><name>void</name></type>
<name>CreateResourceGroup</name><parameter_list>(<parameter><decl><type><name>CreateResourceGroupStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>pg_resgroup_rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>pg_resgroupcapability_rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>pg_resgroup_dsc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name>scankey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>sscan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>groupid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>new_record</name><index>[<expr><name>Natts_pg_resgroup</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>new_record_nulls</name><index>[<expr><name>Natts_pg_resgroup</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResGroupCaps</name></type> <name>caps</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nResGroups</name></decl>;</decl_stmt>

	<comment type="block">/* Permission check - only superuser can create groups. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>superuser</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be superuser to create resource groups"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Check for an illegal name ('none' is used to signify no group in ALTER
	 * ROLE).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_RESERVED_NAME</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"resource group name \"none\" is reserved"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ClearResGroupCaps</name><argument_list>(<argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>parseStmtOptions</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * both CREATE and ALTER resource group need check the sum of cpu_rate_limit
	 * and memory_limit and make sure the sum don't exceed 100. To make it simple,
	 * acquire ExclusiveLock lock on pg_resgroupcapability at the beginning
	 * of CREATE and ALTER
	 */</comment>
	<expr_stmt><expr><name>pg_resgroupcapability_rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>ResGroupCapabilityRelationId</name></expr></argument>, <argument><expr><name>ExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pg_resgroup_rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>ResGroupRelationId</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check if MaxResourceGroups limit is reached */</comment>
	<expr_stmt><expr><name>sscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>pg_resgroup_rel</name></expr></argument>, <argument><expr><name>ResGroupRsgnameIndexId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
							   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nResGroups</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><call><name>systable_getnext</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nResGroups</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>nResGroups</name> <operator>&gt;=</operator> <name>MaxResourceGroups</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_RESOURCES</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"insufficient resource groups available"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Check the pg_resgroup relation to be certain the group doesn't already
	 * exist.
	 */</comment>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scankey</name></expr></argument>,
				<argument><expr><name>Anum_pg_resgroup_rsgname</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_NAMEEQ</name></expr></argument>,
				<argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>pg_resgroup_rel</name></expr></argument>, <argument><expr><name>ResGroupRsgnameIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
							   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>scankey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><call><name>systable_getnext</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DUPLICATE_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"resource group \"%s\" already exists"</literal></expr></argument>,
						<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Build a tuple to insert
	 */</comment>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>new_record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>new_record_nulls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_record_nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>new_record</name><index>[<expr><name>Anum_pg_resgroup_rsgname</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
		<call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>namein</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>new_record</name><index>[<expr><name>Anum_pg_resgroup_parent</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>groupid</name> <operator>=</operator> <call><name>GetNewOidForResGroup</name><argument_list>(<argument><expr><name>pg_resgroup_rel</name></expr></argument>, <argument><expr><name>ResGroupOidIndexId</name></expr></argument>,
								   <argument><expr><name>Anum_pg_resgroup_oid</name></expr></argument>,
								   <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_record</name><index>[<expr><name>Anum_pg_resgroup_oid</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>groupid</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>pg_resgroup_dsc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_resgroup_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>pg_resgroup_dsc</name></expr></argument>, <argument><expr><name>new_record</name></expr></argument>, <argument><expr><name>new_record_nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Insert new record in the pg_resgroup table
	 */</comment>
	<expr_stmt><expr><call><name>CatalogTupleInsert</name><argument_list>(<argument><expr><name>pg_resgroup_rel</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* process the WITH (...) list items */</comment>
	<expr_stmt><expr><call><name>validateCapabilities</name><argument_list>(<argument><expr><name>pg_resgroupcapability_rel</name></expr></argument>, <argument><expr><name>groupid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>insertResgroupCapabilities</name><argument_list>(<argument><expr><name>pg_resgroupcapability_rel</name></expr></argument>, <argument><expr><name>groupid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Dispatch the statement to segments */</comment>
	<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_DISPATCH</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>CdbDispatchUtilityStatement</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>,
									<argument><expr><name>DF_CANCEL_ON_ERROR</name><operator>|</operator>
									<name>DF_WITH_SNAPSHOT</name><operator>|</operator>
									<name>DF_NEED_TWO_PHASE</name></expr></argument>,
									<argument><expr><call><name>GetAssignedOidsForDispatch</name><argument_list>()</argument_list></call></expr></argument>,
									<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MetaTrackAddObject</name><argument_list>(<argument><expr><name>ResGroupRelationId</name></expr></argument>,
						   <argument><expr><name>groupid</name></expr></argument>,
						   <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>, <comment type="block">/* not ownerid */</comment>
						   <argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"RESOURCE GROUP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>pg_resgroup_rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>pg_resgroupcapability_rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add this group into shared memory */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IsResGroupActivated</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ResourceGroupCallbackContext</name> <modifier>*</modifier></type><name>callbackCtx</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>AllocResGroupEntry</name><argument_list>(<argument><expr><name>groupid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Argument of callback function should be allocated in heap region */</comment>
		<expr_stmt><expr><name>callbackCtx</name> <operator>=</operator> <operator>(</operator><name>ResourceGroupCallbackContext</name> <operator>*</operator><operator>)</operator>
			<call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>callbackCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>callbackCtx</name><operator>-&gt;</operator><name>groupid</name></name> <operator>=</operator> <name>groupid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>callbackCtx</name><operator>-&gt;</operator><name>caps</name></name> <operator>=</operator> <name>caps</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RegisterXactCallbackOnce</name><argument_list>(<argument><expr><name>createResgroupCallback</name></expr></argument>, <argument><expr><name>callbackCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Create os dependent part for this resource group */</comment>
		<expr_stmt><expr><call><name><name>cgroupOpsRoutine</name><operator>-&gt;</operator><name>createcgroup</name></name><argument_list>(<argument><expr><name>groupid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>cgroupOpsRoutine</name><operator>-&gt;</operator><name>setmemorylimit</name></name><argument_list>(<argument><expr><name>groupid</name></expr></argument>, <argument><expr><name><name>caps</name><operator>.</operator><name>memLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>caps</name><operator>.</operator><name>cpuRateLimit</name></name> <operator>!=</operator> <name>CPU_RATE_LIMIT_DISABLED</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>cgroupOpsRoutine</name><operator>-&gt;</operator><name>setcpulimit</name></name><argument_list>(<argument><expr><name>groupid</name></expr></argument>, <argument><expr><name><name>caps</name><operator>.</operator><name>cpuRateLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>CpusetIsEmpty</name><argument_list>(<argument><expr><name><name>caps</name><operator>.</operator><name>cpuset</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>EnsureCpusetIsAvailable</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cpuset</name> <init>= <expr><call><name>getCpuSetByRole</name><argument_list>(<argument><expr><name><name>caps</name><operator>.</operator><name>cpuset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>cgroupOpsRoutine</name><operator>-&gt;</operator><name>setcpuset</name></name><argument_list>(<argument><expr><name>groupid</name></expr></argument>, <argument><expr><name>cpuset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* reset default group, subtract new group cpu cores */</comment>
			<decl_stmt><decl><type><name>char</name></type> <name><name>defaultGroupCpuset</name><index>[<expr><name>MaxCpuSetLength</name></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>cgroupOpsRoutine</name><operator>-&gt;</operator><name>getcpuset</name></name><argument_list>(<argument><expr><name>DEFAULT_CPUSET_GROUP_ID</name></expr></argument>,
								  <argument><expr><name>defaultGroupCpuset</name></expr></argument>,
								  <argument><expr><name>MaxCpuSetLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CpusetDifference</name><argument_list>(<argument><expr><name>defaultGroupCpuset</name></expr></argument>, <argument><expr><name>cpuset</name></expr></argument>, <argument><expr><name>MaxCpuSetLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>cgroupOpsRoutine</name><operator>-&gt;</operator><name>setcpuset</name></name><argument_list>(<argument><expr><name>DEFAULT_CPUSET_GROUP_ID</name></expr></argument>, <argument><expr><name>defaultGroupCpuset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"create_resource_group_fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_DISPATCH</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"resource group is disabled"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"To enable set gp_resource_manager=group"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * DROP RESOURCE GROUP
 */</comment>
<function><type><name>void</name></type>
<name>DropResourceGroup</name><parameter_list>(<parameter><decl><type><name>DropResourceGroupStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	 <name>pg_resgroup_rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	 <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type>	 <name>scankey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type>	 <name>sscan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			 <name>groupid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResourceGroupCallbackContext</name>	<modifier>*</modifier></type><name>callbackCtx</name></decl>;</decl_stmt>

	<comment type="block">/* Permission check - only superuser can drop resource groups. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>superuser</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be superuser to drop resource groups"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Check the pg_resgroup relation to be certain the resource group already
	 * exists.
	 */</comment>
	<expr_stmt><expr><name>pg_resgroup_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>ResGroupRelationId</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scankey</name></expr></argument>,
				<argument><expr><name>Anum_pg_resgroup_rsgname</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_NAMEEQ</name></expr></argument>,
				<argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>pg_resgroup_rel</name></expr></argument>, <argument><expr><name>ResGroupRsgnameIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
							   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>scankey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"resource group \"%s\" does not exist"</literal></expr></argument>,
						<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Remember the Oid, for destroying the in-memory
	 * resource group later.
	 */</comment>
	<expr_stmt><expr><name>groupid</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Form_pg_resgroup</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>oid</name></expr>;</expr_stmt>

	<comment type="block">/* cannot DROP default resource groups  */</comment>
	<if_stmt><if>if <condition>(<expr><name>groupid</name> <operator>==</operator> <name>DEFAULTRESGROUP_OID</name> <operator>||</operator> <name>groupid</name> <operator>==</operator> <name>ADMINRESGROUP_OID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot drop default resource group \"%s\""</literal></expr></argument>,
						<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* check before dispatch to segment */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IsResGroupActivated</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Argument of callback function should be allocated in heap region */</comment>
		<expr_stmt><expr><name>callbackCtx</name> <operator>=</operator> <operator>(</operator><name>ResourceGroupCallbackContext</name> <operator>*</operator><operator>)</operator>
			<call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>callbackCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>callbackCtx</name><operator>-&gt;</operator><name>groupid</name></name> <operator>=</operator> <name>groupid</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RegisterXactCallbackOnce</name><argument_list>(<argument><expr><name>dropResgroupCallback</name></expr></argument>, <argument><expr><name>callbackCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ResGroupCheckForDrop</name><argument_list>(<argument><expr><name>groupid</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Check to see if any roles are in this resource group.
	 */</comment>
	<expr_stmt><expr><call><name>checkAuthIdForDrop</name><argument_list>(<argument><expr><name>groupid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Delete the resource group from the catalog.
	 */</comment>
	<expr_stmt><expr><call><name>simple_heap_delete</name><argument_list>(<argument><expr><name>pg_resgroup_rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tuple</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>pg_resgroup_rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* drop the extended attributes for this resource group */</comment>
	<expr_stmt><expr><call><name>deleteResgroupCapabilities</name><argument_list>(<argument><expr><name>groupid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Remove any comments on this resource group
	 */</comment>
	<expr_stmt><expr><call><name>DeleteSharedComments</name><argument_list>(<argument><expr><name>groupid</name></expr></argument>, <argument><expr><name>ResGroupRelationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_DISPATCH</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* metadata tracking */</comment>
		<expr_stmt><expr><call><name>MetaTrackDropObject</name><argument_list>(<argument><expr><name>ResGroupRelationId</name></expr></argument>, <argument><expr><name>groupid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>CdbDispatchUtilityStatement</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>,
									<argument><expr><name>DF_CANCEL_ON_ERROR</name><operator>|</operator>
									<name>DF_WITH_SNAPSHOT</name><operator>|</operator>
									<name>DF_NEED_TWO_PHASE</name></expr></argument>,
									<argument><expr><name>NIL</name></expr></argument>,
									<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ALTER RESOURCE GROUP
 */</comment>
<function><type><name>void</name></type>
<name>AlterResourceGroup</name><parameter_list>(<parameter><decl><type><name>AlterResourceGroupStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>pg_resgroupcapability_rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>groupid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DefElem</name>		<modifier>*</modifier></type><name>defel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResGroupLimitType</name></type>	<name>limitType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResGroupCaps</name></type>		<name>caps</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResGroupCaps</name></type>		<name>oldCaps</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResGroupCap</name></type>			<name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cpuset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResourceGroupCallbackContext</name>	<modifier>*</modifier></type><name>callbackCtx</name></decl>;</decl_stmt>

	<comment type="block">/* Permission check - only superuser can alter resource groups. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>superuser</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be superuser to alter resource groups"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Currently we only support to ALTER one limit at one time */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>defel</name> <operator>=</operator> <operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><call><name>list_head</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>limitType</name> <operator>=</operator> <call><name>getResgroupOptionType</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>limitType</name> <operator>==</operator> <name>RESGROUP_LIMIT_TYPE_UNKNOWN</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"option \"%s\" not recognized"</literal></expr></argument>, <argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>limitType</name> <operator>==</operator> <name>RESGROUP_LIMIT_TYPE_CPUSET</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>EnsureCpusetIsAvailable</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cpuset</name> <operator>=</operator> <call><name>defGetString</name><argument_list>(<argument><expr><name>defel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkCpuSetByRole</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>getResgroupOptionValue</name><argument_list>(<argument><expr><name>defel</name></expr></argument>, <argument><expr><name>limitType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkResgroupCapLimit</name><argument_list>(<argument><expr><name>limitType</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Check the pg_resgroup relation to be certain the resource group already
	 * exists.
	 */</comment>
	<expr_stmt><expr><name>groupid</name> <operator>=</operator> <call><name>get_resgroup_oid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>limitType</name> <operator>==</operator> <name>RESGROUP_LIMIT_TYPE_CONCURRENCY</name> <operator>&amp;&amp;</operator>
		<name>value</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<name>groupid</name> <operator>==</operator> <name>ADMINRESGROUP_OID</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_LIMIT_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"admin_group must have at least one concurrency"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * In validateCapabilities() we scan all the resource groups
	 * to check whether the total cpu_rate_limit exceed 100 or not.
	 * We use ExclusiveLock here to prevent concurrent
	 * increase on different resource group. 
	 * We can't use AccessExclusiveLock here, the reason is that, 
	 * if there is a database recovery happened when run "alter resource group"
	 * and acquire this kind of lock, the initialization of resource group 
	 * in function InitResGroups will be pending during database startup, 
	 * since this function will open this table with AccessShareLock, 
	 * AccessExclusiveLock is not compatible with any other lock.
	 * ExclusiveLock and AccessShareLock are compatible.
	 */</comment>
	<expr_stmt><expr><name>pg_resgroupcapability_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>ResGroupCapabilityRelationId</name></expr></argument>,
										  <argument><expr><name>ExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Load current resource group capabilities */</comment>
	<expr_stmt><expr><call><name>GetResGroupCapabilities</name><argument_list>(<argument><expr><name>pg_resgroupcapability_rel</name></expr></argument>, <argument><expr><name>groupid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldCaps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>caps</name> <operator>=</operator> <name>oldCaps</name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>limitType</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RESGROUP_LIMIT_TYPE_CPU</name></expr>:</case>
			<expr_stmt><expr><name><name>caps</name><operator>.</operator><name>cpuRateLimit</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SetCpusetEmpty</name><argument_list>(<argument><expr><name><name>caps</name><operator>.</operator><name>cpuset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>caps</name><operator>.</operator><name>cpuset</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY</name></expr>:</case>
			<expr_stmt><expr><name><name>caps</name><operator>.</operator><name>memLimit</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RESGROUP_LIMIT_TYPE_CONCURRENCY</name></expr>:</case>
			<expr_stmt><expr><name><name>caps</name><operator>.</operator><name>concurrency</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_SHARED_QUOTA</name></expr>:</case>
			<expr_stmt><expr><name><name>caps</name><operator>.</operator><name>memSharedQuota</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_SPILL_RATIO</name></expr>:</case>
			<expr_stmt><expr><name><name>caps</name><operator>.</operator><name>memSpillRatio</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_AUDITOR</name></expr>:</case>
			<expr_stmt><expr><name><name>caps</name><operator>.</operator><name>memAuditor</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RESGROUP_LIMIT_TYPE_CPUSET</name></expr>:</case>
			<expr_stmt><expr><call><name>StrNCpy</name><argument_list>(<argument><expr><name><name>caps</name><operator>.</operator><name>cpuset</name></name></expr></argument>, <argument><expr><name>cpuset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>caps</name><operator>.</operator><name>cpuset</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>caps</name><operator>.</operator><name>cpuRateLimit</name></name> <operator>=</operator> <name>CPU_RATE_LIMIT_DISABLED</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>checkResgroupCapConflicts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>validateCapabilities</name><argument_list>(<argument><expr><name>pg_resgroupcapability_rel</name></expr></argument>, <argument><expr><name>groupid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* cpuset &amp; cpu_rate_limit can not coexist 
	 * if cpuset is active, then cpu_rate_limit must set to CPU_RATE_LIMIT_DISABLED
	 * if cpu_rate_limit is active, then cpuset must set to "" */</comment>
	<if_stmt><if>if <condition>(<expr><name>limitType</name> <operator>==</operator> <name>RESGROUP_LIMIT_TYPE_CPUSET</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>updateResgroupCapabilityEntry</name><argument_list>(<argument><expr><name>pg_resgroupcapability_rel</name></expr></argument>,
									  <argument><expr><name>groupid</name></expr></argument>, <argument><expr><name>RESGROUP_LIMIT_TYPE_CPU</name></expr></argument>, 
									  <argument><expr><name>CPU_RATE_LIMIT_DISABLED</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>updateResgroupCapabilityEntry</name><argument_list>(<argument><expr><name>pg_resgroupcapability_rel</name></expr></argument>,
									  <argument><expr><name>groupid</name></expr></argument>, <argument><expr><name>RESGROUP_LIMIT_TYPE_CPUSET</name></expr></argument>, 
									  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>.</operator><name>cpuset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>limitType</name> <operator>==</operator> <name>RESGROUP_LIMIT_TYPE_CPU</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>updateResgroupCapabilityEntry</name><argument_list>(<argument><expr><name>pg_resgroupcapability_rel</name></expr></argument>,
									  <argument><expr><name>groupid</name></expr></argument>, <argument><expr><name>RESGROUP_LIMIT_TYPE_CPUSET</name></expr></argument>,
									  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DefaultCpuset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>updateResgroupCapabilityEntry</name><argument_list>(<argument><expr><name>pg_resgroupcapability_rel</name></expr></argument>,
									  <argument><expr><name>groupid</name></expr></argument>, <argument><expr><name>RESGROUP_LIMIT_TYPE_CPU</name></expr></argument>,
									  <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>updateResgroupCapabilityEntry</name><argument_list>(<argument><expr><name>pg_resgroupcapability_rel</name></expr></argument>,
									  <argument><expr><name>groupid</name></expr></argument>, <argument><expr><name>limitType</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>pg_resgroupcapability_rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_DISPATCH</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>MetaTrackUpdObject</name><argument_list>(<argument><expr><name>ResGroupCapabilityRelationId</name></expr></argument>,
						   <argument><expr><name>groupid</name></expr></argument>,
						   <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>,
						   <argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>CdbDispatchUtilityStatement</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>,
									<argument><expr><name>DF_CANCEL_ON_ERROR</name><operator>|</operator>
									<name>DF_WITH_SNAPSHOT</name><operator>|</operator>
									<name>DF_NEED_TWO_PHASE</name></expr></argument>,
									<argument><expr><call><name>GetAssignedOidsForDispatch</name><argument_list>()</argument_list></call></expr></argument>,
									<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsResGroupActivated</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Argument of callback function should be allocated in heap region */</comment>
		<expr_stmt><expr><name>callbackCtx</name> <operator>=</operator> <operator>(</operator><name>ResourceGroupCallbackContext</name> <operator>*</operator><operator>)</operator>
			<call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>callbackCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>callbackCtx</name><operator>-&gt;</operator><name>groupid</name></name> <operator>=</operator> <name>groupid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>callbackCtx</name><operator>-&gt;</operator><name>limittype</name></name> <operator>=</operator> <name>limitType</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>callbackCtx</name><operator>-&gt;</operator><name>caps</name></name> <operator>=</operator> <name>caps</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>callbackCtx</name><operator>-&gt;</operator><name>oldCaps</name></name> <operator>=</operator> <name>oldCaps</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RegisterXactCallbackOnce</name><argument_list>(<argument><expr><name>alterResgroupCallback</name></expr></argument>, <argument><expr><name>callbackCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get all the capabilities of one resource group in pg_resgroupcapability.
 */</comment>
<function><type><name>void</name></type>
<name>GetResGroupCapabilities</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>ResGroupCaps</name> <modifier>*</modifier></type><name>resgroupCaps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SysScanDesc</name></type>	<name>sscan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type>	<name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isNull</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We maintain a bit mask to track which resgroup limit capability types
	 * have been retrieved, when mask is 0 then no limit capability is found
	 * for the given groupId.
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ClearResGroupCaps</name><argument_list>(<argument><expr><name>resgroupCaps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Init cpuset with proper value */</comment>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>resgroupCaps</name><operator>-&gt;</operator><name>cpuset</name></name></expr></argument>, <argument><expr><name>DefaultCpuset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>,
				<argument><expr><name>Anum_pg_resgroupcapability_resgroupid</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
				<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>rel</name></expr></argument>,
							   <argument><expr><name>ResGroupCapabilityResgroupidIndexId</name></expr></argument>,
							   <argument><expr><name>true</name></expr></argument>,
							   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>				<name>typeDatum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ResGroupLimitType</name></type>	<name>type</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>				<name>valueDatum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>				<modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>typeDatum</name> <operator>=</operator> <call><name>heap_getattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>Anum_pg_resgroupcapability_reslimittype</name></expr></argument>,
								 <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_att</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>ResGroupLimitType</name><operator>)</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><name>typeDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>type</name> <operator>&gt;</operator> <name>RESGROUP_LIMIT_TYPE_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>type</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>RESGROUP_LIMIT_TYPE_COUNT</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>mask</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>type</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>valueDatum</name> <operator>=</operator> <call><name>heap_getattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>Anum_pg_resgroupcapability_value</name></expr></argument>,
									 <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_att</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>valueDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>RESGROUP_LIMIT_TYPE_CONCURRENCY</name></expr>:</case>
				<expr_stmt><expr><name><name>resgroupCaps</name><operator>-&gt;</operator><name>concurrency</name></name> <operator>=</operator> <call><name>str2Int</name><argument_list>(<argument><expr><name>value</name></expr></argument>,
													<argument><expr><call><name>getResgroupOptionName</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RESGROUP_LIMIT_TYPE_CPU</name></expr>:</case>
				<expr_stmt><expr><name><name>resgroupCaps</name><operator>-&gt;</operator><name>cpuRateLimit</name></name> <operator>=</operator> <call><name>str2Int</name><argument_list>(<argument><expr><name>value</name></expr></argument>,
													 <argument><expr><call><name>getResgroupOptionName</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY</name></expr>:</case>
				<expr_stmt><expr><name><name>resgroupCaps</name><operator>-&gt;</operator><name>memLimit</name></name> <operator>=</operator> <call><name>str2Int</name><argument_list>(<argument><expr><name>value</name></expr></argument>,
												 <argument><expr><call><name>getResgroupOptionName</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_SHARED_QUOTA</name></expr>:</case>
				<expr_stmt><expr><name><name>resgroupCaps</name><operator>-&gt;</operator><name>memSharedQuota</name></name> <operator>=</operator> <call><name>str2Int</name><argument_list>(<argument><expr><name>value</name></expr></argument>,
													   <argument><expr><call><name>getResgroupOptionName</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_SPILL_RATIO</name></expr>:</case>
				<expr_stmt><expr><name><name>resgroupCaps</name><operator>-&gt;</operator><name>memSpillRatio</name></name> <operator>=</operator> <call><name>str2Int</name><argument_list>(<argument><expr><name>value</name></expr></argument>,
													  <argument><expr><call><name>getResgroupOptionName</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_AUDITOR</name></expr>:</case>
				<expr_stmt><expr><name><name>resgroupCaps</name><operator>-&gt;</operator><name>memAuditor</name></name> <operator>=</operator> <call><name>str2Int</name><argument_list>(<argument><expr><name>value</name></expr></argument>,
												   <argument><expr><call><name>getResgroupOptionName</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RESGROUP_LIMIT_TYPE_CPUSET</name></expr>:</case>
				<expr_stmt><expr><call><name>StrNCpy</name><argument_list>(<argument><expr><name><name>resgroupCaps</name><operator>-&gt;</operator><name>cpuset</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>resgroupCaps</name><operator>-&gt;</operator><name>cpuset</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mask</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot find limit capabilities for resource group: %d"</literal></expr></argument>,
						<argument><expr><name>groupId</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get resource group id for a role in pg_authid.
 *
 * An exception is thrown if the current role is invalid. This can happen if,
 * for example, a role was logged into psql and that role was dropped by another
 * psql session. But, normally something like "ERROR:  role 16385 was
 * concurrently dropped" would happen before the code reaches this function.
 */</comment>
<function><type><name>Oid</name></type>
<name>GetResGroupIdForRole</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>roleid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>groupId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isNull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type>	<name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type>	 <name>sscan</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>AuthIdRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>,
				<argument><expr><name>Anum_pg_authid_oid</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
				<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AuthIdOidIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Role should have been dropped by other backends in this case, so this
		 * session cannot execute any command anymore
		 */</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"role with Oid %d was dropped"</literal></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call><operator>,</operator>
				<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Cannot execute commands anymore, please terminate this session."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* must access tuple before systable_endscan */</comment>
	<expr_stmt><expr><name>groupId</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><call><name>heap_getattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>Anum_pg_authid_rolresgroup</name></expr></argument>,
							   <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_att</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * release lock here to guarantee we have no lock held when acquiring
	 * resource group slot
	 */</comment>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>groupId</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>groupId</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get_resgroup_oid -- Return the Oid for a resource group name
 *
 * If missing_ok is false, throw an error if database name not found.  If
 * true, just return InvalidOid.
 *
 * Notes:
 *	Used by the various admin commands to convert a user supplied group name
 *	to Oid.
 */</comment>
<function><type><name>Oid</name></type>
<name>get_resgroup_oid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>oid</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>oid</name> <operator>=</operator> <call><name>GetSysCacheOid1</name><argument_list>(<argument><expr><name>RESGROUPNAME</name></expr></argument>, <argument><expr><name>Anum_pg_resgroup_oid</name></expr></argument>,
						  <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>missing_ok</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"resource group \"%s\" does not exist"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>oid</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * GetResGroupNameForId -- Return the resource group name for an Oid
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>GetResGroupNameForId</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>RESGROUPOID</name></expr></argument>,
							<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>nameDatum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Name</name></type>		<name>resGroupName</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>nameDatum</name> <operator>=</operator> <call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>RESGROUPOID</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>,
									<argument><expr><name>Anum_pg_resgroup_rsgname</name></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>resGroupName</name> <operator>=</operator> <call><name>DatumGetName</name><argument_list>(<argument><expr><name>nameDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>resGroupName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><literal type="string">"unknown"</literal></expr>;</return></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check to see if the group can be assigned with role
 */</comment>
<function><type><name>void</name></type>
<name>ResGroupCheckForRole</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>groupId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type> <name>pg_resgroupcapability_rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResGroupCaps</name></type> <name>caps</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pg_resgroupcapability_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>ResGroupCapabilityRelationId</name></expr></argument>,
										  <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Load current resource group capabilities */</comment>
	<expr_stmt><expr><call><name>GetResGroupCapabilities</name><argument_list>(<argument><expr><name>pg_resgroupcapability_rel</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>caps</name><operator>.</operator><name>memAuditor</name></name> <operator>==</operator> <name>RESGROUP_MEMORY_AUDITOR_CGROUP</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"you cannot assign a role to this resource group"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"The memory_auditor property for this group is not the default."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>pg_resgroupcapability_rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get the option type from a name string.
 *
 * @param defname  the name string
 *
 * @return the option type or UNKNOWN if the name is unknown
 */</comment>
<function><type><specifier>static</specifier> <name>ResGroupLimitType</name></type>
<name>getResgroupOptionType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>defname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>defname</name></expr></argument>, <argument><expr><literal type="string">"cpu_rate_limit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>RESGROUP_LIMIT_TYPE_CPU</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>defname</name></expr></argument>, <argument><expr><literal type="string">"memory_limit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>RESGROUP_LIMIT_TYPE_MEMORY</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>defname</name></expr></argument>, <argument><expr><literal type="string">"concurrency"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>RESGROUP_LIMIT_TYPE_CONCURRENCY</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>defname</name></expr></argument>, <argument><expr><literal type="string">"memory_shared_quota"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_SHARED_QUOTA</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>defname</name></expr></argument>, <argument><expr><literal type="string">"memory_spill_ratio"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_SPILL_RATIO</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>defname</name></expr></argument>, <argument><expr><literal type="string">"memory_auditor"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_AUDITOR</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>defname</name></expr></argument>, <argument><expr><literal type="string">"cpuset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>RESGROUP_LIMIT_TYPE_CPUSET</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>RESGROUP_LIMIT_TYPE_UNKNOWN</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get capability value from DefElem, convert from int64 to int
 */</comment>
<function><type><specifier>static</specifier> <name>ResGroupCap</name></type>
<name>getResgroupOptionValue</name><parameter_list>(<parameter><decl><type><name>DefElem</name> <modifier>*</modifier></type><name>defel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type> <name>value</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RESGROUP_LIMIT_TYPE_MEMORY_AUDITOR</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>auditor_name</name> <init>= <expr><call><name>defGetString</name><argument_list>(<argument><expr><name>defel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>getResGroupMemAuditor</name><argument_list>(<argument><expr><name>auditor_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>defGetInt64</name><argument_list>(<argument><expr><name>defel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>INT_MIN</name> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"capability %s is out of range"</literal></expr></argument>, <argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>ResGroupCap</name><operator>)</operator><name>value</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the option name from type.
 *
 * @param type  the resgroup limit type
 *
 * @return the name of type
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>getResgroupOptionName</name><parameter_list>(<parameter><decl><type><name>ResGroupLimitType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RESGROUP_LIMIT_TYPE_CONCURRENCY</name></expr>:</case>
			<return>return <expr><literal type="string">"concurrency"</literal></expr>;</return>
		<case>case <expr><name>RESGROUP_LIMIT_TYPE_CPU</name></expr>:</case>
			<return>return <expr><literal type="string">"cpu_rate_limit"</literal></expr>;</return>
		<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY</name></expr>:</case>
			<return>return <expr><literal type="string">"memory_limit"</literal></expr>;</return>
		<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_SHARED_QUOTA</name></expr>:</case>
			<return>return <expr><literal type="string">"memory_shared_quota"</literal></expr>;</return>
		<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_SPILL_RATIO</name></expr>:</case>
			<return>return <expr><literal type="string">"memory_spill_ratio"</literal></expr>;</return>
		<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_AUDITOR</name></expr>:</case>
			<return>return <expr><literal type="string">"memory_auditor"</literal></expr>;</return>
		<case>case <expr><name>RESGROUP_LIMIT_TYPE_CPUSET</name></expr>:</case>
			<return>return <expr><literal type="string">"cpuset"</literal></expr>;</return>
		<default>default:</default>
			<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Check if capability value exceeds max and min value
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>checkResgroupCapLimit</name><parameter_list>(<parameter><decl><type><name>ResGroupLimitType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
		<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>RESGROUP_LIMIT_TYPE_CONCURRENCY</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>RESGROUP_MIN_CONCURRENCY</name> <operator>||</operator>
					<name>value</name></expr></argument> &gt;</argument_list></name> <name>RESGROUP_MAX_CONCURRENCY</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"concurrency range is [%d, 'max_connections']"</literal></expr></argument>,
								   <argument><expr><name>RESGROUP_MIN_CONCURRENCY</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>RESGROUP_LIMIT_TYPE_CPU</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>RESGROUP_MIN_CPU_RATE_LIMIT</name> <operator>||</operator>
					<name>value</name></expr></argument> &gt;</argument_list></name> <name>RESGROUP_MAX_CPU_RATE_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cpu_rate_limit range is [%d, %d]"</literal></expr></argument>,
								   <argument><expr><name>RESGROUP_MIN_CPU_RATE_LIMIT</name></expr></argument>,
								   <argument><expr><name>RESGROUP_MAX_CPU_RATE_LIMIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>RESGROUP_MIN_MEMORY_LIMIT</name> <operator>||</operator>
					<name>value</name></expr></argument> &gt;</argument_list></name> <name>RESGROUP_MAX_MEMORY_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"memory_limit range is [%d, %d]"</literal></expr></argument>,
								   <argument><expr><name>RESGROUP_MIN_MEMORY_LIMIT</name></expr></argument>,
								   <argument><expr><name>RESGROUP_MAX_MEMORY_LIMIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_SHARED_QUOTA</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>RESGROUP_MIN_MEMORY_SHARED_QUOTA</name> <operator>||</operator>
					<name>value</name></expr></argument> &gt;</argument_list></name> <name>RESGROUP_MAX_MEMORY_SHARED_QUOTA</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"memory_shared_quota range is [%d, %d]"</literal></expr></argument>,
								   <argument><expr><name>RESGROUP_MIN_MEMORY_SHARED_QUOTA</name></expr></argument>,
								   <argument><expr><name>RESGROUP_MAX_MEMORY_SHARED_QUOTA</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_SPILL_RATIO</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>RESGROUP_MIN_MEMORY_SPILL_RATIO</name> <operator>||</operator>
					<name>value</name></expr></argument> &gt;</argument_list></name> <name>RESGROUP_MAX_MEMORY_SPILL_RATIO</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"memory_spill_ratio range is [%d, %d]"</literal></expr></argument>,
								   <argument><expr><name>RESGROUP_MIN_MEMORY_SPILL_RATIO</name></expr></argument>,
								   <argument><expr><name>RESGROUP_MAX_MEMORY_SPILL_RATIO</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_AUDITOR</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>RESGROUP_MEMORY_AUDITOR_VMTRACKER</name> <operator>&amp;&amp;</operator>
					<name>value</name> <operator>!=</operator> <name>RESGROUP_MEMORY_AUDITOR_CGROUP</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"memory_auditor should be \"%s\" or \"%s\""</literal></expr></argument>,
								   <argument><expr><name><name>ResGroupMemAuditorName</name><index>[<expr><name>RESGROUP_MEMORY_AUDITOR_VMTRACKER</name></expr>]</index></name></expr></argument>,
								   <argument><expr><name><name>ResGroupMemAuditorName</name><index>[<expr><name>RESGROUP_MEMORY_AUDITOR_CGROUP</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>

			<default>default:</default>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"unexpected options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Check conflict settings in caps.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>checkResgroupCapConflicts</name><parameter_list>(<parameter><decl><type><name>ResGroupCaps</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * When memory_limit is unlimited the memory_spill_ratio must be set to
	 * 'fallback' mode to use the statement_mem.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>caps</name><operator>-&gt;</operator><name>memLimit</name></name> <operator>==</operator> <name>RESGROUP_UNLIMITED_MEMORY_LIMIT</name> <operator>&amp;&amp;</operator>
		<name><name>caps</name><operator>-&gt;</operator><name>memSpillRatio</name></name> <operator>!=</operator> <name>RESGROUP_FALLBACK_MEMORY_SPILL_RATIO</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"when memory_limit is unlimited memory_spill_ratio must be set to %d"</literal></expr></argument>,
						<argument><expr><name>RESGROUP_FALLBACK_MEMORY_SPILL_RATIO</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * When memory_auditor is cgroup the concurrency must be 0.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>caps</name><operator>-&gt;</operator><name>memAuditor</name></name> <operator>==</operator> <name>RESGROUP_MEMORY_AUDITOR_CGROUP</name> <operator>&amp;&amp;</operator>
		<name><name>caps</name><operator>-&gt;</operator><name>concurrency</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"resource group concurrency must be 0 when group memory_auditor is %s"</literal></expr></argument>,
					<argument><expr><name><name>ResGroupMemAuditorName</name><index>[<expr><name>RESGROUP_MEMORY_AUDITOR_CGROUP</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * The cgroup memory_auditor should not be used without a properly
	 * configured cgroup memory directory.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>caps</name><operator>-&gt;</operator><name>memAuditor</name></name> <operator>==</operator> <name>RESGROUP_MEMORY_AUDITOR_CGROUP</name> <operator>&amp;&amp;</operator>
		<operator>!</operator><name>gp_resource_group_enable_cgroup_memory</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_GP_FEATURE_NOT_CONFIGURED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cgroup is not properly configured for the 'cgroup' memory auditor"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Extra cgroup configurations are required to enable this feature, "</literal>
						 <literal type="string">"please refer to the Greenplum Documentation for details"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Parse a statement and store the settings in options.
 *
 * @param stmt     the statement
 * @param caps     used to store the settings
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>parseStmtOptions</name><parameter_list>(<parameter><decl><type><name>CreateResourceGroupStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>ResGroupCaps</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResGroupCap</name></type> <name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>stmt-&gt;options</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DefElem</name> <modifier>*</modifier></type><name>defel</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>getResgroupOptionType</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RESGROUP_LIMIT_TYPE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"option \"%s\" not recognized"</literal></expr></argument>, <argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>type</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"found duplicate resource group resource type: %s"</literal></expr></argument>,
							<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>mask</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>type</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RESGROUP_LIMIT_TYPE_CPUSET</name></expr>)</condition> 
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cpuset</name> <init>= <expr><call><name>defGetString</name><argument_list>(<argument><expr><name>defel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>StrNCpy</name><argument_list>(<argument><expr><name><name>caps</name><operator>-&gt;</operator><name>cpuset</name></name></expr></argument>, <argument><expr><name>cpuset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>caps</name><operator>-&gt;</operator><name>cpuset</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>checkCpuSetByRole</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>cpuRateLimit</name></name> <operator>=</operator> <name>CPU_RATE_LIMIT_DISABLED</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else 
		<block>{<block_content>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>getResgroupOptionValue</name><argument_list>(<argument><expr><name>defel</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>checkResgroupCapLimit</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>RESGROUP_LIMIT_TYPE_CONCURRENCY</name></expr>:</case>
					<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>concurrency</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>RESGROUP_LIMIT_TYPE_CPU</name></expr>:</case>
					<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>cpuRateLimit</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SetCpusetEmpty</name><argument_list>(<argument><expr><name><name>caps</name><operator>-&gt;</operator><name>cpuset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>caps</name><operator>-&gt;</operator><name>cpuset</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY</name></expr>:</case>
					<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>memLimit</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_SHARED_QUOTA</name></expr>:</case>
					<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>memSharedQuota</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_SPILL_RATIO</name></expr>:</case>
					<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>memSpillRatio</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>RESGROUP_LIMIT_TYPE_MEMORY_AUDITOR</name></expr>:</case>
					<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>memAuditor</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RESGROUP_LIMIT_TYPE_CPUSET</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>EnsureCpusetIsAvailable</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RESGROUP_LIMIT_TYPE_CPU</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
		<operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RESGROUP_LIMIT_TYPE_CPUSET</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"can't specify both cpu_rate_limit and cpuset"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RESGROUP_LIMIT_TYPE_CPU</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
		<operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RESGROUP_LIMIT_TYPE_CPUSET</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must specify cpu_rate_limit or cpuset"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RESGROUP_LIMIT_TYPE_CONCURRENCY</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>concurrency</name></name> <operator>=</operator> <name>RESGROUP_DEFAULT_CONCURRENCY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RESGROUP_LIMIT_TYPE_MEMORY</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>memLimit</name></name> <operator>=</operator> <name>RESGROUP_DEFAULT_MEMORY_LIMIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RESGROUP_LIMIT_TYPE_MEMORY_SHARED_QUOTA</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>memSharedQuota</name></name> <operator>=</operator> <name>RESGROUP_DEFAULT_MEM_SHARED_QUOTA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RESGROUP_LIMIT_TYPE_MEMORY_SPILL_RATIO</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>memSpillRatio</name></name> <operator>=</operator> <name>RESGROUP_DEFAULT_MEM_SPILL_RATIO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RESGROUP_LIMIT_TYPE_MEMORY_AUDITOR</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>memAuditor</name></name> <operator>=</operator> <name>RESGROUP_DEFAULT_MEM_AUDITOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>checkResgroupCapConflicts</name><argument_list>(<argument><expr><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Resource group call back function
 *
 * Remove resource group entry in shared memory when abort transaction which
 * creates resource groups
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>createResgroupCallback</name><parameter_list>(<parameter><decl><type><name>XactEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ResourceGroupCallbackContext</name> <modifier>*</modifier></type><name>callbackCtx</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>event</name> <operator>!=</operator> <name>XACT_EVENT_COMMIT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ResGroupCreateOnAbort</name><argument_list>(<argument><expr><name>callbackCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>callbackCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Resource group call back function
 *
 * When DROP RESOURCE GROUP transaction ends, need wake up
 * the queued transactions and cleanup shared menory entry.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dropResgroupCallback</name><parameter_list>(<parameter><decl><type><name>XactEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ResourceGroupCallbackContext</name> <modifier>*</modifier></type><name>callbackCtx</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ResGroupDropFinish</name><argument_list>(<argument><expr><name>callbackCtx</name></expr></argument>, <argument><expr><name>event</name> <operator>==</operator> <name>XACT_EVENT_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>callbackCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Resource group call back function
 *
 * When ALTER RESOURCE GROUP SET CONCURRENCY commits, some queuing
 * transaction of this resource group may need to be woke up.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>alterResgroupCallback</name><parameter_list>(<parameter><decl><type><name>XactEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ResourceGroupCallbackContext</name> <modifier>*</modifier></type><name>callbackCtx</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name>XACT_EVENT_COMMIT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ResGroupAlterOnCommit</name><argument_list>(<argument><expr><name>callbackCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>callbackCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Catalog access functions
 */</comment>

<comment type="block">/*
 * Insert all the capabilities to the capability table.
 *
 * We store the capabilities in multiple lines for one group,
 * so we have to insert them one by one. This function will
 * handle the type conversion etc..
 *
 * @param groupid  oid of the resource group
 * @param caps     the capabilities
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>insertResgroupCapabilities</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>ResGroupCaps</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>value</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>concurrency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>insertResgroupCapabilityEntry</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>,
								  <argument><expr><name>RESGROUP_LIMIT_TYPE_CONCURRENCY</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>cpuRateLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>insertResgroupCapabilityEntry</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>,
								  <argument><expr><name>RESGROUP_LIMIT_TYPE_CPU</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>memLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>insertResgroupCapabilityEntry</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>,
								  <argument><expr><name>RESGROUP_LIMIT_TYPE_MEMORY</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>memSharedQuota</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>insertResgroupCapabilityEntry</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>,
								  <argument><expr><name>RESGROUP_LIMIT_TYPE_MEMORY_SHARED_QUOTA</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>memSpillRatio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>insertResgroupCapabilityEntry</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>,
								  <argument><expr><name>RESGROUP_LIMIT_TYPE_MEMORY_SPILL_RATIO</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>memAuditor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>insertResgroupCapabilityEntry</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>,
								  <argument><expr><name>RESGROUP_LIMIT_TYPE_MEMORY_AUDITOR</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>insertResgroupCapabilityEntry</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>,
								  <argument><expr><name>RESGROUP_LIMIT_TYPE_CPUSET</name></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>cpuset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Update all the capabilities of one resgroup in pg_resgroupcapability
 *
 * groupId and limitType are the scan keys.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>updateResgroupCapabilityEntry</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>,
							  <parameter><decl><type><name>Oid</name></type> <name>groupId</name></decl></parameter>,
							  <parameter><decl><type><name>ResGroupLimitType</name></type> <name>limitType</name></decl></parameter>,
							  <parameter><decl><type><name>ResGroupCap</name></type> <name>value</name></decl></parameter>,
							  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>oldTuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>newTuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type>	<name>sscan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type>	<name><name>scankey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>Natts_pg_resgroupcapability</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>isnull</name><index>[<expr><name>Natts_pg_resgroupcapability</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>repl</name><index>[<expr><name>Natts_pg_resgroupcapability</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>stringBuffer</name><index>[<expr><name>MaxCpuSetLength</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_pg_resgroupcapability_resgroupid</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
				<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_pg_resgroupcapability_reslimittype</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_INT2EQ</name></expr></argument>,
				<argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>limitType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>rel</name></expr></argument>,
							   <argument><expr><name>ResGroupCapabilityResgroupidResLimittypeIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
							   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>scankey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>isnull</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>isnull</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>repl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>repl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldTuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldTuple</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * It's possible for a cap to be missing, e.g. a resgroup is created
		 * with v5.0 which does not support cap=7 (cpuset), then we binary
		 * switch to v5.10 and alter it, then we'll find cap=7 missing here.
		 * Instead of raising an error we should fallback to insert a new cap.
		 */</comment>

		<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>insertResgroupCapabilityEntry</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>limitType</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>strValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>limitType</name> <operator>==</operator> <name>RESGROUP_LIMIT_TYPE_CPUSET</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>StrNCpy</name><argument_list>(<argument><expr><name>stringBuffer</name></expr></argument>, <argument><expr><name>strValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stringBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>stringBuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stringBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_resgroupcapability_value</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>stringBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>isnull</name><index>[<expr><name>Anum_pg_resgroupcapability_value</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repl</name><index>[<expr><name>Anum_pg_resgroupcapability_value</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>newTuple</name> <operator>=</operator> <call><name>heap_modify_tuple</name><argument_list>(<argument><expr><name>oldTuple</name></expr></argument>, <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>repl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CatalogTupleUpdate</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oldTuple</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>, <argument><expr><name>newTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Validate the capabilities.
 *
 * The policy is resouces can't be over used, take memory for example,
 * all the allocated memory can not exceed 100.
 *
 * Also detect for duplicate settings for the group.
 *
 * @param rel      the relation
 * @param groupid  oid of the resource group
 * @param caps     the capabilities for the resource group
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>validateCapabilities</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>,
					 <parameter><decl><type><name>Oid</name></type> <name>groupid</name></decl></parameter>,
					 <parameter><decl><type><name>ResGroupCaps</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>,
					 <parameter><decl><type><name>bool</name></type> <name>newGroup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>sscan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>totalCpu</name> <init>= <expr><name><name>caps</name><operator>-&gt;</operator><name>cpuRateLimit</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>totalMem</name> <init>= <expr><name><name>caps</name><operator>-&gt;</operator><name>memLimit</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>cpusetAll</name><index>[<expr><name>MaxCpuSetLength</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>cpusetMissing</name><index>[<expr><name>MaxCpuSetLength</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>bmsCurrent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>bmsCommon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CpusetIsEmpty</name><argument_list>(<argument><expr><name><name>caps</name><operator>-&gt;</operator><name>cpuset</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>EnsureCpusetIsAvailable</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * initialize the variables only when resource group is activated
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IsResGroupActivated</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
		<name>gp_resource_group_enable_cgroup_cpuset</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>bmsAll</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>bmsMissing</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Get all available cores */</comment>
		<expr_stmt><expr><call><name><name>cgroupOpsRoutine</name><operator>-&gt;</operator><name>getcpuset</name></name><argument_list>(<argument><expr><name>CGROUP_ROOT_ID</name></expr></argument>,
							  <argument><expr><name>cpusetAll</name></expr></argument>,
							  <argument><expr><name>MaxCpuSetLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>bmsAll</name> <operator>=</operator> <call><name>CpusetToBitset</name><argument_list>(<argument><expr><name>cpusetAll</name></expr></argument>, <argument><expr><name>MaxCpuSetLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Check whether the cores in this group are available */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CpusetIsEmpty</name><argument_list>(<argument><expr><name><name>caps</name><operator>-&gt;</operator><name>cpuset</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cpuset</name> <init>= <expr><call><name>getCpuSetByRole</name><argument_list>(<argument><expr><name><name>caps</name><operator>-&gt;</operator><name>cpuset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>bmsCurrent</name> <operator>=</operator> <call><name>CpusetToBitset</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><name>MaxCpuSetLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>bmsCommon</name> <operator>=</operator> <call><name>bms_intersect</name><argument_list>(<argument><expr><name>bmsCurrent</name></expr></argument>, <argument><expr><name>bmsAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>bmsMissing</name> <operator>=</operator> <call><name>bms_difference</name><argument_list>(<argument><expr><name>bmsCurrent</name></expr></argument>, <argument><expr><name>bmsCommon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bms_is_empty</name><argument_list>(<argument><expr><name>bmsMissing</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>BitsetToCpuset</name><argument_list>(<argument><expr><name>bmsMissing</name></expr></argument>, <argument><expr><name>cpusetMissing</name></expr></argument>, <argument><expr><name>MaxCpuSetLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cpu cores %s are unavailable on the system"</literal></expr></argument>,
						<argument><expr><name>cpusetMissing</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>sscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>ResGroupCapabilityResgroupidIndexId</name></expr></argument>,
							   <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>				<name>groupIdDatum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>				<name>typeDatum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>				<name>valueDatum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ResGroupLimitType</name></type>	<name>reslimittype</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type>					<name>resgroupid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>				<modifier>*</modifier></type><name>valueStr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>					<name>value</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>				<name>isNull</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>groupIdDatum</name> <operator>=</operator> <call><name>heap_getattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>Anum_pg_resgroupcapability_resgroupid</name></expr></argument>,
									<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_att</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>resgroupid</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>groupIdDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>resgroupid</name> <operator>==</operator> <name>groupid</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newGroup</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DUPLICATE_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"found duplicate resource group id: %d"</literal></expr></argument>,
							<argument><expr><name>groupid</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>typeDatum</name> <operator>=</operator> <call><name>heap_getattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>Anum_pg_resgroupcapability_reslimittype</name></expr></argument>,
								 <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_att</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>reslimittype</name> <operator>=</operator> <operator>(</operator><name>ResGroupLimitType</name><operator>)</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><name>typeDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>valueDatum</name> <operator>=</operator> <call><name>heap_getattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>Anum_pg_resgroupcapability_value</name></expr></argument>,
									 <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_att</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>reslimittype</name> <operator>==</operator> <name>RESGROUP_LIMIT_TYPE_CPU</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>valueStr</name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>valueDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>str2Int</name><argument_list>(<argument><expr><name>valueStr</name></expr></argument>, <argument><expr><call><name>getResgroupOptionName</name><argument_list>(<argument><expr><name>reslimittype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>CPU_RATE_LIMIT_DISABLED</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>totalCpu</name> <operator>+=</operator> <name>value</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>totalCpu</name> <operator>&gt;</operator> <name>RESGROUP_MAX_CPU_RATE_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"total cpu_rate_limit exceeded the limit of %d"</literal></expr></argument>,
								   <argument><expr><name>RESGROUP_MAX_CPU_RATE_LIMIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>reslimittype</name> <operator>==</operator> <name>RESGROUP_LIMIT_TYPE_MEMORY</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>valueStr</name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>valueDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>str2Int</name><argument_list>(<argument><expr><name>valueStr</name></expr></argument>, <argument><expr><call><name>getResgroupOptionName</name><argument_list>(<argument><expr><name>reslimittype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>totalMem</name> <operator>+=</operator> <name>value</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>totalMem</name> <operator>&gt;</operator> <name>RESGROUP_MAX_MEMORY_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"total memory_limit exceeded the limit of %d"</literal></expr></argument>,
							   <argument><expr><name>RESGROUP_MAX_MEMORY_LIMIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>reslimittype</name> <operator>==</operator> <name>RESGROUP_LIMIT_TYPE_CPUSET</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * do the check when resource group is activated
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>IsResGroupActivated</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>CpusetIsEmpty</name><argument_list>(<argument><expr><name><name>caps</name><operator>-&gt;</operator><name>cpuset</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>valueStr</name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>valueDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CpusetIsEmpty</name><argument_list>(<argument><expr><name>valueStr</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>bmsOther</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>EnsureCpusetIsAvailable</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>bms_is_empty</name><argument_list>(<argument><expr><name>bmsCurrent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cpuset</name> <init>= <expr><call><name>getCpuSetByRole</name><argument_list>(<argument><expr><name>valueStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>bmsOther</name> <operator>=</operator> <call><name>CpusetToBitset</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>, <argument><expr><name>MaxCpuSetLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>bmsCommon</name> <operator>=</operator> <call><name>bms_intersect</name><argument_list>(<argument><expr><name>bmsCurrent</name></expr></argument>, <argument><expr><name>bmsOther</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bms_is_empty</name><argument_list>(<argument><expr><name>bmsCommon</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>BitsetToCpuset</name><argument_list>(<argument><expr><name>bmsCommon</name></expr></argument>, <argument><expr><name>cpusetMissing</name></expr></argument>, <argument><expr><name>MaxCpuSetLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cpu cores %s are used by resource group %s"</literal></expr></argument>,
										<argument><expr><name>cpusetMissing</name></expr></argument>,
										<argument><expr><call><name>GetResGroupNameForId</name><argument_list>(<argument><expr><name>resgroupid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Insert one capability to the capability table.
 *
 * @param rel      the relation
 * @param groupid  oid of the resource group
 * @param type     the resource limit type
 * @param value    the limit value
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>insertResgroupCapabilityEntry</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>,
							 <parameter><decl><type><name>Oid</name></type> <name>groupid</name></decl></parameter>,
							 <parameter><decl><type><name>uint16</name></type> <name>type</name></decl></parameter>,
							 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>new_record</name><index>[<expr><name>Natts_pg_resgroupcapability</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>new_record_nulls</name><index>[<expr><name>Natts_pg_resgroupcapability</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupleDesc</name> <init>= <expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>new_record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>new_record_nulls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_record_nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>new_record</name><index>[<expr><name>Anum_pg_resgroupcapability_resgroupid</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>groupid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_record</name><index>[<expr><name>Anum_pg_resgroupcapability_reslimittype</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>UInt16GetDatum</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_record</name><index>[<expr><name>Anum_pg_resgroupcapability_value</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>new_record</name></expr></argument>, <argument><expr><name>new_record_nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CatalogTupleInsert</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Delete capability entries of one resource group.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>deleteResgroupCapabilities</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>groupid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	 <name>resgroup_capability_rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	 <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type>	 <name>scankey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type>	 <name>sscan</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>resgroup_capability_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>ResGroupCapabilityRelationId</name></expr></argument>,
										<argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scankey</name></expr></argument>,
				<argument><expr><name>Anum_pg_resgroupcapability_resgroupid</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
				<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>groupid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>resgroup_capability_rel</name></expr></argument>,
							   <argument><expr><name>ResGroupCapabilityResgroupidIndexId</name></expr></argument>,
							   <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>scankey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>simple_heap_delete</name><argument_list>(<argument><expr><name>resgroup_capability_rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tuple</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>resgroup_capability_rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check to see if any roles are in this resource group.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>checkAuthIdForDrop</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>groupId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	 <name>authIdRel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type>	 <name>authidScankey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type>	 <name>authidScan</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>authIdRel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>AuthIdRelationId</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>authidScankey</name></expr></argument>,
				<argument><expr><name>Anum_pg_authid_rolresgroup</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
				<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>authidScan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>authIdRel</name></expr></argument>, <argument><expr><name>AuthIdRolResGroupIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
									<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>authidScankey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><call><name>systable_getnext</name><argument_list>(<argument><expr><name>authidScan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DEPENDENT_OBJECTS_STILL_EXIST</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"resource group is used by at least one role"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>authidScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>authIdRel</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Convert a C str to a integer value.
 *
 * @param str   the C str
 * @param prop  the property name
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>str2Int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><call><name>strtod</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* both the property name and value are already checked
	 * by the syntax parser, but we'll check it again anyway for safe. */</comment>
	<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>end</name> <operator>==</operator> <name>str</name> <operator>||</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s requires a numeric value"</literal></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>floor</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get memory auditor from auditor name.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>getResGroupMemAuditor</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>RESGROUP_MEMORY_AUDITOR_COUNT</name></expr>;</condition> <incr><expr><name>index</name> <operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ResGroupMemAuditorName</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>index</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>RESGROUP_INVALID_MEM_AUDITOR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * check whether the cpuset value is syntactically right
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>checkCpusetSyntax</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cpuset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>cpuset</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cpuset invalid"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MaxCpuSetLength</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"the length of cpuset reached the upper limit %d"</literal></expr></argument>,
						<argument><expr><name>MaxCpuSetLength</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CpusetToBitset</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>,
						 <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cpuset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cpuset invalid"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check Cpuset by coordinator and segment
 */</comment>
<function><type><specifier>extern</specifier> <name>void</name></type>
<name>checkCpuSetByRole</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cpuset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>arraycpuset</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CpuSetArrayLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>copycpuset</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MaxCpuSetLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>copycpuset</name></expr></argument>, <argument><expr><name>cpuset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cpuset</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>cpuset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>checkCpusetSyntax</name><argument_list>(<argument><expr><name>copycpuset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arraycpuset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>copycpuset</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nextcpuset</name> <init>= <expr><call><name>strtok</name><argument_list>(<argument><expr><name>copycpuset</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>nextcpuset</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>arraycpuset</name><index>[<expr><name>iter</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>nextcpuset</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>nextcpuset</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>checkCpusetSyntax</name><argument_list>(<argument><expr><name><name>arraycpuset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkCpusetSyntax</name><argument_list>(<argument><expr><name><name>arraycpuset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cpuset invalid"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>copycpuset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>arraycpuset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Seperate cpuset by coordinator and segment
 * Return as splitcpuset
 */</comment>
<function><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type>
<name>getCpuSetByRole</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cpuset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>splitcpuset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>arraycpuset</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CpuSetArrayLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>copycpuset</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MaxCpuSetLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>copycpuset</name></expr></argument>, <argument><expr><name>cpuset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nextcpuset</name> <init>= <expr><call><name>strtok</name><argument_list>(<argument><expr><name>copycpuset</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>nextcpuset</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>arraycpuset</name><index>[<expr><name>iter</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>nextcpuset</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nextcpuset</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Get result cpuset by gprole, on master or segment */</comment>
	<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_EXECUTE</name> <operator>&amp;&amp;</operator> <name><name>arraycpuset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>splitcpuset</name> <operator>=</operator> <name><name>arraycpuset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>splitcpuset</name> <operator>=</operator> <name><name>arraycpuset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>splitcpuset</name></expr>;</return>
</block_content>}</block></function>
</unit>
