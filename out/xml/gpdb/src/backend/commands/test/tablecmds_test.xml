<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/commands/test/tablecmds_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../tablecmds.c"</cpp:file></cpp:include>

<comment type="block">/*
 * Ensure that the column having the smallest on-disk segfile is
 * chosen for headerscan during ALTER TABLE ADD COLUMN operation.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__column_to_scan</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RelationData</name></type> <name>reldata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AOCSFileSegInfo</name> <modifier>*</modifier></type><name><name>segInfos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>numcols</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

	<comment type="block">/* Empty segment, should be skipped over */</comment>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>AOCSFileSegInfo</name> <operator>*</operator><operator>)</operator>
			<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AOCSFileSegInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AOCSVPInfoEntry</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>numcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>segno</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>state</name> <operator>=</operator> <name>AOSEG_STATE_DEFAULT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>total_tupcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>nEntry</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <comment type="block">/* number of columns */</comment>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>eof</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>eof</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>=</operator> <literal type="number">165</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>eof</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>=</operator> <literal type="number">85</literal></expr>;</expr_stmt>

	<comment type="block">/* Valid segment, col=1 is the smallest */</comment>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>AOCSFileSegInfo</name> <operator>*</operator><operator>)</operator>
			<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AOCSFileSegInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AOCSVPInfoEntry</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>numcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>segno</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>total_tupcount</name> <operator>=</operator> <literal type="number">51</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>state</name> <operator>=</operator> <name>AOSEG_STATE_DEFAULT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>nEntry</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <comment type="block">/* number of columns */</comment>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>eof</name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>eof</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>eof</name> <operator>=</operator> <literal type="number">320</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>=</operator> <literal type="number">400</literal></expr>;</expr_stmt>

	<comment type="block">/* AWATING_DROP segment, should be skipped over */</comment>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>AOCSFileSegInfo</name> <operator>*</operator><operator>)</operator>
			<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AOCSFileSegInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AOCSVPInfoEntry</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>numcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>segno</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>state</name> <operator>=</operator> <name>AOSEG_STATE_AWAITING_DROP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>total_tupcount</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>nEntry</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <comment type="block">/* number of columns */</comment>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>eof</name> <operator>=</operator> <literal type="number">141</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>eof</name> <operator>=</operator> <literal type="number">51</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>=</operator> <literal type="number">65</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>eof</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>

	<comment type="block">/* Valid segment, col=0 is the smallest */</comment>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>AOCSFileSegInfo</name> <operator>*</operator><operator>)</operator>
			<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AOCSFileSegInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AOCSVPInfoEntry</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>numcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>segno</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>state</name> <operator>=</operator> <name>AOSEG_STATE_USECURRENT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>total_tupcount</name> <operator>=</operator> <literal type="number">135</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>nEntry</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <comment type="block">/* number of columns */</comment>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>eof</name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>eof</name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>=</operator> <literal type="number">650</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>eof</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segInfos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vpinfo</name><operator>.</operator><name>entry</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt>

	<comment type="block">/* Column 1 (vpe index 1) has the smallest eof */</comment>
	<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>column_to_scan</name><argument_list>(<argument><expr><name>segInfos</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>numcols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reldata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> 
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> 
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
			<macro><name>unit_test</name><argument_list>(<argument>test__column_to_scan</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
