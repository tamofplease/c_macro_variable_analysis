<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/replication/walreceiverfuncs.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * walreceiverfuncs.c
 *
 * This file contains functions used by the startup process to communicate
 * with the walreceiver process. Functions implementing walreceiver itself
 * are in walreceiver.c.
 *
 * Portions Copyright (c) 2010-2019, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/backend/replication/walreceiverfuncs.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/startup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/walreceiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/pmsignal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>WalRcvData</name> <modifier>*</modifier></type><name>WalRcv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>volatile</specifier> <name>bool</name> <modifier>*</modifier></type><name>pm_launch_walreceiver</name></decl>;</decl_stmt>

<comment type="block">/*
 * How long to wait for walreceiver to start up after requesting
 * postmaster to launch it. In seconds.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WALRCV_STARTUP_TIMEOUT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<comment type="block">/* Report shared memory space needed by WalRcvShmemInit */</comment>
<function><type><name>Size</name></type>
<name>WalRcvShmemSize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WalRcvData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pm_launch_walreceiver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Allocate and initialize walreceiver-related shared memory */</comment>
<function><type><name>void</name></type>
<name>WalRcvShmemInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>WalRcv</name> <operator>=</operator> <operator>(</operator><name>WalRcvData</name> <operator>*</operator><operator>)</operator>
		<call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"Wal Receiver Ctl"</literal></expr></argument>, <argument><expr><call><name>WalRcvShmemSize</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pm_launch_walreceiver</name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>WalRcv</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* First time through, so initialize */</comment>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>WalRcv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>WalRcvShmemSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>WalRcv</name><operator>-&gt;</operator><name>walRcvState</name></name> <operator>=</operator> <name>WALRCV_STOPPED</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>WalRcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>WalRcv</name><operator>-&gt;</operator><name>latch</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<expr_stmt><expr><operator>*</operator><name>pm_launch_walreceiver</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Is walreceiver running (or starting up)? */</comment>
<function><type><name>bool</name></type>
<name>WalRcvRunning</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WalRcvData</name> <modifier>*</modifier></type><name>walrcv</name> <init>= <expr><name>WalRcv</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WalRcvState</name></type> <name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_time_t</name></type>	<name>startTime</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>startTime</name> <operator>=</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If it has taken too long for walreceiver to start up, give up. Setting
	 * the state to STOPPED ensures that if walreceiver later does start up
	 * after all, it will see that it's not supposed to be running and die
	 * without doing anything.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>WALRCV_STARTING</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>pg_time_t</name></type>	<name>now</name> <init>= <expr><operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>now</name> <operator>-</operator> <name>startTime</name><operator>)</operator> <operator>&gt;</operator> <name>WALRCV_STARTUP_TIMEOUT</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name> <operator>==</operator> <name>WALRCV_STARTING</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name> <operator>=</operator> <name>WALRCV_STOPPED</name></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>debug_xlog_record_read</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
					   <argument><expr><literal type="string">"Set walreceiver state to %s as it has taken too"</literal>
					   <literal type="string">"long to start up"</literal></expr></argument>,
					   <argument><expr><call><name>WalRcvGetStateString</name><argument_list>(<argument><expr><name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>WALRCV_STOPPED</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Is walreceiver running and streaming (or at least attempting to connect,
 * or starting up)?
 */</comment>
<function><type><name>bool</name></type>
<name>WalRcvStreaming</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WalRcvData</name> <modifier>*</modifier></type><name>walrcv</name> <init>= <expr><name>WalRcv</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WalRcvState</name></type> <name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_time_t</name></type>	<name>startTime</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>startTime</name> <operator>=</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If it has taken too long for walreceiver to start up, give up. Setting
	 * the state to STOPPED ensures that if walreceiver later does start up
	 * after all, it will see that it's not supposed to be running and die
	 * without doing anything.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>WALRCV_STARTING</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>pg_time_t</name></type>	<name>now</name> <init>= <expr><operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>now</name> <operator>-</operator> <name>startTime</name><operator>)</operator> <operator>&gt;</operator> <name>WALRCV_STARTUP_TIMEOUT</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name> <operator>==</operator> <name>WALRCV_STARTING</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name> <operator>=</operator> <name>WALRCV_STOPPED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>WALRCV_STREAMING</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>WALRCV_STARTING</name> <operator>||</operator>
		<name>state</name> <operator>==</operator> <name>WALRCV_RESTARTING</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Stop walreceiver (if running) and wait for it to die.
 * Executed by the Startup process.
 */</comment>
<function><type><name>void</name></type>
<name>ShutdownWalRcv</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WalRcvData</name> <modifier>*</modifier></type><name>walrcv</name> <init>= <expr><name>WalRcv</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pid_t</name></type>		<name>walrcvpid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>debug_xlog_record_read</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"walrcv shutdown -- Shutdown request with current walrcv state %s"</literal></expr></argument>,
		   <argument><expr><call><name>WalRcvGetStateString</name><argument_list>(<argument><expr><name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Request walreceiver to stop. Walreceiver will switch to WALRCV_STOPPED
	 * mode once it's finished, and will also request postmaster to not
	 * restart itself.
	 */</comment>
	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>WALRCV_STOPPED</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>WALRCV_STARTING</name></expr>:</case>
			<expr_stmt><expr><name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name> <operator>=</operator> <name>WALRCV_STOPPED</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>WALRCV_STREAMING</name></expr>:</case>
		<case>case <expr><name>WALRCV_WAITING</name></expr>:</case>
		<case>case <expr><name>WALRCV_RESTARTING</name></expr>:</case>
			<expr_stmt><expr><name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name> <operator>=</operator> <name>WALRCV_STOPPING</name></expr>;</expr_stmt>
			<comment type="block">/* fall through */</comment>
		<case>case <expr><name>WALRCV_STOPPING</name></expr>:</case>
			<expr_stmt><expr><name>walrcvpid</name> <operator>=</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Signal walreceiver process if it was still running.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>walrcvpid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name>walrcvpid</name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Wait for walreceiver to acknowledge its death by setting state to
	 * WALRCV_STOPPED.
	 */</comment>
	<while>while <condition>(<expr><call><name>WalRcvRunning</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * This possibly-long loop needs to handle interrupts of startup
		 * process.
		 */</comment>
		<expr_stmt><expr><call><name>HandleStartupProcInterrupts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* 100ms */</comment>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>debug_xlog_record_read</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"walrcv shutdown -- Shutdown performed with current walrcv state %s"</literal></expr></argument>,
		   <argument><expr><call><name>WalRcvGetStateString</name><argument_list>(<argument><expr><name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Request postmaster to start walreceiver.
 *
 * recptr indicates the position where streaming should begin, conninfo
 * is a libpq connection string to use, and slotname is, optionally, the name
 * of a replication slot to acquire.
 */</comment>
<function><type><name>void</name></type>
<name>RequestXLogStreaming</name><parameter_list>(<parameter><decl><type><name>TimeLineID</name></type> <name>tli</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>recptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conninfo</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slotname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WalRcvData</name> <modifier>*</modifier></type><name>walrcv</name> <init>= <expr><name>WalRcv</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>launch</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_time_t</name></type>	<name>now</name> <init>= <expr><operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Latch</name>	   <modifier>*</modifier></type><name>latch</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We always start at the beginning of the segment. That prevents a broken
	 * segment (i.e., with no records in the first half of a segment) from
	 * being created by XLOG streaming, which might cause trouble later on if
	 * the segment is e.g archived.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>XLogSegmentOffset</name><argument_list>(<argument><expr><name>recptr</name></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>recptr</name> <operator>-=</operator> <call><name>XLogSegmentOffset</name><argument_list>(<argument><expr><name>recptr</name></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* It better be stopped if we try to restart it */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name> <operator>==</operator> <name>WALRCV_STOPPED</name> <operator>||</operator>
		   <name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name> <operator>==</operator> <name>WALRCV_WAITING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>conninfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>conninfo</name></name></expr></argument>, <argument><expr><name>conninfo</name></expr></argument>, <argument><expr><name>MAXCONNINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>walrcv</name><operator>-&gt;</operator><name>conninfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>slotname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>slotname</name></name></expr></argument>, <argument><expr><name>slotname</name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>walrcv</name><operator>-&gt;</operator><name>slotname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name> <operator>==</operator> <name>WALRCV_STOPPED</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>launch</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name> <operator>=</operator> <name>WALRCV_STARTING</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>walrcv</name><operator>-&gt;</operator><name>walRcvState</name></name> <operator>=</operator> <name>WALRCV_RESTARTING</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>walrcv</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If this is the first startup of walreceiver (on this timeline),
	 * initialize receivedUpto and latestChunkStart to the starting point.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>walrcv</name><operator>-&gt;</operator><name>receiveStart</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>receivedTLI</name></name> <operator>!=</operator> <name>tli</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>walrcv</name><operator>-&gt;</operator><name>receivedUpto</name></name> <operator>=</operator> <name>recptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>walrcv</name><operator>-&gt;</operator><name>receivedTLI</name></name> <operator>=</operator> <name>tli</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>walrcv</name><operator>-&gt;</operator><name>latestChunkStart</name></name> <operator>=</operator> <name>recptr</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>walrcv</name><operator>-&gt;</operator><name>receiveStart</name></name> <operator>=</operator> <name>recptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>walrcv</name><operator>-&gt;</operator><name>receiveStartTLI</name></name> <operator>=</operator> <name>tli</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>latch</name> <operator>=</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>latch</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>launch</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SendPostmasterSignal</name><argument_list>(<argument><expr><name>PMSIGNAL_START_WALRECEIVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>latch</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><name>latch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Returns the last+1 byte position that walreceiver has written.
 *
 * Optionally, returns the previous chunk start, that is the first byte
 * written in the most recent walreceiver flush cycle.  Callers not
 * interested in that value may pass NULL for latestChunkStart. Same for
 * receiveTLI.
 */</comment>
<function><type><name>XLogRecPtr</name></type>
<name>GetWalRcvWriteRecPtr</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>latestChunkStart</name></decl></parameter>, <parameter><decl><type><name>TimeLineID</name> <modifier>*</modifier></type><name>receiveTLI</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WalRcvData</name> <modifier>*</modifier></type><name>walrcv</name> <init>= <expr><name>WalRcv</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>recptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>recptr</name> <operator>=</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>receivedUpto</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>latestChunkStart</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>latestChunkStart</name> <operator>=</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>latestChunkStart</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>receiveTLI</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>receiveTLI</name> <operator>=</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>receivedTLI</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>recptr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns the replication apply delay in ms or -1
 * if the apply delay info is not available
 */</comment>
<function><type><name>int</name></type>
<name>GetReplicationApplyDelay</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WalRcvData</name> <modifier>*</modifier></type><name>walrcv</name> <init>= <expr><name>WalRcv</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>receivePtr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>replayPtr</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>long</name></type>		<name>secs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>usecs</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>chunkReplayStartTime</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>receivePtr</name> <operator>=</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>receivedUpto</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>replayPtr</name> <operator>=</operator> <call><name>GetXLogReplayRecPtr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>receivePtr</name> <operator>==</operator> <name>replayPtr</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>chunkReplayStartTime</name> <operator>=</operator> <call><name>GetCurrentChunkReplayStartTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>chunkReplayStartTime</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>TimestampDifference</name><argument_list>(<argument><expr><name>chunkReplayStartTime</name></expr></argument>,
						<argument><expr><call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>secs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>secs</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>usecs</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns the network latency in ms, note that this includes any
 * difference in clock settings between the servers, as well as timezone.
 */</comment>
<function><type><name>int</name></type>
<name>GetReplicationTransferLatency</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WalRcvData</name> <modifier>*</modifier></type><name>walrcv</name> <init>= <expr><name>WalRcv</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>lastMsgSendTime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>lastMsgReceiptTime</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>long</name></type>		<name>secs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>usecs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ms</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lastMsgSendTime</name> <operator>=</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>lastMsgSendTime</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lastMsgReceiptTime</name> <operator>=</operator> <name><name>walrcv</name><operator>-&gt;</operator><name>lastMsgReceiptTime</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walrcv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TimestampDifference</name><argument_list>(<argument><expr><name>lastMsgSendTime</name></expr></argument>,
						<argument><expr><name>lastMsgReceiptTime</name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>secs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ms</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>secs</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>usecs</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>

	<return>return <expr><name>ms</name></expr>;</return>
</block_content>}</block></function>
</unit>
