<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/replication/test/gp_replication_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/pg_shmem.h"</cpp:file></cpp:include>

<comment type="block">/* Actual function body */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../gp_replication.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expect_lwlock</name><parameter_list>(<parameter><decl><type><name>LWLockMode</name></type> <name>lockmode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>SyncRepLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>SyncRepLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>FTSReplicationStatusLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
		<expr_stmt><expr><call><name>expect_value_count</name><argument_list>(<argument><expr><name>LWLockHeldByMe</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>FTSReplicationStatusLock</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>LWLockHeldByMe</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>FTSReplicationStatusLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expect_ereport</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>errstart</name></expr></argument>, <argument><expr><name>elevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>errstart</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>errstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FTSReplicationStatusCtlData</name> <modifier>*</modifier></type>
<name>test_setup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>WalSndState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>max_wal_senders</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>WalSndCtl</name> <operator>=</operator> <operator>(</operator><name>WalSndCtlData</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><call><name>WalSndShmemSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>WalSndCtl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>WalSndShmemSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>WalSndCtl</name><operator>-&gt;</operator><name>walsnds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pid</name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>WalSndCtl</name><operator>-&gt;</operator><name>walsnds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>WalSndCtl</name><operator>-&gt;</operator><name>walsnds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_for_gp_walreceiver</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>WalSndCtl</name><operator>-&gt;</operator><name>walsnds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>FTSRepStatusCtl</name> <operator>=</operator> <operator>(</operator><name>FTSReplicationStatusCtlData</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><call><name>FTSReplicationStatusShmemSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>FTSRepStatusCtl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FTSReplicationStatusShmemSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>FTSRepStatusCtl</name><operator>-&gt;</operator><name>replications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>in_use</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>StrNCpy</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>FTSRepStatusCtl</name><operator>-&gt;</operator><name>replications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GP_WALRECEIVER_APPNAME</name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>FTSRepStatusCtl</name><operator>-&gt;</operator><name>replications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_lwlock</name><argument_list>(<argument><expr><name>LW_SHARED</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>FTSRepStatusCtl</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_GetMirrorStatus_Pid_Zero</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FtsResponse</name></type> <name>response</name> <init>= <expr><block>{ <expr><operator>.</operator><name>IsMirrorUp</name> <operator>=</operator> <name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FTSReplicationStatusCtlData</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>test_setup</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WALSNDSTATE_STARTUP</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * This would make sure Mirror is reported as DOWN, as grace period
	 * duration is taken into account.
	 */</comment>
	<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>replications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>replica_disconnected_at</name> <operator>=</operator>
		<operator>(</operator><operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <name>gp_fts_mark_mirror_down_grace_period</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Ensure the recovery finished before wal sender died.
	 */</comment>
	<expr_stmt><expr><name>PMAcceptingConnectionsStartTime</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>replications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>replica_disconnected_at</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GetMirrorStatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>RequestRetry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>IsMirrorUp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>IsInSync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_GetMirrorStatus_RequestRetry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FtsResponse</name></type> <name>response</name> <init>= <expr><block>{ <expr><operator>.</operator><name>IsMirrorUp</name> <operator>=</operator> <name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FTSReplicationStatusCtlData</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>test_setup</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WALSNDSTATE_STARTUP</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Make the pid zero time within the grace period.
	 */</comment>
	<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>replications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>replica_disconnected_at</name> <operator>=</operator>
		<operator>(</operator><operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <name>gp_fts_mark_mirror_down_grace_period</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Ensure recovery finished before wal sender died.
	 */</comment>
	<expr_stmt><expr><name>PMAcceptingConnectionsStartTime</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>replications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>replica_disconnected_at</name> <operator>-</operator> <name>gp_fts_mark_mirror_down_grace_period</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_ereport</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GetMirrorStatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>RequestRetry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * If the replication keeps crash and continuously retry more than
 * gp_fts_replication_attempt_count, FTS should not retry and mark
 * mirror down directly.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_GetMirrorStatus_Exceed_ContinuouslyReplicationAttempt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FtsResponse</name></type> <name>response</name> <init>= <expr><block>{ <expr><operator>.</operator><name>IsMirrorUp</name> <operator>=</operator> <name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FTSReplicationStatusCtlData</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>test_setup</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WALSNDSTATE_STARTUP</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Make the current replication attempt count exceeds the max attempt count.
	 */</comment>
	<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>replications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>con_attempt_count</name> <operator>=</operator> <name>gp_fts_replication_attempt_count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Make the pid zero time within the grace period.
	 */</comment>
	<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>replications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>replica_disconnected_at</name> <operator>=</operator>
		<operator>(</operator><operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <name>gp_fts_mark_mirror_down_grace_period</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Ensure recovery finished before wal sender died.
	 */</comment>
	<expr_stmt><expr><name>PMAcceptingConnectionsStartTime</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>replications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>replica_disconnected_at</name> <operator>-</operator> <name>gp_fts_mark_mirror_down_grace_period</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_ereport</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GetMirrorStatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>RequestRetry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Verify the logic the grace period will exclude the recovery time.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_GetMirrorStatus_Delayed_AcceptingConnectionsStartTime</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FtsResponse</name></type> <name>response</name> <init>= <expr><block>{ <expr><operator>.</operator><name>IsMirrorUp</name> <operator>=</operator> <name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FTSReplicationStatusCtlData</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>test_setup</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WALSNDSTATE_STARTUP</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * wal sender pid zero time over the grace period
	 * Mirror will be marked down, and no retry.
	 */</comment>
	<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>replications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>replica_disconnected_at</name> <operator>=</operator>
		<operator>(</operator><operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <name>gp_fts_mark_mirror_down_grace_period</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * However the database was in recovery, hence
	 * we are still within the grace period, and
	 * we should retry.
	 */</comment>
	<expr_stmt><expr><name>PMAcceptingConnectionsStartTime</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <name>gp_fts_mark_mirror_down_grace_period</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_ereport</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GetMirrorStatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>RequestRetry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_GetMirrorStatus_Overflow</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FtsResponse</name></type> <name>response</name> <init>= <expr><block>{ <expr><operator>.</operator><name>IsMirrorUp</name> <operator>=</operator> <name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FTSReplicationStatusCtlData</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>test_setup</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WALSNDSTATE_STARTUP</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * This would make sure Mirror is reported as DOWN, as grace period
	 * duration is taken into account.
	 */</comment>
	<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>replications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>replica_disconnected_at</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>PMAcceptingConnectionsStartTime</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GetMirrorStatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>RequestRetry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>IsMirrorUp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>IsInSync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_GetMirrorStatus_WALSNDSTATE_STARTUP</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FtsResponse</name></type> <name>response</name> <init>= <expr><block>{ <expr><operator>.</operator><name>IsMirrorUp</name> <operator>=</operator> <name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FTSReplicationStatusCtlData</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>test_setup</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>WALSNDSTATE_STARTUP</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * This would make sure Mirror is not reported as DOWN, as still in grace
	 * period.
	 */</comment>
	<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>replications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>replica_disconnected_at</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>PMAcceptingConnectionsStartTime</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>replications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>replica_disconnected_at</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_ereport</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GetMirrorStatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>RequestRetry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>IsMirrorUp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>IsInSync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_GetMirrorStatus_WALSNDSTATE_BACKUP</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FtsResponse</name></type> <name>response</name> <init>= <expr><block>{ <expr><operator>.</operator><name>IsMirrorUp</name> <operator>=</operator> <name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FTSReplicationStatusCtlData</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>test_setup</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>WALSNDSTATE_BACKUP</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * This would make sure Mirror is reported as DOWN, as grace period
	 * duration is taken into account.
	 */</comment>
	<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>replications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>replica_disconnected_at</name> <operator>=</operator>
		<operator>(</operator><operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <name>gp_fts_mark_mirror_down_grace_period</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Ensure the recovery finished before wal sender died.
	 */</comment>
	<expr_stmt><expr><name>PMAcceptingConnectionsStartTime</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>replications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>replica_disconnected_at</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GetMirrorStatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>RequestRetry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>IsMirrorUp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>IsInSync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_GetMirrorStatus_WALSNDSTATE_CATCHUP</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FtsResponse</name></type> <name>response</name> <init>= <expr><block>{ <expr><operator>.</operator><name>IsMirrorUp</name> <operator>=</operator> <name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FTSReplicationStatusCtlData</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>test_setup</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>WALSNDSTATE_CATCHUP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GetMirrorStatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>IsMirrorUp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>IsInSync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_GetMirrorStatus_WALSNDSTATE_STREAMING</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FtsResponse</name></type> <name>response</name> <init>= <expr><block>{ <expr><operator>.</operator><name>IsMirrorUp</name> <operator>=</operator> <name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FTSReplicationStatusCtlData</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>test_setup</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>WALSNDSTATE_STREAMING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GetMirrorStatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>IsMirrorUp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>IsInSync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_GetMirrorStatus_Pid_Zero</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_GetMirrorStatus_RequestRetry</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_GetMirrorStatus_Exceed_ContinuouslyReplicationAttempt</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_GetMirrorStatus_Delayed_AcceptingConnectionsStartTime</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_GetMirrorStatus_Overflow</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_GetMirrorStatus_WALSNDSTATE_STARTUP</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_GetMirrorStatus_WALSNDSTATE_BACKUP</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_GetMirrorStatus_WALSNDSTATE_CATCHUP</name></expr></argument>)</argument_list></call></expr>,
		<macro><name>unit_test</name><argument_list>(<argument>test_GetMirrorStatus_WALSNDSTATE_STREAMING</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
