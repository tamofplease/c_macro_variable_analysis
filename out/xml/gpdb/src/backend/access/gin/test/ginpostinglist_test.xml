<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/gin/test/ginpostinglist_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/gin_private.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>BlockId</name></type>
<name>make_block_id</name><parameter_list>(<parameter><decl><type><name>uint16</name></type> <name>high</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>low</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BlockId</name></type> <name>block_id</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>block_id</name> <operator>=</operator> <operator>(</operator><name>BlockId</name><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BlockIdData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>block_id</name><operator>-&gt;</operator><name>bi_hi</name></name> <operator>=</operator> <name>high</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>block_id</name><operator>-&gt;</operator><name>bi_lo</name></name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>
	<return>return <expr><name>block_id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ItemPointer</name></type>
<name>make_item_pointer</name><parameter_list>(<parameter><decl><type><name>BlockId</name></type> <name>block_id</name></decl></parameter>, <parameter><decl><type><name>OffsetNumber</name></type> <name>offset_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ItemPointer</name></type> <name>item_pointer</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>item_pointer</name> <operator>=</operator> <operator>(</operator><name>ItemPointer</name><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ItemPointerData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item_pointer</name><operator>-&gt;</operator><name>ip_blkid</name></name> <operator>=</operator> <operator>*</operator><name>block_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item_pointer</name><operator>-&gt;</operator><name>ip_posid</name></name> <operator>=</operator> <name>offset_number</name></expr>;</expr_stmt>
	<return>return <expr><name>item_pointer</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Postgres expects item pointers' offsets to be less than 11 bits.
 * Greenplum append-only tables allow for the full 16 bits of OffsetNumber
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_compress_gin_posting_list_with_item_pointer_with_offset_larger_than_eleven_bits</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>offset_number_larger_than_11_bits</name> <init>= <expr><literal type="number">3000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>number_of_item_pointers</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>max_size</name> <init>= <expr><literal type="number">100</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ItemPointerData</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ItemPointer</name></type> <name>item_pointer</name> <init>= <expr><call><name>make_item_pointer</name><argument_list>(
		<argument><expr><call><name>make_block_id</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>offset_number_larger_than_11_bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>number_written</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>GinPostingList</name> <modifier>*</modifier></type><name>gin_posting_list</name> <init>= <expr><call><name>ginCompressPostingList</name><argument_list>(
		<argument><expr><name>item_pointer</name></expr></argument>,
		<argument><expr><name>number_of_item_pointers</name></expr></argument>,
		<argument><expr><name>max_size</name></expr></argument>,
		<argument><expr><name>number_written</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><operator>*</operator><name><name>gin_posting_list</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>gin_posting_list</name><operator>-&gt;</operator><name>nbytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><operator>*</operator><name>number_written</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>gin_posting_list</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>ip_posid</name></name></expr></argument>, <argument><expr><name><name>item_pointer</name><operator>-&gt;</operator><name>ip_posid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_compress_gin_posting_list_with_multiple_item_pointers</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>offset_number_with_all_bits_on</name> <init>= <expr><literal type="number">65535</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>offset_number_larger_than_11_bits</name> <init>= <expr><literal type="number">5000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>other_offset_number_larger_than_11_bits</name> <init>= <expr><literal type="number">5000</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ItemPointer</name></type> <name>first_item_pointer</name> <init>= <expr><call><name>make_item_pointer</name><argument_list>(
		<argument><expr><call><name>make_block_id</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>offset_number_larger_than_11_bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ItemPointer</name></type> <name>second_item_pointer</name> <init>= <expr><call><name>make_item_pointer</name><argument_list>(
		<argument><expr><call><name>make_block_id</name><argument_list>(<argument><expr><literal type="number">65534</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>offset_number_with_all_bits_on</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Last itempointer in the list does not get encoded or decoded 
	 */</comment>
	<decl_stmt><decl><type><name>ItemPointer</name></type> <name>third_item_pointer</name> <init>= <expr><call><name>make_item_pointer</name><argument_list>(
		<argument><expr><call><name>make_block_id</name><argument_list>(<argument><expr><literal type="number">65535</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>other_offset_number_larger_than_11_bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ItemPointerData</name></type> <name><name>item_pointer_datas</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ItemPointerCopy</name><argument_list>(<argument><expr><name>first_item_pointer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item_pointer_datas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ItemPointerCopy</name><argument_list>(<argument><expr><name>second_item_pointer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item_pointer_datas</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ItemPointerCopy</name><argument_list>(<argument><expr><name>third_item_pointer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item_pointer_datas</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>number_of_item_pointers</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>max_size</name> <init>= <expr><literal type="number">100</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ItemPointerData</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>number_written</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GinPostingList</name> <modifier>*</modifier></type><name>gin_posting_list</name> <init>= <expr><call><name>ginCompressPostingList</name><argument_list>(
		<argument><expr><operator>&amp;</operator><name><name>item_pointer_datas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
		<argument><expr><name>number_of_item_pointers</name></expr></argument>,
		<argument><expr><name>max_size</name></expr></argument>,
		<argument><expr><name>number_written</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>number_of_decoded_item_pointers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name>ItemPointer</name></type> <name>decoded_item_pointers</name> <init>= <expr><call><name>ginPostingListDecode</name><argument_list>(
		<argument><expr><name>gin_posting_list</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>number_of_decoded_item_pointers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Number of items compressed successfully</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><operator>*</operator><name>number_written</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Number of items are decoded successfully</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>number_of_decoded_item_pointers</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="line">// Block ids can be decoded successfuly</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>decoded_item_pointers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>ip_blkid</name><operator>.</operator><name>bi_hi</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>decoded_item_pointers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>ip_blkid</name><operator>.</operator><name>bi_lo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>decoded_item_pointers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ip_blkid</name><operator>.</operator><name>bi_hi</name></name></expr></argument>, <argument><expr><literal type="number">65534</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>decoded_item_pointers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ip_blkid</name><operator>.</operator><name>bi_lo</name></name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Offsets are decoded successfully</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(
		<argument><expr><name><name>decoded_item_pointers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ip_posid</name></expr></argument>,
		<argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(
		<argument><expr><name><name>decoded_item_pointers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ip_posid</name></expr></argument>,
		<argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_compress_gin_posting_list_with_item_pointer_with_offset_larger_than_eleven_bits</name></expr></argument>)</argument_list></call></expr>,
		<macro><name>unit_test</name><argument_list>(<argument>test_compress_gin_posting_list_with_multiple_item_pointers</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>
	
	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
