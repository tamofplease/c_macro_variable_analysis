<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/gin/ginlogic.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ginlogic.c
 *	  routines for performing binary- and ternary-logic consistent checks.
 *
 * A GIN operator class can provide a boolean or ternary consistent
 * function, or both.  This file provides both boolean and ternary
 * interfaces to the rest of the GIN code, even if only one of them is
 * implemented by the opclass.
 *
 * Providing a boolean interface when the opclass implements only the
 * ternary function is straightforward - just call the ternary function
 * with the check-array as is, and map the GIN_TRUE, GIN_FALSE, GIN_MAYBE
 * return codes to TRUE, FALSE and TRUE+recheck, respectively.  Providing
 * a ternary interface when the opclass only implements a boolean function
 * is implemented by calling the boolean function many times, with all the
 * MAYBE arguments set to all combinations of TRUE and FALSE (up to a
 * certain number of MAYBE arguments).
 *
 * (A boolean function is enough to determine if an item matches, but a
 * GIN scan can apply various optimizations if it can determine that an
 * item matches or doesn't match, even if it doesn't know if some of the
 * keys are present or not.  That's what the ternary consistent function
 * is used for.)
 *
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *			src/backend/access/gin/ginlogic.c
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/gin_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/reloptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_collation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/indexfsm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lmgr.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Maximum number of MAYBE inputs that shimTriConsistentFn will try to
 * resolve by calling all combinations.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MAYBE_ENTRIES</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>

<comment type="block">/*
 * Dummy consistent functions for an EVERYTHING key.  Just claim it matches.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>trueConsistentFn</name><parameter_list>(<parameter><decl><type><name>GinScanKey</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>recheckCurItem</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>GinTernaryValue</name></type>
<name>trueTriConsistentFn</name><parameter_list>(<parameter><decl><type><name>GinScanKey</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>GIN_TRUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * A helper function for calling a regular, binary logic, consistent function.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>directBoolConsistentFn</name><parameter_list>(<parameter><decl><type><name>GinScanKey</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Initialize recheckCurItem in case the consistentFn doesn't know it
	 * should set it.  The safe assumption in that case is to force recheck.
	 */</comment>
	<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>recheckCurItem</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<return>return <expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>FunctionCall8Coll</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>consistentFmgrInfo</name></name></expr></argument>,
										  <argument><expr><name><name>key</name><operator>-&gt;</operator><name>collation</name></name></expr></argument>,
										  <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>entryRes</name></name></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><call><name>UInt16GetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>strategy</name></name></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><name><name>key</name><operator>-&gt;</operator><name>query</name></name></expr></argument>,
										  <argument><expr><call><name>UInt32GetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>nuserentries</name></name></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>extra_data</name></name></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>recheckCurItem</name></name></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>queryValues</name></name></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>queryCategories</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * A helper function for calling a native ternary logic consistent function.
 */</comment>
<function><type><specifier>static</specifier> <name>GinTernaryValue</name></type>
<name>directTriConsistentFn</name><parameter_list>(<parameter><decl><type><name>GinScanKey</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DatumGetGinTernaryValue</name><argument_list>(<argument><expr><call><name>FunctionCall7Coll</name><argument_list>(
													 <argument><expr><name><name>key</name><operator>-&gt;</operator><name>triConsistentFmgrInfo</name></name></expr></argument>,
													 <argument><expr><name><name>key</name><operator>-&gt;</operator><name>collation</name></name></expr></argument>,
													 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>entryRes</name></name></expr></argument>)</argument_list></call></expr></argument>,
													 <argument><expr><call><name>UInt16GetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>strategy</name></name></expr></argument>)</argument_list></call></expr></argument>,
													 <argument><expr><name><name>key</name><operator>-&gt;</operator><name>query</name></name></expr></argument>,
													 <argument><expr><call><name>UInt32GetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>nuserentries</name></name></expr></argument>)</argument_list></call></expr></argument>,
													 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>extra_data</name></name></expr></argument>)</argument_list></call></expr></argument>,
													 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>queryValues</name></name></expr></argument>)</argument_list></call></expr></argument>,
													 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>queryCategories</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This function implements a binary logic consistency check, using a ternary
 * logic consistent function provided by the opclass. GIN_MAYBE return value
 * is interpreted as true with recheck flag.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>shimBoolConsistentFn</name><parameter_list>(<parameter><decl><type><name>GinScanKey</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GinTernaryValue</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DatumGetGinTernaryValue</name><argument_list>(<argument><expr><call><name>FunctionCall7Coll</name><argument_list>(
													   <argument><expr><name><name>key</name><operator>-&gt;</operator><name>triConsistentFmgrInfo</name></name></expr></argument>,
													   <argument><expr><name><name>key</name><operator>-&gt;</operator><name>collation</name></name></expr></argument>,
													   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>entryRes</name></name></expr></argument>)</argument_list></call></expr></argument>,
													   <argument><expr><call><name>UInt16GetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>strategy</name></name></expr></argument>)</argument_list></call></expr></argument>,
													   <argument><expr><name><name>key</name><operator>-&gt;</operator><name>query</name></name></expr></argument>,
													   <argument><expr><call><name>UInt32GetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>nuserentries</name></name></expr></argument>)</argument_list></call></expr></argument>,
													   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>extra_data</name></name></expr></argument>)</argument_list></call></expr></argument>,
													   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>queryValues</name></name></expr></argument>)</argument_list></call></expr></argument>,
													   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>queryCategories</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>GIN_MAYBE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>recheckCurItem</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>recheckCurItem</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This function implements a tri-state consistency check, using a boolean
 * consistent function provided by the opclass.
 *
 * Our strategy is to call consistentFn with MAYBE inputs replaced with every
 * combination of TRUE/FALSE. If consistentFn returns the same value for every
 * combination, that's the overall result. Otherwise, return MAYBE. Testing
 * every combination is O(n^2), so this is only feasible for a small number of
 * MAYBE inputs.
 *
 * NB: This function modifies the key-&gt;entryRes array!
 */</comment>
<function><type><specifier>static</specifier> <name>GinTernaryValue</name></type>
<name>shimTriConsistentFn</name><parameter_list>(<parameter><decl><type><name>GinScanKey</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>nmaybe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name><name>maybeEntries</name><index>[<expr><name>MAX_MAYBE_ENTRIES</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>boolResult</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>recheck</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GinTernaryValue</name></type> <name>curResult</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Count how many MAYBE inputs there are, and store their indexes in
	 * maybeEntries. If there are too many MAYBE inputs, it's not feasible to
	 * test all combinations, so give up and return MAYBE.
	 */</comment>
	<expr_stmt><expr><name>nmaybe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>key</name><operator>-&gt;</operator><name>nentries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>entryRes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>GIN_MAYBE</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>nmaybe</name> <operator>&gt;=</operator> <name>MAX_MAYBE_ENTRIES</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>GIN_MAYBE</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>maybeEntries</name><index>[<expr><name>nmaybe</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * If none of the inputs were MAYBE, so we can just call consistent
	 * function as is.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>nmaybe</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>directBoolConsistentFn</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* First call consistent function with all the maybe-inputs set FALSE */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nmaybe</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>entryRes</name><index>[<expr><name><name>maybeEntries</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>GIN_FALSE</name></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><name>curResult</name> <operator>=</operator> <call><name>directBoolConsistentFn</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<comment type="block">/* Twiddle the entries for next combination. */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nmaybe</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>entryRes</name><index>[<expr><name><name>maybeEntries</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name>GIN_FALSE</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>entryRes</name><index>[<expr><name><name>maybeEntries</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>GIN_TRUE</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>entryRes</name><index>[<expr><name><name>maybeEntries</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>GIN_FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>nmaybe</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>boolResult</name> <operator>=</operator> <call><name>directBoolConsistentFn</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>recheck</name> <operator>|=</operator> <name><name>key</name><operator>-&gt;</operator><name>recheckCurItem</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>curResult</name> <operator>!=</operator> <name>boolResult</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>GIN_MAYBE</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* TRUE with recheck is taken to mean MAYBE */</comment>
	<if_stmt><if>if <condition>(<expr><name>curResult</name> <operator>==</operator> <name>GIN_TRUE</name> <operator>&amp;&amp;</operator> <name>recheck</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>curResult</name> <operator>=</operator> <name>GIN_MAYBE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>curResult</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set up the implementation of the consistent functions for a scan key.
 */</comment>
<function><type><name>void</name></type>
<name>ginInitConsistentFunction</name><parameter_list>(<parameter><decl><type><name>GinState</name> <modifier>*</modifier></type><name>ginstate</name></decl></parameter>, <parameter><decl><type><name>GinScanKey</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>searchMode</name></name> <operator>==</operator> <name>GIN_SEARCH_MODE_EVERYTHING</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>boolConsistentFn</name></name> <operator>=</operator> <name>trueConsistentFn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>triConsistentFn</name></name> <operator>=</operator> <name>trueTriConsistentFn</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>consistentFmgrInfo</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ginstate</name><operator>-&gt;</operator><name>consistentFn</name><index>[<expr><name><name>key</name><operator>-&gt;</operator><name>attnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>triConsistentFmgrInfo</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ginstate</name><operator>-&gt;</operator><name>triConsistentFn</name><index>[<expr><name><name>key</name><operator>-&gt;</operator><name>attnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>collation</name></name> <operator>=</operator> <name><name>ginstate</name><operator>-&gt;</operator><name>supportCollation</name><index>[<expr><name><name>key</name><operator>-&gt;</operator><name>attnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>ginstate</name><operator>-&gt;</operator><name>consistentFn</name><index>[<expr><name><name>key</name><operator>-&gt;</operator><name>attnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fn_oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>boolConsistentFn</name></name> <operator>=</operator> <name>directBoolConsistentFn</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>boolConsistentFn</name></name> <operator>=</operator> <name>shimBoolConsistentFn</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>ginstate</name><operator>-&gt;</operator><name>triConsistentFn</name><index>[<expr><name><name>key</name><operator>-&gt;</operator><name>attnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fn_oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>triConsistentFn</name></name> <operator>=</operator> <name>directTriConsistentFn</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>triConsistentFn</name></name> <operator>=</operator> <name>shimTriConsistentFn</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
