<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/bitmap/bitmapxlog.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * bitmapxlog.c
 *	  WAL replay logic for the bitmap index.
 *
 * Portions Copyright (c) 2007-2010 Greenplum Inc
 * Portions Copyright (c) 2010-2012 EMC Corporation
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 * Portions Copyright (c) 2006-2008, PostgreSQL Global Development Group
 * 
 *
 * IDENTIFICATION
 *	  src/backend/access/bitmap/bitmapxlog.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/bitmap_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/bitmap_xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogutils.h"</cpp:file></cpp:include>

<comment type="block">/*
 * _bitmap_xlog_insert_lovitem() -- insert a new lov item.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_bitmap_xlog_insert_lovitem</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Buffer</name></type>			<name>lovBuffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xl_bm_lovitem</name>	<modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_bm_lovitem</name> <operator>*</operator><operator>)</operator> <call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>XLogReadBufferForRedo</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lovBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BLK_NEEDS_REDO</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Page</name></type>			<name>lovPage</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>lovPage</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>PageIsNew</name><argument_list>(<argument><expr><name>lovPage</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>_bitmap_init_lovpage</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"In redo, processing a lovItem: (blockno, offset)=(%d,%d)"</literal></expr></argument>,
				<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_lov_blkno</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_lov_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>OffsetNumber</name></type>	<name>newOffset</name></decl>, <decl><type ref="prev"/><name>itemSize</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>newOffset</name> <operator>=</operator> <call><name>OffsetNumberNext</name><argument_list>(<argument><expr><call><name>PageGetMaxOffsetNumber</name><argument_list>(<argument><expr><name>lovPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>newOffset</name> <operator>&gt;</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_lov_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"_bitmap_xlog_insert_lovitem: LOV item is not inserted "</literal>
					<literal type="string">"in pos %d (requested %d)"</literal></expr></argument>,
					<argument><expr><name>newOffset</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_lov_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * The value newOffset could be smaller than xlrec-&gt;bm_lov_offset because
		 * of aborted transactions.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>newOffset</name> <operator>&lt;</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_lov_offset</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>UnlockReleaseBuffer</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>itemSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BMLOVItemData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>itemSize</name> <operator>&gt;</operator> <call><name>PageGetFreeSpace</name><argument_list>(<argument><expr><name>lovPage</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>,
					<argument><expr><literal type="string">"_bitmap_xlog_insert_lovitem: not enough space in LOV page %d"</literal></expr></argument>,
					<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_lov_blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>PageAddItem</name><argument_list>(<argument><expr><name>lovPage</name></expr></argument>, <argument><expr><operator>(</operator><name>Item</name><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>xlrec</name><operator>-&gt;</operator><name>bm_lovItem</name></name><operator>)</operator></expr></argument>, <argument><expr><name>itemSize</name></expr></argument>,
					<argument><expr><name>newOffset</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>InvalidOffsetNumber</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"_bitmap_xlog_insert_lovitem: failed to add LOV item"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><name>lovPage</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>UnlockReleaseBuffer</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Update the meta page when needed */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xlrec</name><operator>-&gt;</operator><name>bm_is_new_lov_blkno</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>Buffer</name></type>		<name>metabuf</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>XLogReadBufferForRedo</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>metabuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BLK_NEEDS_REDO</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BMMetaPage</name></type>	<name>metapage</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
 			<return>return;</return></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><name>metapage</name> <operator>=</operator> <operator>(</operator><name>BMMetaPage</name><operator>)</operator> <call><name>PageGetContents</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>metapage</name><operator>-&gt;</operator><name>bm_lov_lastpage</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_lov_blkno</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>UnlockReleaseBuffer</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * _bitmap_xlog_insert_meta() -- update a metapage.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_bitmap_xlog_insert_meta</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>xl_bm_metapage</name>	<modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_bm_metapage</name> <operator>*</operator><operator>)</operator> <call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name></type>			<name>metabuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>			<name>mp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BMMetaPage</name></type>		<name>metapage</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>metabuf</name> <operator>=</operator> <call><name>XLogReadBufferExtended</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_node</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_fork</name></name></expr></argument>, <argument><expr><name>BM_METAPAGE</name></expr></argument>, <argument><expr><name>RBM_ZERO_AND_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>mp</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PageIsNew</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PageInit</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><call><name>BufferGetPageSize</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PageGetLSN</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>lsn</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>metapage</name> <operator>=</operator> <operator>(</operator><name>BMMetaPage</name><operator>)</operator><call><name>PageGetContents</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>metapage</name><operator>-&gt;</operator><name>bm_magic</name></name> <operator>=</operator> <name>BITMAP_MAGIC</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>metapage</name><operator>-&gt;</operator><name>bm_version</name></name> <operator>=</operator> <name>BITMAP_VERSION</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>metapage</name><operator>-&gt;</operator><name>bm_lov_heapId</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_lov_heapId</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>metapage</name><operator>-&gt;</operator><name>bm_lov_indexId</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_lov_indexId</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>metapage</name><operator>-&gt;</operator><name>bm_lov_lastpage</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_lov_lastpage</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_bitmap_wrtbuf</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>_bitmap_relbuf</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * _bitmap_xlog_insert_bitmap_lastwords() -- update the last two words
 * in a bitmap vector.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_bitmap_xlog_insert_bitmap_lastwords</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, 
									 <parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>xl_bm_bitmap_lastwords</name> <modifier>*</modifier></type><name>xlrec</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xlrec</name> <operator>=</operator> <operator>(</operator><name>xl_bm_bitmap_lastwords</name> <operator>*</operator><operator>)</operator> <call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Buffer</name></type>		<name>lovBuffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>		<name>lovPage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BMLOVItem</name></type>	<name>lovItem</name></decl>;</decl_stmt>

	<comment type="block">/* If we have a full-page image, restore it and we're done */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>XLogReadBufferForRedo</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lovBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BLK_NEEDS_REDO</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>lovPage</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>PageGetLSN</name><argument_list>(<argument><expr><name>lovPage</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>lsn</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ItemId</name></type> <name>item</name> <init>= <expr><call><name>PageGetItemId</name><argument_list>(<argument><expr><name>lovPage</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_lov_offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>ItemIdIsUsed</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>lovItem</name> <operator>=</operator> <operator>(</operator><name>BMLOVItem</name><operator>)</operator><call><name>PageGetItem</name><argument_list>(<argument><expr><name>lovPage</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>lovItem</name><operator>-&gt;</operator><name>bm_last_compword</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_last_compword</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lovItem</name><operator>-&gt;</operator><name>bm_last_word</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_last_word</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lovItem</name><operator>-&gt;</operator><name>lov_words_header</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>lov_words_header</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lovItem</name><operator>-&gt;</operator><name>bm_last_setbit</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_last_setbit</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lovItem</name><operator>-&gt;</operator><name>bm_last_tid_location</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_last_tid_location</name></name></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><name>lovPage</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DUMP_BITMAPAM_INSERT_RECORDS</name></cpp:ifdef>
		<expr_stmt><expr><call><name>_dump_page</name><argument_list>(<argument><expr><literal type="string">"redo"</literal></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xlrec</name><operator>-&gt;</operator><name>bm_node</name></name></expr></argument>, <argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>UnlockReleaseBuffer</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_bitmap_xlog_insert_bitmapwords</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>xl_bm_bitmapwords</name> <modifier>*</modifier></type><name>xlrec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name></type>		<name>lovBuffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name>	   <modifier>*</modifier></type><name>bitmapBuffers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bmpageno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>xlrecptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>first_blkno</name> <init>= <expr><name>InvalidBlockNumber</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>last_blkno</name> <init>= <expr><name>InvalidBlockNumber</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Decode the WAL record.
	 *
	 * First comes the xl_bm_bitmapword_pages part
	 */</comment>
	<expr_stmt><expr><name>xlrecptr</name> <operator>=</operator> <call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>xlrec</name> <operator>=</operator> <operator>(</operator><name>xl_bm_bitmapwords</name> <operator>*</operator><operator>)</operator> <name>xlrecptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>xlrecptr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xl_bm_bitmapwords</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_num_pages</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>bitmapBuffers</name> <operator>=</operator> <operator>(</operator><name>Buffer</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_num_pages</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Process the per-bitmap page data */</comment>
	<for>for <control>(<init><expr><name>bmpageno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bmpageno</name> <operator>&lt;</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_num_pages</name></name></expr>;</condition> <incr><expr><name>bmpageno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_bm_bitmapwords_perpage</name> <modifier>*</modifier></type><name>xlrec_perpage</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BM_HRL_WORD</name> <modifier>*</modifier></type><name>cwords</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BM_HRL_WORD</name> <modifier>*</modifier></type><name>hwords</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Buffer</name></type>		<name>bitmapBuffer</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Page</name></type>		<name>bitmapPage</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BMBitmap</name></type>	<name>bitmap</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BMBitmapOpaque</name></type>	<name>bitmapPageOpaque</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>XLogRedoAction</name></type>	<name>action</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>action</name> <operator>=</operator> <call><name>XLogReadBufferForRedo</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><name>bmpageno</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitmapBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>bitmapBuffers</name><index>[<expr><name>bmpageno</name></expr>]</index></name> <operator>=</operator> <name>bitmapBuffer</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>bmpageno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>first_blkno</name> <operator>=</operator> <name>last_blkno</name> <operator>=</operator> <call><name>BufferGetBlockNumber</name><argument_list>(<argument><expr><name>bitmapBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>BLK_NEEDS_REDO</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Decode the xl_bm_bitmapwords_perpage struct, and the hwords and cwords,
			 * for this bitmap page.
			 */</comment>
			<expr_stmt><expr><name>xlrecptr</name> <operator>=</operator> <call><name>XLogRecGetBlockData</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><name>bmpageno</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>xlrec_perpage</name> <operator>=</operator> <operator>(</operator><name>xl_bm_bitmapwords_perpage</name> <operator>*</operator><operator>)</operator> <name>xlrecptr</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>last_blkno</name> <operator>=</operator> <name><name>xlrec_perpage</name><operator>-&gt;</operator><name>bmp_blkno</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>xlrecptr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xl_bm_bitmapwords_perpage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>hwords</name> <operator>=</operator> <operator>(</operator><name>BM_HRL_WORD</name> <operator>*</operator><operator>)</operator> <name>xlrecptr</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>xlrecptr</name> <operator>+=</operator> <name><name>xlrec_perpage</name><operator>-&gt;</operator><name>bmp_num_hwords</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BM_HRL_WORD</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>cwords</name> <operator>=</operator> <operator>(</operator><name>BM_HRL_WORD</name> <operator>*</operator><operator>)</operator> <name>xlrecptr</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>xlrecptr</name> <operator>+=</operator> <name><name>xlrec_perpage</name><operator>-&gt;</operator><name>bmp_num_cwords</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BM_HRL_WORD</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

			<expr_stmt><expr><name>bitmapPage</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>bitmapBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>PageGetLSN</name><argument_list>(<argument><expr><name>bitmapPage</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>lsn</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <operator>(</operator><name>BMBitmap</name><operator>)</operator> <call><name>PageGetContentsMaxAligned</name><argument_list>(<argument><expr><name>bitmapPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Copy the header and content words. Note: we WAL-log whole words only.
			 * If the insertion only set some bits of the last word, the whole
			 * word is included in the WAL record, anyway.
			 */</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>hwords</name></name> <operator>+</operator> <name><name>xlrec_perpage</name><operator>-&gt;</operator><name>bmp_start_hword_no</name></name></expr></argument>,
				   <argument><expr><name>hwords</name></expr></argument>,
				   <argument><expr><name><name>xlrec_perpage</name><operator>-&gt;</operator><name>bmp_num_hwords</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BM_HRL_WORD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cwords</name></name> <operator>+</operator> <name><name>xlrec_perpage</name><operator>-&gt;</operator><name>bmp_start_cword_no</name></name></expr></argument>,
				   <argument><expr><name>cwords</name></expr></argument>,
				   <argument><expr><name><name>xlrec_perpage</name><operator>-&gt;</operator><name>bmp_num_cwords</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BM_HRL_WORD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Update next pointer. Peek into the next struct to get its block number */</comment>
			<expr_stmt><expr><name>bitmapPageOpaque</name> <operator>=</operator>
				<operator>(</operator><name>BMBitmapOpaque</name><operator>)</operator> <call><name>PageGetSpecialPointer</name><argument_list>(<argument><expr><name>bitmapPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>bmpageno</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_num_pages</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>xl_bm_bitmapwords_perpage</name> <modifier>*</modifier></type><name>next_xlrec_perpage</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>next_xlrec_perpage</name> <operator>=</operator> <operator>(</operator><name>xl_bm_bitmapwords_perpage</name> <operator>*</operator><operator>)</operator> <name>xlrecptr</name></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>bitmapPageOpaque</name><operator>-&gt;</operator><name>bm_bitmap_next</name></name> <operator>=</operator> <name><name>next_xlrec_perpage</name><operator>-&gt;</operator><name>bmp_blkno</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>bitmapPageOpaque</name><operator>-&gt;</operator><name>bm_last_tid_location</name></name> <operator>=</operator> <name><name>xlrec_perpage</name><operator>-&gt;</operator><name>bmp_last_tid</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>bitmapPageOpaque</name><operator>-&gt;</operator><name>bm_hrl_words_used</name></name> <operator>=</operator> <name><name>xlrec_perpage</name><operator>-&gt;</operator><name>bmp_start_cword_no</name></name> <operator>+</operator> <name><name>xlrec_perpage</name><operator>-&gt;</operator><name>bmp_num_cwords</name></name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><name>bitmapPage</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>bitmapBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <name>BLK_RESTORED</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* has been restored in XLogReadBufferForRedo */</comment>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* The LOV page is in backup block # 0 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>XLogReadBufferForRedo</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lovBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BLK_NEEDS_REDO</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Page</name></type>		<name>lovPage</name> <init>= <expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>BMLOVItem</name></type>	<name>lovItem</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>lovItem</name> <operator>=</operator> <operator>(</operator><name>BMLOVItem</name><operator>)</operator>
			<call><name>PageGetItem</name><argument_list>(<argument><expr><name>lovPage</name></expr></argument>,
						<argument><expr><call><name>PageGetItemId</name><argument_list>(<argument><expr><name>lovPage</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_lov_offset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lovItem</name><operator>-&gt;</operator><name>bm_last_compword</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_last_compword</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lovItem</name><operator>-&gt;</operator><name>bm_last_word</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_last_word</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lovItem</name><operator>-&gt;</operator><name>lov_words_header</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>lov_words_header</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lovItem</name><operator>-&gt;</operator><name>bm_last_setbit</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_last_setbit</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lovItem</name><operator>-&gt;</operator><name>bm_last_tid_location</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_last_setbit</name></name> <operator>-</operator>
			<name><name>xlrec</name><operator>-&gt;</operator><name>bm_last_setbit</name></name> <operator>%</operator> <name>BM_HRL_WORD_SIZE</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>lovItem</name><operator>-&gt;</operator><name>bm_lov_tail</name></name> <operator>=</operator> <name>last_blkno</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_init_first_page</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>lovItem</name><operator>-&gt;</operator><name>bm_lov_head</name></name> <operator>=</operator> <name>first_blkno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><name>lovPage</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * WAL consistency checking
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DUMP_BITMAPAM_INSERT_RECORDS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>_dump_page</name><argument_list>(<argument><expr><literal type="string">"redo"</literal></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xlrec</name><operator>-&gt;</operator><name>bm_node</name></name></expr></argument>, <argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>bmpageno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bmpageno</name> <operator>&lt;</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_num_pages</name></name></expr>;</condition> <incr><expr><name>bmpageno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name><name>bitmapBuffers</name><index>[<expr><name>bmpageno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>_dump_page</name><argument_list>(<argument><expr><literal type="string">"redo"</literal></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xlrec</name><operator>-&gt;</operator><name>bm_node</name></name></expr></argument>, <argument><expr><name><name>bitmapBuffers</name><index>[<expr><name>bmpageno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Release buffers */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>UnlockReleaseBuffer</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<for>for <control>(<init><expr><name>bmpageno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bmpageno</name> <operator>&lt;</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_num_pages</name></name></expr>;</condition> <incr><expr><name>bmpageno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name><name>bitmapBuffers</name><index>[<expr><name>bmpageno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>UnlockReleaseBuffer</name><argument_list>(<argument><expr><name><name>bitmapBuffers</name><index>[<expr><name>bmpageno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_bitmap_xlog_updateword</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>xl_bm_updateword</name> <modifier>*</modifier></type><name>xlrec</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Buffer</name></type>			<name>bitmapBuffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>			<name>bitmapPage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BMBitmapOpaque</name></type>	<name>bitmapOpaque</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BMBitmap</name></type> 		<name>bitmap</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xlrec</name> <operator>=</operator> <operator>(</operator><name>xl_bm_updateword</name> <operator>*</operator><operator>)</operator> <call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"_bitmap_xlog_updateword: (blkno, word_no, cword, hword)="</literal>
		 <literal type="string">"(%d, %d, "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_blkno</name></name></expr></argument>,
		 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_word_no</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_cword</name></name></expr></argument>,
		 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_hword</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>XLogReadBufferForRedo</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitmapBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BLK_NEEDS_REDO</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>bitmapPage</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>bitmapBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>bitmapOpaque</name> <operator>=</operator>
			<operator>(</operator><name>BMBitmapOpaque</name><operator>)</operator><call><name>PageGetSpecialPointer</name><argument_list>(<argument><expr><name>bitmapPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <operator>(</operator><name>BMBitmap</name><operator>)</operator> <call><name>PageGetContentsMaxAligned</name><argument_list>(<argument><expr><name>bitmapPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bitmapOpaque</name><operator>-&gt;</operator><name>bm_hrl_words_used</name></name> <operator>&gt;</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_word_no</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>cwords</name><index>[<expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_word_no</name></name></expr>]</index></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_cword</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>hwords</name><index>[<expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_word_no</name></name><operator>/</operator><name>BM_HRL_WORD_SIZE</name></expr>]</index></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_hword</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><name>bitmapPage</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>bitmapBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>bitmapBuffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>UnlockReleaseBuffer</name><argument_list>(<argument><expr><name>bitmapBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_bitmap_xlog_updatewords</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>xl_bm_updatewords</name> <modifier>*</modifier></type><name>xlrec</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xlrec</name> <operator>=</operator> <operator>(</operator><name>xl_bm_updatewords</name> <operator>*</operator><operator>)</operator> <call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"_bitmap_xlog_updatewords: (first_blkno, num_cwords, last_tid, next_blkno)="</literal>
			<literal type="string">"(%d, "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal> <name>INT64_FORMAT</name> <literal type="string">", %d), (second_blkno, num_cwords, last_tid, next_blkno)="</literal>
			<literal type="string">"(%d, "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal> <name>INT64_FORMAT</name> <literal type="string">", %d)"</literal></expr></argument>,
			<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_first_blkno</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_first_num_cwords</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_first_last_tid</name></name></expr></argument>,
			<argument><expr><ternary><condition><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_two_pages</name></name></expr> ?</condition><then> <expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_second_blkno</name></name></expr> </then><else>: <expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_next_blkno</name></name></expr></else></ternary></expr></argument>,
			<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_second_blkno</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_second_num_cwords</name></name></expr></argument>,
			<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_second_last_tid</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_next_blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Buffer</name></type>	<name>firstBuffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>	<name>firstPage</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>XLogReadBufferForRedo</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>firstBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BLK_NEEDS_REDO</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BMBitmapOpaque</name></type>	<name>firstOpaque</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BMBitmap</name></type> 		<name>firstBitmap</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>firstPage</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>firstBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>firstOpaque</name> <operator>=</operator>
			<operator>(</operator><name>BMBitmapOpaque</name><operator>)</operator><call><name>PageGetSpecialPointer</name><argument_list>(<argument><expr><name>firstPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>firstBitmap</name> <operator>=</operator> <operator>(</operator><name>BMBitmap</name><operator>)</operator> <call><name>PageGetContentsMaxAligned</name><argument_list>(<argument><expr><name>firstPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>firstBitmap</name><operator>-&gt;</operator><name>cwords</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_first_cwords</name></name></expr></argument>,
				<argument><expr><name>BM_NUM_OF_HRL_WORDS_PER_PAGE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BM_HRL_WORD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>firstBitmap</name><operator>-&gt;</operator><name>hwords</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_first_hwords</name></name></expr></argument>,
				<argument><expr><name>BM_NUM_OF_HEADER_WORDS</name> <operator>*</operator>	<sizeof>sizeof<argument_list>(<argument><expr><name>BM_HRL_WORD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>firstOpaque</name><operator>-&gt;</operator><name>bm_hrl_words_used</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_first_num_cwords</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>firstOpaque</name><operator>-&gt;</operator><name>bm_last_tid_location</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_first_last_tid</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_two_pages</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>firstOpaque</name><operator>-&gt;</operator><name>bm_bitmap_next</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_second_blkno</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>firstOpaque</name><operator>-&gt;</operator><name>bm_bitmap_next</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_next_blkno</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><name>firstPage</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>firstBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>firstBuffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>UnlockReleaseBuffer</name><argument_list>(<argument><expr><name>firstBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Update secondPage when needed */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_two_pages</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Buffer</name></type>	<name>secondBuffer</name> <init>= <expr><name>InvalidBuffer</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>XLogReadBufferForRedo</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>secondBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BLK_NEEDS_REDO</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Page</name></type>	<name>secondPage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>BMBitmapOpaque</name></type>	<name>secondOpaque</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>BMBitmap</name></type>		<name>secondBitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>secondPage</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>secondBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>PageIsNew</name><argument_list>(<argument><expr><name>secondPage</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>_bitmap_init_bitmappage</name><argument_list>(<argument><expr><name>secondPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>secondOpaque</name> <operator>=</operator> <operator>(</operator><name>BMBitmapOpaque</name><operator>)</operator><call><name>PageGetSpecialPointer</name><argument_list>(<argument><expr><name>secondPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>secondBitmap</name> <operator>=</operator> <operator>(</operator><name>BMBitmap</name><operator>)</operator> <call><name>PageGetContentsMaxAligned</name><argument_list>(<argument><expr><name>secondPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>secondBitmap</name><operator>-&gt;</operator><name>cwords</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_second_cwords</name></name></expr></argument>,
					<argument><expr><name>BM_NUM_OF_HRL_WORDS_PER_PAGE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BM_HRL_WORD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>secondBitmap</name><operator>-&gt;</operator><name>hwords</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_second_hwords</name></name></expr></argument>,
					<argument><expr><name>BM_NUM_OF_HEADER_WORDS</name> <operator>*</operator>	<sizeof>sizeof<argument_list>(<argument><expr><name>BM_HRL_WORD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>secondOpaque</name><operator>-&gt;</operator><name>bm_hrl_words_used</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_second_num_cwords</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>secondOpaque</name><operator>-&gt;</operator><name>bm_last_tid_location</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_second_last_tid</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>secondOpaque</name><operator>-&gt;</operator><name>bm_bitmap_next</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_next_blkno</name></name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><name>secondPage</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>secondBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>secondBuffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>UnlockReleaseBuffer</name><argument_list>(<argument><expr><name>secondBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Update lovPage when needed */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_new_lastpage</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Buffer</name></type> <name>lovBuffer</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Page</name></type> <name>lovPage</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BMLOVItem</name></type> <name>lovItem</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>bkpNo</name> <init>= <expr><ternary><condition><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_two_pages</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>XLogReadBufferForRedo</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><name>bkpNo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lovBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BLK_NEEDS_REDO</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>lovPage</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>lovItem</name> <operator>=</operator> <operator>(</operator><name>BMLOVItem</name><operator>)</operator>
				<call><name>PageGetItem</name><argument_list>(<argument><expr><name>lovPage</name></expr></argument>,
						<argument><expr><call><name>PageGetItemId</name><argument_list>(<argument><expr><name>lovPage</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>bm_lov_offset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>lovItem</name><operator>-&gt;</operator><name>bm_lov_tail</name></name> <operator>=</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>bm_second_blkno</name></name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><name>lovPage</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>UnlockReleaseBuffer</name><argument_list>(<argument><expr><name>lovBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bitmap_redo</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type>	<name>info</name> <init>= <expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>lsn</name> <init>= <expr><name><name>record</name><operator>-&gt;</operator><name>EndRecPtr</name></name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>info</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>XLOG_BITMAP_INSERT_LOVITEM</name></expr>:</case>
			<expr_stmt><expr><call><name>_bitmap_xlog_insert_lovitem</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_BITMAP_INSERT_META</name></expr>:</case>
			<expr_stmt><expr><call><name>_bitmap_xlog_insert_meta</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_BITMAP_INSERT_BITMAP_LASTWORDS</name></expr>:</case>
			<expr_stmt><expr><call><name>_bitmap_xlog_insert_bitmap_lastwords</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_BITMAP_INSERT_WORDS</name></expr>:</case>
			<expr_stmt><expr><call><name>_bitmap_xlog_insert_bitmapwords</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_BITMAP_UPDATEWORD</name></expr>:</case>
			<expr_stmt><expr><call><name>_bitmap_xlog_updateword</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_BITMAP_UPDATEWORDS</name></expr>:</case>
			<expr_stmt><expr><call><name>_bitmap_xlog_updatewords</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"bitmap_redo: unknown op code %u"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
