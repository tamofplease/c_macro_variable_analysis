<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/aocs/test/aocsam_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../aocsam.c"</cpp:file></cpp:include>

<comment type="block">/*
 * aocs_begin_headerscan()
 *
 * Verify that we are setting correct storage attributes (no compression) for
 * scanning an existing column in ALTER TABLE ADD COLUMN case.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__aocs_begin_headerscan</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AOCSHeaderScanDesc</name></type> <name>desc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RelationData</name></type> <name>reldata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FormData_pg_class</name></type> <name>pgclass</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nattr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>pgclass</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_id</name></name> <operator>=</operator> <literal type="number">12345</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_rel</name><operator>-&gt;</operator><name>relnatts</name></name> <operator>=</operator> <name>nattr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_att</name></name> <operator>=</operator> <operator>(</operator><name>TupleDesc</name><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleDescData</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
										<operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Form_pg_attribute</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nattr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>reldata</name><operator>.</operator><name>rd_att</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Form_pg_attribute</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_att</name><operator>-&gt;</operator><name>natts</name></name> <operator>=</operator> <name>nattr</name></expr>;</expr_stmt>

	<comment type="block">/* opts and opt will be freed by aocs_begin_headerscan */</comment>
	<decl_stmt><decl><type><name>StdRdOptions</name> <modifier>*</modifier><modifier>*</modifier></type><name>opts</name> <init>=
			<expr><operator>(</operator><name>StdRdOptions</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StdRdOptions</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nattr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>opts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>StdRdOptions</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>opts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>blocksize</name> <operator>=</operator> <literal type="number">8192</literal> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pgclass</name><operator>.</operator><name>relname</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"mock_relation"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>RelationGetAttributeOptions</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reldata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>RelationGetAttributeOptions</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>GetAppendOnlyEntryAttributes</name></expr></argument>, <argument><expr><name>relid</name></expr></argument>, <argument><expr><literal type="number">12345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>GetAppendOnlyEntryAttributes</name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>GetAppendOnlyEntryAttributes</name></expr></argument>, <argument><expr><name>safefswritesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>GetAppendOnlyEntryAttributes</name></expr></argument>, <argument><expr><name>compresslevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>GetAppendOnlyEntryAttributes</name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>GetAppendOnlyEntryAttributes</name></expr></argument>, <argument><expr><name>compresstype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>GetAppendOnlyEntryAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We used to mock AppendOnlyStorageRead_Init() here, however as the mocked
	 * one does not initialize desc-&gt;ao_read.storageAttributes at all, it makes
	 * the following assertion flaky.
	 *
	 * On the other hand aocs_begin_headerscan() itself does not do many useful
	 * things, the actual job is done inside AppendOnlyStorageRead_Init(), so
	 * to make the test more useful we removed the mocking and test against the
	 * real AppendOnlyStorageRead_Init() now.
	 */</comment>
	<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>aocs_begin_headerscan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reldata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>ao_read</name><operator>.</operator><name>storageAttributes</name><operator>.</operator><name>compress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>colno</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__aocs_addcol_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AOCSAddColumnDesc</name></type> <name>desc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RelationData</name></type> <name>reldata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nattr</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StdRdOptions</name> <modifier>*</modifier><modifier>*</modifier></type><name>opts</name> <init>=
	<expr><operator>(</operator><name>StdRdOptions</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StdRdOptions</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nattr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>wal_level</name> <operator>=</operator> <name>WAL_LEVEL_REPLICA</name></expr>;</expr_stmt>

	<comment type="block">/* 3 existing columns */</comment>
	<expr_stmt><expr><name><name>opts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>StdRdOptions</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>opts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>StdRdOptions</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>opts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>StdRdOptions</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* 2 newly added columns */</comment>
	<expr_stmt><expr><name><name>opts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>StdRdOptions</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>opts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>compresstype</name></expr></argument>, <argument><expr><literal type="string">"rle_type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>opts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>compresslevel</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>opts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>blocksize</name> <operator>=</operator> <literal type="number">8192</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>opts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>StdRdOptions</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>opts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>-&gt;</operator><name>compresstype</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>opts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>-&gt;</operator><name>compresslevel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>opts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>-&gt;</operator><name>blocksize</name> <operator>=</operator> <literal type="number">8192</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<comment type="block">/* One call to RelationGetAttributeOptions() */</comment>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>RelationGetAttributeOptions</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>RelationGetAttributeOptions</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Two calls to create_datumstreamwrite() */</comment>
	<expr_stmt><expr><call><name>expect_string</name><argument_list>(<argument><expr><name>create_datumstreamwrite</name></expr></argument>, <argument><expr><name>compName</name></expr></argument>, <argument><expr><literal type="string">"rle_type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_string</name><argument_list>(<argument><expr><name>create_datumstreamwrite</name></expr></argument>, <argument><expr><name>compName</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>create_datumstreamwrite</name></expr></argument>, <argument><expr><name>compLevel</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>create_datumstreamwrite</name></expr></argument>, <argument><expr><name>compLevel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>create_datumstreamwrite</name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value_count</name><argument_list>(<argument><expr><name>create_datumstreamwrite</name></expr></argument>, <argument><expr><name>safeFSWriteSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>create_datumstreamwrite</name></expr></argument>, <argument><expr><name>maxsz</name></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>create_datumstreamwrite</name></expr></argument>, <argument><expr><name>maxsz</name></expr></argument>, <argument><expr><literal type="number">8192</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>create_datumstreamwrite</name></expr></argument>, <argument><expr><name>needsWAL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>create_datumstreamwrite</name></expr></argument>, <argument><expr><name>needsWAL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>create_datumstreamwrite</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>create_datumstreamwrite</name></expr></argument>, <argument><expr><name>relname</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>create_datumstreamwrite</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>create_datumstreamwrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FormData_pg_class</name></type> <name>rel</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>rel</name><operator>.</operator><name>relpersistence</name></name> <operator>=</operator> <name>RELPERSISTENCE_PERMANENT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_id</name></name> <operator>=</operator> <literal type="number">12345</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_rel</name></name> <operator>=</operator> <operator>&amp;</operator><name>rel</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_rel</name><operator>-&gt;</operator><name>relnatts</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_att</name></name> <operator>=</operator> <operator>(</operator><name>TupleDesc</name><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleDescData</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
										<operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Form_pg_attribute</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nattr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>reldata</name><operator>.</operator><name>rd_att</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Form_pg_attribute</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_att</name><operator>-&gt;</operator><name>natts</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>GetAppendOnlyEntryAttributes</name></expr></argument>, <argument><expr><name>relid</name></expr></argument>, <argument><expr><literal type="number">12345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>GetAppendOnlyEntryAttributes</name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>GetAppendOnlyEntryAttributes</name></expr></argument>, <argument><expr><name>safefswritesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>GetAppendOnlyEntryAttributes</name></expr></argument>, <argument><expr><name>compresslevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>GetAppendOnlyEntryAttributes</name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>GetAppendOnlyEntryAttributes</name></expr></argument>, <argument><expr><name>compresstype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>GetAppendOnlyEntryAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 3 existing columns, 2 new columns */</comment>
	<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>aocs_addcol_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reldata</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>num_newcols</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>cur_segno</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier>		<name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__aocs_begin_headerscan</name></expr></argument>)</argument_list></call></expr>,
		<macro><name>unit_test</name><argument_list>(<argument>test__aocs_addcol_init</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
