<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/aocs/aocssegfiles.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * aocssegfiles.c
 *	  AOCS Segment files.
 *
 * Portions Copyright (c) 2009, Greenplum Inc.
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/access/aocs/aocssegfiles.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlystorage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/aomd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/multixact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tuptoaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/valid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_appendonly.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/gp_fastsequence.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/spi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlyblockdirectory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlystoragelayer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlystorageread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlystoragewrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datumstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/int8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/aocssegfiles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/aosegfiles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/appendonlywriter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbaocsam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/procarray.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>AOCSFileSegInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>GetAllAOCSFileSegInfo_pg_aocsseg_rel</name><parameter_list>(
									 <parameter><decl><type><name>int</name></type> <name>numOfColumsn</name></decl></parameter>,
									 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>relationName</name></decl></parameter>,
									 <parameter><decl><type><name>Relation</name></type> <name>pg_aocsseg_rel</name></decl></parameter>,
									 <parameter><decl><type><name>Snapshot</name></type> <name>appendOnlyMetaDataSnapshot</name></decl></parameter>,
									 <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>totalseg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>InsertInitialAOCSFileSegInfo</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>prel</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>segno</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>nvp</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>segrelid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>nulls</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>Natts_pg_aocsseg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>values</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>Natts_pg_aocsseg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AOCSVPInfo</name> <modifier>*</modifier></type><name>vpinfo</name> <init>= <expr><call><name>create_aocs_vpinfo</name><argument_list>(<argument><expr><name>nvp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>segtup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>segrel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name></type>		<name>buf</name> <init>= <expr><name>InvalidBuffer</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TM_Result</name></type>	<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TM_FailureData</name></type> <name>hufd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type>		<name>formatVersion</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ValidateAppendonlySegmentDataBeforeStorage</name><argument_list>(<argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* New segments are always created in the latest format */</comment>
	<expr_stmt><expr><name>formatVersion</name> <operator>=</operator> <call><name>AORelationVersion_GetLatest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>segrel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>segrelid</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>vpinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_aocs_formatversion</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>formatVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_aocs_state</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>AOSEG_STATE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>segtup</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CatalogTupleInsertFrozen</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><name>segtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Lock the tuple so that a concurrent insert transaction will not
	 * consider this segfile for insertion. This should succeed since
	 * we just inserted the row, and the caller is holding a lock that
	 * prevents concurrent lockers.
	 */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>heap_lock_tuple</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><name>segtup</name></expr></argument>,
							 <argument><expr><call><name>GetCurrentCommandId</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><name>LockTupleExclusive</name></expr></argument>,
							 <argument><expr><name>LockWaitSkip</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>, <comment type="block">/* follow_updates */</comment>
							 <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>hufd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>TM_Ok</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not lock newly-inserted gp_fastsequence tuple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ReleaseBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>segtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>vpinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * GetAOCSFileSegInfo.
 *
 * Get the catalog entry for an appendonly (column-oriented) relation from the
 * pg_aocsseg_* relation that belongs to the currently used
 * AppendOnly table.
 *
 * If a caller intends to append to this (logical) file segment entry they
 * must have already locked the pg_aoseg tuple earlier, in order to guarantee
 * stability of the pg_aoseg information on this segment file and exclusive
 * right to append data to the segment file. In that case, 'locked' should be
 * passed as true.
 */</comment>
<function><type><name>AOCSFileSegInfo</name> <modifier>*</modifier></type>
<name>GetAOCSFileSegInfo</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>prel</name></decl></parameter>,
				   <parameter><decl><type><name>Snapshot</name></type> <name>appendOnlyMetaDataSnapshot</name></decl></parameter>,
				   <parameter><decl><type><name>int32</name></type> <name>segno</name></decl></parameter>,
				   <parameter><decl><type><name>bool</name></type> <name>locked</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>nvp</name> <init>= <expr><call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Relation</name></type>	<name>segrel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>segtup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>fssegtup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tuple_segno</name> <init>= <expr><name>InvalidFileSegNumber</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AOCSFileSegInfo</name> <modifier>*</modifier></type><name>seginfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>null</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isNull</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Oid</name></type>         <name>segrelid</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name><name>prel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>,
                              <argument><expr><name>appendOnlyMetaDataSnapshot</name></expr></argument>,
                              <argument><expr><operator>&amp;</operator><name>segrelid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>segrel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>segrelid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Scan aoseg relation for tuple. */</comment>
	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>appendOnlyMetaDataSnapshot</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>segtup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tuple_segno</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>fastgetattr</name><argument_list>(<argument><expr><name>segtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_segno</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"got invalid segno value NULL for tid %s"</literal></expr></argument>,
							<argument><expr><call><name>ItemPointerToString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>segtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>segno</name> <operator>==</operator> <name>tuple_segno</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Check for duplicate aoseg entries with the same segno */</comment>
			<if_stmt><if>if <condition>(<expr><name>fssegtup</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"found two entries in %s with segno %d: ctid %s and ctid %s"</literal></expr></argument>,
								<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name>segno</name></expr></argument>,
								<argument><expr><call><name>ItemPointerToString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fssegtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>ItemPointerToString2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>segtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>fssegtup</name> <operator>=</operator> <call><name>heap_copytuple</name><argument_list>(<argument><expr><name>segtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>fssegtup</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* This segment file does not have an entry. */</comment>
		<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>locked</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not find segno %d for relation %s"</literal></expr></argument>,
							<argument><expr><name>segno</name></expr></argument>, <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>locked</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>pg_aoseg_tuple_is_locked_by_me</name><argument_list>(<argument><expr><name>fssegtup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"segno %d for relation %s is not locked for us"</literal></expr></argument>,
						<argument><expr><name>segno</name></expr></argument>, <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>seginfo</name> <operator>=</operator> <operator>(</operator><name>AOCSFileSegInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><call><name>aocsfileseginfo_size</name><argument_list>(<argument><expr><name>nvp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>Natts_pg_aocsseg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>null</name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>Natts_pg_aocsseg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>heap_deform_tuple</name><argument_list>(<argument><expr><name>fssegtup</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>segno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>seginfo</name>   <operator>-&gt;</operator><name>segno</name></name> <operator>=</operator> <name>segno</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>seginfo</name>   <operator>-&gt;</operator><name>total_tupcount</name></name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>seginfo</name>   <operator>-&gt;</operator><name>varblockcount</name></name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>seginfo</name>   <operator>-&gt;</operator><name>modcount</name></name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_formatversion</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>seginfo</name>   <operator>-&gt;</operator><name>formatversion</name></name> <operator>=</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_formatversion</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_state</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>seginfo</name>   <operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_state</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator>struct <name>varlena</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>dv</name> <init>= <expr><call><name>pg_detoast_datum</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>aocs_vpinfo_size</name><argument_list>(<argument><expr><name>nvp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seginfo</name><operator>-&gt;</operator><name>vpinfo</name></name></expr></argument>, <argument><expr><name>dv</name></expr></argument>, <argument><expr><call><name>aocs_vpinfo_size</name><argument_list>(<argument><expr><name>nvp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dv</name> <operator>!=</operator> <name>v</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>fssegtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>seginfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AOCSFileSegInfo</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>GetAllAOCSFileSegInfo</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>prel</name></decl></parameter>,
					  <parameter><decl><type><name>Snapshot</name></type> <name>appendOnlyMetaDataSnapshot</name></decl></parameter>,
					  <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>totalseg</name></decl></parameter>,
					  <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>segrelidptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>pg_aocsseg_rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AOCSFileSegInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>results</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>         <name>segrelid</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsAoCols</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GetAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name><name>prel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>,
							  <argument><expr><name>appendOnlyMetaDataSnapshot</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>segrelid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
							  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>segrelid</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find pg_aoseg aux table for AOCO table \"%s\""</literal></expr></argument>,
			 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>segrelidptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>segrelidptr</name> <operator>=</operator> <name>segrelid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>pg_aocsseg_rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name>segrelid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>results</name> <operator>=</operator> <call><name>GetAllAOCSFileSegInfo_pg_aocsseg_rel</name><argument_list>(
												   <argument><expr><call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>,
												   <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>,
												   <argument><expr><name>pg_aocsseg_rel</name></expr></argument>,
												   <argument><expr><name>appendOnlyMetaDataSnapshot</name></expr></argument>,
												   <argument><expr><name>totalseg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>pg_aocsseg_rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>results</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * The comparison routine that sorts an array of AOCSFileSegInfos
 * in the ascending order of the segment number.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>aocsFileSegInfoCmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AOCSFileSegInfo</name> <modifier>*</modifier></type><name>leftSegInfo</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>AOCSFileSegInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>left</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AOCSFileSegInfo</name> <modifier>*</modifier></type><name>rightSegInfo</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>AOCSFileSegInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>right</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>leftSegInfo</name><operator>-&gt;</operator><name>segno</name></name> <operator>&lt;</operator> <name><name>rightSegInfo</name><operator>-&gt;</operator><name>segno</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>leftSegInfo</name><operator>-&gt;</operator><name>segno</name></name> <operator>&gt;</operator> <name><name>rightSegInfo</name><operator>-&gt;</operator><name>segno</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AOCSFileSegInfo</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>GetAllAOCSFileSegInfo_pg_aocsseg_rel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numOfColumns</name></decl></parameter>,
									 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>relationName</name></decl></parameter>,
									 <parameter><decl><type><name>Relation</name></type> <name>pg_aocsseg_rel</name></decl></parameter>,
									 <parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>,
									 <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>totalseg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<decl_stmt><decl><type><name>int32</name></type>		<name>nvp</name> <init>= <expr><name>numOfColumns</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>AOCSFileSegInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>allseg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AOCSFileSegInfo</name> <modifier>*</modifier></type><name>aocs_seginfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cur_seg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>null</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>seginfo_slot_no</name> <init>= <expr><name>AO_FILESEGINFO_ARRAY_SIZE</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * MPP-16407: Initialize the segment file information array, we first
	 * allocate 8 slot for the array, then array will be dynamically expanded
	 * later if necessary.
	 */</comment>
	<expr_stmt><expr><name>allseg</name> <operator>=</operator> <operator>(</operator><name>AOCSFileSegInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AOCSFileSegInfo</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>seginfo_slot_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>Natts_pg_aocsseg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>null</name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>Natts_pg_aocsseg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cur_seg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>pg_aocsseg_rel</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>snapshot</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* dynamically expand space for AOCSFileSegInfo* array */</comment>
		<if_stmt><if>if <condition>(<expr><name>cur_seg</name> <operator>&gt;=</operator> <name>seginfo_slot_no</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>seginfo_slot_no</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>allseg</name> <operator>=</operator> <operator>(</operator><name>AOCSFileSegInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>allseg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AOCSFileSegInfo</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>seginfo_slot_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>aocs_seginfo</name> <operator>=</operator> <operator>(</operator><name>AOCSFileSegInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><call><name>aocsfileseginfo_size</name><argument_list>(<argument><expr><name>nvp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>allseg</name><index>[<expr><name>cur_seg</name></expr>]</index></name> <operator>=</operator> <name>aocs_seginfo</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>heap_deform_tuple</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_aocsseg_rel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>aocs_seginfo</name><operator>-&gt;</operator><name>segno</name></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>aocs_seginfo</name><operator>-&gt;</operator><name>total_tupcount</name></name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>aocs_seginfo</name><operator>-&gt;</operator><name>varblockcount</name></name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Modcount cannot be NULL in normal operation. However, when called
		 * from gp_aoseg_history after an upgrade, the old now invisible
		 * entries may have not set the state and the modcount.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name>snapshot</name> <operator>==</operator> <name>SnapshotAny</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>aocs_seginfo</name><operator>-&gt;</operator><name>modcount</name></name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_formatversion</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>aocs_seginfo</name><operator>-&gt;</operator><name>formatversion</name></name> <operator>=</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_formatversion</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_state</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name>snapshot</name> <operator>==</operator> <name>SnapshotAny</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_state</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>aocs_seginfo</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_state</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator>struct <name>varlena</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>dv</name> <init>= <expr><call><name>pg_detoast_datum</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * VARSIZE(dv) may be less than aocs_vpinfo_size, in case of add
			 * column, we try to do a ctas from old table to new table.
			 */</comment>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>aocs_vpinfo_size</name><argument_list>(<argument><expr><name>nvp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aocs_seginfo</name><operator>-&gt;</operator><name>vpinfo</name></name></expr></argument>, <argument><expr><name>dv</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>dv</name> <operator>!=</operator> <name>v</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block>
		<expr_stmt><expr><operator>++</operator><name>cur_seg</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>totalseg</name> <operator>=</operator> <name>cur_seg</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>totalseg</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>allseg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Sort allseg by the order of segment file number.
	 *
	 * Currently this is only needed when building a bitmap index to guarantee
	 * the tids are in the ascending order. But since this array is pretty
	 * small, we just sort the array for all cases.
	 */</comment>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>allseg</name></expr></argument>, <argument><expr><operator>*</operator><name>totalseg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AOCSFileSegInfo</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>aocsFileSegInfoCmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>allseg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>FileSegTotals</name> <modifier>*</modifier></type>
<name>GetAOCSSSegFilesTotals</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>parentrel</name></decl></parameter>, <parameter><decl><type><name>Snapshot</name></type> <name>appendOnlyMetaDataSnapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AOCSFileSegInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>allseg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>totalseg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AOCSVPInfo</name> <modifier>*</modifier></type><name>vpinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FileSegTotals</name> <modifier>*</modifier></type><name>totals</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name>parentrel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsAoCols</name><argument_list>(<argument><expr><name>parentrel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>totals</name> <operator>=</operator> <operator>(</operator><name>FileSegTotals</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FileSegTotals</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>totals</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FileSegTotals</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>allseg</name> <operator>=</operator> <call><name>GetAllAOCSFileSegInfo</name><argument_list>(<argument><expr><name>parentrel</name></expr></argument>, <argument><expr><name>appendOnlyMetaDataSnapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalseg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>totalseg</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>nEntry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>e</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>vpinfo</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name><name>allseg</name><index>[<expr><name>s</name></expr>]</index></name><operator>)</operator><operator>-&gt;</operator><name>vpinfo</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>nEntry</name> <operator>=</operator> <name><name>vpinfo</name><operator>-&gt;</operator><name>nEntry</name></name></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>nEntry</name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>totals</name><operator>-&gt;</operator><name>totalbytes</name></name> <operator>+=</operator> <name><name>vpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><name>eof</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>totals</name><operator>-&gt;</operator><name>totalbytesuncompressed</name></name> <operator>+=</operator> <name><name>vpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name><name>allseg</name><index>[<expr><name>s</name></expr>]</index></name><operator>-&gt;</operator><name>state</name> <operator>!=</operator> <name>AOSEG_STATE_AWAITING_DROP</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>totals</name><operator>-&gt;</operator><name>totaltuples</name></name> <operator>+=</operator> <name><name>allseg</name><index>[<expr><name>s</name></expr>]</index></name><operator>-&gt;</operator><name>total_tupcount</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>totals</name><operator>-&gt;</operator><name>totalvarblocks</name></name> <operator>+=</operator> <name><name>allseg</name><index>[<expr><name>s</name></expr>]</index></name><operator>-&gt;</operator><name>varblockcount</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>totals</name><operator>-&gt;</operator><name>totalfilesegs</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>allseg</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>FreeAllAOCSSegFileInfo</name><argument_list>(<argument><expr><name>allseg</name></expr></argument>, <argument><expr><name>totalseg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>allseg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>totals</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Change an pg_aoseg row from DEFAULT to AWAITING_DROP to DEFAULT.
 */</comment>
<function><type><name>void</name></type>
<name>MarkAOCSFileSegInfoAwaitingDrop</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>prel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>segrel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TableScanDesc</name></type>	<name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>oldtup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>newtup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tuple_segno</name> <init>= <expr><name>InvalidFileSegNumber</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>d</name><index>[<expr><name>Natts_pg_aocsseg</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isNull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>null</name><index>[<expr><name>Natts_pg_aocsseg</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>repl</name><index>[<expr><name>Natts_pg_aocsseg</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Snapshot</name></type>	<name>appendOnlyMetaDataSnapshot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>segrelid</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_compaction</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			 <argument><expr><literal type="string">"changing state of segfile %d of table '%s' to AWAITING_DROP"</literal></expr></argument>,
			 <argument><expr><name>segno</name></expr></argument>, <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsAoCols</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>appendOnlyMetaDataSnapshot</name> <operator>=</operator> <call><name>RegisterSnapshot</name><argument_list>(<argument><expr><call><name>GetCatalogSnapshot</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GetAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name><name>prel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>,
							  <argument><expr><name>appendOnlyMetaDataSnapshot</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>segrelid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
							  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UnregisterSnapshot</name><argument_list>(<argument><expr><name>appendOnlyMetaDataSnapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>segrel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>segrelid</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Since we have the segment-file entry under lock (with
	 * LockRelationAppendOnlySegmentFile) we can use SnapshotNow.
	 */</comment>
	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>table_beginscan_catalog</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>segno</name> <operator>!=</operator> <name>tuple_segno</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>oldtup</name> <operator>=</operator> <call><name>heap_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tuple_segno</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_segno</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"got invalid segno value NULL for tid %s"</literal></expr></argument>,
							<argument><expr><call><name>ItemPointerToString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oldtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"AOCS table \"%s\" file segment \"%d\" does not exist"</literal></expr></argument>,
							   <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call>
						<operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Verify that the caller locked the segment earlier. In principle, if
	 * the caller is holding an AccessExclusiveLock on the table, locking
	 * individual tuples would not be necessary, but all current callers
	 * diligently lock the tuples anyway, so we can perform this sanity check
	 * here.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_aoseg_tuple_is_locked_by_me</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot update pg_aocs entry for segno %d for relation %s, it is not locked for us"</literal></expr></argument>,
						<argument><expr><name>segno</name></expr></argument>, <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_state</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>AOSEG_STATE_AWAITING_DROP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repl</name><index>[<expr><name>Anum_pg_aocs_state</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>newtup</name> <operator>=</operator> <call><name>heap_modify_tuple</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>repl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>simple_heap_update</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oldtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>, <argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>table_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Reset state of an  pg_aocs row from AWAITING_DROP to DEFAULT state.
 *
 * Also clears tupcount, varblockcount, and EOFs, and sets formatversion to
 * the latest version. 'modcount' is not changed.
 *
 * The caller should have checked that the segfile is no longer needed by
 * any running transaction. It is not necessary to hold a lock on the segfile
 * row, though.
 */</comment>
<function><type><name>void</name></type>
<name>ClearAOCSFileSegInfo</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>prel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>segrel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TableScanDesc</name></type>	<name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>oldtup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>newtup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tuple_segno</name> <init>= <expr><name>InvalidFileSegNumber</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>d</name><index>[<expr><name>Natts_pg_aocsseg</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isNull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>null</name><index>[<expr><name>Natts_pg_aocsseg</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>repl</name><index>[<expr><name>Natts_pg_aocsseg</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nvp</name> <init>= <expr><call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AOCSVPInfo</name>	<modifier>*</modifier></type><name>vpinfo</name> <init>= <expr><call><name>create_aocs_vpinfo</name><argument_list>(<argument><expr><name>nvp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>segrelid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Snapshot</name></type>	<name>appendOnlyMetaDataSnapshot</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsAoCols</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_compaction</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"Clear seg file info: segno %d table '%s'"</literal></expr></argument>,
		   <argument><expr><name>segno</name></expr></argument>,
		   <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>appendOnlyMetaDataSnapshot</name> <operator>=</operator> <call><name>RegisterSnapshot</name><argument_list>(<argument><expr><call><name>GetCatalogSnapshot</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GetAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name><name>prel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>,
							  <argument><expr><name>appendOnlyMetaDataSnapshot</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>segrelid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
							  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UnregisterSnapshot</name><argument_list>(<argument><expr><name>appendOnlyMetaDataSnapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>segrel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>segrelid</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Since we have the segment-file entry under lock (with
	 * LockRelationAppendOnlySegmentFile) we can use SnapshotNow.
	 */</comment>
	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>table_beginscan_catalog</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>segno</name> <operator>!=</operator> <name>tuple_segno</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>oldtup</name> <operator>=</operator> <call><name>heap_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tuple_segno</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_segno</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"got invalid segno value NULL for tid %s"</literal></expr></argument>,
							<argument><expr><call><name>ItemPointerToString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oldtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"AOCS table \"%s\" file segment \"%d\" does not exist"</literal></expr></argument>,
							   <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call>
						<operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_segno</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_tupcount</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repl</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_varblockcount</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repl</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* When the segment is later recreated, it will be in new format */</comment>
	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_formatversion</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><call><name>AORelationVersion_GetLatest</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repl</name><index>[<expr><name>Anum_pg_aocs_formatversion</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* We do not reset the modcount here */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nvp</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>vpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>vpinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>null</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repl</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_state</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>AOSEG_STATE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repl</name><index>[<expr><name>Anum_pg_aocs_state</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>newtup</name> <operator>=</operator> <call><name>heap_modify_tuple</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>repl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>simple_heap_update</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oldtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>, <argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>vpinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>table_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>UpdateAOCSFileSegInfo</name><parameter_list>(<parameter><decl><type><name>AOCSInsertDesc</name></type> <name>idesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<decl_stmt><decl><type><name>Relation</name></type>	<name>prel</name> <init>= <expr><name><name>idesc</name><operator>-&gt;</operator><name>aoi_rel</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>segrel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>oldtup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>newtup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tuple_segno</name> <init>= <expr><name>InvalidFileSegNumber</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isNull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>d</name><index>[<expr><name>Natts_pg_aocsseg</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>null</name><index>[<expr><name>Natts_pg_aocsseg</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>repl</name><index>[<expr><name>Natts_pg_aocsseg</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nvp</name> <init>= <expr><call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AOCSVPInfo</name> <modifier>*</modifier></type><name>vpinfo</name> <init>= <expr><call><name>create_aocs_vpinfo</name><argument_list>(<argument><expr><name>nvp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>segrel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name><name>idesc</name><operator>-&gt;</operator><name>segrelid</name></name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Since we have the segment-file entry under lock (with
	 * LockRelationAppendOnlySegmentFile) we can use SnapshotNow.
	 */</comment>
	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>idesc</name><operator>-&gt;</operator><name>appendOnlyMetaDataSnapshot</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>idesc</name><operator>-&gt;</operator><name>cur_segno</name></name> <operator>!=</operator> <name>tuple_segno</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>oldtup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tuple_segno</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_segno</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"got invalid segno value NULL for tid %s"</literal></expr></argument>,
							<argument><expr><call><name>ItemPointerToString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oldtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"AOCS table \"%s\" file segment \"%d\" does not exist"</literal></expr></argument>,
							   <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>idesc</name><operator>-&gt;</operator><name>cur_segno</name></name></expr></argument>)</argument_list></call>
						<operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Verify that the caller locked the segment earlier. In principle, if
	 * the caller is holding an AccessExclusiveLock on the table, locking
	 * individual tuples would not be necessary, but all current callers
	 * diligently lock the tuples anyway, so we can perform this sanity check
	 * here.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_aoseg_tuple_is_locked_by_me</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot update pg_aocs entry for segno %d for relation %s, it is not locked for us"</literal></expr></argument>,
						<argument><expr><name><name>idesc</name><operator>-&gt;</operator><name>cur_segno</name></name></expr></argument>, <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_segno</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>idesc</name><operator>-&gt;</operator><name>cur_segno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_tupcount</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>idesc</name><operator>-&gt;</operator><name>insertCount</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repl</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_varblockcount</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>idesc</name><operator>-&gt;</operator><name>varblockCount</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repl</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>idesc</name><operator>-&gt;</operator><name>skipModCountIncrement</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_modcount</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>repl</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Lets fetch the vpinfo structure from the existing tuple in pg_aocsseg.
	 * vpinfo provides us with the end-of-file (EOF) values for each column
	 * file.
	 */</comment>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>d_tmp</name> <init>= <expr><call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_vpinfo</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>,
									<argument><expr><operator>&amp;</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator>struct <name>varlena</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d_tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>dv</name> <init>= <expr><call><name>pg_detoast_datum</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>aocs_vpinfo_size</name><argument_list>(<argument><expr><name>nvp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AOCSVPInfo</name> <modifier>*</modifier></type><name>oldvpinfo</name> <init>= <expr><operator>(</operator><name>AOCSVPInfo</name> <operator>*</operator><operator>)</operator> <name>dv</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Number of columns fetched from vpinfo should match number of attributes
	 * for relation.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nvp</name> <operator>==</operator> <name><name>oldvpinfo</name><operator>-&gt;</operator><name>nEntry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check and update EOF value for each column file. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nvp</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/*
		 * For CO by design due to append-only nature, new end-of-file (EOF)
		 * to be recorded in aoseg table has to be greater than currently
		 * stored EOF value, as new writes must move it forward only. If new
		 * end-of-file value is less than currently stored end-of-file
		 * something is incorrect and updating the same will yield incorrect
		 * result during reads. Hence abort the write transaction trying to
		 * update the incorrect EOF value.
		 */</comment>

		<if_stmt><if>if <condition>(<expr><name><name>oldvpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eof</name> <operator>&lt;=</operator> <name><name>idesc</name><operator>-&gt;</operator><name>ds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>eof</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>vpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eof</name> <operator>=</operator> <name><name>idesc</name><operator>-&gt;</operator><name>ds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>eof</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected compressed EOF for relation %s, relfilenode %u, segment file %d coln %d. "</literal>
				 <literal type="string">"EOF "</literal> <name>INT64_FORMAT</name> <literal type="string">" to be updated cannot be smaller than current EOF "</literal> <name>INT64_FORMAT</name> <literal type="string">" in pg_aocsseg"</literal></expr></argument>,
				 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>prel</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr></argument>,
				 <argument><expr><name><name>idesc</name><operator>-&gt;</operator><name>cur_segno</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>idesc</name><operator>-&gt;</operator><name>ds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>eof</name></expr></argument>, <argument><expr><name><name>oldvpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>oldvpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>&lt;=</operator> <name><name>idesc</name><operator>-&gt;</operator><name>ds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>eofUncompress</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>vpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>=</operator> <name><name>idesc</name><operator>-&gt;</operator><name>ds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>eofUncompress</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected EOF for relation %s, relfilenode %u, segment file %d coln %d. "</literal>
				 <literal type="string">"EOF "</literal> <name>INT64_FORMAT</name> <literal type="string">" to be updated cannot be smaller than current EOF "</literal> <name>INT64_FORMAT</name> <literal type="string">" in pg_aocsseg"</literal></expr></argument>,
				 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>prel</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr></argument>,
				 <argument><expr><name><name>idesc</name><operator>-&gt;</operator><name>cur_segno</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>idesc</name><operator>-&gt;</operator><name>ds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>eofUncompress</name></expr></argument>, <argument><expr><name><name>oldvpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>dv</name> <operator>!=</operator> <name>v</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>vpinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>null</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repl</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>newtup</name> <operator>=</operator> <call><name>heap_modify_tuple</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>repl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>simple_heap_update</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oldtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>, <argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>vpinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Update vpinfo column of pg_aocsseg_* by adding new
 * AOCSVPInfoEntries.  One VPInfoEntry is added for each newly added
 * segfile (column).  If empty=true, add empty VPInfoEntry's having
 * eof=0.
 */</comment>
<function><type><name>void</name></type>
<name>AOCSFileSegInfoAddVpe</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>prel</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>segno</name></decl></parameter>,
					  <parameter><decl><type><name>AOCSAddColumnDesc</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_newcols</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>empty</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LockAcquireResult</name></type> <name>acquireResult</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Relation</name></type>	<name>segrel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>AOCSVPInfo</name> <modifier>*</modifier></type><name>oldvpinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AOCSVPInfo</name> <modifier>*</modifier></type><name>newvpinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>oldtup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>newtup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tuple_segno</name> <init>= <expr><name>InvalidFileSegNumber</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>d</name><index>[<expr><name>Natts_pg_aocsseg</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isNull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>null</name><index>[<expr><name>Natts_pg_aocsseg</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>repl</name><index>[<expr><name>Natts_pg_aocsseg</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nvp</name> <init>= <expr><call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* nvp is new columns + existing columns */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_UTILITY</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot add column in utility mode, relation %s, segno %d"</literal></expr></argument>,
			 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>empty</name> <operator>&amp;&amp;</operator> <name>Gp_role</name> <operator>!=</operator> <name>GP_ROLE_DISPATCH</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Adding empty VPEntries for relation %s, segno %d"</literal></expr></argument>,
			 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>acquireResult</name> <operator>=</operator> <call><name>LockRelationNoWait</name><argument_list>(<argument><expr><name>prel</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>acquireResult</name> <operator>!=</operator> <name>LOCKACQUIRE_ALREADY_HELD</name> <operator>&amp;&amp;</operator> <name>acquireResult</name> <operator>!=</operator> <name>LOCKACQUIRE_ALREADY_CLEAR</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"should already have (transaction-scope) AccessExclusive"</literal>
			 <literal type="string">" lock on relation %s, oid %d"</literal></expr></argument>,
			 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>Oid</name></type>         <name>segrelid</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name><name>prel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><operator>&amp;</operator><name>segrelid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>segrel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>segrelid</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Since we have the segment-file entry under lock (with
	 * LockRelationAppendOnlySegmentFile) we can use SnapshotNow.
	 */</comment>
	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>segno</name> <operator>!=</operator> <name>tuple_segno</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>oldtup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tuple_segno</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_segno</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"got invalid segno value NULL for tid %s"</literal></expr></argument>,
							<argument><expr><call><name>ItemPointerToString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oldtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"AOCS rel \"%s\" segment \"%d\" does not exist"</literal></expr></argument>,
							   <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call>
						<operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_segno</name></expr></argument>,
											<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_tupcount</name></expr></argument>,
											   <argument><expr><name>tupdesc</name></expr></argument>,
											   <argument><expr><operator>&amp;</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_modcount</name></expr></argument>,
											   <argument><expr><name>tupdesc</name></expr></argument>,
											   <argument><expr><operator>&amp;</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repl</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* new VPInfo having VPEntries with eof=0 */</comment>
	<expr_stmt><expr><name>newvpinfo</name> <operator>=</operator> <call><name>create_aocs_vpinfo</name><argument_list>(<argument><expr><name>nvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>empty</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
			<call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_vpinfo</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator>struct <name>varlena</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(
															   <argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>dv</name> <init>= <expr><call><name>pg_detoast_datum</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>aocs_vpinfo_size</name><argument_list>(<argument><expr><name>nvp</name> <operator>-</operator> <name>num_newcols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>oldvpinfo</name> <operator>=</operator> <operator>(</operator><name>AOCSVPInfo</name> <operator>*</operator><operator>)</operator> <name>dv</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>oldvpinfo</name><operator>-&gt;</operator><name>nEntry</name></name> <operator>+</operator> <name>num_newcols</name> <operator>==</operator> <name>nvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* copy existing columns' eofs to new vpinfo */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oldvpinfo</name><operator>-&gt;</operator><name>nEntry</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>newvpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eof</name> <operator>=</operator> <name><name>oldvpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eof</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>newvpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>=</operator>
				<name><name>oldvpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<comment type="block">/* eof for new segfiles come next */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>oldvpinfo</name><operator>-&gt;</operator><name>nEntry</name></name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nvp</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>j</name></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>newvpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eof</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>dsw</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>eof</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>newvpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name> <operator>=</operator>
				<name><name>desc</name><operator>-&gt;</operator><name>dsw</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>eofUncompress</name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>dv</name> <operator>!=</operator> <name>v</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>newvpinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>null</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repl</name><index>[<expr><name>Anum_pg_aocs_vpinfo</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>newtup</name> <operator>=</operator> <call><name>heap_modify_tuple</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>repl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>simple_heap_update</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oldtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>, <argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>newvpinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Holding RowExclusiveLock lock on pg_aocsseg_* until the ALTER TABLE
	 * transaction commits/aborts.  Additionally, we are already holding
	 * AccessExclusive lock on the AOCS relation OID.
	 */</comment>
	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>AOCSFileSegInfoAddCount</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>prel</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>segno</name></decl></parameter>,
						<parameter><decl><type><name>int64</name></type> <name>tupadded</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>varblockadded</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>modcount_added</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>segrel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>oldtup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>newtup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tuple_segno</name> <init>= <expr><name>InvalidFileSegNumber</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>d</name><index>[<expr><name>Natts_pg_aocsseg</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isNull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>null</name><index>[<expr><name>Natts_pg_aocsseg</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>repl</name><index>[<expr><name>Natts_pg_aocsseg</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Oid</name></type>         <name>segrelid</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name><name>prel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><operator>&amp;</operator><name>segrelid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>segrel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>segrelid</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Since we have the segment-file entry under lock (with
	 * LockRelationAppendOnlySegmentFile) we can use SnapshotNow.
	 */</comment>
	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>segno</name> <operator>!=</operator> <name>tuple_segno</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>oldtup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tuple_segno</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_segno</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"got invalid segno value NULL for tid %s"</literal></expr></argument>,
							<argument><expr><call><name>ItemPointerToString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oldtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"AOCS table \"%s\" file segment \"%d\" does not exist"</literal></expr></argument>,
							   <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call>
						<operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Verify that the caller locked the segment earlier. In principle, if
	 * the caller is holding an AccessExclusiveLock on the table, locking
	 * individual tuples would not be necessary, but all current callers
	 * diligently lock the tuples anyway, so we can perform this sanity check
	 * here.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_aoseg_tuple_is_locked_by_me</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot update pg_aocs entry for segno %d for relation %s, it is not locked for us"</literal></expr></argument>,
						<argument><expr><name>segno</name></expr></argument>, <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>prel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_segno</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_tupcount</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>tupadded</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repl</name><index>[<expr><name>Anum_pg_aocs_tupcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_varblockcount</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>varblockadded</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repl</name><index>[<expr><name>Anum_pg_aocs_varblockcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>Anum_pg_aocs_modcount</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>modcount_added</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repl</name><index>[<expr><name>Anum_pg_aocs_modcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>newtup</name> <operator>=</operator> <call><name>heap_modify_tuple</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>repl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>simple_heap_update</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oldtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>, <argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>segrel</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>Datum</name></type> <name>aocsvpinfo_decode</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>Datum</name></type>
<name>aocsvpinfo_decode</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AOCSVPInfo</name> <modifier>*</modifier></type><name>vpinfo</name> <init>= <expr><operator>(</operator><name>AOCSVPInfo</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_BYTEA_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>j</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name><name>vpinfo</name><operator>-&gt;</operator><name>nEntry</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid entry for decoding aocsvpinfo"</literal></expr></argument>)</argument_list></call>
						<operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>j</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid entry for decoding aocsvpinfo"</literal></expr></argument>)</argument_list></call>
						<operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>vpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eof</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>vpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT64</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>



<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>gp_aocsseg_internal</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>aocsRelOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<typedef>typedef <type><struct>struct <name>Context</name>
	<block>{
		<decl_stmt><decl><type><name>Oid</name></type>			<name>aocsRelOid</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type>			<name>relnatts</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name><name>struct</name> <name>AOCSFileSegInfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>aocsSegfileArray</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type>			<name>totalAocsSegFiles</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type>			<name>segfileArrayIndex</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type>			<name>columnNum</name></decl>;</decl_stmt>
		<comment type="block">/* 0-based index into columns. */</comment>
	}</block></struct></type> <name>Context</name>;</typedef>

	<decl_stmt><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Context</name>    <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Relation</name></type>	<name>aocsRel</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Relation</name></type>	<name>pg_aocsseg_rel</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Snapshot</name></type>	<name>appendOnlyMetaDataSnapshot</name> <init>= <expr><call><name>RegisterSnapshot</name><argument_list>(<argument><expr><call><name>GetLatestSnapshot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* create a function context for cross-call persistence */</comment>
		<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * switch to memory context appropriate for multiple function calls
		 */</comment>
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* build tupdesc for result tuples */</comment>
		<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"segment_id"</literal></expr></argument>,
						   <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"segno"</literal></expr></argument>,
						   <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"column_num"</literal></expr></argument>,
						   <argument><expr><name>INT2OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"physical_segno"</literal></expr></argument>,
						   <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"tupcount"</literal></expr></argument>,
						   <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"eof"</literal></expr></argument>,
						   <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"eof_uncompressed"</literal></expr></argument>,
						   <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"modcount"</literal></expr></argument>,
						   <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"formatversion"</literal></expr></argument>,
						   <argument><expr><name>INT2OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>,
						   <argument><expr><name>INT2OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Collect all the locking information that we will format and send
		 * out as a result set.
		 */</comment>
		<expr_stmt><expr><name>context</name> <operator>=</operator> <operator>(</operator><name>Context</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>context</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>aocsRelOid</name></name> <operator>=</operator> <name>aocsRelOid</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>aocsRel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>aocsRelOid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RelationIsAoCols</name><argument_list>(<argument><expr><name>aocsRel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"'%s' is not an append-only columnar relation"</literal></expr></argument>,
							<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>aocsRel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Remember the number of columns. */</comment>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>relnatts</name></name> <operator>=</operator> <name><name>aocsRel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relnatts</name></name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Oid</name></type>         <name>segrelid</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GetAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name><name>aocsRel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>,
                                  <argument><expr><name>appendOnlyMetaDataSnapshot</name></expr></argument>,
                                  <argument><expr><operator>&amp;</operator><name>segrelid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pg_aocsseg_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>segrelid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>aocsSegfileArray</name></name> <operator>=</operator> <call><name>GetAllAOCSFileSegInfo_pg_aocsseg_rel</name><argument_list>(
																		 <argument><expr><name><name>aocsRel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relnatts</name></name></expr></argument>,
																		 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>aocsRel</name></expr></argument>)</argument_list></call></expr></argument>,
																		 <argument><expr><name>pg_aocsseg_rel</name></expr></argument>,
																		 <argument><expr><name>appendOnlyMetaDataSnapshot</name></expr></argument>,
																		 <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>totalAocsSegFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>pg_aocsseg_rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>aocsRel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Iteration positions. */</comment>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>segfileArrayIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>columnNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>context</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>UnregisterSnapshot</name><argument_list>(<argument><expr><name>appendOnlyMetaDataSnapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>context</name> <operator>=</operator> <operator>(</operator><name>Context</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Process each column for each segment file.
	 */</comment>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>AOCSFileSegInfo</name></name> <modifier>*</modifier></type><name>aocsSegfile</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type>		<name>eof</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type>		<name>eof_uncompressed</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>segfileArrayIndex</name></name> <operator>&gt;=</operator> <name><name>context</name><operator>-&gt;</operator><name>totalAocsSegFiles</name></name></expr>)</condition>
		<block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>columnNum</name></name> <operator>&gt;=</operator> <name><name>context</name><operator>-&gt;</operator><name>relnatts</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Finished with the current segment file.
			 */</comment>
			<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>segfileArrayIndex</name></name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>segfileArrayIndex</name></name> <operator>&gt;=</operator> <name><name>context</name><operator>-&gt;</operator><name>totalAocsSegFiles</name></name></expr>)</condition>
			<block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>columnNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Form tuple with appropriate data.
		 */</comment>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>aocsSegfile</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>aocsSegfileArray</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>segfileArrayIndex</name></name></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>columnNum</name></name> <operator>&gt;=</operator> <name><name>aocsSegfile</name><operator>-&gt;</operator><name>vpinfo</name><operator>.</operator><name>nEntry</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * AWAITING_DROP segments might be missing information for some
			 * (newly-added) columns.
			 */</comment>
			<expr_stmt><expr><name>eof</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>eof_uncompressed</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>AOCSVPInfoEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>getAOCSVPEntry</name><argument_list>(<argument><expr><name>aocsSegfile</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>columnNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>eof</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>eof</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>eof_uncompressed</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>eof_uncompressed</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>aocsSegfile</name><operator>-&gt;</operator><name>segno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>columnNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>columnNum</name></name> <operator>*</operator> <name>AOTupleId_MultiplierSegmentFileNum</name> <operator>+</operator> <name><name>aocsSegfile</name><operator>-&gt;</operator><name>segno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>aocsSegfile</name><operator>-&gt;</operator><name>total_tupcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>eof_uncompressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>aocsSegfile</name><operator>-&gt;</operator><name>modcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><name><name>aocsSegfile</name><operator>-&gt;</operator><name>formatversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><name><name>aocsSegfile</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Indicate we emitted one column. */</comment>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>columnNum</name></name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gp_aocsseg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>extern</specifier> <name>Datum</name></type> <name>gp_aocsseg</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>Datum</name></type>
<name>gp_aocsseg</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>aocsRelOid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>gp_aocsseg_internal</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>aocsRelOid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gp_aocsseg_history</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>extern</specifier> <name>Datum</name></type> <name>gp_aocsseg_history</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>Datum</name></type>
<name>gp_aocsseg_history</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>aocsRelOid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<typedef>typedef <type><struct>struct <name>Context</name>
	<block>{
		<decl_stmt><decl><type><name>Oid</name></type>			<name>aocsRelOid</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type>			<name>relnatts</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name><name>struct</name> <name>AOCSFileSegInfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>aocsSegfileArray</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type>			<name>totalAocsSegFiles</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type>			<name>segfileArrayIndex</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type>			<name>columnNum</name></decl>;</decl_stmt>
		<comment type="block">/* 0-based index into columns. */</comment>
	}</block></struct></type> <name>Context</name>;</typedef>

	<decl_stmt><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Context</name>    <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Relation</name></type>	<name>aocsRel</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Relation</name></type>	<name>pg_aocsseg_rel</name></decl>;</decl_stmt>

		<comment type="block">/* create a function context for cross-call persistence */</comment>
		<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * switch to memory context appropriate for multiple function calls
		 */</comment>
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* build tupdesc for result tuples */</comment>
		<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"segment_id"</literal></expr></argument>,
						   <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"segno"</literal></expr></argument>,
						   <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"column_num"</literal></expr></argument>,
						   <argument><expr><name>INT2OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"physical_segno"</literal></expr></argument>,
						   <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"tupcount"</literal></expr></argument>,
						   <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"eof"</literal></expr></argument>,
						   <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"eof_uncompressed"</literal></expr></argument>,
						   <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"modcount"</literal></expr></argument>,
						   <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"formatversion"</literal></expr></argument>,
						   <argument><expr><name>INT2OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>,
						   <argument><expr><name>INT2OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Collect all the locking information that we will format and send
		 * out as a result set.
		 */</comment>
		<expr_stmt><expr><name>context</name> <operator>=</operator> <operator>(</operator><name>Context</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>context</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>aocsRelOid</name></name> <operator>=</operator> <name>aocsRelOid</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>aocsRel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>aocsRelOid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RelationIsAoCols</name><argument_list>(<argument><expr><name>aocsRel</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>aocsRel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"'%s' is not an append-only columnar relation"</literal></expr></argument>,
				               <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>aocsRel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Remember the number of columns. */</comment>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>relnatts</name></name> <operator>=</operator> <name><name>aocsRel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relnatts</name></name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Oid</name></type>         <name>segrelid</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GetAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name><name>aocsRel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>,
                                  <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><operator>&amp;</operator><name>segrelid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>pg_aocsseg_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>segrelid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>aocsSegfileArray</name></name> <operator>=</operator> <call><name>GetAllAOCSFileSegInfo_pg_aocsseg_rel</name><argument_list>(
																		 <argument><expr><call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>aocsRel</name></expr></argument>)</argument_list></call></expr></argument>,
																		 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>aocsRel</name></expr></argument>)</argument_list></call></expr></argument>,
																		 <argument><expr><name>pg_aocsseg_rel</name></expr></argument>,
																		 <argument><expr><name>SnapshotAny</name></expr></argument>, <comment type="line">//Get ALL tuples from pg_aocsseg_ % including aborted and in - progress ones.</comment>
																		 <argument><expr><operator>&amp;</operator> <name><name>context</name><operator>-&gt;</operator><name>totalAocsSegFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>pg_aocsseg_rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>aocsRel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Iteration positions. */</comment>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>segfileArrayIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>columnNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>context</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>context</name> <operator>=</operator> <operator>(</operator><name>Context</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Process each column for each segment file.
	 */</comment>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>AOCSFileSegInfo</name></name> <modifier>*</modifier></type><name>aocsSegfile</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type>		<name>eof</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type>		<name>eof_uncompressed</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>segfileArrayIndex</name></name> <operator>&gt;=</operator> <name><name>context</name><operator>-&gt;</operator><name>totalAocsSegFiles</name></name></expr>)</condition>
		<block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>columnNum</name></name> <operator>&gt;=</operator> <name><name>context</name><operator>-&gt;</operator><name>relnatts</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Finished with the current segment file.
			 */</comment>
			<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>segfileArrayIndex</name></name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>segfileArrayIndex</name></name> <operator>&gt;=</operator> <name><name>context</name><operator>-&gt;</operator><name>totalAocsSegFiles</name></name></expr>)</condition>
			<block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>columnNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Form tuple with appropriate data.
		 */</comment>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>aocsSegfile</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>aocsSegfileArray</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>segfileArrayIndex</name></name></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>columnNum</name></name> <operator>&gt;=</operator> <name><name>aocsSegfile</name><operator>-&gt;</operator><name>vpinfo</name><operator>.</operator><name>nEntry</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * AWAITING_DROP segments might be missing information for some
			 * (newly-added) columns
			 */</comment>
			<expr_stmt><expr><name>eof</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>eof_uncompressed</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>AOCSVPInfoEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>getAOCSVPEntry</name><argument_list>(<argument><expr><name>aocsSegfile</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>columnNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>eof</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>eof</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>eof_uncompressed</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>eof_uncompressed</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>aocsSegfile</name><operator>-&gt;</operator><name>segno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>columnNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>columnNum</name></name> <operator>*</operator> <name>AOTupleId_MultiplierSegmentFileNum</name> <operator>+</operator> <name><name>aocsSegfile</name><operator>-&gt;</operator><name>segno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>aocsSegfile</name><operator>-&gt;</operator><name>total_tupcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>eof_uncompressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>aocsSegfile</name><operator>-&gt;</operator><name>modcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><name><name>aocsSegfile</name><operator>-&gt;</operator><name>formatversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><name><name>aocsSegfile</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Indicate we emitted one column. */</comment>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>columnNum</name></name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>float8</name></type>
<name>aocol_compression_ratio_internal</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>parentrel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>sqlstmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>aosegrel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>connected</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>proc</name></decl>;</decl_stmt>	<comment type="block">/* 32 bit, only holds number of segments */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>eof</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>eof_uncompressed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type>		<name>compress_ratio</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* the default, meaning "not
										 * available" */</comment>

	<decl_stmt><decl><type><name>Oid</name></type>			<name>segrelid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GetAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>parentrel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>segrelid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>segrelid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * open the aoseg relation
	 */</comment>
	<expr_stmt><expr><name>aosegrel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>segrelid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * assemble our query string.
	 *
	 * NOTE: The aocsseg (per table) system catalog lives in the gp_aoseg
	 * namespace, too.
	 */</comment>
	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sqlstmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_DISPATCH</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sqlstmt</name></expr></argument>, <argument><expr><literal type="string">"select vpinfo "</literal>
						 <literal type="string">"from gp_dist_random('%s.%s')"</literal></expr></argument>,
						 <argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><call><name>RelationGetNamespace</name><argument_list>(<argument><expr><name>aosegrel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>aosegrel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sqlstmt</name></expr></argument>, <argument><expr><literal type="string">"select vpinfo "</literal>
						 <literal type="string">"from %s.%s"</literal></expr></argument>,
						 <argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><call><name>RelationGetNamespace</name><argument_list>(<argument><expr><name>aosegrel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>aosegrel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>aosegrel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>

		<if_stmt><if>if <condition>(<expr><name>SPI_OK_CONNECT</name> <operator>!=</operator> <call><name>SPI_connect</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unable to obtain AO relation information from segment databases"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"SPI_connect failed in get_ao_compression_ratio"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>connected</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<comment type="block">/* Do the query. */</comment>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SPI_execute</name><argument_list>(<argument><expr><name><name>sqlstmt</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>proc</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>SPI_processed</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>SPI_tuptable</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name> <init>= <expr><name><name>SPI_tuptable</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>SPITupleTable</name> <modifier>*</modifier></type><name>tuptable</name> <init>= <expr><name>SPI_tuptable</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Datum</name></type>		<name>vpinfoDatum</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>AOCSVPInfo</name> <modifier>*</modifier></type><name>vpinfo</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>proc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<comment type="block">/*
				 * Each row is a binary struct vpinfo with a variable number
				 * of entries on the end.
				 */</comment>
				<expr_stmt><expr><name>tuple</name> <operator>=</operator> <name><name>tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

				<expr_stmt><expr><name>vpinfoDatum</name> <operator>=</operator> <call><name>heap_getattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>vpinfo</name> <operator>=</operator> <operator>(</operator><name>AOCSVPInfo</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetByteaP</name><argument_list>(<argument><expr><name>vpinfoDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* CONSIDER: Better verification of vpinfo. */</comment>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>vpinfo</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>vpinfo</name><operator>-&gt;</operator><name>nEntry</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><name>eof</name> <operator>+=</operator> <name><name>vpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>eof</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>eof_uncompressed</name> <operator>+=</operator> <name><name>vpinfo</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>eof_uncompressed</name></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block></for>

			<comment type="block">/* guard against division by zero */</comment>
			<if_stmt><if>if <condition>(<expr><name>eof</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* calculate the compression ratio */</comment>
				<expr_stmt><expr><name>compress_ratio</name> <operator>=</operator> <operator>(</operator><name>float8</name><operator>)</operator> <name>eof_uncompressed</name> <operator>/</operator> <operator>(</operator><name>float8</name><operator>)</operator> <name>eof</name></expr>;</expr_stmt>

				<comment type="block">/* format to 2 digits past the decimal point */</comment>
				<expr_stmt><expr><name>compress_ratio</name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><name>compress_ratio</name> <operator>*</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>connected</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/* Clean up in case of error. */</comment>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>connected</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Carry on with error handling. */</comment>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>sqlstmt</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>compress_ratio</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Free up seginfo array.
 */</comment>
<function><type><name>void</name></type>
<name>FreeAllAOCSSegFileInfo</name><parameter_list>(<parameter><decl><type><name>AOCSFileSegInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>allAOCSSegInfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>totalSegFiles</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>allAOCSSegInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>file_no</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>file_no</name> <operator>&lt;</operator> <name>totalSegFiles</name></expr>;</condition> <incr><expr><name>file_no</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>allAOCSSegInfo</name><index>[<expr><name>file_no</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>allAOCSSegInfo</name><index>[<expr><name>file_no</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
