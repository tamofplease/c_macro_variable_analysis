<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/table/tableam.c"><comment type="block">/*----------------------------------------------------------------------
 *
 * tableam.c
 *		Table access method routines too big to be inline functions.
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/access/table/tableam.c
 *
 * NOTES
 *	  Note that most function in here are documented in tableam.h, rather than
 *	  here. That's because there's a lot of inline functions in tableam.h and
 *	  it'd be harder to understand if one constantly had to switch between files.
 *
 *----------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>		<comment type="block">/* for ss_* */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tableam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>


<comment type="block">/* GUC variables */</comment>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>default_table_access_method</name> <init>= <expr><name>DEFAULT_TABLE_ACCESS_METHOD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>synchronize_seqscans</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>


<comment type="block">/* ----------------------------------------------------------------------------
 * Slot functions.
 * ----------------------------------------------------------------------------
 */</comment>

<function><type><specifier>const</specifier> <name>TupleTableSlotOps</name> <modifier>*</modifier></type>
<name>table_slot_callbacks</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TupleTableSlotOps</name> <modifier>*</modifier></type><name>tts_cb</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_tableam</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>tts_cb</name> <operator>=</operator> <call><name><name>relation</name><operator>-&gt;</operator><name>rd_tableam</name><operator>-&gt;</operator><name>slot_callbacks</name></name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_FOREIGN_TABLE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Historically FDWs expect to store heap tuples in slots. Continue
		 * handing them one, to make it less painful to adapt FDWs to new
		 * versions. The cost of a heap slot over a virtual slot is pretty
		 * small.
		 */</comment>
		<expr_stmt><expr><name>tts_cb</name> <operator>=</operator> <operator>&amp;</operator><name>TTSOpsHeapTuple</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * These need to be supported, as some parts of the code (like COPY)
		 * need to create slots for such relations too. It seems better to
		 * centralize the knowledge that a heap slot is the right thing in
		 * that case here.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_VIEW</name> <operator>||</operator>
			   <name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_PARTITIONED_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tts_cb</name> <operator>=</operator> <operator>&amp;</operator><name>TTSOpsVirtual</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>tts_cb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>table_slot_create</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>reglist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TupleTableSlotOps</name> <modifier>*</modifier></type><name>tts_cb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tts_cb</name> <operator>=</operator> <call><name>table_slot_callbacks</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>MakeSingleTupleTableSlot</name><argument_list>(<argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tts_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>reglist</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>reglist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>reglist</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>slot</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ----------------------------------------------------------------------------
 * Table scan functions.
 * ----------------------------------------------------------------------------
 */</comment>

<function><type><name>TableScanDesc</name></type>
<name>table_beginscan_catalog</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ScanKeyData</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>flags</name> <init>= <expr><name>SO_TYPE_SEQSCAN</name> <operator>|</operator>
	<name>SO_ALLOW_STRAT</name> <operator>|</operator> <name>SO_ALLOW_SYNC</name> <operator>|</operator> <name>SO_ALLOW_PAGEMODE</name> <operator>|</operator> <name>SO_TEMP_SNAPSHOT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>relid</name> <init>= <expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Snapshot</name></type>	<name>snapshot</name> <init>= <expr><call><name>RegisterSnapshot</name><argument_list>(<argument><expr><call><name>GetCatalogSnapshot</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name><name>relation</name><operator>-&gt;</operator><name>rd_tableam</name><operator>-&gt;</operator><name>scan_begin</name></name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>nkeys</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
											<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>table_scan_update_snapshot</name><parameter_list>(<parameter><decl><type><name>TableScanDesc</name></type> <name>scan</name></decl></parameter>, <parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsMVCCSnapshot</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RegisterSnapshot</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>rs_snapshot</name></name> <operator>=</operator> <name>snapshot</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>rs_flags</name></name> <operator>|=</operator> <name>SO_TEMP_SNAPSHOT</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* ----------------------------------------------------------------------------
 * Parallel table scan related functions.
 * ----------------------------------------------------------------------------
 */</comment>

<function><type><name>Size</name></type>
<name>table_parallelscan_estimate</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsMVCCSnapshot</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><call><name>EstimateSnapshotSpace</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>snapshot</name> <operator>==</operator> <name>SnapshotAny</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><call><name><name>rel</name><operator>-&gt;</operator><name>rd_tableam</name><operator>-&gt;</operator><name>parallelscan_estimate</name></name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>table_parallelscan_initialize</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>ParallelTableScanDesc</name></type> <name>pscan</name></decl></parameter>,
							  <parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>snapshot_off</name> <init>= <expr><call><name><name>rel</name><operator>-&gt;</operator><name>rd_tableam</name><operator>-&gt;</operator><name>parallelscan_initialize</name></name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>pscan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pscan</name><operator>-&gt;</operator><name>phs_snapshot_off</name></name> <operator>=</operator> <name>snapshot_off</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsMVCCSnapshot</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SerializeSnapshot</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>pscan</name> <operator>+</operator> <name><name>pscan</name><operator>-&gt;</operator><name>phs_snapshot_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pscan</name><operator>-&gt;</operator><name>phs_snapshot_any</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>snapshot</name> <operator>==</operator> <name>SnapshotAny</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pscan</name><operator>-&gt;</operator><name>phs_snapshot_any</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>TableScanDesc</name></type>
<name>table_beginscan_parallel</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>ParallelTableScanDesc</name></type> <name>parallel_scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Snapshot</name></type>	<name>snapshot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>flags</name> <init>= <expr><name>SO_TYPE_SEQSCAN</name> <operator>|</operator>
	<name>SO_ALLOW_STRAT</name> <operator>|</operator> <name>SO_ALLOW_SYNC</name> <operator>|</operator> <name>SO_ALLOW_PAGEMODE</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>parallel_scan</name><operator>-&gt;</operator><name>phs_relid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parallel_scan</name><operator>-&gt;</operator><name>phs_snapshot_any</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Snapshot was serialized -- restore it */</comment>
		<expr_stmt><expr><name>snapshot</name> <operator>=</operator> <call><name>RestoreSnapshot</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>parallel_scan</name> <operator>+</operator>
								   <name><name>parallel_scan</name><operator>-&gt;</operator><name>phs_snapshot_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RegisterSnapshot</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SO_TEMP_SNAPSHOT</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* SnapshotAny passed by caller (not serialized) */</comment>
		<expr_stmt><expr><name>snapshot</name> <operator>=</operator> <name>SnapshotAny</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><call><name><name>relation</name><operator>-&gt;</operator><name>rd_tableam</name><operator>-&gt;</operator><name>scan_begin</name></name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>snapshot</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
											<argument><expr><name>parallel_scan</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ----------------------------------------------------------------------------
 * Index scan related functions.
 * ----------------------------------------------------------------------------
 */</comment>

<comment type="block">/*
 * To perform that check simply start an index scan, create the necessary
 * slot, do the heap lookup, and shut everything down again. This could be
 * optimized, but is unlikely to matter from a performance POV. If there
 * frequently are live index pointers also matching a unique index key, the
 * CPU overhead of this routine is unlikely to matter.
 */</comment>
<function><type><name>bool</name></type>
<name>table_index_fetch_tuple_check</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>,
							  <parameter><decl><type><name>ItemPointer</name></type> <name>tid</name></decl></parameter>,
							  <parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>,
							  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>all_dead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexFetchTableData</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>call_again</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Optimized path for AO/CO relations as the aforementioned per-tuple
	 * overhead is significant for AO/CO relations. For details, please refer to
	 * table_index_fetch_tuple_exists().
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>RelationIsAppendOptimized</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>table_index_fetch_tuple_exists</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>all_dead</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>table_slot_create</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>table_index_fetch_begin</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>table_index_fetch_tuple</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>call_again</name></expr></argument>,
									<argument><expr><name>all_dead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_index_fetch_end</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecDropSingleTupleTableSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ------------------------------------------------------------------------
 * Functions for non-modifying operations on individual tuples
 * ------------------------------------------------------------------------
 */</comment>

<function><type><name>void</name></type>
<name>table_tuple_get_latest_tid</name><parameter_list>(<parameter><decl><type><name>TableScanDesc</name></type> <name>scan</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name> <init>= <expr><name><name>scan</name><operator>-&gt;</operator><name>rs_rd</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TableAmRoutine</name> <modifier>*</modifier></type><name>tableam</name> <init>= <expr><name><name>rel</name><operator>-&gt;</operator><name>rd_tableam</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Since this can be called with user-supplied TID, don't trust the input
	 * too much.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tableam</name><operator>-&gt;</operator><name>tuple_tid_valid</name></name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"tid (%u, %u) is not valid for relation \"%s\""</literal></expr></argument>,
						<argument><expr><call><name>ItemPointerGetBlockNumberNoCheck</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>ItemPointerGetOffsetNumberNoCheck</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name><name>tableam</name><operator>-&gt;</operator><name>tuple_get_latest_tid</name></name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* ----------------------------------------------------------------------------
 * Functions to make modifications a bit simpler.
 * ----------------------------------------------------------------------------
 */</comment>

<comment type="block">/*
 * simple_table_tuple_insert - insert a tuple
 *
 * Currently, this routine differs from table_tuple_insert only in supplying a
 * default command ID and not allowing access to the speedup options.
 */</comment>
<function><type><name>void</name></type>
<name>simple_table_tuple_insert</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>table_tuple_insert</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><call><name>GetCurrentCommandId</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * simple_table_tuple_delete - delete a tuple
 *
 * This routine may be used to delete a tuple when concurrent updates of
 * the target tuple are not expected (for example, because we have a lock
 * on the relation associated with the tuple).  Any failure is reported
 * via ereport().
 */</comment>
<function><type><name>void</name></type>
<name>simple_table_tuple_delete</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TM_Result</name></type>	<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TM_FailureData</name></type> <name>tmfd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>table_tuple_delete</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>,
								<argument><expr><call><name>GetCurrentCommandId</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>InvalidSnapshot</name></expr></argument>,
								<argument><expr><name>true</name></expr></argument> <comment type="block">/* wait for commit */</comment> ,
								<argument><expr><operator>&amp;</operator><name>tmfd</name></expr></argument>, <argument><expr><name>false</name></expr></argument> <comment type="block">/* changingPart */</comment> )</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>result</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>TM_SelfModified</name></expr>:</case>
			<comment type="block">/* Tuple was already updated in current command? */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"tuple already updated by self"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>TM_Ok</name></expr>:</case>
			<comment type="block">/* done successfully */</comment>
			<break>break;</break>

		<case>case <expr><name>TM_Updated</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"tuple concurrently updated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>TM_Deleted</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"tuple concurrently deleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized table_tuple_delete status: %u"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * simple_table_tuple_update - replace a tuple
 *
 * This routine may be used to update a tuple when concurrent updates of
 * the target tuple are not expected (for example, because we have a lock
 * on the relation associated with the tuple).  Any failure is reported
 * via ereport().
 */</comment>
<function><type><name>void</name></type>
<name>simple_table_tuple_update</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>otid</name></decl></parameter>,
						  <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
						  <parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>,
						  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>update_indexes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TM_Result</name></type>	<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TM_FailureData</name></type> <name>tmfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LockTupleMode</name></type> <name>lockmode</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>table_tuple_update</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>otid</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>,
								<argument><expr><call><name>GetCurrentCommandId</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>InvalidSnapshot</name></expr></argument>,
								<argument><expr><name>true</name></expr></argument> <comment type="block">/* wait for commit */</comment> ,
								<argument><expr><operator>&amp;</operator><name>tmfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lockmode</name></expr></argument>, <argument><expr><name>update_indexes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>result</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>TM_SelfModified</name></expr>:</case>
			<comment type="block">/* Tuple was already updated in current command? */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"tuple already updated by self"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>TM_Ok</name></expr>:</case>
			<comment type="block">/* done successfully */</comment>
			<break>break;</break>

		<case>case <expr><name>TM_Updated</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"tuple concurrently updated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>TM_Deleted</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"tuple concurrently deleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized table_tuple_update status: %u"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

</block_content>}</block></function>


<comment type="block">/* ----------------------------------------------------------------------------
 * Helper functions to implement parallel scans for block oriented AMs.
 * ----------------------------------------------------------------------------
 */</comment>

<function><type><name>Size</name></type>
<name>table_block_parallelscan_estimate</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ParallelBlockTableScanDescData</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><name>Size</name></type>
<name>table_block_parallelscan_initialize</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>ParallelTableScanDesc</name></type> <name>pscan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ParallelBlockTableScanDesc</name></type> <name>bpscan</name> <init>= <expr><operator>(</operator><name>ParallelBlockTableScanDesc</name><operator>)</operator> <name>pscan</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>bpscan</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>phs_relid</name></name> <operator>=</operator> <call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bpscan</name><operator>-&gt;</operator><name>phs_nblocks</name></name> <operator>=</operator> <call><name>RelationGetNumberOfBlocks</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* compare phs_syncscan initialization to similar logic in initscan */</comment>
	<expr_stmt><expr><name><name>bpscan</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>phs_syncscan</name></name> <operator>=</operator> <name>synchronize_seqscans</name> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>RelationUsesLocalBuffers</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<name><name>bpscan</name><operator>-&gt;</operator><name>phs_nblocks</name></name> <operator>&gt;</operator> <name>NBuffers</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bpscan</name><operator>-&gt;</operator><name>phs_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bpscan</name><operator>-&gt;</operator><name>phs_startblock</name></name> <operator>=</operator> <name>InvalidBlockNumber</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bpscan</name><operator>-&gt;</operator><name>phs_nallocated</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ParallelBlockTableScanDescData</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>table_block_parallelscan_reinitialize</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>ParallelTableScanDesc</name></type> <name>pscan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ParallelBlockTableScanDesc</name></type> <name>bpscan</name> <init>= <expr><operator>(</operator><name>ParallelBlockTableScanDesc</name><operator>)</operator> <name>pscan</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bpscan</name><operator>-&gt;</operator><name>phs_nallocated</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * find and set the scan's startblock
 *
 * Determine where the parallel seq scan should start.  This function may be
 * called many times, once by each parallel worker.  We must be careful only
 * to set the startblock once.
 */</comment>
<function><type><name>void</name></type>
<name>table_block_parallelscan_startblock_init</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>ParallelBlockTableScanDesc</name></type> <name>pbscan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>sync_startpage</name> <init>= <expr><name>InvalidBlockNumber</name></expr></init></decl>;</decl_stmt>

<label><name>retry</name>:</label>
	<comment type="block">/* Grab the spinlock. */</comment>
	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pbscan</name><operator>-&gt;</operator><name>phs_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If the scan's startblock has not yet been initialized, we must do so
	 * now.  If this is not a synchronized scan, we just start at block 0, but
	 * if it is a synchronized scan, we must get the starting position from
	 * the synchronized scan machinery.  We can't hold the spinlock while
	 * doing that, though, so release the spinlock, get the information we
	 * need, and retry.  If nobody else has initialized the scan in the
	 * meantime, we'll fill in the value we fetched on the second time
	 * through.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pbscan</name><operator>-&gt;</operator><name>phs_startblock</name></name> <operator>==</operator> <name>InvalidBlockNumber</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pbscan</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>phs_syncscan</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>pbscan</name><operator>-&gt;</operator><name>phs_startblock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>sync_startpage</name> <operator>!=</operator> <name>InvalidBlockNumber</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>pbscan</name><operator>-&gt;</operator><name>phs_startblock</name></name> <operator>=</operator> <name>sync_startpage</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pbscan</name><operator>-&gt;</operator><name>phs_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sync_startpage</name> <operator>=</operator> <call><name>ss_get_location</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>pbscan</name><operator>-&gt;</operator><name>phs_nblocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>retry</name>;</goto>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pbscan</name><operator>-&gt;</operator><name>phs_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * get the next page to scan
 *
 * Get the next page to scan.  Even if there are no pages left to scan,
 * another backend could have grabbed a page to scan and not yet finished
 * looking at it, so it doesn't follow that the scan is done when the first
 * backend gets an InvalidBlockNumber return.
 */</comment>
<function><type><name>BlockNumber</name></type>
<name>table_block_parallelscan_nextpage</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>ParallelBlockTableScanDesc</name></type> <name>pbscan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>nallocated</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * phs_nallocated tracks how many pages have been allocated to workers
	 * already.  When phs_nallocated &gt;= rs_nblocks, all blocks have been
	 * allocated.
	 *
	 * Because we use an atomic fetch-and-add to fetch the current value, the
	 * phs_nallocated counter will exceed rs_nblocks, because workers will
	 * still increment the value, when they try to allocate the next block but
	 * all blocks have been allocated already. The counter must be 64 bits
	 * wide because of that, to avoid wrapping around when rs_nblocks is close
	 * to 2^32.
	 *
	 * The actual page to return is calculated by adding the counter to the
	 * starting block number, modulo nblocks.
	 */</comment>
	<expr_stmt><expr><name>nallocated</name> <operator>=</operator> <call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pbscan</name><operator>-&gt;</operator><name>phs_nallocated</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>nallocated</name> <operator>&gt;=</operator> <name><name>pbscan</name><operator>-&gt;</operator><name>phs_nblocks</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>page</name> <operator>=</operator> <name>InvalidBlockNumber</name></expr>;</expr_stmt></block_content></block></if>	<comment type="block">/* all blocks have been allocated */</comment>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>page</name> <operator>=</operator> <operator>(</operator><name>nallocated</name> <operator>+</operator> <name><name>pbscan</name><operator>-&gt;</operator><name>phs_startblock</name></name><operator>)</operator> <operator>%</operator> <name><name>pbscan</name><operator>-&gt;</operator><name>phs_nblocks</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * Report scan location.  Normally, we report the current page number.
	 * When we reach the end of the scan, though, we report the starting page,
	 * not the ending page, just so the starting positions for later scans
	 * doesn't slew backwards.  We only report the position at the end of the
	 * scan once, though: subsequent callers will report nothing.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pbscan</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>phs_syncscan</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>page</name> <operator>!=</operator> <name>InvalidBlockNumber</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ss_report_location</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>nallocated</name> <operator>==</operator> <name><name>pbscan</name><operator>-&gt;</operator><name>phs_nblocks</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ss_report_location</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>pbscan</name><operator>-&gt;</operator><name>phs_startblock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>page</name></expr>;</return>
</block_content>}</block></function>
</unit>
