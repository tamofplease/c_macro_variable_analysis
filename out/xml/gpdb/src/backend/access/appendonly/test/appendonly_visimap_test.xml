<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/appendonly/test/appendonly_visimap_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../appendonly_visimap.c"</cpp:file></cpp:include>

<comment type="block">/*
 * Simulate out-of-order tuples encountered by appendonly_delete().
 * Particularly, the case when the current visimap entry has already
 * been stashed at least once.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__AppendOnlyVisimapDelete_Finish_outoforder</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AppendOnlyVisiMapDeleteKey</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AppendOnlyVisiMapDeleteData</name></type> <name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AppendOnlyVisimapDelete</name></type> <name>visiMapDelete</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AppendOnlyVisimap</name></type> <name>visiMap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>visiMapDelete</name><operator>.</operator><name>visiMap</name></name> <operator>=</operator> <operator>&amp;</operator><name>visiMap</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMap</name><operator>.</operator><name>visimapEntry</name><operator>.</operator><name>segmentFileNum</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMap</name><operator>.</operator><name>visimapEntry</name><operator>.</operator><name>firstRowNum</name></name> <operator>=</operator> <literal type="number">32768</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMap</name><operator>.</operator><name>visimapEntry</name><operator>.</operator><name>dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>segno</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>firstRowNum</name></name> <operator>=</operator> <literal type="number">32768</literal></expr>;</expr_stmt>
	<comment type="block">/* should be changed by AppendOnlyVisimapDelete_Finish() */</comment>
	<expr_stmt><expr><name><name>val</name><operator>.</operator><name>workFileOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>AppendOnlyVisimapEntry_HasChanged</name></expr></argument>, <argument><expr><name>visiMapEntry</name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>visiMap</name><operator>.</operator><name>visimapEntry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>AppendOnlyVisimapEntry_HasChanged</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>

	<comment type="block">/*
	 * AppendOnlyVisimap_Store calls Assert(AppendOnlyVisimapEntry_IsValid)
	 */</comment>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>AppendOnlyVisimapEntry_IsValid</name></expr></argument>, <argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>AppendOnlyVisimapEntry_IsValid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>AppendOnlyVisimapStore_Store</name></expr></argument>, <argument><expr><name>visiMapStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>AppendOnlyVisimapStore_Store</name></expr></argument>, <argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>AppendOnlyVisimapStore_Store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>hash_search</name></expr></argument>, <argument><expr><name>hashp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>hash_search</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>hash_search</name></expr></argument>, <argument><expr><name>keyPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>hash_search</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>hash_search</name></expr></argument>, <argument><expr><name>foundPtr</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>hash_search</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>hash_destroy</name></expr></argument>, <argument><expr><name>hashp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>hash_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>BufFileClose</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>BufFileClose</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>hash_get_num_entries</name></expr></argument>, <argument><expr><name>hashp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>hash_get_num_entries</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>AppendOnlyVisimapDelete_Finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>visiMapDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>workFileOffset</name></name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier>		<name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<macro><name>unit_test</name><argument_list>(<argument>test__AppendOnlyVisimapDelete_Finish_outoforder</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
