<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/appendonly/test/aomd_filehandler_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/aomd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/appendonlytid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/appendonlywriter.h"</cpp:file></cpp:include>

<comment type="block">/*
 * ACHTUNG  This module is trickier than you might initially have expected
 *  because not all combinations of present files are in fact valid GPDB
 *  ao tables.  See the comment in ao_foreach_extent_file() to understand
 *  what valid combinations are.  We do NOT attempt to test invalid
 *  combinations here as that is a higher-level test than this unit test.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SEGNO_FILES</name></cpp:macro> <cpp:value>(MAX_AOREL_CONCURRENCY * MaxHeapAttributeNumber)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>bool</name></type> <name><name>present</name><index>[<expr><name>MAX_SEGNO_FILES</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>call_result</name><index>[<expr><name>MAX_SEGNO_FILES</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>call_expected</name><index>[<expr><name>MAX_SEGNO_FILES</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>num_called</name></decl>;</decl_stmt>
}</block></struct></type> <name>aomd_filehandler_callback_ctx</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup_test_structures</name><parameter_list>(<parameter><decl><type><name>aomd_filehandler_callback_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>present</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>present</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>call_result</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>call_result</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>call_expected</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>call_expected</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_called</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* these files get checked for presence in the foreach() */</comment>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>call_expected</name><index>[<expr><name>AOTupleId_MultiplierSegmentFileNum</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>segno</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>segno</name> <operator>&lt;</operator> <name>MAX_AOREL_CONCURRENCY</name></expr>;</condition> <incr><expr><name>segno</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>call_expected</name><index>[<expr><name>segno</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/*
 * This is meant to be called in sorted order from lowest segno to
 *  highest segno.  Since [.0,.127] is called by foreach(), we need
 *  not set call_expected on the called in segno, just the next one.
 *  This is because, for instance, .129 can only be called if .1 is present.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_ctx_for_present_file</name><parameter_list>(<parameter><decl><type><name>aomd_filehandler_callback_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>present</name><index>[<expr><name>segno</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>segno</name> <operator>&lt;</operator> <operator>(</operator><name>MAX_SEGNO_FILES</name> <operator>-</operator> <name>MAX_AOREL_CONCURRENCY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>call_expected</name><index>[<expr><name>segno</name> <operator>+</operator> <name>MAX_AOREL_CONCURRENCY</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compareSegnoFiles</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>numDiffer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>printedOneDiff</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We had two choices for the initialization value of segno:
	 *   A). 0 since ao tables have a 0 segno file
	 *   B). 1 since the foreach() function we are testing here does not
	 *              actually touch segno 0.
	 * We opt for A). since callers of foreach() need to handle that case
	 *  properly, so we want our tests to model that.
	 */</comment>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>segno</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>segno</name><operator>&lt;</operator><name>MAX_SEGNO_FILES</name></expr>;</condition><incr><expr><name>segno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>expected</name><index>[<expr><name>segno</name></expr>]</index></name> <operator>!=</operator> <name><name>result</name><index>[<expr><name>segno</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>numDiffer</name><operator>++</operator></expr>;</expr_stmt>
			<comment type="block">/* print only the first error to avoid printing thousands of them */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>printedOneDiff</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>printedOneDiff</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>print_error</name><argument_list>(<argument><expr><literal type="string">"MISMATCH for segno: %ld expected: %d got: %d (%s)\n"</literal></expr></argument>,
							<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>segno</name></expr></argument>, <argument><expr><name><name>expected</name><index>[<expr><name>segno</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><name>segno</name></expr>]</index></name></expr></argument>,
							<argument><expr><ternary><condition><expr><name><name>result</name><index>[<expr><name>segno</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"called but should not have been"</literal></expr> </then><else>:
							<expr><literal type="string">"not called but should have been"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>numDiffer</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>file_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>segno</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>aomd_filehandler_callback_ctx</name> <modifier>*</modifier></type><name>myctx</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>segno</name> <operator>&lt;</operator> <name>MAX_SEGNO_FILES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>myctx</name><operator>-&gt;</operator><name>num_called</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>myctx</name><operator>-&gt;</operator><name>call_result</name><index>[<expr><name>segno</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<return>return <expr><name><name>myctx</name><operator>-&gt;</operator><name>present</name><index>[<expr><name>segno</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_no_files_present</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>aomd_filehandler_callback_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setup_test_structures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ao_foreach_extent_file</name><argument_list>(<argument><expr><name>file_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>num_called</name></name></expr></argument>, <argument><expr><name>MAX_AOREL_CONCURRENCY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><call><name>compareSegnoFiles</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>call_expected</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>call_result</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* concurrency = 1 num_columns = 1 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_co_1_column_1_concurrency</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>aomd_filehandler_callback_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setup_test_structures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>set_ctx_for_present_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>col</name> <operator>*</operator> <name>AOTupleId_MultiplierSegmentFileNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>ao_foreach_extent_file</name><argument_list>(<argument><expr><name>file_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>num_called</name></name></expr></argument>, <argument><expr><name>MAX_AOREL_CONCURRENCY</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><call><name>compareSegnoFiles</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>call_expected</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>call_result</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* concurrency = 1 num_columns = 4 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_co_4_columns_1_concurrency</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>aomd_filehandler_callback_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setup_test_structures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>set_ctx_for_present_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>col</name> <operator>*</operator> <name>AOTupleId_MultiplierSegmentFileNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>ao_foreach_extent_file</name><argument_list>(<argument><expr><name>file_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>num_called</name></name></expr></argument>, <argument><expr><name>MAX_AOREL_CONCURRENCY</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><call><name>compareSegnoFiles</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>call_expected</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>call_result</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* concurrency = 1,5 num_columns = 3 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_co_3_columns_2_concurrency</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>aomd_filehandler_callback_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setup_test_structures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>set_ctx_for_present_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>col</name> <operator>*</operator> <name>AOTupleId_MultiplierSegmentFileNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>set_ctx_for_present_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>+</operator> <name>col</name> <operator>*</operator> <name>AOTupleId_MultiplierSegmentFileNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>ao_foreach_extent_file</name><argument_list>(<argument><expr><name>file_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>num_called</name></name></expr></argument>, <argument><expr><name>MAX_AOREL_CONCURRENCY</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><call><name>compareSegnoFiles</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>call_expected</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>call_result</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* concurrency = [1,127] num_columns = 1 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_co_1_column_127_concurrency</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>aomd_filehandler_callback_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setup_test_structures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>concurrency</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>concurrency</name> <operator>&lt;</operator> <name>MAX_AOREL_CONCURRENCY</name></expr>;</condition> <incr><expr><name>concurrency</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>set_ctx_for_present_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>concurrency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>ao_foreach_extent_file</name><argument_list>(<argument><expr><name>file_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>num_called</name></name></expr></argument>, <argument><expr><name>MAX_AOREL_CONCURRENCY</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><call><name>compareSegnoFiles</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>call_expected</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>call_result</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* concurrency = 0 num_columns = MaxHeapAttributeNumber  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_co_max_columns_0th_concurrency</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>aomd_filehandler_callback_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setup_test_structures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>MaxHeapAttributeNumber</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>set_ctx_for_present_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>col</name> <operator>*</operator> <name>MAX_AOREL_CONCURRENCY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>ao_foreach_extent_file</name><argument_list>(<argument><expr><name>file_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 0th file already acccounted for, hence the -1 */</comment>
    <expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>num_called</name></name></expr></argument>, <argument><expr><operator>(</operator><name>MAX_AOREL_CONCURRENCY</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>MaxHeapAttributeNumber</name> <operator>*</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><call><name>compareSegnoFiles</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>call_expected</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>call_result</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* concurrency = 1 num_columns = (MaxHeapAttributeNumber + 1) */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_co_max_columns_0_1_concurrency</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>aomd_filehandler_callback_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setup_test_structures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>MaxHeapAttributeNumber</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>set_ctx_for_present_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>col</name> <operator>*</operator> <name>MAX_AOREL_CONCURRENCY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>set_ctx_for_present_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>col</name> <operator>*</operator> <name>MAX_AOREL_CONCURRENCY</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>ao_foreach_extent_file</name><argument_list>(<argument><expr><name>file_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 0th file already acccount for, hence the -1 */</comment>
    <expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>num_called</name></name></expr></argument>, <argument><expr><operator>(</operator><name>MAX_AOREL_CONCURRENCY</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>MaxHeapAttributeNumber</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><call><name>compareSegnoFiles</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>call_expected</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>call_result</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_different_number_of_columns_per_concurrency_level</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>aomd_filehandler_callback_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setup_test_structures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>set_ctx_for_present_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_ctx_for_present_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">129</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_ctx_for_present_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_ctx_for_present_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">130</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_ctx_for_present_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">258</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ao_foreach_extent_file</name><argument_list>(<argument><expr><name>file_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>num_called</name></name></expr></argument>, <argument><expr><name>MAX_AOREL_CONCURRENCY</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><call><name>compareSegnoFiles</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>call_expected</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>call_result</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_all_files_present</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>aomd_filehandler_callback_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>setup_test_structures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>present</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>present</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>call_expected</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>call_expected</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>call_expected</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>  <comment type="block">/* caller must deal with .0 file */</comment>
	<expr_stmt><expr><call><name>ao_foreach_extent_file</name><argument_list>(<argument><expr><name>file_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>num_called</name></name></expr></argument>, <argument><expr><name>MAX_SEGNO_FILES</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><call><name>compareSegnoFiles</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>call_expected</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>call_result</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier>		<name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_no_files_present</name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_co_1_column_1_concurrency</name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_co_4_columns_1_concurrency</name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_co_3_columns_2_concurrency</name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_co_1_column_127_concurrency</name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_co_max_columns_0th_concurrency</name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_co_max_columns_0_1_concurrency</name></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_different_number_of_columns_per_concurrency_level</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_all_files_present</name></expr></argument>)</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
