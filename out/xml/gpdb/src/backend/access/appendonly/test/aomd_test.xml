<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/appendonly/test/aomd_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/appendonlywriter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_tablespace.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_TO_DATA_FILE</name></cpp:macro> <cpp:value>"/tmp/md_test/1234"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SEGNO_FILES</name></cpp:macro> <cpp:value>(MAX_AOREL_CONCURRENCY * MaxHeapAttributeNumber)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>file_present</name><index>[<expr><name>MAX_SEGNO_FILES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>num_unlink_called</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>unlink_passing</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup_test_structures</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>num_unlink_called</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>file_present</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>file_present</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>unlink_passing</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *******************************************************************************
 * Mocking access and unlink for unittesting
 *******************************************************************************
 */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>unlink</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unlink</name></cpp:macro> <cpp:value>mock_unlink</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mock_unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u_int</name></type> <name>segfile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* parse the path */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp_path</name> <init>= <expr><name>path</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>PATH_TO_DATA_FILE</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tmp_path</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>segfile</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>tmp_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file_present</name><index>[<expr><name>segfile</name></expr>]</index></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ec</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>num_unlink_called</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	elog(WARNING, "UNLINK %s %d num_times_called=%d unlink_passing %d\n",
		path, segfile, num_unlink_called, unlink_passing);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>ec</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 *******************************************************************************
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../aomd.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__AOSegmentFilePathNameLen</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RelationData</name></type> <name>reldata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>basepath</name> <init>= <expr><literal type="string">"base/21381/123"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <literal type="number">123</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_node</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <name>DEFAULTTABLESPACE_OID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_node</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">21381</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_backend</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type>			<name>r</name> <init>= <expr><call><name>AOSegmentFilePathNameLen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reldata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_in_range</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>basepath</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>basepath</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__FormatAOSegmentFileName</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>basepath</name> <init>= <expr><literal type="string">"base/21381/123"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>fileSegNo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>filepathname</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* seg 0, no columns */</comment>
	<expr_stmt><expr><call><name>FormatAOSegmentFileName</name><argument_list>(<argument><expr><name>basepath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileSegNo</name></expr></argument>, <argument><expr><name>filepathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>filepathname</name></expr></argument>, <argument><expr><literal type="string">"base/21381/123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>fileSegNo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* seg 1, no columns */</comment>
	<expr_stmt><expr><call><name>FormatAOSegmentFileName</name><argument_list>(<argument><expr><name>basepath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileSegNo</name></expr></argument>, <argument><expr><name>filepathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>filepathname</name></expr></argument>, <argument><expr><literal type="string">"base/21381/123.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>fileSegNo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* seg 0, column 1 */</comment>
	<expr_stmt><expr><call><name>FormatAOSegmentFileName</name><argument_list>(<argument><expr><name>basepath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileSegNo</name></expr></argument>, <argument><expr><name>filepathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>filepathname</name></expr></argument>, <argument><expr><literal type="string">"base/21381/123.128"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>fileSegNo</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* seg 1, column 1 */</comment>
	<expr_stmt><expr><call><name>FormatAOSegmentFileName</name><argument_list>(<argument><expr><name>basepath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileSegNo</name></expr></argument>, <argument><expr><name>filepathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>filepathname</name></expr></argument>, <argument><expr><literal type="string">"base/21381/123.129"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>fileSegNo</name></expr></argument>, <argument><expr><literal type="number">129</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* seg 0, column 2 */</comment>
	<expr_stmt><expr><call><name>FormatAOSegmentFileName</name><argument_list>(<argument><expr><name>basepath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileSegNo</name></expr></argument>, <argument><expr><name>filepathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>filepathname</name></expr></argument>, <argument><expr><literal type="string">"base/21381/123.256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>fileSegNo</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__MakeAOSegmentFileName</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>fileSegNo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>filepathname</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RelationData</name></type> <name>reldata</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <literal type="number">123</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_node</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <name>DEFAULTTABLESPACE_OID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_node</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">21381</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reldata</name><operator>.</operator><name>rd_backend</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* seg 0, no columns */</comment>
	<expr_stmt><expr><call><name>MakeAOSegmentFileName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reldata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileSegNo</name></expr></argument>, <argument><expr><name>filepathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>filepathname</name></expr></argument>, <argument><expr><literal type="string">"base/21381/123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>fileSegNo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* seg 1, no columns */</comment>
	<expr_stmt><expr><call><name>MakeAOSegmentFileName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reldata</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileSegNo</name></expr></argument>, <argument><expr><name>filepathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>filepathname</name></expr></argument>, <argument><expr><literal type="string">"base/21381/123.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>fileSegNo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* seg 0, column 1 */</comment>
	<expr_stmt><expr><call><name>MakeAOSegmentFileName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reldata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileSegNo</name></expr></argument>, <argument><expr><name>filepathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>filepathname</name></expr></argument>, <argument><expr><literal type="string">"base/21381/123.128"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>fileSegNo</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* seg 1, column 1 */</comment>
	<expr_stmt><expr><call><name>MakeAOSegmentFileName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reldata</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileSegNo</name></expr></argument>, <argument><expr><name>filepathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>filepathname</name></expr></argument>, <argument><expr><literal type="string">"base/21381/123.129"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>fileSegNo</name></expr></argument>, <argument><expr><literal type="number">129</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* seg 0, column 2 */</comment>
	<expr_stmt><expr><call><name>MakeAOSegmentFileName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reldata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileSegNo</name></expr></argument>, <argument><expr><name>filepathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>filepathname</name></expr></argument>, <argument><expr><literal type="string">"base/21381/123.256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>fileSegNo</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_mdunlink_co_no_file_exists</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>setup_test_structures</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mdunlink_ao</name><argument_list>(<argument><expr><name>PATH_TO_DATA_FILE</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// called 1 time checking column</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>num_unlink_called</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/* concurrency = 1 max_column = 4 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_mdunlink_co_4_columns_1_concurrency</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>setup_test_structures</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* concurrency 1 exists */</comment>
	<expr_stmt><expr><name><name>file_present</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* max column exists */</comment>
	<expr_stmt><expr><name><name>file_present</name><index>[<expr><operator>(</operator><literal type="number">1</literal><operator>*</operator><name>AOTupleId_MultiplierSegmentFileNum</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file_present</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>AOTupleId_MultiplierSegmentFileNum</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file_present</name><index>[<expr><operator>(</operator><literal type="number">3</literal><operator>*</operator><name>AOTupleId_MultiplierSegmentFileNum</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mdunlink_ao</name><argument_list>(<argument><expr><name>PATH_TO_DATA_FILE</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>num_unlink_called</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>unlink_passing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/* concurrency = 1,5 max_column = 3 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_mdunlink_co_3_columns_2_concurrency</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>setup_test_structures</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* concurrency 1,5 exists */</comment>
	<expr_stmt><expr><name><name>file_present</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file_present</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Concurrency 1 files */</comment>
	<expr_stmt><expr><name><name>file_present</name><index>[<expr><operator>(</operator><literal type="number">1</literal><operator>*</operator><name>AOTupleId_MultiplierSegmentFileNum</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file_present</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>AOTupleId_MultiplierSegmentFileNum</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Concurrency 5 files */</comment>
	<expr_stmt><expr><name><name>file_present</name><index>[<expr><operator>(</operator><literal type="number">1</literal><operator>*</operator><name>AOTupleId_MultiplierSegmentFileNum</name><operator>)</operator> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file_present</name><index>[<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>AOTupleId_MultiplierSegmentFileNum</name><operator>)</operator> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mdunlink_ao</name><argument_list>(<argument><expr><name>PATH_TO_DATA_FILE</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>num_unlink_called</name> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>unlink_passing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_mdunlink_co_all_columns_full_concurrency</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>setup_test_structures</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>file_present</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>file_present</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mdunlink_ao</name><argument_list>(<argument><expr><name>PATH_TO_DATA_FILE</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Note num_unlink_called is one less than total files because .0 is NOT unlinked
	 * by mdunlink_ao()
	 */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>num_unlink_called</name> <operator>==</operator> <operator>(</operator><name>MAX_SEGNO_FILES</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>unlink_passing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_mdunlink_co_one_columns_one_concurrency</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>setup_test_structures</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>file_present</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mdunlink_ao</name><argument_list>(<argument><expr><name>PATH_TO_DATA_FILE</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>num_unlink_called</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>unlink_passing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_mdunlink_does_not_unlink_for_init_fork</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>setup_test_structures</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>file_present</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mdunlink_ao</name><argument_list>(<argument><expr><name>PATH_TO_DATA_FILE</name></expr></argument>, <argument><expr><name>INIT_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>num_unlink_called</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>unlink_passing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_mdunlink_co_one_columns_full_concurrency</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>setup_test_structures</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>file_present</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>filenum</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>filenum</name> <operator>&lt;</operator> <name>MAX_AOREL_CONCURRENCY</name></expr>;</condition> <incr><expr><name>filenum</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>file_present</name><index>[<expr><name>filenum</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>mdunlink_ao</name><argument_list>(<argument><expr><name>PATH_TO_DATA_FILE</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>num_unlink_called</name> <operator>==</operator> <operator>(</operator><name>MAX_AOREL_CONCURRENCY</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>unlink_passing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier>		<name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__AOSegmentFilePathNameLen</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__FormatAOSegmentFileName</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__MakeAOSegmentFileName</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_mdunlink_co_one_columns_full_concurrency</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_mdunlink_co_one_columns_one_concurrency</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_mdunlink_co_all_columns_full_concurrency</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_mdunlink_co_3_columns_2_concurrency</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_mdunlink_co_4_columns_1_concurrency</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_mdunlink_does_not_unlink_for_init_fork</name></expr></argument>)</argument_list></call></expr>,
		<macro><name>unit_test</name><argument_list>(<argument>test_mdunlink_co_no_file_exists</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
