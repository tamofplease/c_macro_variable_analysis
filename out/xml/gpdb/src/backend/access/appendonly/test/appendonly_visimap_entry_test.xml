<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/appendonly/test/appendonly_visimap_entry_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/appendonlytid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../appendonly_visimap_entry.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__AppendOnlyVisimapEntry_GetFirstRowNum</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>expected</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemPointerData</name></type> <name>fake_ctid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AOTupleId</name>  <modifier>*</modifier></type><name>tupleId</name> <init>= <expr><operator>(</operator><name>AOTupleId</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>fake_ctid</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* 5 is less than APPENDONLY_VISIMAP_MAX_RANGE so should get 0 */</comment>
	<expr_stmt><expr><call><name>AOTupleIdInit</name><argument_list>(<argument><expr><name>tupleId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>expected</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>AppendOnlyVisimapEntry_GetFirstRowNum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* test to make sure we can go above INT32_MAX */</comment>
	<expr_stmt><expr><call><name>AOTupleIdInit</name><argument_list>(<argument><expr><name>tupleId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>expected</name> <operator>=</operator> <literal type="number">2999975936</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>AppendOnlyVisimapEntry_GetFirstRowNum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__AppendOnlyVisimapEntry_CoversTuple</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemPointerData</name></type> <name>fake_ctid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AOTupleId</name>  <modifier>*</modifier></type><name>tupleId</name> <init>= <expr><operator>(</operator><name>AOTupleId</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>fake_ctid</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AOTupleIdInit</name><argument_list>(<argument><expr><name>tupleId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>AppendOnlyVisimapEntry</name><modifier>*</modifier></type> <name>visiMapEntry</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AppendOnlyVisimapEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>

	<comment type="block">/* Check to see if we have an invalid AppendOnlyVisimapEntry. */</comment>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>segmentFileNum</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name> <operator>=</operator> <literal type="number">32768</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>AppendOnlyVisimapEntry_CoversTuple</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>, <argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check to see if we have mismatched segment file numbers. */</comment>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>segmentFileNum</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>AppendOnlyVisimapEntry_CoversTuple</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>, <argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Tuple not covered by visimap entry. */</comment>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>segmentFileNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>AppendOnlyVisimapEntry_CoversTuple</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>, <argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Tuple is covered by visimap entry. */</comment>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>AppendOnlyVisimapEntry_CoversTuple</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>, <argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Tuple is covered by visimap entry above INT32_MAX row number. */</comment>
	<expr_stmt><expr><call><name>AOTupleIdInit</name><argument_list>(<argument><expr><name>tupleId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name> <operator>=</operator> <literal type="number">2999975936</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>AppendOnlyVisimapEntry_CoversTuple</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>, <argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier>		<name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__AppendOnlyVisimapEntry_GetFirstRowNum</name></expr></argument>)</argument_list></call></expr>,
		<macro><name>unit_test</name><argument_list>(<argument>test__AppendOnlyVisimapEntry_CoversTuple</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
