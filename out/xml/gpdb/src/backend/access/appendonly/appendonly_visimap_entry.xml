<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/appendonly/appendonly_visimap_entry.c"><comment type="block">/*------------------------------------------------------------------------------
 *
 * appendonly_visimap
 *   maintain a visibility bitmap entry
 *
 * Copyright (c) 2013-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/access/appendonly/appendonly_visimap_entry.c
 *
 *------------------------------------------------------------------------------
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/appendonly_visimap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlyblockdirectory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/bitstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/bitmap_compression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/aovisimap.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Frees the data allocated by the visimap entry.
 *
 * No other function should be called on the visibility map entry
 * after this function has been called.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyVisimapEntry_Finish</name><parameter_list>(<parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Inits the visimap entry data structure.
 *
 * Assumes a zero-allocated visimap entry data structure.
 *
 * Until appendonly_visimap_copyout or appendonly_visimap_clear is called,
 * the data structure is not usable for visibility checks or updates.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyVisimapEntry_Init</name><parameter_list>(
							<parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>,
							<parameter><decl><type><name>MemoryContext</name></type> <name>memoryContext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>APPENDONLY_VISIMAP_DATA_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>segmentFileNum</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>memoryContext</name></name> <operator>=</operator> <name>memoryContext</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Resets the visibility map data structure.
 *
 * It puts the entry into the identical state as after a
 * call to AppendOnlyVisimapEntry_Init.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyVisimapEntry_Reset</name><parameter_list>(<parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>segmentFileNum</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initializes a previously unused entry that covers the given tuple id.
 * The tuple is not marked as updated as no state has been changed yet.
 *
 * Note that the firstRowNum is not the rowNum of the tuple id.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyVisimapEntry_New</name><parameter_list>(<parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>,
						   <parameter><decl><type><name>AOTupleId</name> <modifier>*</modifier></type><name>tupleId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>visiMapEntry</name><operator>-&gt;</operator><name>dirty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>segmentFileNum</name></name> <operator>=</operator> <call><name>AOTupleIdGet_segmentFileNum</name><argument_list>(<argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name> <operator>=</operator> <call><name>AppendOnlyVisimapEntry_GetFirstRowNum</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>,
																	  <argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ItemPointerSetInvalid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>visiMapEntry</name><operator>-&gt;</operator><name>tupleTid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_visimap</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"Append-only visi map entry: New entry "</literal>
		   <literal type="string">"(segNum, firstRowNum) = (%u, "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
		   <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>segmentFileNum</name></name></expr></argument>,
		   <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>AppendOnlyVisimap_GetAttrNotNull</name><parameter_list>(<parameter><decl><type><name>HeapTuple</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>td</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isNull</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"got invalid value: NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>AppendOnlyVisiMapEnty_ReadData</name><parameter_list>(<parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>newWordCount</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name> <operator>==</operator> <name><name>visiMapEntry</name><operator>-&gt;</operator><name>memoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>BitmapDecompressState</name></type> <name>decompressState</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>BitmapDecompress_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decompressState</name></expr></argument>,
						  <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
						  <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>BitmapDecompress_HasError</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decompressState</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"error occurred during visimap bitmap decompression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * After we free visiMapEntry-&gt;bitmap, In gpdb4 before resetting to a new value,
	 * Some error may be thrown out (e.g. palloc fail), then when we catch this error in
	 * PostgresMain we will rollback the transaction by AbortCurrentTransaction, then call 
	 * PortalCleanup--&gt;ExecutorEnd to close resource, In AppendOnlyVisimapEntry_Finish
	 * visiMapEntry-&gt;bitmap is not null, we free it the second time.
	 * However, Since gpdb5 PortalCleanup logic is refactored, do not have this issue,
	 * but I think it is reasonable to set it to NULLL to avoid similar issues.
	 */</comment>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>newWordCount</name> <operator>=</operator>
		<call><name>BitmapDecompress_GetBlockCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decompressState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>newWordCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>Bitmapset</name></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call> <operator>+</operator>
									   <operator>(</operator><name>newWordCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bitmapword</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name><operator>-&gt;</operator><name>nwords</name></name> <operator>=</operator> <name>newWordCount</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BitmapDecompress_Decompress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decompressState</name></expr></argument>,
									<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name><operator>-&gt;</operator><name>words</name></name></expr></argument>,
									<argument><expr><name>newWordCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>newWordCount</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			 <argument><expr><literal type="string">"illegal visimap block count: visimap block count %d"</literal></expr></argument>, <argument><expr><name>newWordCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<comment type="block">/*
 * Reads the visibility information from a aovisimap tuple.
 *
 * Should only be called with values and nulls provides
 * by a successful read from the aovisimap table using
 * an AppendOnlyVisimapIndex data structure.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyVisimapEntry_Copyout</name><parameter_list>(
							   <parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>,
							   <parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>,
							   <parameter><decl><type><name>TupleDesc</name></type> <name>tupleDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>detoast_value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>dataSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isNull</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>visiMapEntry</name><operator>-&gt;</operator><name>dirty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tupleDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>visiMapEntry</name><operator>-&gt;</operator><name>dirty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* entry should not contain dirty data */</comment>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>AppendOnlyVisimap_GetAttrNotNull</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>Anum_pg_aovisimap_segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>segmentFileNum</name></name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>AppendOnlyVisimap_GetAttrNotNull</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>Anum_pg_aovisimap_firstrownum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_visimap</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"Append-only visi map entry: copy out: "</literal>
		   <literal type="string">"segNo %u firstRowNum "</literal> <name>INT64_FORMAT</name></expr></argument>,
		   <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>segmentFileNum</name></name></expr></argument>,
		   <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>Anum_pg_aovisimap_visimap</name></expr></argument>, <argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * when the visimap data is NULL, all entries are visible.
		 */</comment>
		<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator>struct <name>varlena</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>detoast_value</name> <operator>=</operator> <call><name>pg_detoast_datum</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>memoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Reuse the data buffer if possible */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>APPENDONLY_VISIMAP_DATA_BUFFER_SIZE</name> <operator>&gt;=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>detoast_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>detoast_value</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>detoast_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>dataSize</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>detoast_value</name></expr></argument>)</argument_list></call> <operator>-</operator>
			<call><name>offsetof</name><argument_list>(<argument><expr><name>AppendOnlyVisimapData</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>AppendOnlyVisiMapEnty_ReadData</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>detoast_value</name> <operator>!=</operator> <name>value</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>detoast_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>detoast_value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Returns the hidden tuple count value from a visimap entry heap tuple.
 *
 */</comment>
<function><type><name>int64</name></type>
<name>AppendOnlyVisimapEntry_GetHiddenTupleCount</name><parameter_list>(
										   <parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>bms_num_members</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>AppendOnlyVisimapEntry_WriteData</name><parameter_list>(<parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>bitmapSize</name></decl>,
				<decl><type ref="prev"/><name>compressedBitmapSize</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name> <operator>==</operator> <name><name>visiMapEntry</name><operator>-&gt;</operator><name>memoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>AppendOnlyVisimapEntry_IsValid</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>bitmapSize</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name><operator>-&gt;</operator><name>nwords</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bitmapword</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>bitmapSize</name> <operator>+=</operator> <name>BITMAP_COMPRESSION_HEADER_SIZE</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>APPENDONLY_VISIMAP_DATA_BUFFER_SIZE</name> <operator>&gt;=</operator> <name>bitmapSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>compressedBitmapSize</name> <operator>=</operator> <call><name>Bitmap_Compress</name><argument_list>(<argument><expr><name>BITMAP_COMPRESSION_TYPE_DEFAULT</name></expr></argument>,
										   <argument><expr><operator>(</operator><ternary><condition><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr> ?</condition><then> <expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name><operator>-&gt;</operator><name>words</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></argument>,
										   <argument><expr><operator>(</operator><ternary><condition><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr> ?</condition><then> <expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name><operator>-&gt;</operator><name>nwords</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,
										   <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
										   <argument><expr><name>bitmapSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>compressedBitmapSize</name> <operator>&gt;=</operator> <name>BITMAP_COMPRESSION_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
				<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AppendOnlyVisimapData</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>compressedBitmapSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Persist the entry information to heap tuple value/nulls.
 * Should only be called after a call to AppendOnlyVisimapEntry_copyout
 * or AppendOnlyVisimapEntry_clear.
 *
 * May be called when visimap entry is not updated. However, that is usually
 * wasteful.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyVisimapEntry_Write</name><parameter_list>(
							 <parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>,
							 <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>,
							 <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>AppendOnlyVisimapEntry_IsValid</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_visimap</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"Append-only visi map entry: write (segno, firstRowNum) = "</literal>
		   <literal type="string">"(%d, "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
		   <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>segmentFileNum</name></name></expr></argument>, <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_aovisimap_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>segmentFileNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>Anum_pg_aovisimap_segno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_aovisimap_firstrownum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>Anum_pg_aovisimap_firstrownum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>bms_is_empty</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>Anum_pg_aovisimap_visimap</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>Anum_pg_aovisimap_visimap</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>memoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>AppendOnlyVisimapEntry_WriteData</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_aovisimap_visimap</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Returns true iff all entries in the visimap entry are visible.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>AppendOnlyVisimapEntry_AreAllVisible</name><parameter_list>(
									 <parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>AppendOnlyVisimapEntry_IsValid</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>bms_is_empty</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Helper function to get the rownum offset (from the beginning of the
 * visibility map entry).
 *
 * Assumes that the current visibility map entry covers the row number.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>AppendOnlyVisimapEntry_GetRownumOffset</name><parameter_list>(
									   <parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>,
									   <parameter><decl><type><name>int64</name></type> <name>rowNum</name></decl></parameter>,
									   <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>rowNumOffset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rowNum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rowNumOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>AppendOnlyVisimapEntry_IsValid</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>rowNumOffset</name> <operator>=</operator> <name>rowNum</name> <operator>-</operator> <name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rowNumOffset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Returns true iff the current visibility map entry covers
 * the tuple id.
 *
 * Should only be called with a initialized, not-finished visi map entry.
 *
 * May be called before AppendOnlyVisimapEntry_Copyout or
 * AppendOnlyVisimapEntry_New. In this case, the visimap entry
 * does not cover the tuple.
 */</comment>
<function><type><name>bool</name></type>
<name>AppendOnlyVisimapEntry_CoversTuple</name><parameter_list>(
								   <parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>,
								   <parameter><decl><type><name>AOTupleId</name> <modifier>*</modifier></type><name>tupleId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>			<name>rowNum</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AppendOnlyVisimapEntry_IsValid</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>segmentFileNum</name></name> <operator>!=</operator>
		<call><name>AOTupleIdGet_segmentFileNum</name><argument_list>(<argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rowNum</name> <operator>=</operator> <call><name>AOTupleIdGet_rowNum</name><argument_list>(<argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name> <operator>&lt;=</operator> <name>rowNum</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name> <operator>+</operator> <name>APPENDONLY_VISIMAP_MAX_RANGE</name><operator>)</operator> <operator>&gt;</operator> <name>rowNum</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns the matching first row number of a given
 * AO tuple id.
 */</comment>
<function><type><name>int64</name></type>
<name>AppendOnlyVisimapEntry_GetFirstRowNum</name><parameter_list>(
									  <parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>,
									  <parameter><decl><type><name>AOTupleId</name> <modifier>*</modifier></type><name>tupleId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>visiMapEntry</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int64</name></type>			<name>rowNum</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rowNum</name> <operator>=</operator> <call><name>AOTupleIdGet_rowNum</name><argument_list>(<argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>rowNum</name> <operator>/</operator> <name>APPENDONLY_VISIMAP_MAX_RANGE</name><operator>)</operator> <operator>*</operator> <name>APPENDONLY_VISIMAP_MAX_RANGE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Checks if a row is visible (according to the bitmap).
 *
 * Should only be called after a call to AppendOnlyVisimapEntry_Copyout or
 * AppendOnlyVisimapEntry_New.
 * Should only be called if current visimap entry covers the tuple id.
 *
 * The final visibility also depends on other information, e.g. if the
 * original transaction has been aborted. Such information is
 * not stored in the visimap.
 */</comment>
<function><type><name>bool</name></type>
<name>AppendOnlyVisimapEntry_IsVisible</name><parameter_list>(
								 <parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>,
								 <parameter><decl><type><name>AOTupleId</name> <modifier>*</modifier></type><name>tupleId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>rowNum</name></decl>,
				<decl><type ref="prev"/><name>rowNumOffset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>visibilityBit</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>AppendOnlyVisimapEntry_IsValid</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>AppendOnlyVisimapEntry_CoversTuple</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>, <argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rowNum</name> <operator>=</operator> <call><name>AOTupleIdGet_rowNum</name><argument_list>(<argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_visimap</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"Append-only visi map entry: Check row visibility: "</literal>
		   <literal type="string">"firstRowNum "</literal> <name>INT64_FORMAT</name> <literal type="string">", rowNum "</literal> <name>INT64_FORMAT</name></expr></argument>,
		   <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>AppendOnlyVisimapEntry_AreAllVisible</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_visimap</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
			   <argument><expr><literal type="string">"Append-only visi map entry: All entries are visibile: "</literal>
			   <literal type="string">"(firstRowNum, rowNum) = ("</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
			   <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rowNum</name> <operator>&gt;=</operator> <name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rowNumOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AppendOnlyVisimapEntry_GetRownumOffset</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>,
										   <argument><expr><name>rowNum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rowNumOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>visibilityBit</name> <operator>=</operator> <operator>!</operator><call><name>bms_is_member</name><argument_list>(<argument><expr><name>rowNumOffset</name></expr></argument>,
								   <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_visimap</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"Append-only visi map entry: (firstRowNum, rowNum, visible) = "</literal>
		   <literal type="string">"("</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal> <name>INT64_FORMAT</name> <literal type="string">", %d)"</literal></expr></argument>,
		   <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>visibilityBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>visibilityBit</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * The minimal size (in uint32's elements) the entry array needs to have to
 * cover the given offset
 */</comment>
<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>AppendOnlyVisimapEntry_GetMinimalSizeToCover</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>minSize</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>minSize</name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>/</operator> <name>BITS_PER_BITMAPWORD</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* Round up to the nearest multiple of two */</comment>
	<expr_stmt><expr><name>minSize</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>minSize</name> <operator>|=</operator> <name>minSize</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>minSize</name> <operator>|=</operator> <name>minSize</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>minSize</name> <operator>|=</operator> <name>minSize</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>minSize</name> <operator>|=</operator> <name>minSize</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>minSize</name> <operator>|=</operator> <name>minSize</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>minSize</name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>minSize</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Hides the given tuple id in the bitmap.
 *
 * Should only be called if the current entry covers the tuple id.
 *
 * This function is only modifying the bitmap. The caller needs to take
 * care that change is persisted.
 */</comment>
<function><type><name>TM_Result</name></type>
<name>AppendOnlyVisimapEntry_HideTuple</name><parameter_list>(<parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>,
								 <parameter><decl><type><name>AOTupleId</name> <modifier>*</modifier></type><name>tupleId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>rowNum</name></decl>,
				<decl><type ref="prev"/><name>rowNumOffset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TM_Result</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>AppendOnlyVisimapEntry_IsValid</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>AppendOnlyVisimapEntry_CoversTuple</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>, <argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rowNum</name> <operator>=</operator> <call><name>AOTupleIdGet_rowNum</name><argument_list>(<argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_visimap</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"Append-only visi map entry: Hide tuple: "</literal>
		   <literal type="string">"firstRowNum "</literal> <name>INT64_FORMAT</name> <literal type="string">", rowNum "</literal> <name>INT64_FORMAT</name></expr></argument>,
		   <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rowNumOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AppendOnlyVisimapEntry_GetRownumOffset</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>,
										   <argument><expr><name>rowNum</name></expr></argument>,
										   <argument><expr><operator>&amp;</operator><name>rowNumOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>memoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * enlarge the bitmap by a power of two. this avoids the O(n*n) resizing
	 * policy of the original bitmap set
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bms_covers_member</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>rowNumOffset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator>
			<call><name>bms_resize</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>,
					   <argument><expr><call><name>AppendOnlyVisimapEntry_GetMinimalSizeToCover</name><argument_list>(<argument><expr><name>rowNumOffset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bms_is_member</name><argument_list>(<argument><expr><name>rowNumOffset</name></expr></argument>, <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>rowNumOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TM_Ok</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* The bit was already set and it was this command */</comment>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TM_SelfModified</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* The bit was already set before */</comment>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TM_Updated</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Returns true iff the visi map entry needs to be persisted.
 */</comment>
<function><type><name>bool</name></type>
<name>AppendOnlyVisimapEntry_HasChanged</name><parameter_list>(
								  <parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>dirty</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns true iff the entry contains valid data.
 * That is either CopyOut or New has been called.
 */</comment>
<function><type><name>bool</name></type>
<name>AppendOnlyVisimapEntry_IsValid</name><parameter_list>(
							   <parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name><name>visiMapEntry</name><operator>-&gt;</operator><name>segmentFileNum</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return the next invisible tuple id in the given visibility map.
 */</comment>
<function><type><name>bool</name></type>
<name>AppendOnlyVisimapEntry_GetNextInvisible</name><parameter_list>(
										<parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>,
										<parameter><decl><type><name>AOTupleId</name> <modifier>*</modifier></type><name>tupleId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>currentBitmapOffset</name></decl>,
				<decl><type ref="prev"/><name>rowNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>offset</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>AppendOnlyVisimapEntry_IsValid</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>currentBitmapOffset</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>	<comment type="block">/* before the first */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>AppendOnlyVisimapEntry_CoversTuple</name><argument_list>(
										   <argument><expr><name>visiMapEntry</name></expr></argument>, <argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>AppendOnlyVisimapEntry_GetRownumOffset</name><argument_list>(
											   <argument><expr><name>visiMapEntry</name></expr></argument>,
											   <argument><expr><call><name>AOTupleIdGet_rowNum</name><argument_list>(<argument><expr><name>tupleId</name></expr></argument>)</argument_list></call></expr></argument>,
											   <argument><expr><operator>&amp;</operator><name>currentBitmapOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>bms_next_member</name><argument_list>(<argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>,
							 <argument><expr><name>currentBitmapOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>rowNum</name> <operator>=</operator> <name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>AOTupleIdInit</name><argument_list>(<argument><expr><name>tupleId</name></expr></argument>, <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>segmentFileNum</name></name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
