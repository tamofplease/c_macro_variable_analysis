<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/appendonly/appendonly_visimap_store.c"><comment type="block">/*------------------------------------------------------------------------------
 *
 * appendonly_visimap
 *   maintain a visibility bitmap for all rows in a
 *   minipage.
 *
 * Copyright (c) 2013-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/access/appendonly/appendonly_visimap_store.c
 *
 *------------------------------------------------------------------------------
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/aovisimap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/appendonly_visimap_store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_oper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPENDONLY_VISIMAP_INDEX_SCAN_KEY_NUM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<comment type="block">/*
 * Frees the data allocated by the visimap store
 *
 * No function using the visibility map store should be called
 * after this function call.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyVisimapStore_Finish</name><parameter_list>(<parameter><decl><type><name>AppendOnlyVisimapStore</name> <modifier>*</modifier></type><name>visiMapStore</name></decl></parameter>,
							  <parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>scanKeys</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>scanKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>scanKeys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>UnregisterSnapshot</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>index_close</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapIndex</name></name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapRelation</name></name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Inits the visimap store.
 * The store is ready for usage after this function call.
 *
 * Assumes a zero-allocated visimap store data structure.
 * Assumes that the visimap memory context is active.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyVisimapStore_Init</name><parameter_list>(<parameter><decl><type><name>AppendOnlyVisimapStore</name> <modifier>*</modifier></type><name>visiMapStore</name></decl></parameter>,
							<parameter><decl><type><name>Oid</name></type> <name>visimapRelid</name></decl></parameter>,
							<parameter><decl><type><name>Oid</name></type> <name>visimapIdxid</name></decl></parameter>,
							<parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>,
							<parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>,
							<parameter><decl><type><name>MemoryContext</name></type> <name>memoryContext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>heapTupleDesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKey</name></type>		<name>scanKey</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name> <operator>==</operator> <name>memoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>visimapRelid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>visimapIdxid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <call><name>RegisterSnapshot</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>memoryContext</name></name> <operator>=</operator> <name>memoryContext</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapRelation</name></name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>visimapRelid</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapIndex</name></name> <operator>=</operator> <call><name>index_open</name><argument_list>(<argument><expr><name>visimapIdxid</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>heapTupleDesc</name> <operator>=</operator>
		<call><name>RelationGetDescr</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapRelation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>heapTupleDesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>==</operator> <name>Natts_pg_aovisimap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>scanKeys</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ScanKeyData</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>APPENDONLY_VISIMAP_INDEX_SCAN_KEY_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* scan key: segno */</comment>
	<expr_stmt><expr><name>scanKey</name> <operator>=</operator> <name><name>visiMapStore</name><operator>-&gt;</operator><name>scanKeys</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><name>scanKey</name></expr></argument>,
				<argument><expr><name>Anum_pg_aovisimap_segno</name></expr></argument>,	<comment type="block">/* segno */</comment>
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* scan key: firstRowNum */</comment>
	<expr_stmt><expr><name>scanKey</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><name>scanKey</name></expr></argument>,
				<argument><expr><name>Anum_pg_aovisimap_firstrownum</name></expr></argument>,	<comment type="block">/* attribute number to scan */</comment>
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,	<comment type="block">/* strategy */</comment>
				<argument><expr><name>F_INT8EQ</name></expr></argument>,		<comment type="block">/* reg proc to use */</comment>
				<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Stores the visibility map entry.
 *
 * The entry/tuple is invalidated after this function call.
 *
 * Assumes that a valid visimap entry is passed.
 * Assumes that the entry corresponds to the latest tuple
 * returned by AppendOnlyVisimapStore_find.
 *
 * Should not be called twice in the same command.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyVisimapStore_Store</name><parameter_list>(
							 <parameter><decl><type><name>AppendOnlyVisimapStore</name> <modifier>*</modifier></type><name>visiMapStore</name></decl></parameter>,
							 <parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>visimapRelation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>heapTupleDesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>Natts_pg_aovisimap</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><name>Natts_pg_aovisimap</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_visimap</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"Append-only visi map store: Store visimap entry: "</literal>
		   <literal type="string">"(segFileNum, firstRowNum) = (%u, "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
		   <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>segmentFileNum</name></name></expr></argument>, <argument><expr><name><name>visiMapEntry</name><operator>-&gt;</operator><name>firstRowNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>memoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>AppendOnlyVisimapEntry_Write</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>, <argument><expr><name>values</name></expr></argument>,
								 <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>visimapRelation</name> <operator>=</operator> <name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapRelation</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>heapTupleDesc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>visimapRelation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>heapTupleDesc</name></expr></argument>,
							<argument><expr><name>values</name></expr></argument>,
							<argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Write out the visimap entry to the relation. If this visimap entry
	 * already in the relation, we update the row. Otherwise, a new row is
	 * inserted.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>ItemPointerIsValid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>visiMapEntry</name><operator>-&gt;</operator><name>tupleTid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>CatalogTupleUpdate</name><argument_list>(<argument><expr><name>visimapRelation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>visiMapEntry</name><operator>-&gt;</operator><name>tupleTid</name></name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>CatalogTupleInsert</name><argument_list>(<argument><expr><name>visimapRelation</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Invalidate the data after storing it. */</comment>
	<expr_stmt><expr><call><name>ItemPointerSetInvalid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>visiMapEntry</name><operator>-&gt;</operator><name>tupleTid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Finds the visibility map entry tuple for a given
 * segmentFileNum and firstRowNum.
 *
 * Note: The firstRowNum needs to be a valid firstRowNum. It is
 * especially not the tuple id of the append-only tuple checked, updated,
 * or deleted.
 *
 * Returns true if there is such a tuple and
 * the tuple is used as current tuple.
 * Otherwise false is returned.
 *
 * Assumes that the store data structure has been initialized, but not finished.
 */</comment>
<function><type><name>bool</name></type>
<name>AppendOnlyVisimapStore_Find</name><parameter_list>(<parameter><decl><type><name>AppendOnlyVisimapStore</name> <modifier>*</modifier></type><name>visiMapStore</name></decl></parameter>,
							<parameter><decl><type><name>int32</name></type> <name>segmentFileNum</name></decl></parameter>,
							<parameter><decl><type><name>int64</name></type> <name>firstRowNum</name></decl></parameter>,
							<parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKey</name></type>		<name>scanKeys</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>indexScan</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapRelation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapIndex</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_visimap</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"Append-only visi map store: Load entry: "</literal>
		   <literal type="string">"(segFileNum, firstRowNum) = (%u, "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
		   <argument><expr><name>segmentFileNum</name></expr></argument>, <argument><expr><name>firstRowNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>scanKeys</name> <operator>=</operator> <name><name>visiMapStore</name><operator>-&gt;</operator><name>scanKeys</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scanKeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sk_argument</name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>segmentFileNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scanKeys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sk_argument</name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>firstRowNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>indexScan</name> <operator>=</operator> <call><name>AppendOnlyVisimapStore_BeginScan</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>,
												 <argument><expr><name>APPENDONLY_VISIMAP_INDEX_SCAN_KEY_NUM</name></expr></argument>,
												 <argument><expr><name>scanKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AppendOnlyVisimapStore_GetNext</name><argument_list>(
										<argument><expr><name>visiMapStore</name></expr></argument>,
										<argument><expr><name>indexScan</name></expr></argument>,
										<argument><expr><name>BackwardScanDirection</name></expr></argument>,
										<argument><expr><name>visiMapEntry</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name><name>visiMapEntry</name><operator>-&gt;</operator><name>tupleTid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_visimap</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
			   <argument><expr><literal type="string">"Append-only visi map store: Visimap entry does not exist: "</literal>
			   <literal type="string">"(segFileNum, firstRowNum) = (%u, "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
			   <argument><expr><name>segmentFileNum</name></expr></argument>, <argument><expr><name>firstRowNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* failed to lookup row */</comment>
		<expr_stmt><expr><call><name>AppendOnlyVisimapStore_EndScan</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>, <argument><expr><name>indexScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>AppendOnlyVisimapStore_EndScan</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>, <argument><expr><name>indexScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Fetches the next entry from a visimap store index scan.
 *
 * It is the responsibility of the caller to decode the return value
 * correctly.
 *
 */</comment>
<function><type><specifier>static</specifier> <name>HeapTuple</name></type>
<name>AppendOnlyVisimapStore_GetNextTuple</name><parameter_list>(<parameter><decl><type><name>AppendOnlyVisimapStore</name> <modifier>*</modifier></type><name>visiMapStore</name></decl></parameter>,
									<parameter><decl><type><name>SysScanDesc</name></type> <name>indexScan</name></decl></parameter>,
									<parameter><decl><type><name>ScanDirection</name></type> <name>scanDirection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapRelation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapIndex</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>indexScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>systable_getnext_ordered</name><argument_list>(<argument><expr><name>indexScan</name></expr></argument>, <argument><expr><name>scanDirection</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<comment type="block">/*
 * Fetches the next entry from a visimap store index scan.
 *
 * Parameter visiMapEntry may be NULL. If it is not NULL and
 * the scan returns an entry, the entry data is copied to the
 * visimapEntry.
 * Parameter tupleTid may be NULL. If it is not NULL and the scan
 * returns an entry, the (heap) tuple id is copied to the parameter.
 */</comment>
<function><type><name>bool</name></type>
<name>AppendOnlyVisimapStore_GetNext</name><parameter_list>(<parameter><decl><type><name>AppendOnlyVisimapStore</name> <modifier>*</modifier></type><name>visiMapStore</name></decl></parameter>,
							   <parameter><decl><type><name>SysScanDesc</name></type> <name>indexScan</name></decl></parameter>,
							   <parameter><decl><type><name>ScanDirection</name></type> <name>scanDirection</name></decl></parameter>,
							   <parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>,
							   <parameter><decl><type><name>ItemPointerData</name> <modifier>*</modifier></type><name>tupleTid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>heapTupleDesc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapRelation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapIndex</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>indexScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>AppendOnlyVisimapStore_GetNextTuple</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>, <argument><expr><name>indexScan</name></expr></argument>, <argument><expr><name>scanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tuple</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>heapTupleDesc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapRelation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>visiMapEntry</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>AppendOnlyVisimapEntry_Copyout</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>,
									   <argument><expr><name>heapTupleDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>tupleTid</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ItemPointerCopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tuple</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>, <argument><expr><name>tupleTid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Deletes all visibility map information from a given
 * segment file.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyVisimapStore_DeleteSegmentFile</name><parameter_list>(<parameter><decl><type><name>AppendOnlyVisimapStore</name> <modifier>*</modifier></type><name>visiMapStore</name></decl></parameter>,
										 <parameter><decl><type><name>int</name></type> <name>segmentFileNum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name>scanKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>indexScan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemPointerData</name></type> <name>tid</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapRelation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapIndex</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_visimap</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"Append-only visi map store: Delete segment file: "</literal>
		   <literal type="string">"(segFileNum) = (%u)"</literal></expr></argument>, <argument><expr><name>segmentFileNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scanKey</name></expr></argument>,
				<argument><expr><name>Anum_pg_aovisimap_segno</name></expr></argument>,	<comment type="block">/* segno */</comment>
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>segmentFileNum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>indexScan</name> <operator>=</operator> <call><name>AppendOnlyVisimapStore_BeginScan</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>,
												 <argument><expr><literal type="number">1</literal></expr></argument>,
												 <argument><expr><operator>&amp;</operator><name>scanKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>AppendOnlyVisimapStore_GetNext</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>,
										  <argument><expr><name>indexScan</name></expr></argument>,
										  <argument><expr><name>ForwardScanDirection</name></expr></argument>,
										  <argument><expr><name>NULL</name></expr></argument>,
										  <argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>CatalogTupleDelete</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapRelation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>AppendOnlyVisimapStore_EndScan</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>, <argument><expr><name>indexScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Returns the number of hidden tuples in a given segment file
 */</comment>
<function><type><name>int64</name></type>
<name>AppendOnlyVisimapStore_GetSegmentFileHiddenTupleCount</name><parameter_list>(<parameter><decl><type><name>AppendOnlyVisimapStore</name> <modifier>*</modifier></type><name>visiMapStore</name></decl></parameter>,
													  <parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>,
													  <parameter><decl><type><name>int</name></type> <name>segmentFileNum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name>scanKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>indexScan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>hiddenTupcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapRelation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapIndex</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scanKey</name></expr></argument>,
				<argument><expr><name>Anum_pg_aovisimap_segno</name></expr></argument>,	<comment type="block">/* segno */</comment>
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>segmentFileNum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>indexScan</name> <operator>=</operator> <call><name>AppendOnlyVisimapStore_BeginScan</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>,
												 <argument><expr><literal type="number">1</literal></expr></argument>,
												 <argument><expr><operator>&amp;</operator><name>scanKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>AppendOnlyVisimapStore_GetNext</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>,
										  <argument><expr><name>indexScan</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>,
										  <argument><expr><name>visiMapEntry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>hiddenTupcount</name> <operator>+=</operator> <call><name>AppendOnlyVisimapEntry_GetHiddenTupleCount</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>AppendOnlyVisimapStore_EndScan</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>, <argument><expr><name>indexScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>hiddenTupcount</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns the number of hidden tuples in a given relation
 */</comment>
<function><type><name>int64</name></type>
<name>AppendOnlyVisimapStore_GetRelationHiddenTupleCount</name><parameter_list>(<parameter><decl><type><name>AppendOnlyVisimapStore</name> <modifier>*</modifier></type><name>visiMapStore</name></decl></parameter>,
												   <parameter><decl><type><name>AppendOnlyVisimapEntry</name> <modifier>*</modifier></type><name>visiMapEntry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>indexScan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>hiddenTupcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapRelation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapIndex</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>indexScan</name> <operator>=</operator> <call><name>AppendOnlyVisimapStore_BeginScan</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>,
												 <argument><expr><literal type="number">0</literal></expr></argument>,
												 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>AppendOnlyVisimapStore_GetNext</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>,
										  <argument><expr><name>indexScan</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>,
										  <argument><expr><name>visiMapEntry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>hiddenTupcount</name> <operator>+=</operator> <call><name>AppendOnlyVisimapEntry_GetHiddenTupleCount</name><argument_list>(<argument><expr><name>visiMapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>AppendOnlyVisimapStore_EndScan</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>, <argument><expr><name>indexScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>hiddenTupcount</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Starts a scan over the visimap store.
 *
 * Parameter keys may be NULL iff nkeys is zero.
 */</comment>
<function><type><name>SysScanDesc</name></type>
<name>AppendOnlyVisimapStore_BeginScan</name><parameter_list>(<parameter><decl><type><name>AppendOnlyVisimapStore</name> <modifier>*</modifier></type><name>visiMapStore</name></decl></parameter>,
								 <parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>,
								 <parameter><decl><type><name>ScanKey</name></type> <name>keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapRelation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return  <expr><call><name>systable_beginscan_ordered</name><argument_list>(<argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapRelation</name></name></expr></argument>,
									   <argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>visimapIndex</name></name></expr></argument>,
									   <argument><expr><name><name>visiMapStore</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>,
									   <argument><expr><name>nkeys</name></expr></argument>,
									   <argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Ends a index scan over the visimap store.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyVisimapStore_EndScan</name><parameter_list>(<parameter><decl><type><name>AppendOnlyVisimapStore</name> <modifier>*</modifier></type><name>visiMapStore</name></decl></parameter>,
							   <parameter><decl><type><name>SysScanDesc</name></type> <name>indexScan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>visiMapStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>indexScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>systable_endscan_ordered</name><argument_list>(<argument><expr><name>indexScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
