<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/appendonly/appendonlywriter.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * appendonlywriter.c
 *	  routines for selecting AO segment for inserts.
 *
 *
 * Note: This is also used by AOCS tables.
 *
 * Portions Copyright (c) 2008, Greenplum Inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 * Portions Copyright (c) 1996-2006, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	    src/backend/access/appendonly/appendonlywriter.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/appendonly_compaction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/appendonlytid.h"</cpp:file></cpp:include>		<comment type="block">/* AOTupleId_MaxRowNum  */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/appendonlywriter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/aocssegfiles.h"</cpp:file></cpp:include>		<comment type="block">/* AOCS */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>				<comment type="block">/* heap_open */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_am.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_appendonly.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_authid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pathnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/int8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEGFILE_CAPACITY_THRESHOLD</name></cpp:macro>	<cpp:value>0.9</cpp:value></cpp:define>


<comment type="block">/*
 * Modes of operation for the choose_segno_internal() function.
 */</comment>
<typedef>typedef <type><enum>enum
<block>{
	<comment type="block">/*
	 * Normal mode; select a segment to insert to, for INSERT or COPY.
	 */</comment>
	<decl><name>CHOOSE_MODE_WRITE</name></decl>,

	<comment type="block">/*
	 * Select a segment to insert surviving rows to, when compacting
	 * another segfile in VACUUM.
	 */</comment>
	<decl><name>CHOOSE_MODE_COMPACTION_WRITE</name></decl>,

	<comment type="block">/*
	 * Select next segment to compact.
	 */</comment>
	<decl><name>CHOOSE_MODE_COMPACTION_TARGET</name></decl>
}</block></enum></type> <name>choose_segno_mode</name>;</typedef>

<comment type="block">/*
 * local functions
 */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>choose_segno_internal</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>avoid_segnos</name></decl></parameter>, <parameter><decl><type><name>choose_segno_mode</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>choose_new_segfile</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>used</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>avoid_segnos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_aoseg_fields</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>pg_aoseg_rel</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>,
							 <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>segno</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>tupcount</name></decl></parameter>, <parameter><decl><type><name>int16</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int16</name> <modifier>*</modifier></type><name>formatversion</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * segfileMaxRowThreshold
 *
 * Returns the row count threshold - when a segfile more than this number of
 * rows we don't allow inserting more data into it anymore.
 */</comment>
<function><type><specifier>static</specifier> <name>int64</name></type>
<name>segfileMaxRowThreshold</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>maxallowed</name> <init>= <expr><operator>(</operator><name>int64</name><operator>)</operator> <name>AOTupleId_MaxRowNum</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>maxallowed</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"int64 out of range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>SEGFILE_CAPACITY_THRESHOLD</name> <operator>*</operator> <name>maxallowed</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int32</name></type>		<name>segno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemPointerData</name></type> <name>ctid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type>		<name>tupcount</name></decl>;</decl_stmt>
}</block></struct></type> <name>candidate_segment</name>;</typedef>

<comment type="block">/*
 * Compare candidate segments on tuple count.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_candidates</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>candidate_segment</name> <modifier>*</modifier></type><name>ca</name> <init>= <expr><operator>(</operator><name>candidate_segment</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>candidate_segment</name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><operator>(</operator><name>candidate_segment</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>tupcount</name></name> <operator>&lt;</operator> <name><name>cb</name><operator>-&gt;</operator><name>tupcount</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>tupcount</name></name> <operator>&gt;</operator> <name><name>cb</name><operator>-&gt;</operator><name>tupcount</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* On tie, prefer lower-numbered segment */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>segno</name></name> <operator>&lt;</operator> <name><name>cb</name><operator>-&gt;</operator><name>segno</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ca</name><operator>-&gt;</operator><name>segno</name></name> <operator>&gt;</operator> <name><name>cb</name><operator>-&gt;</operator><name>segno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Lock an existing segfile for writing.
 *
 * The caller should ensure that the segfile is available for writing,
 * otherwise this will error out. Typical usage is to pass segno=0 on
 * a newly-created relation, e.g. in CREATE TABLE AS.
 *
 * The locking and logic for whether a segfile can be used is mostly
 * the same as in choose_segfile_internal(), but we already know which
 * segfile we want.
 */</comment>
<function><type><name>void</name></type>
<name>LockSegnoForWrite</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>pg_aoseg_rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>pg_aoseg_dsc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>aoscan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Snapshot</name></type>	<name>snapshot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Snapshot</name></type>	<name>appendOnlyMetaDataSnapshot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>segrelid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_segfile_choice</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"LockSegNoForWrite: Locking segno %d for append-only relation \"%s\""</literal></expr></argument>,
						<argument><expr><name>segno</name></expr></argument>, <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * The algorithm below for choosing a target segment is not concurrent-safe.
	 * Grab a lock to serialize.
	 */</comment>
	<expr_stmt><expr><call><name>LockRelationForExtension</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>ExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>appendOnlyMetaDataSnapshot</name> <operator>=</operator> <call><name>RegisterSnapshot</name><argument_list>(<argument><expr><call><name>GetCatalogSnapshot</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GetAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>, <argument><expr><name>appendOnlyMetaDataSnapshot</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>segrelid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Now pick a segment that is not in use, and is not over the allowed
	 * size threshold (90% full).
	 */</comment>
	<expr_stmt><expr><name>pg_aoseg_rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>segrelid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pg_aoseg_dsc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_aoseg_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Obtain the snapshot that is taken at the beginning of the transaction.
	 * If a tuple is visible to this snapshot, and it hasn't been updated since
	 * (that's checked implicitly by heap_lock_tuple()), it's visible to any
	 * snapshot in this backend, and can be used as insertion target. We can't
	 * simply call GetTransactionSnapshot() here because it will create a new
	 * distributed snapshot for non-serializable transaction isolation level,
	 * and it may be too late.
	 */</comment>
	<expr_stmt><expr><name>snapshot</name> <operator>=</operator> <call><name>GetOldestSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>snapshot</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>snapshot</name> <operator>=</operator> <call><name>GetTransactionSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_segfile_choice</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"usedByConcurrentTransaction: TransactionXmin = %u, xmin = %u, xmax = %u, myxid = %u"</literal></expr></argument>,
			 <argument><expr><name>TransactionXmin</name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xmax</name></name></expr></argument>, <argument><expr><call><name>GetCurrentTransactionIdIfAny</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LogDistributedSnapshotInfo</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><literal type="string">"Used snapshot: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>aoscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>pg_aoseg_rel</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>snapshot</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>aoscan</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>this_segno</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type>		<name>tupcount</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int16</name></type>		<name>state</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int16</name></type>		<name>formatversion</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>get_aoseg_fields</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>pg_aoseg_rel</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>,
						 <argument><expr><operator>&amp;</operator><name>this_segno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupcount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>formatversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>segno</name> <operator>!=</operator> <name>this_segno</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>AOSEG_STATE_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"segfile %d is in unexpected state %d"</literal></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* If the ao segment is full, can't use it */</comment>
		<if_stmt><if>if <condition>(<expr><name>tupcount</name> <operator>&gt;</operator> <call><name>segfileMaxRowThreshold</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"segfile %d is full"</literal></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Skip using the ao segment if not latest version (except as a compaction target) */</comment>
		<if_stmt><if>if <condition>(<expr><name>formatversion</name> <operator>!=</operator> <call><name>AORelationVersion_GetLatest</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"segfile %d is not of the latest version"</literal></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* create it! */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>RelationIsAoRows</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>InsertInitialSegnoEntry</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>InsertInitialAOCSFileSegInfo</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>,
										 <argument><expr><call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>segrelid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* the tuple was locked by InsertInitial already */</comment>
	</block_content>}</block></if>
	<comment type="block">/*
	 * If we have already used this segment in this transaction, no need
	 * to look further. We can continue to use it. We should already hold
	 * a tuple lock on the pg_aoseg row, too.
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>HeapTupleHeaderGetXmin</name><argument_list>(<argument><expr><name><name>tuple</name><operator>-&gt;</operator><name>t_data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>GetCurrentTransactionId</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* this segno is available and not full. Try to lock it. */</comment>
		<decl_stmt><decl><type><name>HeapTupleData</name></type> <name>locktup</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Buffer</name></type>		<name>buf</name> <init>= <expr><name>InvalidBuffer</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TM_FailureData</name></type> <name>hufd</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TM_Result</name></type> <name>result</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>locktup</name><operator>.</operator><name>t_self</name></name> <operator>=</operator> <name><name>tuple</name><operator>-&gt;</operator><name>t_self</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>heap_lock_tuple</name><argument_list>(<argument><expr><name>pg_aoseg_rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>locktup</name></expr></argument>,
								 <argument><expr><call><name>GetCurrentCommandId</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><name>LockTupleExclusive</name></expr></argument>,
								 <argument><expr><name>LockWaitSkip</name></expr></argument>,
								 <argument><expr><name>false</name></expr></argument>, <comment type="block">/* follow_updates */</comment>
								 <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>,
								 <argument><expr><operator>&amp;</operator><name>hufd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ReleaseBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>TM_Ok</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not lock segfile %d"</literal></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* OK, we have the aoseg tuple locked for us. */</comment>
	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>aoscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>UnlockRelationForExtension</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>ExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>pg_aoseg_rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>UnregisterSnapshot</name><argument_list>(<argument><expr><name>appendOnlyMetaDataSnapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* success! */</comment>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ChooseSegnoForWrite</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>chosen_segno</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_segfile_choice</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ChooseSegnoForWrite: Choosing a segfile for relation \"%s\""</literal></expr></argument>,
						<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>chosen_segno</name> <operator>=</operator> <call><name>choose_segno_internal</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>, <argument><expr><name>CHOOSE_MODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>chosen_segno</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_RESOURCES</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not find segment file to use for inserting into relation \"%s\""</literal></expr></argument>,
						 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>chosen_segno</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Select a segfile to write surviving tuples to, when doing VACUUM compaction.
 */</comment>
<function><type><name>int</name></type>
<name>ChooseSegnoForCompactionWrite</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>avoid_segnos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_segfile_choice</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ChooseSegnoForCompactionWrite: Choosing a segfile for relation \"%s\""</literal></expr></argument>,
						<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>choose_segno_internal</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>avoid_segnos</name></expr></argument>, <argument><expr><name>CHOOSE_MODE_COMPACTION_WRITE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Select a segfile to compact, during VACUUM.
 */</comment>
<function><type><name>int</name></type>
<name>ChooseSegnoForCompaction</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>avoid_segnos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_segfile_choice</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ChooseSegnoForCompaction: Choosing a segfile to compact in relation \"%s\""</literal></expr></argument>,
						<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>choose_segno_internal</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>avoid_segnos</name></expr></argument>, <argument><expr><name>CHOOSE_MODE_COMPACTION_TARGET</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Reserved segno is special: it is inserted as a regular tuple (not frozen)
 * in gp_fastsequence to leverage MVCC for cleanup in case of abort.  Reserved
 * segno should be chosen for insert when the insert command is part of the
 * same transaction that created the table.  See
 * InsertInitialFastSequenceEntries for more details.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ShouldUseReservedSegno</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>choose_segno_mode</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type> <name>pg_class</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>xmin</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Reserved segno can only be chosen for non-vacuum cases because vacuum
	 * cannot be executed from inside a transaction.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>CHOOSE_MODE_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_pg_class_oid</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
				<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pg_class</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>RelationRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>pg_class</name></expr></argument>, <argument><expr><name>ClassOidIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
							  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>scankey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tuple</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unable to find relation entry in pg_class for %s"</literal></expr></argument>,
			 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><name>xmin</name> <operator>=</operator> <call><name>HeapTupleHeaderGetXmin</name><argument_list>(<argument><expr><name><name>tuple</name><operator>-&gt;</operator><name>t_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>pg_class</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>TransactionIdIsCurrentTransactionId</name><argument_list>(<argument><expr><name>xmin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Decide which segment number should be used to write into during the COPY,
 * INSERT, or VACUUM operation we're executing. This contains the common
 * logic for all three ChooseSegno* variants.
 *
 * The rules for which segfiles can be selected and which ones are preferred
 * depend on the mode:
 *
 * - In WRITE mode, pick any existing segment, preferring tuples with lower
 *   tupcount. If they're all in use, create a new one.
 *
 * - In COMPACTION_WRITE mode, prefer existing segments with tupcount=0. If
 *   none are available, create a new segfile. If a new segfile cannot be
 *   created either, then reuse an existing segfile with non-zero tupcount.
 *
 * - In COMPACTION_TARGET mode, only existings segments with non-zero tupcount
 *   are chosen.
 *
 * If 'avoid_segnos' is non-empty, we will not choose any of those segments as
 * the target.
 *
 * The return value is a segment file number to use for inserting by each
 * segdb into its local AO table. It can be -1 no suitable existing segfile
 * was found and a new one could not be created either. The returned segfile
 * is locked for this transaction.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>choose_segno_internal</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>avoid_segnos</name></decl></parameter>, <parameter><decl><type><name>choose_segno_mode</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>pg_aoseg_rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>pg_aoseg_dsc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>chosen_segno</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>candidate_segment</name></type> <name><name>candidates</name><index>[<expr><name>MAX_AOREL_CONCURRENCY</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>used</name><index>[<expr><name>MAX_AOREL_CONCURRENCY</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ncandidates</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>aoscan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Snapshot</name></type>	<name>snapshot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>segrelid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>tried_creating_new_segfile</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>used</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>used</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ShouldUseReservedSegno</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>avoid_segnos</name> <operator>==</operator> <name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_segfile_choice</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"choose_segno_internal: chose RESERVED_SEGNO for wrie"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>LockSegnoForWrite</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>RESERVED_SEGNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>RESERVED_SEGNO</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * The algorithm below for choosing a target segment is not concurrent-safe.
	 * Grab a lock to serialize.
	 */</comment>
	<expr_stmt><expr><call><name>LockRelationForExtension</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>ExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Obtain the snapshot that is taken at the beginning of the transaction.
	 * If a tuple is visible to this snapshot, and it hasn't been updated since
	 * (that's checked implicitly by heap_lock_tuple()), it's visible to any
	 * snapshot in this backend, and can be used as insertion target. We can't
	 * simply call GetTransactionSnapshot() here because it will create a new
	 * distributed snapshot for non-serializable transaction isolation level,
	 * and it may be too late.
	 */</comment>
	<expr_stmt><expr><name>snapshot</name> <operator>=</operator> <call><name>GetOldestSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>snapshot</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>snapshot</name> <operator>=</operator> <call><name>GetTransactionSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_segfile_choice</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"choose_segno_internal: TransactionXmin = %u, xmin = %u, xmax = %u, myxid = %u"</literal></expr></argument>,
			 <argument><expr><name>TransactionXmin</name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xmax</name></name></expr></argument>, <argument><expr><call><name>GetCurrentTransactionIdIfAny</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LogDistributedSnapshotInfo</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><literal type="string">"Used snapshot: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>GetAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>segrelid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Now pick a segment that is not in use, and is not over the allowed
	 * size threshold (90% full).
	 */</comment>
	<expr_stmt><expr><name>pg_aoseg_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>segrelid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pg_aoseg_dsc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_aoseg_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Scan through all the pg_aoseg (or pg_aocs) entries, and make note of
	 * all "candidates".
	 */</comment>
	<expr_stmt><expr><name>aoscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>pg_aoseg_rel</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>snapshot</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>aoscan</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>segno</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type>		<name>tupcount</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int16</name></type>		<name>state</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int16</name></type>		<name>formatversion</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>get_aoseg_fields</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>pg_aoseg_rel</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>segno</name></expr></argument>,
						 <argument><expr><operator>&amp;</operator><name>tupcount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>formatversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>used</name><index>[<expr><name>segno</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<comment type="block">/* never write to AWAITING_DROP segments */</comment>
		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>AOSEG_STATE_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* skip over segfiles that the caller asked to avoid */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>list_member_int</name><argument_list>(<argument><expr><name>avoid_segnos</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>CHOOSE_MODE_COMPACTION_TARGET</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* If the ao segment is full, skip it */</comment>
			<if_stmt><if>if <condition>(<expr><name>tupcount</name> <operator>&gt;</operator> <call><name>segfileMaxRowThreshold</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="block">/* Skip using the ao segment if not latest version (except as a compaction target) */</comment>
			<if_stmt><if>if <condition>(<expr><name>formatversion</name> <operator>!=</operator> <call><name>AORelationVersion_GetLatest</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * Historically, segment 0 was only used in utility mode.
			 * Nowadays, segment 0 is also used for CTAS and alter table
			 * rewrite commands.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>!=</operator> <name>GP_ROLE_UTILITY</name> <operator>&amp;&amp;</operator> <name>segno</name> <operator>==</operator> <name>RESERVED_SEGNO</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * If we have already used this segment in this transaction, no need
			 * to look further. We can continue to use it. We should already hold
			 * a tuple lock on the pg_aoseg row, too.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>HeapTupleHeaderGetXmin</name><argument_list>(<argument><expr><name><name>tuple</name><operator>-&gt;</operator><name>t_data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>GetCurrentTransactionId</name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>chosen_segno</name> <operator>=</operator> <name>segno</name></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_segfile_choice</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"choose_segno_interna: chose segfile %d because it was updated earlier in the transaction already"</literal></expr></argument>,
						 <argument><expr><name>chosen_segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* If the ao segment is empty, do not choose it for compaction */</comment>
			<if_stmt><if>if <condition>(<expr><name>tupcount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>candidates</name><index>[<expr><name>ncandidates</name></expr>]</index></name><operator>.</operator><name>segno</name> <operator>=</operator> <name>segno</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>candidates</name><index>[<expr><name>ncandidates</name></expr>]</index></name><operator>.</operator><name>ctid</name> <operator>=</operator> <name><name>tuple</name><operator>-&gt;</operator><name>t_self</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>candidates</name><index>[<expr><name>ncandidates</name></expr>]</index></name><operator>.</operator><name>tupcount</name> <operator>=</operator> <name>tupcount</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ncandidates</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>aoscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Try to find a segment we can use among the candidates, and lock it.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>chosen_segno</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>

		<comment type="block">/*
		 * Sort the candidates by tuple count, to prefer segment with fewest existing
		 * tuples. (In particular, in COMPACTION_WRITE mode, this puts all empty
		 * segfiles to the front).
		 */</comment>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>candidates</name></expr></argument>, <argument><expr><name>ncandidates</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>candidate_segment</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			  <argument><expr><name>compare_candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncandidates</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>HeapTupleData</name></type> <name>locktup</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Buffer</name></type>		<name>buf</name> <init>= <expr><name>InvalidBuffer</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>TM_FailureData</name></type> <name>hufd</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>TM_Result</name></type> <name>result</name></decl>;</decl_stmt>

			<comment type="block">/*
			 * When performing VACUUM compaction, we prefer to create a new segment
			 * over reusing a non-empty segfile, as the target to write the surviving
			 * tuples to. Because if we insert to a non-empty segfile, we won't be
			 * able to compact it later in the VACUUM cycle. (Or if we do, we'll scan
			 * through all the tuples we moved onto it earlier.) So before we proceed
			 * to try locking any non-empty segments, try to create a new one.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>CHOOSE_MODE_COMPACTION_WRITE</name> <operator>&amp;&amp;</operator>
				<operator>!</operator><name>tried_creating_new_segfile</name> <operator>&amp;&amp;</operator>
				<name><name>candidates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tupcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>chosen_segno</name> <operator>=</operator> <call><name>choose_new_segfile</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>used</name></expr></argument>, <argument><expr><name>avoid_segnos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>tried_creating_new_segfile</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>chosen_segno</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>locktup</name><operator>.</operator><name>t_self</name></name> <operator>=</operator> <name><name>candidates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ctid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>heap_lock_tuple</name><argument_list>(<argument><expr><name>pg_aoseg_rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>locktup</name></expr></argument>,
									 <argument><expr><call><name>GetCurrentCommandId</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><name>LockTupleExclusive</name></expr></argument>,
									 <argument><expr><name>LockWaitSkip</name></expr></argument>,
									 <argument><expr><name>false</name></expr></argument>, <comment type="block">/* follow_updates */</comment>
									 <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name>hufd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ReleaseBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>TM_Ok</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>chosen_segno</name> <operator>=</operator> <name><name>candidates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>segno</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_segfile_choice</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"choose_segno_internal: locked existing segfile %d"</literal></expr></argument>, <argument><expr><name>chosen_segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_segfile_choice</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"choose_segno_internal: skipped segfile %d because could not be locked"</literal></expr></argument>,
						 <argument><expr><name><name>candidates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If no existing segment could be used, create a new one.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>chosen_segno</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
		<name>mode</name> <operator>!=</operator> <name>CHOOSE_MODE_COMPACTION_TARGET</name> <operator>&amp;&amp;</operator>
		<operator>!</operator><name>tried_creating_new_segfile</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>chosen_segno</name> <operator>=</operator> <call><name>choose_new_segfile</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>used</name></expr></argument>, <argument><expr><name>avoid_segnos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>UnlockRelationForExtension</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>ExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_segfile_choice</name> <operator>&amp;&amp;</operator> <name>chosen_segno</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Segno chosen for append-only relation \"%s\" is %d"</literal></expr></argument>,
						<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>chosen_segno</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>pg_aoseg_rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>chosen_segno</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>choose_new_segfile</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>used</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>avoid_segnos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>chosen_segno</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* No segment found. Try to create a new one. */</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>segno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>segno</name> <operator>&lt;</operator> <name>MAX_AOREL_CONCURRENCY</name></expr>;</condition> <incr><expr><name>segno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* Only choose seg 0 in utility mode. See above. */</comment>
		<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>!=</operator> <name>GP_ROLE_UTILITY</name> <operator>&amp;&amp;</operator> <name>segno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>used</name><index>[<expr><name>segno</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>list_member_int</name><argument_list>(<argument><expr><name>avoid_segnos</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>chosen_segno</name> <operator>=</operator> <name>segno</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* If can't create a new one because MAX_AOREL_CONCURRENCY was reached */</comment>
	<if_stmt><if>if <condition>(<expr><name>chosen_segno</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_segfile_choice</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"choose_new_segfile: creating new segfile %d"</literal></expr></argument>,
				 <argument><expr><name>chosen_segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>RelationIsAoRows</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>InsertInitialSegnoEntry</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>chosen_segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>Oid</name></type> <name>segrelid</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Snapshot</name></type> <name>appendOnlyMetaDataSnapshot</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>appendOnlyMetaDataSnapshot</name> <operator>=</operator> <call><name>RegisterSnapshot</name><argument_list>(<argument><expr><call><name>GetCatalogSnapshot</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>GetAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>, <argument><expr><name>appendOnlyMetaDataSnapshot</name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name>segrelid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>UnregisterSnapshot</name><argument_list>(<argument><expr><name>appendOnlyMetaDataSnapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>InsertInitialAOCSFileSegInfo</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>chosen_segno</name></expr></argument>,
										 <argument><expr><call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>segrelid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_segfile_choice</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"choose_new_segfile: could not create segfile, all segfiles are in use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>chosen_segno</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Helper function to extract 'segno', 'tupcount', 'state', and 'formatversion'
 * from a pg_aoseg or pg_aocs tuple.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_aoseg_fields</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>pg_aoseg_rel</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>,
				 <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>segno</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>tupcount</name></decl></parameter>, <parameter><decl><type><name>int16</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int16</name> <modifier>*</modifier></type><name>formatversion</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>pg_aoseg_dsc</name> <init>= <expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_aoseg_rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isNull</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>RelationIsAoRows</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>segno</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>fastgetattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>,
										   <argument><expr><name>Anum_pg_aoseg_segno</name></expr></argument>,
										   <argument><expr><name>pg_aoseg_dsc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>*</operator><name>tupcount</name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><call><name>fastgetattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>,
											  <argument><expr><name>Anum_pg_aoseg_tupcount</name></expr></argument>,
											  <argument><expr><name>pg_aoseg_dsc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><call><name>fastgetattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>,
										   <argument><expr><name>Anum_pg_aoseg_state</name></expr></argument>,
										   <argument><expr><name>pg_aoseg_dsc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>*</operator><name>formatversion</name> <operator>=</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><call><name>fastgetattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>,
												   <argument><expr><name>Anum_pg_aoseg_formatversion</name></expr></argument>,
												   <argument><expr><name>pg_aoseg_dsc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>segno</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>fastgetattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>,
										   <argument><expr><name>Anum_pg_aocs_segno</name></expr></argument>,
										   <argument><expr><name>pg_aoseg_dsc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>tupcount</name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><call><name>fastgetattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>,
											  <argument><expr><name>Anum_pg_aocs_tupcount</name></expr></argument>,
											  <argument><expr><name>pg_aoseg_dsc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><call><name>fastgetattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>,
										   <argument><expr><name>Anum_pg_aocs_state</name></expr></argument>,
										   <argument><expr><name>pg_aoseg_dsc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>*</operator><name>formatversion</name> <operator>=</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><call><name>fastgetattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>,
												   <argument><expr><name>Anum_pg_aocs_formatversion</name></expr></argument>,
												   <argument><expr><name>pg_aoseg_dsc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * AORelIncrementModCount
 *
 * Update the modcount of an aoseg table. The modcount is used by incremental backup
 * to detect changed relations.
 */</comment>
<function><type><name>void</name></type>
<name>AORelIncrementModCount</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>parentrel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>segno</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_segfile_choice</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"AORelIncrementModCount: Incrementing modcount of aoseg entry for append-only relation %d"</literal></expr></argument>,
						<argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>parentrel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * It doesn't matter which segment we use, as long as the segment can be used by us
	 * (same rules as for inserting).
	 */</comment>
	<expr_stmt><expr><name>segno</name> <operator>=</operator> <call><name>ChooseSegnoForWrite</name><argument_list>(<argument><expr><name>parentrel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>RelationIsAoRows</name><argument_list>(<argument><expr><name>parentrel</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Update the master AO segment info table with correct tuple count total
		 */</comment>
		<expr_stmt><expr><call><name>IncrementFileSegInfoModCount</name><argument_list>(<argument><expr><name>parentrel</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* AO column store */</comment>
		<expr_stmt><expr><call><name>AOCSFileSegInfoAddCount</name><argument_list>(<argument><expr><name>parentrel</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
