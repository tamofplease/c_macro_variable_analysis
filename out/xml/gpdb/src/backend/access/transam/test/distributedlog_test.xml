<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/transam/test/distributedlog_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<comment type="block">/* Also ignore elog */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/elog.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>elog</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>elog</name><parameter_list>(<parameter><type><name>elevel</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{}</cpp:value></cpp:define>

<comment type="block">/* Actual function body */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../distributedlog.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DtxLogStartupNumPage</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PageEntryToTransactionId</name><parameter_list>(<parameter><type><name>page</name></type></parameter>, <parameter><type><name>entry</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((page) * (TransactionId) ENTRIES_PER_PAGE + (TransactionId) (entry))</cpp:value></cpp:define>

<comment type="block">/*
 * A bug found in MPP-20426 was we were overrunnig to the next page
 * of DistributedLog.  The intention of the memset with zeors is to
 * reset the reset of the current page if we are in the middle of page,
 * so that we won't see uncommited data due to some recovery work.
 * However, we were doing the wrong math that calculates the size of
 * rest of page as the size of the part preceding to the current xid.
 * The worst scenario was for the subtransaction shared memory, which
 * follows distributed log shared memory to be overwritten.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>MPP_20426</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>nextXid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>			<name><name>pages</name><index>[<expr><name>BLCKSZ</name> <operator>*</operator> <name>DtxLogStartupNumPage</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>			<name><name>zeros</name><index>[<expr><name>BLCKSZ</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>bytes</name></decl>;</decl_stmt>

	<comment type="block">/* Setup ShmemVariableCache */</comment>
	<decl_stmt><decl><type><name>VariableCacheData</name></type> <name>data</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>ShmemVariableCache</name> <operator>=</operator> <operator>&amp;</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>oldestXid</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>latestCompletedXid</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>DistributedLogShmem</name></type> <name>dls</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>DistributedLogShared</name> <operator>=</operator> <operator>&amp;</operator><name>dls</name></expr>;</expr_stmt>

	<comment type="block">/* Setup DistributedLogCtl */</comment>
	<expr_stmt><expr><name><name>DistributedLogCtl</name><operator>-&gt;</operator><name>shared</name></name> <operator>=</operator> <operator>(</operator><name>SlruShared</name><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SlruSharedData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>DistributedLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name></name> <operator>=</operator>
			<operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>DtxLogStartupNumPage</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>DistributedLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_dirty</name></name> <operator>=</operator>
			<operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>DtxLogStartupNumPage</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>DistributedLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pages</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>DistributedLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pages</name><index>[<expr><name>BLCKSZ</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pages</name></expr></argument>, <argument><expr><literal type="number">0x7f</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pages</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zeros</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>DistributedLogControlLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* This test is only for the case xid is not on the boundary. */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruDoesPhysicalPageExist</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>SimpleLruDoesPhysicalPageExist</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SimpleLruDoesPhysicalPageExist</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruReadPage</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>SimpleLruReadPage</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>SimpleLruReadPage</name></expr></argument>, <argument><expr><name>write_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruReadPage</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SimpleLruReadPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>DistributedLogControlLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Run the function. */</comment>
	<expr_stmt><expr><call><name>DistributedLog_Startup</name><argument_list>(<argument><expr><name>nextXid</name></expr></argument>, <argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* DistributedLog_Startup should not overwrite the subsequent block. */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>pages</name><index>[<expr><name>BLCKSZ</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Make sure the part following the xid is zeroed. */</comment>
	<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>TransactionIdToEntry</name><argument_list>(<argument><expr><name>nextXid</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DistributedLogEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_memory_equal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pages</name><index>[<expr><name>bytes</name></expr>]</index></name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>BLCKSZ</name> <operator>-</operator> <name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>DistributedLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_dirty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>DistributedLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>DistributedLogCtl</name><operator>-&gt;</operator><name>shared</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_DistributedLog_Startup_MPP_20426</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>MPP_20426</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">115064091</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* from observed issue */</comment>
	<expr_stmt><expr><call><name>MPP_20426</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>PageEntryToTransactionId</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MPP_20426</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>PageEntryToTransactionId</name><argument_list>(<argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><name>ENTRIES_PER_PAGE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MPP_20426</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>PageEntryToTransactionId</name><argument_list>(<argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>nextXid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pages</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>BLCKSZ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Setup DistributedLogCtl with a single page buffer */</comment>
	<expr_stmt><expr><name><name>DistributedLogCtl</name><operator>-&gt;</operator><name>shared</name></name> <operator>=</operator> <operator>(</operator><name>SlruShared</name><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SlruSharedData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>DistributedLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name></name> <operator>=</operator>
			<operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>DistributedLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_dirty</name></name> <operator>=</operator>
			<operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>DistributedLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pages</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pages</name></expr></argument>, <argument><expr><literal type="number">0x7f</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>DistributedLogControlLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Map every page to buffer 0; we're only testing that the correct calls are
	 * made to SimpleLruZeroPage().
	 */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruDoesPhysicalPageExist</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>SimpleLruDoesPhysicalPageExist</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SimpleLruDoesPhysicalPageExist</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruReadPage</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>SimpleLruReadPage</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>SimpleLruReadPage</name></expr></argument>, <argument><expr><name>write_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruReadPage</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SimpleLruReadPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>DistributedLogControlLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_BinaryUpgradeZeroesOutDistributedLogFittingOnSinglePage</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>oldestActiveXid</name> <init>= <expr><name>FirstNormalTransactionId</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>nextXid</name> <init>= <expr><name>FirstNormalTransactionId</name> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>setup</name><argument_list>(<argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>, <argument><expr><name>cutoffPage</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>IsBinaryUpgrade</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Run the function. */</comment>
	<expr_stmt><expr><call><name>DistributedLog_Startup</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>, <argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>IsBinaryUpgrade</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_BinaryUpgradeZeroesOutDistributedLogFittingOnThreePages</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>oldestActiveXid</name> <init>= <expr><name>FirstNormalTransactionId</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>nextXid</name> <init>= <expr><name>FirstNormalTransactionId</name> <operator>+</operator> <name>ENTRIES_PER_PAGE</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>setup</name><argument_list>(<argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>, <argument><expr><name>cutoffPage</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>IsBinaryUpgrade</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Run the function. */</comment>
	<expr_stmt><expr><call><name>DistributedLog_Startup</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>, <argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>IsBinaryUpgrade</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_BinaryUpgradeZeroesOutDistributedLogWithTransactionIdWraparound</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>oldestActiveXid</name> <init>= <expr><name>MaxTransactionId</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>nextXid</name> <init>= <expr><name>MaxTransactionId</name> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>setup</name><argument_list>(<argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>, <argument><expr><name>cutoffPage</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>IsBinaryUpgrade</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Run the function. */</comment>
	<expr_stmt><expr><call><name>DistributedLog_Startup</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>, <argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>IsBinaryUpgrade</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_ConvertMasterDataDirToSegmentZeroesOutDistributedLogFittingOnSinglePage</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>oldestActiveXid</name> <init>= <expr><name>FirstNormalTransactionId</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>nextXid</name> <init>= <expr><name>FirstNormalTransactionId</name> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>setup</name><argument_list>(<argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>, <argument><expr><name>cutoffPage</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ConvertMasterDataDirToSegment</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Run the function. */</comment>
	<expr_stmt><expr><call><name>DistributedLog_Startup</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>, <argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ConvertMasterDataDirToSegment</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_ConvertMasterDataDirToSegmentZeroesOutDistributedLogFittingOnThreePages</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>oldestActiveXid</name> <init>= <expr><name>FirstNormalTransactionId</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>nextXid</name> <init>= <expr><name>FirstNormalTransactionId</name> <operator>+</operator> <name>ENTRIES_PER_PAGE</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>setup</name><argument_list>(<argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>, <argument><expr><name>cutoffPage</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ConvertMasterDataDirToSegment</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Run the function. */</comment>
	<expr_stmt><expr><call><name>DistributedLog_Startup</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>, <argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ConvertMasterDataDirToSegment</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_ConvertMasterDataDirToSegmentZeroesOutDistributedLogWithTransactionIdWraparound</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>oldestActiveXid</name> <init>= <expr><name>MaxTransactionId</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>nextXid</name> <init>= <expr><name>MaxTransactionId</name> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>setup</name><argument_list>(<argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>, <argument><expr><name>cutoffPage</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>SimpleLruTruncateWithLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>DistributedLogCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><call><name>TransactionIdToPage</name><argument_list>(<argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SimpleLruZeroPage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ConvertMasterDataDirToSegment</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Run the function. */</comment>
	<expr_stmt><expr><call><name>DistributedLog_Startup</name><argument_list>(<argument><expr><name>oldestActiveXid</name></expr></argument>, <argument><expr><name>nextXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ConvertMasterDataDirToSegment</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_DistributedLog_Startup_MPP_20426</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_BinaryUpgradeZeroesOutDistributedLogWithTransactionIdWraparound</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_BinaryUpgradeZeroesOutDistributedLogFittingOnThreePages</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_BinaryUpgradeZeroesOutDistributedLogFittingOnSinglePage</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_ConvertMasterDataDirToSegmentZeroesOutDistributedLogWithTransactionIdWraparound</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_ConvertMasterDataDirToSegmentZeroesOutDistributedLogFittingOnThreePages</name></expr></argument>)</argument_list></call></expr>,
		<macro><name>unit_test</name><argument_list>(<argument>test_ConvertMasterDataDirToSegmentZeroesOutDistributedLogFittingOnSinglePage</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
