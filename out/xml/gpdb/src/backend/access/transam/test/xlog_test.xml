<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/transam/test/xlog_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../xlog.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>KeepLogSeg_wrapper</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name></type> <name>recptr</name></decl></parameter>, <parameter><decl><type><name>XLogSegNo</name> <modifier>*</modifier></type><name>logSegNo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>KeepLogSeg</name><argument_list>(<argument><expr><name>recptr</name></expr></argument>, <argument><expr><name>logSegNo</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_KeepLogSeg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>recptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogSegNo</name></type>  <name>_logSegNo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogCtlData</name></type> <name>xlogctl</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>xlogctl</name><operator>.</operator><name>replicationSlotMinLSN</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xlogctl</name><operator>.</operator><name>info_lck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>XLogCtl</name> <operator>=</operator> <operator>&amp;</operator><name>xlogctl</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * 64 segments per Xlog logical file.
	 * Configuring (3, 2), 3 log files and 2 segments to keep (3*64 + 2).
	 */</comment>
	<expr_stmt><expr><name>wal_keep_segments</name> <operator>=</operator> <literal type="number">194</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set wal segment size to 64 mb
	 */</comment>
	<expr_stmt><expr><name>wal_segment_size</name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

	<comment type="block" format="doxygen">/************************************************
	 * Current Delete greater than what keep wants,
	 * so, delete offset should get updated
	 ***********************************************/</comment>
	<comment type="block">/* Current Delete pointer */</comment>
	<expr_stmt><expr><name>_logSegNo</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Current xlog location (4, 1)
	 * xrecoff = seg * 67108864 (64 MB segsize)
	 */</comment>
	<expr_stmt><expr><name>recptr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <operator>(</operator><name>wal_segment_size</name> <operator>*</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>KeepLogSeg_wrapper</name><argument_list>(<argument><expr><name>recptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_logSegNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>_logSegNo</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/************************************************/</comment>


	<comment type="block" format="doxygen">/************************************************
	 * Current Delete smaller than what keep wants,
	 * so, delete offset should NOT get updated
	 ***********************************************/</comment>
	<comment type="block">/* Current Delete pointer */</comment>
	<expr_stmt><expr><name>_logSegNo</name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Current xlog location (4, 1)
	 * xrecoff = seg * 67108864 (64 MB segsize)
	 */</comment>
	<expr_stmt><expr><name>recptr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <operator>(</operator><name>wal_segment_size</name> <operator>*</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>KeepLogSeg_wrapper</name><argument_list>(<argument><expr><name>recptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_logSegNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>_logSegNo</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/************************************************/</comment>


	<comment type="block" format="doxygen">/************************************************
	 * Current Delete smaller than what keep wants,
	 * so, delete offset should NOT get updated
	 ***********************************************/</comment>
	<comment type="block">/* Current Delete pointer */</comment>
	<expr_stmt><expr><name>_logSegNo</name> <operator>=</operator> <literal type="number">1</literal> <operator>*</operator> <call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">60</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Current xlog location (5, 8)
	 * xrecoff = seg * 67108864 (64 MB segsize)
	 */</comment>
	<expr_stmt><expr><name>recptr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <literal type="number">5</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <operator>(</operator><name>wal_segment_size</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>KeepLogSeg_wrapper</name><argument_list>(<argument><expr><name>recptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_logSegNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>_logSegNo</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/************************************************/</comment>

	<comment type="block" format="doxygen">/************************************************
	 * UnderFlow case, curent is lower than keep
	 ***********************************************/</comment>
	<comment type="block">/* Current Delete pointer */</comment>
	<expr_stmt><expr><name>_logSegNo</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Current xlog location (3, 1)
	 * xrecoff = seg * 67108864 (64 MB segsize)
	 */</comment>
	<expr_stmt><expr><name>recptr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <operator>(</operator><name>wal_segment_size</name> <operator>*</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>KeepLogSeg_wrapper</name><argument_list>(<argument><expr><name>recptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_logSegNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>_logSegNo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/************************************************/</comment>

	<comment type="block" format="doxygen">/************************************************
	 * One more simple scenario of updating delete offset
	 ***********************************************/</comment>
	<comment type="block">/* Current Delete pointer */</comment>
	<expr_stmt><expr><name>_logSegNo</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Current xlog location (5, 8)
	 * xrecoff = seg * 67108864 (64 MB segsize)
	 */</comment>
	<expr_stmt><expr><name>recptr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <literal type="number">5</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <operator>(</operator><name>wal_segment_size</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>KeepLogSeg_wrapper</name><argument_list>(<argument><expr><name>recptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_logSegNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>_logSegNo</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/************************************************/</comment>

	<comment type="block" format="doxygen">/************************************************
	 * Do nothing if wal_keep_segments is not positive
	 ***********************************************/</comment>
	<comment type="block">/* Current Delete pointer */</comment>
	<expr_stmt><expr><name>wal_keep_segments</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>_logSegNo</name> <operator>=</operator> <literal type="number">9</literal> <operator>*</operator> <call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">45</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>KeepLogSeg_wrapper</name><argument_list>(<argument><expr><name>recptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_logSegNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>_logSegNo</name></expr></argument>, <argument><expr><literal type="number">9</literal><operator>*</operator><call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>wal_keep_segments</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>KeepLogSeg_wrapper</name><argument_list>(<argument><expr><name>recptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_logSegNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>_logSegNo</name></expr></argument>, <argument><expr><literal type="number">9</literal><operator>*</operator><call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/************************************************/</comment>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<macro><name>unit_test</name><argument_list>(<argument>test_KeepLogSeg</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
