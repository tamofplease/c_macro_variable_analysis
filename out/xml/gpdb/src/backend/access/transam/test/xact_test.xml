<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/transam/test/xact_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<comment type="block">/* Fetch definition of PG_exception_stack */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TransactionIdDidAbortForReader</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TransactionIdDidAbortForReader</name><parameter_list>(<parameter><type><name>xid</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>mock_TransactionIdDidAbortForReader(xid)</cpp:value></cpp:define>
<comment type="block">/* Mock it so that XIDs &gt; 100 are treated as aborted. */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>mock_TransactionIdDidAbortForReader</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>xid</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../xact.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_TransactionIdIsCurrentTransactionIdInternal</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>failure_xid1</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>failure_xid2</name> <init>= <expr><literal type="number">567</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>failure_xid3</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>passed_xid</name> <init>= <expr><literal type="number">299</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>aborted_xid</name> <init>= <expr><literal type="number">467</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>child_xid1</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>child_xid2</name> <init>= <expr><literal type="number">320</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TransactionState</name></type> <name>p</name> <init>= <expr><name>CurrentTransactionState</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionState</name></type> <name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>child_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">6</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <literal type="number">500</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/*
		 * Lets skip to add the failure_xid, so that it reports not found
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>failure_xid1</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
	
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <operator>(</operator><name>child_xid1</name><operator>+</operator><name>child_count</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <operator>(</operator><name>child_xid2</name><operator>+</operator><name>child_count</name><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>AtSubCommit_childXids</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>childXids</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
			<comment type="block">/* Enable to see details */</comment>
			printf("\nMain=%d, parent=%d", s-&gt;transactionId, s-&gt;parent-&gt;transactionId);
			foreach(cell, s-&gt;parent-&gt;childXids)
			{
				printf(" child=%d, ", lfirst_xid(cell));
			}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>CurrentTransactionState</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>child_count</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>child_count</name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>child_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>TransactionState</name><operator>)</operator>
				<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>TopTransactionContext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TransactionStateData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fullTransactionId</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nestingLevel</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nestingLevel</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<comment type="block">/*
		 * Lets set state for aborted_xid
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>aborted_xid</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TRANS_ABORT</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>fastNodeCount</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>fastNodeCount</name> <operator>==</operator> <name>NUM_NODES_TO_SKIP_FOR_FAST_SEARCH</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>fastNodeCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fastLink</name></name> <operator>=</operator> <name>previousFastLink</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>previousFastLink</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>CurrentTransactionState</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
	</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	<comment type="block">/* Enable to see details */</comment>
	while (p)
	{
		if (p-&gt;fastLink == NULL)
		{
			printf("%d, ", p-&gt;transactionId);
		}
		else
		{
			printf("FAST Linked %d to node %d, ", p-&gt;transactionId, p-&gt;fastLink-&gt;transactionId);
		}

		foreach(cell, p-&gt;childXids)
		{
			printf(" child=%d, ", lfirst_xid(cell));
		}

		p = p-&gt;parent;
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>TransactionIdIsCurrentTransactionIdInternal</name><argument_list>(<argument><expr><name>failure_xid1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>TransactionIdIsCurrentTransactionIdInternal</name><argument_list>(<argument><expr><name>failure_xid2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>TransactionIdIsCurrentTransactionIdInternal</name><argument_list>(<argument><expr><name>failure_xid3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>TransactionIdIsCurrentTransactionIdInternal</name><argument_list>(<argument><expr><name>passed_xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>TransactionIdIsCurrentTransactionIdInternal</name><argument_list>(<argument><expr><name>aborted_xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>TransactionIdIsCurrentTransactionIdInternal</name><argument_list>(<argument><expr><name>child_xid1</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>TransactionIdIsCurrentTransactionIdInternal</name><argument_list>(<argument><expr><name>child_xid2</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>helper_ExpectLWLock</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_IsCurrentTransactionIdForReader</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGPROC</name></type> <name>testProc</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGXACT</name></type> <name>testXAct</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LWLock</name></type> <name>localslotLock</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>SharedSnapshotSlot</name></type> <name>testSlot</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SharedLocalSnapshotSlot</name> <operator>=</operator> <operator>&amp;</operator><name>testSlot</name></expr>;</expr_stmt>
	<comment type="block">/* lwlock is mocked, so assign any integer ID to slotLock. */</comment>
	<expr_stmt><expr><name><name>testSlot</name><operator>.</operator><name>slotLock</name></name> <operator>=</operator> <operator>&amp;</operator><name>localslotLock</name></expr>;</expr_stmt>

	<comment type="block">/* test: writer_proc is null */</comment>
	<expr_stmt><expr><name><name>SharedLocalSnapshotSlot</name><operator>-&gt;</operator><name>writer_proc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>helper_ExpectLWLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>IsCurrentTransactionIdForReader</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><literal type="string">"No elog(ERROR, ...) was called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* test: writer_proc-&gt;pid is invalid */</comment>
	<expr_stmt><expr><name><name>testSlot</name><operator>.</operator><name>writer_proc</name></name> <operator>=</operator> <operator>&amp;</operator><name>testProc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>testSlot</name><operator>.</operator><name>writer_xact</name></name> <operator>=</operator> <operator>&amp;</operator><name>testXAct</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>testProc</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>helper_ExpectLWLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>IsCurrentTransactionIdForReader</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><literal type="string">"No elog(ERROR, ...) was called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * test: writer_proc-&gt;xid is invalid, e.g. lazy xid not assigned
	 * xid yet.
	 */</comment>
	<expr_stmt><expr><name><name>testProc</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <literal type="number">1234</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>testXAct</name><operator>.</operator><name>xid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>helper_ExpectLWLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>IsCurrentTransactionIdForReader</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * test: not a subtransaction - xid matches writer's top
	 * transaction ID
	 */</comment>
	<expr_stmt><expr><name><name>testXAct</name><operator>.</operator><name>xid</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>helper_ExpectLWLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>IsCurrentTransactionIdForReader</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* test: subtransaction found in writer_proc cache */</comment>
	<expr_stmt><expr><name><name>testXAct</name><operator>.</operator><name>xid</name></name> <operator>=</operator> <literal type="number">90</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>testXAct</name><operator>.</operator><name>nxids</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>testProc</name><operator>.</operator><name>subxids</name><operator>.</operator><name>xids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>testProc</name><operator>.</operator><name>subxids</name><operator>.</operator><name>xids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">110</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>helper_ExpectLWLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>IsCurrentTransactionIdForReader</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* test: no subtransaction found in writer_proc cache */</comment>
	<expr_stmt><expr><call><name>helper_ExpectLWLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>IsCurrentTransactionIdForReader</name><argument_list>(<argument><expr><literal type="number">120</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* test: overflow, with top xid matching writer's xid */</comment>
	<expr_stmt><expr><name><name>testXAct</name><operator>.</operator><name>xid</name></name> <operator>=</operator> <literal type="number">90</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>testXAct</name><operator>.</operator><name>nxids</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>testXAct</name><operator>.</operator><name>overflowed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>helper_ExpectLWLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SubTransGetTopmostTransaction</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SubTransGetTopmostTransaction</name></expr></argument>, <argument><expr><literal type="number">90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>IsCurrentTransactionIdForReader</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* test: overflow, with top xid not matching writer's xid */</comment>
	<expr_stmt><expr><name><name>testXAct</name><operator>.</operator><name>xid</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>testXAct</name><operator>.</operator><name>nxids</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>testXAct</name><operator>.</operator><name>overflowed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>helper_ExpectLWLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>SubTransGetTopmostTransaction</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>SubTransGetTopmostTransaction</name></expr></argument>, <argument><expr><literal type="number">90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>IsCurrentTransactionIdForReader</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_TransactionIdIsCurrentTransactionIdInternal</name></expr></argument>)</argument_list></call></expr>,
		<macro><name>unit_test</name><argument_list>(<argument>test_IsCurrentTransactionIdForReader</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>TopTransactionContext</name> <operator>=</operator>
	  <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
				<argument><expr><literal type="string">"mock TopTransactionContext"</literal></expr></argument>,
				<argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
				<argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
				<argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
