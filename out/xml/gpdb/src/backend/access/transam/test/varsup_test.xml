<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/transam/test/varsup_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<comment type="block">/* Fetch definition of PG_exception_stack */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ereport</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ereport</name><parameter_list>(<parameter><type><name>elevel</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
	__VA_ARGS__, ereport_mock(elevel); \
	} while(0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>expected_elevel</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ereport_mock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>elevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>elevel</name></expr></argument>, <argument><expr><name>expected_elevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>elevel</name> <operator>&gt;=</operator> <name>ERROR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>siglongjmp</name><argument_list>(<argument><expr><operator>*</operator><name>PG_exception_stack</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../varsup.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERRORCODE_NONE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expect_ereport</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>log_level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>errhint</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>errhint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>errcode</name> <operator>!=</operator> <name>ERRORCODE_NONE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>errcode</name></expr></argument>, <argument><expr><name>sqlerrcode</name></expr></argument>, <argument><expr><name>errcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>errcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>expected_elevel</name> <operator>=</operator> <name>log_level</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_GetNewTransactionId_xid_stop_limit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VariableCacheData</name></type> <name>data</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * make sure the nextXid is larger than xidVacLimit to check xidStopLimit,
	 * and it's larger than xidStopLimit to trigger the ereport(ERROR).
	 */</comment>
	<expr_stmt><expr><name>ShmemVariableCache</name> <operator>=</operator> <operator>&amp;</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>nextFullXid</name><operator>.</operator><name>value</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>xidVacLimit</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>xidStopLimit</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>RecoveryInProgress</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>get_database_name</name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>get_database_name</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>expect_ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GetNewTransactionId</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><literal type="string">"No ereport(ERROR, ...) was called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_GetNewTransactionId_xid_warn_limit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xid</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VariableCacheData</name></type> <name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGPROC</name></type> <name>proc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGXACT</name></type> <name>xact</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>MyProc</name> <operator>=</operator> <operator>&amp;</operator><name>proc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>MyPgXact</name> <operator>=</operator> <operator>&amp;</operator><name>xact</name></expr>;</expr_stmt>
	<comment type="block">/*
	 * make sure nextXid is between xidWarnLimit and xidStopLimit to trigger
	 * the ereport(WARNING).
	 */</comment>
	<expr_stmt><expr><name>ShmemVariableCache</name> <operator>=</operator> <operator>&amp;</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>nextFullXid</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>xidVacLimit</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>xidWarnLimit</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>xidStopLimit</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>RecoveryInProgress</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>get_database_name</name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>get_database_name</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>expect_ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><name>ERRORCODE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * verify rest of function logic, including assign MyProc-&gt;xid
	 */</comment>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>ExtendCLOG</name></expr></argument>, <argument><expr><name>newestXact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>ExtendCLOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>ExtendCommitTs</name></expr></argument>, <argument><expr><name>newestXact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>ExtendCommitTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>ExtendSUBTRANS</name></expr></argument>, <argument><expr><name>newestXact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>ExtendSUBTRANS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>DistributedLog_Extend</name></expr></argument>, <argument><expr><name>newestXact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>DistributedLog_Extend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GetNewTransactionId</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>xact</name><operator>.</operator><name>xid</name></name></expr></argument>, <argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><literal type="string">"No ereport(WARNING, ...) was called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>should_acquire_and_release_oid_gen_lock</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>OidGenLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>OidGenLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>should_generate_xlog_for_next_oid</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>expected_oid_in_xlog_rec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>XLogPutNextOid</name></expr></argument>, <argument><expr><name>nextOid</name></expr></argument>, <argument><expr><name>expected_oid_in_xlog_rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>XLogPutNextOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * QD wrapped around before QE did
 * QD nextOid: FirstNormalObjectId, QE nextOid: PG_UINT32_MAX
 * QE should set its nextOid to FirstNormalObjectId and create an xlog
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_AdvanceObjectId_QD_wrapped_before_QE</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VariableCacheData</name></type> <name>data</name> <init>= <expr><block>{<expr><operator>.</operator><name>nextOid</name> <operator>=</operator> <name>PG_UINT32_MAX</name></expr>, <expr><operator>.</operator><name>oidCount</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ShmemVariableCache</name> <operator>=</operator> <operator>&amp;</operator><name>data</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>should_generate_xlog_for_next_oid</name><argument_list>(<argument><expr><name>FirstNormalObjectId</name> <operator>+</operator> <name>VAR_OID_PREFETCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>should_acquire_and_release_oid_gen_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Run the test */</comment>
	<expr_stmt><expr><call><name>AdvanceObjectId</name><argument_list>(<argument><expr><name>FirstNormalObjectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check if shared memory Oid values have been changed correctly */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>nextOid</name></name></expr></argument>, <argument><expr><name>FirstNormalObjectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>oidCount</name></name></expr></argument>, <argument><expr><name>VAR_OID_PREFETCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * QE wrapped around but QD did not
 * QD nextOid: PG_UINT32_MAX, QE nextOid: FirstNormalObjectId
 * QE should do nothing
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_AdvanceObjectId_QE_wrapped_before_QD</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VariableCacheData</name></type> <name>data</name> <init>= <expr><block>{<expr><operator>.</operator><name>nextOid</name> <operator>=</operator> <name>FirstNormalObjectId</name></expr>, <expr><operator>.</operator><name>oidCount</name> <operator>=</operator> <name>VAR_OID_PREFETCH</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ShmemVariableCache</name> <operator>=</operator> <operator>&amp;</operator><name>data</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>should_acquire_and_release_oid_gen_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Run the test */</comment>
	<expr_stmt><expr><call><name>AdvanceObjectId</name><argument_list>(<argument><expr><name>PG_UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check if shared memory Oid values have been changed correctly */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>nextOid</name></name></expr></argument>, <argument><expr><name>FirstNormalObjectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>oidCount</name></name></expr></argument>, <argument><expr><name>VAR_OID_PREFETCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Regular normal operation flow
 * QD nextOid: FirstNormalObjectId + 2, QE nextOid: FirstNormalObjectId
 * QE should set its nextOid to FirstNormalObjectId + 2 and not create an xlog
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_AdvanceObjectId_normal_flow</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VariableCacheData</name></type> <name>data</name> <init>= <expr><block>{<expr><operator>.</operator><name>nextOid</name> <operator>=</operator> <name>FirstNormalObjectId</name></expr>, <expr><operator>.</operator><name>oidCount</name> <operator>=</operator> <name>VAR_OID_PREFETCH</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ShmemVariableCache</name> <operator>=</operator> <operator>&amp;</operator><name>data</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>should_acquire_and_release_oid_gen_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Run the test */</comment>
	<expr_stmt><expr><call><name>AdvanceObjectId</name><argument_list>(<argument><expr><name>FirstNormalObjectId</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check if shared memory Oid values have been changed correctly */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>nextOid</name></name></expr></argument>, <argument><expr><name>FirstNormalObjectId</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>oidCount</name></name></expr></argument>, <argument><expr><name>VAR_OID_PREFETCH</name> <operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_GetNewTransactionId_xid_stop_limit</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_GetNewTransactionId_xid_warn_limit</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_AdvanceObjectId_QD_wrapped_before_QE</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_AdvanceObjectId_QE_wrapped_before_QD</name></expr></argument>)</argument_list></call></expr>,
		<macro><name>unit_test</name><argument_list>(<argument>test_AdvanceObjectId_normal_flow</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
