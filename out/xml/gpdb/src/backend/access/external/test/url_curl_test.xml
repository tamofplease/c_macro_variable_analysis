<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/external/test/url_curl_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../url_curl.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__make_url</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	   <modifier>*</modifier></type><name>url1</name> <init>= <expr><literal type="string">"http://[:0]/foo/bar"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	   <modifier>*</modifier></type><name>url2</name> <init>= <expr><literal type="string">"http://[:0]:8080/foo/bar"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<comment type="block">/* test ipv6 with no port */</comment>
	<expr_stmt><expr><call><name>expect_string</name><argument_list>(<argument><expr><name>getDnsAddress</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="string">":0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>getDnsAddress</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>getDnsAddress</name></expr></argument>, <argument><expr><name>elevel</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>getDnsAddress</name></expr></argument>, <argument><expr><literal type="string">":0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>make_url</name><argument_list>(<argument><expr><name>url1</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>url1</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* test ipv6 with explicit port */</comment>
	<expr_stmt><expr><call><name>expect_string</name><argument_list>(<argument><expr><name>getDnsAddress</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="string">":0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>getDnsAddress</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="number">8080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>getDnsAddress</name></expr></argument>, <argument><expr><name>elevel</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>getDnsAddress</name></expr></argument>, <argument><expr><literal type="string">":0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>make_url</name><argument_list>(<argument><expr><name>url2</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name>url2</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<macro><name>unit_test</name><argument_list>(<argument>test__make_url</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
