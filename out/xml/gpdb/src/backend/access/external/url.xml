<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/external/url.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * url.c
 *	  Core support for opening external relations via a URL
 *
 * Portions Copyright (c) 2007-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 * IDENTIFICATION
 *	  src/backend/access/external/url.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbdtxcontextinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/dbcommands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq-be.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>		<comment type="block">/* postmaster port */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/tcopprot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/uri.h"</cpp:file></cpp:include>

<comment type="block">/* GUC */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>readable_external_table_timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gpfdist_retry_timeout</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>base16_encode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>encoded</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_eol_delimiter</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>external_set_env_vars</name><parameter_list>(<parameter><decl><type><name>extvar_t</name> <modifier>*</modifier></type><name>extvar</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>csv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>escape</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>quote</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>scancounter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>external_set_env_vars_ext</name><argument_list>(<argument><expr><name>extvar</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>csv</name></expr></argument>, <argument><expr><name>escape</name></expr></argument>, <argument><expr><name>quote</name></expr></argument>, <argument><expr><name>EOL_UNKNOWN</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>scancounter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>external_set_env_vars_ext</name><parameter_list>(<parameter><decl><type><name>extvar_t</name> <modifier>*</modifier></type><name>extvar</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>csv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>escape</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>quote</name></decl></parameter>, <parameter><decl><type><name>EolType</name></type> <name>eol_type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>header</name></decl></parameter>,
						  <parameter><decl><type><name>uint32</name></type> <name>scancounter</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>time_t</name></type>		<name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name>  <modifier>*</modifier></type><name>tm</name> <init>= <expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="block">/* sign, 5 digits, '\0' */</comment>

	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>encoded_delim</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>line_delim_len</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_CSVOPT</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_CSVOPT</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><literal type="string">"m%1dx%3dq%3dn%1dh%1d"</literal></expr></argument>,
			<argument><expr><ternary><condition><expr><name>csv</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>escape</name></expr> ?</condition><then> <expr><literal type="number">255</literal> <operator>&amp;</operator> <operator>*</operator><name>escape</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>quote</name></expr> ?</condition><then> <expr><literal type="number">255</literal> <operator>&amp;</operator> <operator>*</operator><name>quote</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
			<argument><expr><name>eol_type</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>header</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>!=</operator> <name>GP_ROLE_DISPATCH</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_ltoa</name><argument_list>(<argument><expr><name>qdPostmasterPort</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_MASTER_PORT</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_MASTER_HOST</name></name> <operator>=</operator> <name>qdHostname</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type><name>qdinfo</name> <init>=
				<expr><call><name>cdbcomponent_getComponentInfo</name><argument_list>(<argument><expr><name>MASTER_CONTENT_ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>pg_ltoa</name><argument_list>(<argument><expr><name><name>qdinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_MASTER_PORT</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>qdinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>hostip</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_MASTER_HOST</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>qdinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>hostip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_MASTER_HOST</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>qdinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>MyProcPort</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_USER</name></name> <operator>=</operator> <name><name>MyProcPort</name><operator>-&gt;</operator><name>user_name</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_USER</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_DATABASE</name></name> <operator>=</operator> <call><name>get_database_name</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_SEG_PG_CONF</name></name> <operator>=</operator> <name>ConfigFileName</name></expr>;</expr_stmt>	<comment type="block">/* location of the segments
												 * pg_conf file  */</comment>
	<expr_stmt><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_SEG_DATADIR</name></name> <operator>=</operator> <name>DataDir</name></expr>;</expr_stmt>	<comment type="block">/* location of the segments
												 * datadirectory */</comment>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_DATE</name></name></expr></argument>, <argument><expr><literal type="string">"%04d%02d%02d"</literal></expr></argument>,
			<argument><expr><literal type="number">1900</literal> <operator>+</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_TIME</name></name></expr></argument>, <argument><expr><literal type="string">"%02d%02d%02d"</literal></expr></argument>,
			<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * read-only query don't have a valid distributed transaction ID, use
	 * "session id"-"command id" to identify the transaction.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getDistributedTransactionIdentifier</name><argument_list>(<argument><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_XID</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_XID</name></name></expr></argument>, <argument><expr><literal type="string">"%u-%.10u"</literal></expr></argument>, <argument><expr><name>gp_session_id</name></expr></argument>, <argument><expr><name>gp_command_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_CID</name></name></expr></argument>, <argument><expr><literal type="string">"%x"</literal></expr></argument>, <argument><expr><name>gp_command_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_SN</name></name></expr></argument>, <argument><expr><literal type="string">"%x"</literal></expr></argument>, <argument><expr><name>scancounter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_SEGMENT_ID</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_SEG_PORT</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>PostPortNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_SESSION_ID</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>gp_session_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_SEGMENT_COUNT</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>getgpsegmentCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_QUERY_STRING</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>debug_query_string</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>params</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>line_delim_str</name> <init>= <expr><call><name>get_eol_delimiter</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>line_delim_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>line_delim_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>line_delim_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>encoded_delim</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><call><name>palloc</name><argument_list>(<argument><expr><name>line_delim_len</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>base16_encode</name><argument_list>(<argument><expr><name>line_delim_str</name></expr></argument>, <argument><expr><name>line_delim_len</name></expr></argument>, <argument><expr><name>encoded_delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>line_delim_len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>encoded_delim</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<switch>switch<condition>(<expr><name>eol_type</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>EOL_CR</name></expr>:</case>
				<expr_stmt><expr><name>encoded_delim</name> <operator>=</operator> <literal type="string">"0D"</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>line_delim_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>EOL_NL</name></expr>:</case>
				<expr_stmt><expr><name>encoded_delim</name> <operator>=</operator> <literal type="string">"0A"</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>line_delim_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>EOL_CRNL</name></expr>:</case>
				<expr_stmt><expr><name>encoded_delim</name> <operator>=</operator> <literal type="string">"0D0A"</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>line_delim_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><name>encoded_delim</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>line_delim_len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_LINE_DELIM_STR</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>encoded_delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>extvar</name><operator>-&gt;</operator><name>GP_LINE_DELIM_LENGTH</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>line_delim_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>base16_encode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>encoded</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>raw_bytes</name> <init>= <expr><name>raw</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>encoded_bytes</name> <init>= <expr><name>encoded</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>remaining</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>remaining</name><operator>--</operator></expr>;</condition> <incr><expr><name>encoded_bytes</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>encoded_bytes</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>raw_bytes</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_eol_delimiter</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name> <init>= <expr><name><name>params</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>lc</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <name><name>lc</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ptr_value</name></name><operator>)</operator><operator>-&gt;</operator><name>defname</name></expr></argument>, <argument><expr><literal type="string">"line_delim"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <name><name>lc</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ptr_value</name></name><operator>)</operator><operator>-&gt;</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name><name>val</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>lc</name> <operator>=</operator> <name><name>lc</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * url_fopen
 *
 * checks for URLs or types in the 'url' and basically use the real fopen() for
 * standard files, or if the url happens to be a command to execute it uses
 * popen to execute it.
 *
 * On error, ereport()s
 */</comment>
<function><type><name>URL_FILE</name> <modifier>*</modifier></type>
<name>url_fopen</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forwrite</name></decl></parameter>, <parameter><decl><type><name>extvar_t</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>, <parameter><decl><type><name>ExternalSelectDesc</name></type> <name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * if 'url' starts with "execute:" then it's a command to execute and
	 * not a url (the command specified in CREATE EXTERNAL TABLE .. EXECUTE)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>EXEC_URL_PREFIX</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>EXEC_URL_PREFIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>url_execute_fopen</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>forwrite</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IS_FILE_URI</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>url_file_fopen</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>forwrite</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IS_HTTP_URI</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_GPFDIST_URI</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_GPFDISTS_URI</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>url_curl_fopen</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>forwrite</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name>url_custom_fopen</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>forwrite</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * url_fclose: Disposes of resources associated with this external web table.
 *
 * If failOnError is true, errors encountered while closing the resource results
 * in raising an ERROR.  This is particularly true for "execute:" resources where
 * command termination is not reflected until close is called.  If failOnClose is
 * false, close errors are just logged.  failOnClose should be false when closure
 * is due to LIMIT clause satisfaction.
 *
 * relname is passed in for being available in data messages only.
 */</comment>
<function><type><name>void</name></type>
<name>url_fclose</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>failOnError</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"internal error: call url_fclose with bad parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>CFTYPE_FILE</name></expr>:</case>
			<expr_stmt><expr><call><name>url_file_fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>failOnError</name></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>CFTYPE_EXEC</name></expr>:</case>
			<expr_stmt><expr><call><name>url_execute_fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>failOnError</name></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>CFTYPE_CURL</name></expr>:</case>
			<expr_stmt><expr><call><name>url_curl_fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>failOnError</name></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>CFTYPE_CUSTOM</name></expr>:</case>
			<expr_stmt><expr><call><name>url_custom_fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>failOnError</name></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default> <comment type="block">/* unknown or unsupported type - oh dear */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized external table type: %d"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>url_feof</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytesread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
    <block>{<block_content>
		<case>case <expr><name>CFTYPE_FILE</name></expr>:</case>
			<return>return <expr><call><name>url_file_feof</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>bytesread</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>CFTYPE_EXEC</name></expr>:</case>
			<return>return <expr><call><name>url_execute_feof</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>bytesread</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>CFTYPE_CURL</name></expr>:</case>
			<return>return <expr><call><name>url_curl_feof</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>bytesread</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>CFTYPE_CUSTOM</name></expr>:</case>
			<return>return <expr><call><name>url_custom_feof</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>bytesread</name></expr></argument>)</argument_list></call></expr>;</return>

		<default>default:</default> <comment type="block">/* unknown or supported type - oh dear */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized external table type: %d"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>bool</name></type>
<name>url_ferror</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytesread</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ebuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>CFTYPE_FILE</name></expr>:</case>
			<return>return <expr><call><name>url_file_ferror</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>bytesread</name></expr></argument>, <argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>ebuflen</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>CFTYPE_EXEC</name></expr>:</case>
			<return>return <expr><call><name>url_execute_ferror</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>bytesread</name></expr></argument>, <argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>ebuflen</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>CFTYPE_CURL</name></expr>:</case>
			<return>return <expr><call><name>url_curl_ferror</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>bytesread</name></expr></argument>, <argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>ebuflen</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>CFTYPE_CUSTOM</name></expr>:</case>
			<return>return <expr><call><name>url_custom_ferror</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>bytesread</name></expr></argument>, <argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>ebuflen</name></expr></argument>)</argument_list></call></expr>;</return>

		<default>default:</default> <comment type="block">/* unknown or supported type - oh dear */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized external table type: %d"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>url_fread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
          <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
          <parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
          <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
    <block>{<block_content>
		<case>case <expr><name>CFTYPE_FILE</name></expr>:</case>
			<return>return <expr><call><name>url_file_fread</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>CFTYPE_EXEC</name></expr>:</case>
			<return>return <expr><call><name>url_execute_fread</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>CFTYPE_CURL</name></expr>:</case>
			<return>return <expr><call><name>url_curl_fread</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>CFTYPE_CUSTOM</name></expr>:</case>
			<return>return <expr><call><name>url_custom_fread</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</return>

		<default>default:</default> <comment type="block">/* unknown or supported type */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized external table type: %d"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>url_fwrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
    <block>{<block_content>
		<case>case <expr><name>CFTYPE_FILE</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"CFTYPE_FILE not yet supported in url.c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>		<comment type="block">/* keep compiler quiet */</comment>

		<case>case <expr><name>CFTYPE_EXEC</name></expr>:</case>
			<return>return <expr><call><name>url_execute_fwrite</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>CFTYPE_CURL</name></expr>:</case>
			<return>return <expr><call><name>url_curl_fwrite</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>CFTYPE_CUSTOM</name></expr>:</case>
			<return>return <expr><call><name>url_custom_fwrite</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</return>

		<default>default:</default> <comment type="block">/* unknown or unsupported type */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized external table type: %d"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * flush all remaining buffered data waiting to be written out to external source
 */</comment>
<function><type><name>void</name></type>
<name>url_fflush</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
    <block>{<block_content>
		<case>case <expr><name>CFTYPE_FILE</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"CFTYPE_FILE not yet supported in url.c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>CFTYPE_EXEC</name></expr>:</case>
		<case>case <expr><name>CFTYPE_CUSTOM</name></expr>:</case>
			<comment type="block">/* data isn't buffered on app level. no op */</comment>
			<break>break;</break>

		<case>case <expr><name>CFTYPE_CURL</name></expr>:</case>
			<expr_stmt><expr><call><name>url_curl_fflush</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default> <comment type="block">/* unknown or unsupported type */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized external table type: %d"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>
</unit>
