<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/external/url_curl.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * url_curl.c
 *	  Core support for opening external relations via a URL with curl
 *
 * Portions Copyright (c) 2007-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 * IDENTIFICATION
 *	  src/backend/access/external/url_curl.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/url.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_CURL</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbsreh.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resowner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/uri.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zstd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zstd_errors.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * This struct encapsulates the libcurl resources that need to be explicitly
 * cleaned up on error. We use the resource owner mechanism to make sure
 * these are not leaked. When a ResourceOwner is released, our hook will
 * walk the list of open curlhandles, and releases any that were owned by
 * the released resource owner.
 */</comment>
<typedef>typedef <type><struct>struct <name>curlhandle_t</name>
<block>{
	<decl_stmt><decl><type><name>CURL</name>			<modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>		<comment type="block">/* The curl handle */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
	<decl_stmt><decl><type><name>ZSTD_DCtx</name>		<modifier>*</modifier></type><name>zstd_dctx</name></decl>;</decl_stmt>		<comment type="block">/* The zstd context */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>x_httpheader</name></decl>;</decl_stmt>	<comment type="block">/* list of headers */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>in_multi_handle</name></decl>;</decl_stmt>	<comment type="block">/* T, if the handle is in global
									 * multi_handle */</comment>

	<decl_stmt><decl><type><name>ResourceOwner</name></type> <name>owner</name></decl>;</decl_stmt>	<comment type="block">/* owner of this handle */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>curlhandle_t</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>curlhandle_t</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
}</block></struct></type> <name>curlhandle_t</name>;</typedef>

<comment type="block">/*
 * Private state for a web external table, implemented with libcurl.
 *
 * This struct encapsulates working state of an open curl-flavored external
 * table. This is allocated in a suitable MemoryContext, and will therefore
 * be freed automatically on abort.
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>URL_FILE</name></type>	<name>common</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>for_write</name></decl>;</decl_stmt>		<comment type="block">/* 'f' when we SELECT, 't' when we INSERT	 */</comment>

	<decl_stmt><decl><type><name>curlhandle_t</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>		<comment type="block">/* resources tracked by resource owner */</comment>

	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>curl_url</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int64</name></type>		<name>seq_number</name></decl>;</decl_stmt>

	<struct>struct
	<block>{
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>		<comment type="block">/* palloc-ed buffer */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>max</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>bot</name></decl>,
					<name>top</name>;</decl_stmt>
	}</block> <decl><name>in</name></decl>;</struct>

	<struct>struct
	<block>{
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>		<comment type="block">/* palloc-ed buffer */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>max</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>bot</name></decl>,
					<name>top</name>;</decl_stmt>
	}</block> <decl><name>out</name></decl>;</struct>

	<decl_stmt><decl><type><name>int</name></type>			<name>still_running</name></decl>;</decl_stmt>	<comment type="block">/* Is background url fetch still in progress */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>error</name></decl>,
				<name>eof</name>;</decl_stmt>			<comment type="block">/* error &amp; eof flags */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>gp_proto</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> 			<name>zstd</name></decl>;</decl_stmt>			<comment type="block">/* if gpfdist zstd compress is enabled, it equals 1 */</comment>
	<decl_stmt><decl><type><name>int</name></type> 			<name>lastsize</name></decl>;</decl_stmt>		<comment type="block">/* Recording the compressed data size */</comment>
	
	<decl_stmt><decl><type><name>char</name>	   		<modifier>*</modifier></type><name>http_response</name></decl>;</decl_stmt>
	<struct>struct
	<block>{
		<decl_stmt><decl><type><name>int</name></type>			<name>datalen</name></decl>;</decl_stmt>	<comment type="block">/* remaining datablock length */</comment>
	}</block> <decl><name>block</name></decl>;</struct>

}</block></struct></type> <name>URL_CURL_FILE</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> <operator>==</operator> <name>BIG_ENDIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>local_htonll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>local_ntohll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(n)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>local_htonll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((((uint64) htonl(n)) &lt;&lt; 32LL) | htonl((n) &gt;&gt; 32LL))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>local_ntohll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((((uint64) ntohl(n)) &lt;&lt; 32LL) | (uint32) ntohl(((uint64)n) &gt;&gt; 32LL))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST_NAME_SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDIST_TIMEOUT</name></cpp:macro>  <cpp:value>408</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TRY_WAIT_TIME</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<comment type="block">/*
 * SSL support GUCs - should be added soon. Until then we will use stubs
 *
 *  SSL Params
 *	extssl_protocol  CURL_SSLVERSION_TLSv1 				
 *  extssl_verifycert 	1
 *  extssl_verifyhost 	2
 *  extssl_no_verifycert 	0
 *  extssl_no_verifyhost 	0
 *  extssl_cert 		"gpfdists/client.crt"
 *  extssl_key 			"gpfdists/client.key"
 *  extssl_pass 		"?" 										
 *  extssl_crl 			NULL 									
 *  Misc Params
 *  extssl_libcurldebug 1 	
 */</comment>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>int</name></type> <name>extssl_protocol</name>  <init>= <expr><name>CURL_SSLVERSION_TLSv1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>int</name></type> <name>extssl_verifycert</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>int</name></type> <name>extssl_verifyhost</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>int</name></type> <name>extssl_no_verifycert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>int</name></type> <name>extssl_no_verifyhost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extssl_cert</name> <init>= <expr><literal type="string">"gpfdists/client.crt"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extssl_key</name> <init>= <expr><literal type="string">"gpfdists/client.key"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extssl_ca</name> <init>= <expr><literal type="string">"gpfdists/root.crt"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extssl_pass</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>extssl_crl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>extssl_libcurldebug</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>extssl_key_full</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>extssl_cer_full</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>extssl_cas_full</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Will hold the last curl error					*/</comment>
<comment type="block">/* Currently it is in use only for SSL connection,	*/</comment>
<comment type="block">/* but we should consider using it always			*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>curl_Error_Buffer</name><index>[<expr><name>CURL_ERROR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gp_proto0_write_done</name><parameter_list>(<parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extract_http_domain</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>i_path</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>o_domain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>make_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_ipv6</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
<function_decl><type><name>int</name></type> <name>decompress_zstd_data</name><parameter_list>(<parameter><decl><type><name>ZSTD_DCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>ZSTD_inBuffer</name><modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>ZSTD_outBuffer</name><modifier>*</modifier></type> <name>bout</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* we use a global one for convenience */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>CURLM</name> <modifier>*</modifier></type><name>multi_handle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>fill_buffer</name><parameter_list>(<parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>want</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * A helper macro, to call curl_easy_setopt(), and ereport() if it fails.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_EASY_SETOPT</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		int			e; \
\
		if ((e = curl_easy_setopt(h, opt, val)) != CURLE_OK) \
			elog(ERROR, "internal error: curl_easy_setopt \"%s\" error (%d - %s)", \
				 CppAsString(opt), e, curl_easy_strerror(e)); \
	} while(0)</cpp:value></cpp:define>

<comment type="block">/*
 * Linked list of open curl handles. These are allocated in TopMemoryContext,
 * and tracked by resource owners.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>curlhandle_t</name> <modifier>*</modifier></type><name>open_curl_handles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>url_curl_resowner_callback_registered</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>curlhandle_t</name> <modifier>*</modifier></type>
<name>create_curlhandle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>curlhandle_t</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>curlhandle_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>x_httpheader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>in_multi_handle</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>zstd_dctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>open_curl_handles</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>open_curl_handles</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>open_curl_handles</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>open_curl_handles</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

	<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>destroy_curlhandle</name><parameter_list>(<parameter><decl><type><name>curlhandle_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* unlink from linked list first */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>open_curl_handles</name> <operator>=</operator> <name><name>open_curl_handles</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>x_httpheader</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>x_httpheader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>x_httpheader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* If this handle was registered in the multi-handle, remove it */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>in_multi_handle</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>CURLMcode</name></type> <name>e</name> <init>= <expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>CURLM_OK</name> <operator>!=</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"internal error curl_multi_remove_handle (%d - %s)"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>in_multi_handle</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* cleanup */</comment>
		<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>zstd_dctx</name></name></expr>)</condition> 
	<block>{<block_content>
		<expr_stmt><expr><call><name>ZSTD_freeDCtx</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>zstd_dctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>zstd_dctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Close any open curl handles on abort.
 *
 * Note that this only releases the low-level curl objects, in the
 * curlhandle_t struct. The UTL_CURL_FILE struct itself is allocated
 * in a memory context, and will go away with the context.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>url_curl_abort_callback</name><parameter_list>(<parameter><decl><type><name>ResourceReleasePhase</name></type> <name>phase</name></decl></parameter>,
						<parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>,
						<parameter><decl><type><name>bool</name></type> <name>isTopLevel</name></decl></parameter>,
						<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>curlhandle_t</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>curlhandle_t</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>phase</name> <operator>!=</operator> <name>RESOURCE_RELEASE_AFTER_LOCKS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>next</name> <operator>=</operator> <name>open_curl_handles</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>next</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name>CurrentResourceOwner</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>isCommit</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"url_curl reference leak: %p still referenced"</literal></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>destroy_curlhandle</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * header_callback
 *
 * when a header arrives from the server curl calls this routine. In here we
 * extract the information we are interested in from the header, and store it
 * in the passed in callback argument (URL_FILE *) which lives in our
 * application.
 */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>header_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr_</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><operator>(</operator><name>URL_CURL_FILE</name> <operator>*</operator><operator>)</operator> <name>userp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>		<name>ptr</name> <init>= <expr><name>ptr_</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>len</name> <init>= <expr><name>size</name> <operator>*</operator> <name>nmemb</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> 		<name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>proto_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"X-GP-PROTO"</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>zstd_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"X-GP-ZSTD"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * parse the http response line (code and message) from
	 * the http header that we get. Basically it's the whole
	 * first line (e.g: "HTTP/1.0 400 time out"). We do this
	 * in order to capture any error message that comes from
	 * gpfdist, and later use it to report the error string in
	 * check_response() to the database user.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>url</name><operator>-&gt;</operator><name>http_response</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> 	<name>n</name> <init>= <expr><name>nmemb</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> 	<name>p</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>!=</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>p</name><index>[<expr><operator>--</operator><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>p</name><index>[<expr><operator>--</operator><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>http_response</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * extract the GP-PROTO value from the HTTP header.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>proto_len</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"X-GP-PROTO"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>proto_len</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>proto_len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>proto_len</name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

			<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></while>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

			<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>gp_proto</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>zstd_len</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"X-GP-ZSTD"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>zstd_len</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>zstd_len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>zstd_len</name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

			<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></while>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

			<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
			<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>zstd</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>url</name><operator>-&gt;</operator><name>for_write</name></name> <operator>&amp;&amp;</operator> <name><name>url</name><operator>-&gt;</operator><name>zstd</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>zstd_dctx</name></name> <operator>=</operator> <call><name>ZSTD_createDCtx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>lastsize</name></name> <operator>=</operator> <call><name>ZSTD_initDStream</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>zstd_dctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>size</name> <operator>*</operator> <name>nmemb</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * write_callback
 *
 * when data arrives from gpfdist server and curl is ready to write it
 * to our application, it calls this routine. In here we will store the
 * data in the application variable (URL_FILE *)file which is the passed
 * in the forth argument as a part of the callback settings.
 *
 * we return the number of bytes written to the application buffer
 */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>write_callback</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nitems</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>curl</name> <init>= <expr><operator>(</operator><name>URL_CURL_FILE</name> <operator>*</operator><operator>)</operator> <name>userp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> 	<name>nbytes</name> <init>= <expr><name>size</name> <operator>*</operator> <name>nitems</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>n</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * if insufficient space in buffer make more space
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name>nbytes</name> <operator>&gt;=</operator> <name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>max</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* compact ? */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* if still insufficient space in buffer, enlarge it */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name>nbytes</name> <operator>&gt;=</operator> <name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>max</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newbuf</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>+</operator> <name>nbytes</name> <operator>+</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>newbuf</name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>newbuf</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>max</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name>nbytes</name> <operator>&lt;</operator> <name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* enough space. copy buffer into curl-&gt;buf */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name> <operator>+=</operator> <name>nbytes</name></expr>;</expr_stmt>

	<return>return <expr><name>nbytes</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * check_response
 *
 * If got an HTTP response with an error code from the server (gpfdist), report
 * the error code and message it to the database user and abort operation.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_response</name><parameter_list>(<parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>response_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> 		<name>response_code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>		<name>effective_url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CURL</name><modifier>*</modifier></type> 		<name>curl</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buffer</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* get the response code from curl */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLINFO_RESPONSE_CODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>response_code</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>rc</name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>response_string</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"curl_easy_getinfo failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>rc</name> <operator>=</operator> <name>response_code</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buffer</name></sizeof></expr></argument>, <argument><expr><literal type="string">"Response Code=%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>response_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>response_string</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLINFO_EFFECTIVE_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>effective_url</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>effective_url</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>effective_url</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><literal type="number">200</literal> <operator>&lt;=</operator> <name>response_code</name> <operator>&amp;&amp;</operator> <name>response_code</name> <operator>&lt;</operator> <literal type="number">300</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>response_code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>long</name></type> 		<name>oserrno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>	<name><name>connmsg</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

			<comment type="block">/* get the os level errno, and string representation of it */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLINFO_OS_ERRNO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oserrno</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>oserrno</name> <operator>==</operator> <name>EHOSTUNREACH</name></expr>)</condition>
				<block>{<block_content>
					<return>return <expr><name>oserrno</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>oserrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>connmsg</name></expr></argument>, <argument><expr><sizeof>sizeof <name>connmsg</name></sizeof></expr></argument>, <argument><expr><literal type="string">"error code = %d (%s)"</literal></expr></argument>,
							 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>oserrno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>oserrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"connection with gpfdist failed for \"%s\", effective url: \"%s\": %s; %s"</literal></expr></argument>,
							<argument><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name></expr></argument>, <argument><expr><name>effective_url</name></expr></argument>,
							<argument><expr><operator>(</operator><ternary><condition><expr><name>oserrno</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>connmsg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,
							<argument><expr><operator>(</operator><ternary><condition><expr><name><name>curl_Error_Buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> ?</condition><then> <expr><name>curl_Error_Buffer</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>response_code</name> <operator>==</operator> <name>FDIST_TIMEOUT</name></expr>)</condition>	<comment type="line">// gpfdist server return timeout code</comment>
		<block>{<block_content>
			<return>return <expr><name>FDIST_TIMEOUT</name></expr>;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* we need to sleep 1 sec to avoid this condition:
			   1- seg X gets an error message from gpfdist
			   2- seg Y gets a 500 error
			   3- seg Y report error before seg X, and error message
			   in seg X is thrown away.
			*/</comment>
			<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"http response code %ld from gpfdist (%s): %s"</literal></expr></argument>,
							<argument><expr><name>response_code</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name></expr></argument>,
							<argument><expr><ternary><condition><expr><name><name>file</name><operator>-&gt;</operator><name>http_response</name></name></expr> ?</condition><then> <expr><name><name>file</name><operator>-&gt;</operator><name>http_response</name></name></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// callback for request /gpfdist/status for debugging purpose.</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>log_http_body</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nitems</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>body</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>nbytes</name> <init>= <expr><name>size</name> <operator>*</operator> <name>nitems</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>len</name> <init>= <expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>nbytes</name></expr> ?</condition><then> <expr><name>nbytes</name></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"gpfdist/status: %s"</literal></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>nbytes</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// GET /gpfdist/status to get gpfdist status.</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_gpfdist_status</name><parameter_list>(<parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type> <name>status_handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>status_url</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>domain</name><index>[<expr><name>HOST_NAME_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CURLcode</name></type> <name>e</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>extract_http_domain</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>HOST_NAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>status_url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>status_url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"http://%s/gpfdist/status"</literal></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>status_handle</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"internal error: get_gpfdist_status.curl_easy_init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>CURLE_OK</name> <operator>!=</operator> <operator>(</operator><name>e</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>status_handle</name></expr></argument>, <argument><expr><name>CURLOPT_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">60L</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"internal error: get_gpfdist_status.curl_easy_setopt CURLOPT_TIMEOUT error (%d - %s)"</literal></expr></argument>,
		         <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>CURLE_OK</name> <operator>!=</operator> <operator>(</operator><name>e</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>status_handle</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>status_url</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"internal error: get_gpfdist_status.curl_easy_setopt CURLOPT_URL error (%d - %s)"</literal></expr></argument>,
		         <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>CURLE_OK</name> <operator>!=</operator> <operator>(</operator><name>e</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>status_handle</name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>log_http_body</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"internal error: get_gpfdist_status.curl_easy_setopt CURLOPT_WRITEFUNCTION error (%d - %s)"</literal></expr></argument>,
				 <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>CURLE_OK</name> <operator>!=</operator> <operator>(</operator><name>e</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name>status_handle</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"send status request failed: %s"</literal></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>status_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Return true to retry */</comment>
<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>perform_func</name>)<parameter_list>(<parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gp_perform_backoff_and_check_response</name><parameter_list>(<parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>perform_func</name></type> <name>perform</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* retry in case server return timeout error */</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>wait_time</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>retry_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<comment type="block">/* retry at most 300s by default when any error happens */</comment>
	<decl_stmt><decl><type><name>time_t</name></type> <name>start_time</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>end_time</name> <init>= <expr><name>start_time</name> <operator>+</operator> <name>gpfdist_retry_timeout</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>perform</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/*
		 * Retry until end_time is reached
		 */</comment>
		<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;=</operator> <name>end_time</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"abort writing data to gpfdist, wait_time = %d, duration = %ld, gpfdist_retry_timeout = %d"</literal></expr></argument>,
				<argument><expr><name>wait_time</name></expr></argument>, <argument><expr><name>now</name> <operator>-</operator> <name>start_time</name></expr></argument>, <argument><expr><name>gpfdist_retry_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"error when connecting to gpfdist %s, quit after %d tries"</literal></expr></argument>,
							<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name></expr></argument>, <argument><expr><name>retry_count</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>for_wait</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>wait_time</name> <operator>=</operator> <ternary><condition><expr><name>wait_time</name> <operator>&gt;</operator> <name>MAX_TRY_WAIT_TIME</name></expr> ?</condition><then> <expr><name>MAX_TRY_WAIT_TIME</name></expr> </then><else>: <expr><name>wait_time</name></expr></else></ternary></expr>;</expr_stmt>
			<comment type="block">/* For last retry before end_time */</comment>
			<expr_stmt><expr><name>wait_time</name> <operator>=</operator> <ternary><condition><expr><name>wait_time</name> <operator>&gt;</operator> <name>end_time</name> <operator>-</operator> <name>now</name></expr> ?</condition><then> <expr><name>end_time</name> <operator>-</operator> <name>now</name></expr> </then><else>: <expr><name>wait_time</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"failed to send request to gpfdist (%s), will retry after %d seconds"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name></expr></argument>, <argument><expr><name>wait_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>for_wait</name><operator>++</operator> <operator>&lt;</operator> <name>wait_time</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><name>wait_time</name> <operator>=</operator> <name>wait_time</name> <operator>+</operator> <name>wait_time</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>retry_count</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>multi_perform_work</name><parameter_list>(<parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> 		<name>response_code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>response_string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>effective_url</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>CURLE_OK</name> <operator>!=</operator> <operator>(</operator><name>e</name> <operator>=</operator> <call><name>curl_multi_add_handle</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>CURLM_CALL_MULTI_PERFORM</name> <operator>!=</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error: curl_multi_add_handle failed (%d - %s)"</literal></expr></argument>,
				 <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>in_multi_handle</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>CURLM_CALL_MULTI_PERFORM</name> <operator>==</operator>
		   <operator>(</operator><name>e</name> <operator>=</operator> <call><name>curl_multi_perform</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>still_running</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
	<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error: curl_multi_perform failed (%d - %s)"</literal></expr></argument>,
			 <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* read some bytes to make sure the connection is established */</comment>
	<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* check the connection for GET request */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>check_response</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>response_code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>response_string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<switch>switch <condition>(<expr><name>code</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<return>return <expr><name>false</name></expr>;</return>
		<case>case <expr><name>EHOSTUNREACH</name></expr>:</case>
			<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLINFO_EFFECTIVE_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>effective_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"gpfdist request failed on seg%d, error: %s, effective url %s"</literal></expr></argument>,
				<argument><expr><name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>EHOSTUNREACH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>effective_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>multi_handle</name> <operator>=</operator> <call><name>curl_multi_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open \"%s\" for reading"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Unexpected response from gpfdist server: %d - %s"</literal></expr></argument>,
							   <argument><expr><name>response_code</name></expr></argument>, <argument><expr><name>response_string</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>easy_perform_work</name><parameter_list>(<parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> 		<name>response_code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>response_string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/*
	 * Use backoff policy to call curl_easy_perform to fix following error
	 * when work load is high:
	 *	- 'could not connect to server'
	 *	- gpfdist return timeout (HTTP 408)
	 * By default it will wait at least gpfdist_retry_timeout seconds before abort.
	 */</comment>
	<decl_stmt><decl><type><name>CURLcode</name></type> <name>e</name> <init>= <expr><call><name>curl_easy_perform</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>CURLE_OK</name> <operator>!=</operator> <name>e</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"%s response (%d - %s)"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* check the response from server */</comment>
		<expr_stmt><expr><name>response_code</name> <operator>=</operator> <call><name>check_response</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>response_code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>response_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name>response_code</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">0</literal></expr>:</case>
				<comment type="block">/* Success! */</comment>
				<return>return <expr><name>false</name></expr>;</return>
			<case>case <expr><name>FDIST_TIMEOUT</name></expr>:</case>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"%s timeout from gpfdist"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"error while getting response from gpfdist on %s (code %d, msg %s)"</literal></expr></argument>,
								<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name></expr></argument>, <argument><expr><name>response_code</name></expr></argument>, <argument><expr><name>response_string</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
		<if_stmt><if>if <condition>(<expr><name>response_string</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>response_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>response_string</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * fill_buffer
 *
 * Attempt to fill the read buffer up to requested number of bytes.
 * We first check if we already have the number of bytes that we
 * want already in the buffer (from write_callback), and we do
 * a select on the socket only if we don't have enough.
 *
 * return 0 if successful; raises ERROR otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>fill_buffer</name><parameter_list>(<parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>want</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>fd_set</name></type> 	<name>fdread</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fd_set</name></type> 	<name>fdwrite</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fd_set</name></type> 	<name>fdexcep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 	<name>maxfd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> 	<name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 	<name>nfds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>timeout_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* elog(NOTICE, "= still_running %d, bot %d, top %d, want %d",
	   file-&gt;u.curl.still_running, curl-&gt;in.bot, curl-&gt;in.top, want);
	*/</comment>

	<comment type="block">/* attempt to fill buffer */</comment>
	<while>while <condition>(<expr><name><name>curl</name><operator>-&gt;</operator><name>still_running</name></name> <operator>&amp;&amp;</operator> <name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>&lt;</operator> <name>want</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* set a suitable timeout to fail on */</comment>
		<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<comment type="block">/* get file descriptors from the transfers */</comment>
		<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator><name>e</name> <operator>=</operator> <call><name>curl_multi_fdset</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxfd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error: curl_multi_fdset failed (%d - %s)"</literal></expr></argument>,
						<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>maxfd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"curl_multi_fdset set maxfd = %d"</literal></expr></argument>, <argument><expr><name>maxfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>curl</name><operator>-&gt;</operator><name>still_running</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* When libcurl returns -1 in max_fd, it is because libcurl currently does something
		 * that isn't possible for your application to monitor with a socket and unfortunately
		 * you can then not know exactly when the current action is completed using select().
		 * You then need to wait a while before you proceed and call curl_multi_perform anyway
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>maxfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"curl_multi_fdset set maxfd = %d"</literal></expr></argument>, <argument><expr><name>maxfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// to call curl_multi_perform</comment>
			<expr_stmt><expr><name>nfds</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>nfds</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>maxfd</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>nfds</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"select failed on curl_multi_fdset (maxfd %d) (%d - %s)"</literal></expr></argument>, <argument><expr><name>maxfd</name></expr></argument>,
					 <argument><expr><name>save_errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>save_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error: select failed on curl_multi_fdset (maxfd %d) (%d - %s)"</literal></expr></argument>,
				 <argument><expr><name>maxfd</name></expr></argument>, <argument><expr><name>save_errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>save_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>nfds</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// timeout</comment>
			<expr_stmt><expr><name>timeout_count</name><operator>++</operator></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>timeout_count</name> <operator>%</operator> <literal type="number">12</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"segment has not received data from gpfdist for about 1 minute, waiting for %d bytes."</literal></expr></argument>,
					 <argument><expr><operator>(</operator><name>want</name> <operator>-</operator> <operator>(</operator><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>readable_external_table_timeout</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>timeout_count</name> <operator>*</operator> <literal type="number">5</literal> <operator>&gt;</operator> <name>readable_external_table_timeout</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"bot = %d, top = %d, want = %d, maxfd = %d, nfds = %d, e = %d, "</literal>
						  <literal type="string">"still_running = %d, for_write = %d, error = %d, eof = %d, datalen = %d"</literal></expr></argument>,
						  <argument><expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr></argument>, <argument><expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name>want</name></expr></argument>, <argument><expr><name>maxfd</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>curl</name><operator>-&gt;</operator><name>still_running</name></name></expr></argument>,
						  <argument><expr><name><name>curl</name><operator>-&gt;</operator><name>for_write</name></name></expr></argument>, <argument><expr><name><name>curl</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><name><name>curl</name><operator>-&gt;</operator><name>eof</name></name></expr></argument>, <argument><expr><name><name>curl</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>datalen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>get_gpfdist_status</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"segment has not received data from gpfdist for long time, cancelling the query."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>nfds</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* timeout or readable/writable sockets */</comment>
			<comment type="block">/* note we *could* be more efficient and not wait for
			 * CURLM_CALL_MULTI_PERFORM to clear here and check it on re-entry
			 * but that gets messy */</comment>
			<while>while <condition>(<expr><name>CURLM_CALL_MULTI_PERFORM</name> <operator>==</operator>
				   <operator>(</operator><name>e</name> <operator>=</operator> <call><name>curl_multi_perform</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curl</name><operator>-&gt;</operator><name>still_running</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

			<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error: curl_multi_perform failed (%d - %s)"</literal></expr></argument>,
					 <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"select return unexpected result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* elog(NOTICE, "- still_running %d, bot %d, top %d, want %d",
		   file-&gt;u.curl.still_running, curl-&gt;in.bot, curl-&gt;in.top, want);
		*/</comment>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>curl</name><operator>-&gt;</operator><name>still_running</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"quit fill_buffer due to still_running = 0, bot = %d, top = %d, want = %d, "</literal>
				<literal type="string">"for_write = %d, error = %d, eof = %d, datalen = %d, maxfd = %d, nfds = %d, e = %d"</literal></expr></argument>,
				<argument><expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr></argument>, <argument><expr><name><name>curl</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name>want</name></expr></argument>, <argument><expr><name><name>curl</name><operator>-&gt;</operator><name>for_write</name></name></expr></argument>, <argument><expr><name><name>curl</name><operator>-&gt;</operator><name>error</name></name></expr></argument>,
				<argument><expr><name><name>curl</name><operator>-&gt;</operator><name>eof</name></name></expr></argument>, <argument><expr><name><name>curl</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>datalen</name></name></expr></argument>, <argument><expr><name>maxfd</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>


	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_httpheader</name><parameter_list>(<parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>fcurl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>new_httpheader</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>tmp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"set_httpheader name/value is too long. name = %s, value=%s"</literal></expr></argument>,
			 <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>new_httpheader</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name><name>fcurl</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>x_httpheader</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>new_httpheader</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not set curl HTTP header \"%s\" to \"%s\""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>fcurl</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>x_httpheader</name></name> <operator>=</operator> <name>new_httpheader</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>replace_httpheader</name><parameter_list>(<parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>fcurl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>new_httpheader</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>tmp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"replace_httpheader name/value is too long. name = %s, value=%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Find existing header, if any */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>fcurl</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>x_httpheader</name></name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * NOTE: p-&gt;data is not palloc'd! It is originally allocated
			 * by curl_slist_append, so use plain malloc/free here as well.
			 */</comment>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dupdata</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>dupdata</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>dupdata</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* No existing header, add a new one */</comment>

	<expr_stmt><expr><name>new_httpheader</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name><name>fcurl</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>x_httpheader</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>new_httpheader</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not append HTTP header \"%s\""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>fcurl</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>x_httpheader</name></name> <operator>=</operator> <name>new_httpheader</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>local_strstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>)</parameter_list>
<block>{<block_content>	
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>str1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>*</operator><name>str2</name></expr> )</condition><block type="pseudo"><block_content>
		<return>return<expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str1</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>s2</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>str2</name></expr>;</expr_stmt>

		<while>while <condition>(<expr><operator>*</operator><name>s1</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>s1</name><operator>==</operator><operator>*</operator><name>s2</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>s1</name><operator>++</operator></expr><operator>,</operator> <expr><name>s2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s2</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return<expr><operator>(</operator><name>cp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * make_url
 *				Address resolve a URL to contain only IP number
 *
 * Resolve the hostname in the URL to an IP number, and return a new URL with
 * the same scheme and parameters using the resolved IP address. If the passed
 * url is using an IP number, the return value will be a copy of the input.
 * The output is a palloced string, it's the callers responsibility to free it
 * when no longer needed. This function will error out in case a URL cannot be
 * formed, NULL or an empty string are never returned.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>make_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_ipv6</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>authority_start</name> <init>= <expr><call><name>local_strstr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"//"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>authority_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname_start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><name>HOST_NAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostip</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>portstr</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* default for http */</comment>
	<decl_stmt><decl><type><name>bool</name></type>  <name>domain_resolved_to_ipv6</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>authority_start</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"illegal url '%s'"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>authority_start</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>authority_end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>authority_start</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>authority_end</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>authority_end</name> <operator>=</operator> <name>authority_start</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>authority_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>hostname_start</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>authority_start</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hostname_start</name> <operator>&amp;&amp;</operator> <name>hostname_start</name> <operator>&lt;</operator> <name>authority_end</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>hostname_start</name> <operator>=</operator> <name>authority_start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>is_ipv6</name></expr>)</condition> <comment type="block">/* IPV6 */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>hostname_end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>hostname_start</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>hostname_end</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_NAME</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected IPv6 format %s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>hostname_end</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>hostname_end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* port number exists in this url. get it */</comment>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <name>authority_end</name> <operator>-</operator> <name>hostname_end</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"&lt;port&gt; substring size must not exceed 8 characters"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>, <argument><expr><name>hostname_end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>portstr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* skippping the brackets */</comment>
		<expr_stmt><expr><name>hostname_end</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>hostname_start</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>hostname_end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>hostname_start</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hostname_end</name> <operator>&amp;&amp;</operator> <name>hostname_end</name> <operator>&lt;</operator> <name>authority_end</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>hostname_end</name> <operator>=</operator> <name>authority_end</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* port number exists in this url. get it */</comment>
			<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>authority_end</name> <operator>-</operator> <name>hostname_end</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"&lt;port&gt; substring size must not exceed 8 characters"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>, <argument><expr><name>hostname_end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>portstr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>port</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"&lt;port&gt; substring must contain only digits"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>	

	<if_stmt><if>if <condition>(<expr><name>hostname_end</name> <operator>-</operator> <name>hostname_start</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"hostname too long for url '%s'"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>hostname_start</name></expr></argument>, <argument><expr><name>hostname_end</name> <operator>-</operator> <name>hostname_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hostname</name><index>[<expr><name>hostname_end</name> <operator>-</operator> <name>hostname_start</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>hostip</name> <operator>=</operator> <call><name>getDnsAddress</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>hostip</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"hostname cannot be resolved '%s'"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * test for the case where the URL originally contained a domain name
	 * (so is_ipv6 was set to false) but the DNS resolution in getDnsAddress
	 * returned an IPv6 address so know we also have to put the square
	 * brackets [..] in the URL string.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>hostip</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_ipv6</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>domain_resolved_to_ipv6</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>hostname_start</name> <operator>-</operator> <name>url</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>url</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<if_stmt><if>if <condition>(<expr><name>domain_resolved_to_ipv6</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>hostip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>domain_resolved_to_ipv6</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>url</name> <operator>+</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>hostname_start</name> <operator>-</operator> <name>url</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * extract_http_domain
 *
 * extracts the domain string from a http url
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>extract_http_domain</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>i_path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>o_domain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>domsz</name></decl>, <decl><type ref="prev"/><name>cpsz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p_st</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>local_strstr</name><argument_list>(<argument><expr><name>i_path</name></expr></argument>, <argument><expr><literal type="string">"//"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>p_st</name> <operator>=</operator> <name>p_st</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p_en</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>p_st</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>domsz</name> <operator>=</operator> <name>p_en</name> <operator>-</operator> <name>p_st</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cpsz</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>domsz</name> <operator>&lt;</operator> <name>dlen</name> <operator>)</operator></expr> ?</condition><then> <expr><name>domsz</name></expr> </then><else>: <expr><name>dlen</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>o_domain</name></expr></argument>, <argument><expr><name>p_st</name></expr></argument>, <argument><expr><name>cpsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>url_has_ipv6_format</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>is6</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ipv6</name> <init>= <expr><call><name>local_strstr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"://["</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>( <expr><name>ipv6</name></expr> )</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ipv6</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ipv6</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>( <expr><name>ipv6</name></expr> )</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>is6</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
	<return>return <expr><name>is6</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_file_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>file</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>URL_FILE</name> <modifier>*</modifier></type>
<name>url_curl_fopen</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forwrite</name></decl></parameter>, <parameter><decl><type><name>extvar_t</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>ip_mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>e</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_ipv6</name> <init>= <expr><call><name>url_has_ipv6_format</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<comment type="block">/* Reset curl_Error_Buffer */</comment>
	<expr_stmt><expr><name><name>curl_Error_Buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IS_HTTP_URI</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_GPFDIST_URI</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_GPFDISTS_URI</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>url_curl_resowner_callback_registered</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RegisterResourceReleaseCallback</name><argument_list>(<argument><expr><name>url_curl_abort_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>url_curl_resowner_callback_registered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>make_url</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>is_ipv6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>URL_CURL_FILE</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>URL_CURL_FILE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CFTYPE_CURL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>for_write</name></name> <operator>=</operator> <name>forwrite</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name></name> <operator>=</operator> <call><name>create_curlhandle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We need to call is_url_ipv6 for the case where inside make_url
	 * function a domain name was transformed to an IPv6 address.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_ipv6</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>is_ipv6</name> <operator>=</operator> <call><name>url_has_ipv6_format</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_GPFDISTS_URI</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * SSL support addition
		 *
		 * negotiation will fail if verifyhost is on, so we *must*
		 * not resolve the hostname in this case. I have decided
		 * to not resolve it anyway and let libcurl do the work.
		 */</comment>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IS_GPFDIST_URI</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_GPFDISTS_URI</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* replace gpfdist:// with http:// or gpfdists:// with https://
		 * by overriding 'dist' with 'http' */</comment>
		<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tmp_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>tmp_len</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>header_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* initialize a curl session and get a libcurl handle for it */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error: curl_easy_init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_VERBOSE</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument> <comment type="block">/* FALSE */</comment>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set callback for each header received from server */</comment>
	<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_HEADERFUNCTION</name></expr></argument>, <argument><expr><name>header_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 'file' is the application variable that gets passed to header_callback */</comment>
	<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_WRITEHEADER</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set callback for each data block arriving from server to be written to application */</comment>
	<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>write_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 'file' is the application variable that gets passed to write_callback */</comment>
	<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_WRITEDATA</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_ipv6</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ip_mode</name> <operator>=</operator> <name>CURL_IPRESOLVE_V4</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ip_mode</name> <operator>=</operator> <name>CURL_IPRESOLVE_V6</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_IPRESOLVE</name></expr></argument>, <argument><expr><name>ip_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * set up a linked list of http headers. start with common headers
	 * needed for read and write operations, and continue below with
	 * more specifics
	 */</comment>			
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>x_httpheader</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * support multihomed http use cases. see MPP-11874
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IS_HTTP_URI</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>domain</name><index>[<expr><name>HOST_NAME_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>extract_http_domain</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>HOST_NAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-XID"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>GP_XID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-CID"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>GP_CID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-SN"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>GP_SN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-SEGMENT-ID"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>GP_SEGMENT_ID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-SEGMENT-COUNT"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>GP_SEGMENT_COUNT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-LINE-DELIM-STR"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>GP_LINE_DELIM_STR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-LINE-DELIM-LENGTH"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>GP_LINE_DELIM_LENGTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>forwrite</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// TIMEOUT for POST only, GET is single HTTP request,</comment>
		<comment type="line">// probablity take long time.</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"gpfdist_retry_timeout = %d"</literal></expr></argument>, <argument><expr><name>gpfdist_retry_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_TIMEOUT</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>gpfdist_retry_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*init sequence number*/</comment>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>seq_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<comment type="block">/* write specific headers */</comment>
		<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-PROTO"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-SEQ"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>, <argument><expr><literal type="string">"text/xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* read specific - (TODO: unclear why some of these are needed) */</comment>
		<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-PROTO"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
		<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-ZSTD"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-MASTER_HOST"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>GP_MASTER_HOST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-MASTER_PORT"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>GP_MASTER_PORT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-CSVOPT"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>GP_CSVOPT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP_SEG_PG_CONF"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>GP_SEG_PG_CONF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP_SEG_DATADIR"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>GP_SEG_DATADIR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-DATABASE"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>GP_DATABASE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-USER"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>GP_USER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-SEG-PORT"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>GP_SEG_PORT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-SESSION-ID"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>GP_SESSION_ID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
		
	<block>{<block_content>
		<comment type="block">/*
		 * MPP-13031
		 * copy #transform fragment, if present, into X-GP-TRANSFORM header
		 */</comment>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>local_strstr</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="string">"#transform="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-TRANSFORM"</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_HTTPHEADER</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>x_httpheader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>multi_handle</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>multi_handle</name> <operator>=</operator> <call><name>curl_multi_init</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error: curl_multi_init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * SSL configuration
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IS_GPFDISTS_URI</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>PointerIsValid</name><argument_list>(<argument><expr><name>DataDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"trying to load certificates from %s"</literal></expr></argument>, <argument><expr><name>DataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* curl will save its last error in curlErrorBuffer */</comment>
		<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_ERRORBUFFER</name></expr></argument>, <argument><expr><name>curl_Error_Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* cert is stored PEM coded in file... */</comment>
		<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_SSLCERTTYPE</name></expr></argument>, <argument><expr><literal type="string">"PEM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* set the cert for client authentication */</comment>
		<if_stmt><if>if <condition>(<expr><name>extssl_cert</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>extssl_cer_full</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>extssl_cer_full</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>DataDir</name></expr></argument>, <argument><expr><name>extssl_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_file_exists</name><argument_list>(<argument><expr><name>extssl_cer_full</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open certificate file \"%s\": %m"</literal></expr></argument>,
								<argument><expr><name>extssl_cer_full</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_SSLCERT</name></expr></argument>, <argument><expr><name>extssl_cer_full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* set the key passphrase */</comment>
		<if_stmt><if>if <condition>(<expr><name>extssl_pass</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_KEYPASSWD</name></expr></argument>, <argument><expr><name>extssl_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_SSLKEYTYPE</name></expr></argument>,<argument><expr><literal type="string">"PEM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* set the private key (file or ID in engine) */</comment>
		<if_stmt><if>if <condition>(<expr><name>extssl_key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>extssl_key_full</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>extssl_key_full</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>DataDir</name></expr></argument>, <argument><expr><name>extssl_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_file_exists</name><argument_list>(<argument><expr><name>extssl_key_full</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open private key file \"%s\": %m"</literal></expr></argument>,
								<argument><expr><name>extssl_key_full</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_SSLKEY</name></expr></argument>, <argument><expr><name>extssl_key_full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* set the file with the CA certificates, for validating the server */</comment>
		<if_stmt><if>if <condition>(<expr><name>extssl_ca</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>extssl_cas_full</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>extssl_cas_full</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>DataDir</name></expr></argument>, <argument><expr><name>extssl_ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_file_exists</name><argument_list>(<argument><expr><name>extssl_cas_full</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open private key file \"%s\": %m"</literal></expr></argument>,
								<argument><expr><name>extssl_cas_full</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_CAINFO</name></expr></argument>, <argument><expr><name>extssl_cas_full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* set cert verification */</comment>
		<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_SSL_VERIFYPEER</name></expr></argument>,
				<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>verify_gpfdists_cert</name></expr> ?</condition><then> <expr><name>extssl_verifycert</name></expr> </then><else>: <expr><name>extssl_no_verifycert</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* set host verification */</comment>
		<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_SSL_VERIFYHOST</name></expr></argument>,
				<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>verify_gpfdists_cert</name></expr> ?</condition><then> <expr><name>extssl_verifyhost</name></expr> </then><else>: <expr><name>extssl_no_verifyhost</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* set protocol */</comment>
		<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_SSLVERSION</name></expr></argument>, <argument><expr><name>extssl_protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* disable session ID cache */</comment>
		<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_SSL_SESSIONID_CACHE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* set debug */</comment>
		<if_stmt><if>if <condition>(<expr><name>CURLE_OK</name> <operator>!=</operator> <operator>(</operator><name>e</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_VERBOSE</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>extssl_libcurldebug</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>extssl_libcurldebug</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"internal error: curl_easy_setopt CURLOPT_VERBOSE error (%d - %s)"</literal></expr></argument>,
					 <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Allocate input and output buffers. */</comment>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* 1 kB buffer initially */</comment>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>max</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>forwrite</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>bufsize</name> <init>= <expr><name>writable_external_table_bufsize</name> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>max</name></name> <operator>=</operator> <name>bufsize</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>bot</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * lets check our connection.
	 * start the fetch if we're SELECTing (GET request), or write an
	 * empty message if we're INSERTing (POST request)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>forwrite</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gp_perform_backoff_and_check_response</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>multi_perform_work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* use empty message */</comment>
		<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDS</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDSIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* post away and check response, retry if failed (timeout or * connect error) */</comment>
		<expr_stmt><expr><call><name>gp_perform_backoff_and_check_response</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>easy_perform_work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>seq_number</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><operator>(</operator><name>URL_FILE</name> <operator>*</operator><operator>)</operator> <name>file</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * url_fclose: Disposes of resources associated with this external web table.
 *
 * If failOnError is true, errors encountered while closing the resource results
 * in raising an ERROR.  This is particularly true for "execute:" resources where
 * command termination is not reflected until close is called.  If failOnClose is
 * false, close errors are just logged.  failOnClose should be false when closure
 * is due to LIMIT clause satisfaction.
 *
 * relname is passed in for being available in data messages only.
 */</comment>
<function><type><name>void</name></type>
<name>url_curl_fclose</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>fileg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>failOnError</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><operator>(</operator><name>URL_CURL_FILE</name> <operator>*</operator><operator>)</operator> <name>fileg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>sinfo</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * if WET, send a final "I'm done" request from this segment.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>for_write</name></name> <operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gp_proto0_write_done</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>destroy_curlhandle</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* free any allocated buffer space */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curl_url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ptr</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>for_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>gp_proto</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>url_curl_feof</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytesread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>cfile</name> <init>= <expr><operator>(</operator><name>URL_CURL_FILE</name> <operator>*</operator><operator>)</operator> <name>file</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><name><name>cfile</name><operator>-&gt;</operator><name>eof</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type>
<name>url_curl_ferror</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytesread</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ebuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>cfile</name> <init>= <expr><operator>(</operator><name>URL_CURL_FILE</name> <operator>*</operator><operator>)</operator> <name>file</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><name><name>cfile</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * gp_proto0_read
 *
 * get data from the server and handle it according to PROTO 0. In PROTO 0 we
 * expect the content of the file without any kind of meta info. Simple.
 */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>gp_proto0_read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsz</name></decl></parameter>, <parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> 		<name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>bufsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* check if there's data in the buffer - if not fill_buffer()
	 * either errored or EOF. For proto0, we cannot distinguish
	 * between error and EOF. */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>still_running</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>bufsz</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name>bufsz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* xfer data to caller */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
<function><type><name>int</name></type> 
<name>decompress_zstd_data</name><parameter_list>(<parameter><decl><type><name>ZSTD_DCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>ZSTD_inBuffer</name><modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>ZSTD_outBuffer</name><modifier>*</modifier></type> <name>bout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	
	<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>
	<comment type="block">/* Ret indicates the number of bytes of next data frame to be decompressed.
	 * And if an error occur in ZSTD_decompressStream, ret will be a error number.
	 * If ZSTD_isError is true, the ret is a error number.
	 * The content of the error can be got by ZSTD_getErrorName..
	 */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZSTD_decompressStream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>bout</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ZSTD_isError</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
				<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ZSTD_decompressStream failed, error is %s"</literal></expr></argument>, <argument><expr><call><name>ZSTD_getErrorName</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * gp_proto1_read
 *
 * get data from the server and handle it according to PROTO 1. In this protocol
 * each data block is tagged by meta info like this:
 * byte 0: type (can be 'F'ilename, 'O'ffset, 'D'ata, 'E'rror, 'L'inenumber)
 * byte 1-4: length. # bytes of following data block. in network-order.
 * byte 5-X: the block itself.
 */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>gp_proto1_read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsz</name></decl></parameter>, <parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Loop through and get all types of messages, until we get actual data,
	 * or until there's no more data. Then quit the loop to process it and
	 * return it.
	 */</comment>
	<while>while <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>datalen</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* need 5 bytes, 1 byte type + 4 bytes length */</comment>
		<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"gpfdist error: server closed connection"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"gpfdist error: incomplete packet - packet len %d"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* read type */</comment>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block">/* read len */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* change order */</comment>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gpfdist error: bad packet type %d len %d"</literal></expr></argument>,
				 <argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Error */</comment>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * cheat a little. swap last char and
				 * NUL-terminator. then print string (without last
				 * char) and print last char artificially
				 */</comment>
				<decl_stmt><decl><type><name>char</name></type> <name>x</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"gpfdist error - %s%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gpfdist error: please check gpfdist log messages."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Filename */</comment>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'F'</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>buf2</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gpfdist error: filename too long (%d)"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>fill_buffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gpfdist error: stream ends suddenly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * If SREH is used we now update it with the actual file that the
			 * gpfdist server is reading. This is because SREH (or the client
			 * in general) doesn't know which file gpfdist is reading, since
			 * the original URL may include a wildcard or a directory listing.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>pstate</name><operator>-&gt;</operator><name>cdbsreh</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type> <name><name>fname</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>cdbsreh</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>pstate</name><operator>-&gt;</operator><name>cdbsreh</name><operator>-&gt;</operator><name>filename</name></name></sizeof></expr></argument>, <argument><expr><literal type="string">"%s [%s]"</literal></expr></argument>,
						 <argument><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>&lt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Offset */</comment>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'O'</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gpfdist error: offset not of length 8 (%d)"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>fill_buffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gpfdist error: stream ends suddenly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>&lt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Line number */</comment>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int64</name></type> <name>line_number</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gpfdist error: line number not of length 8 (%d)"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>fill_buffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gpfdist error: stream ends suddenly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * update the line number of the first line we're about to get from
			 * gpfdist. pstate will update the following lines when processing
			 * the data
			 */</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_number</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>line_number</name> <operator>=</operator> <call><name>local_ntohll</name><argument_list>(<argument><expr><name>line_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>cur_lineno</name></name> <operator>=</operator> <ternary><condition><expr><name>line_number</name></expr> ?</condition><then> <expr><name>line_number</name></expr> </then><else>: <expr><name>INT64_MIN</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>&lt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Data */</comment>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>datalen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gpfdist error: unknown meta type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<decl_stmt><decl><type><name>int</name></type> <name>left_bytes</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>zstd</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* 'lastsize' is the number of bytes required for next decompression.
		 * 'left_bytes' is the number of bytes remained in 'file-&gt;in.ptr'.
		 * If left_bytes is less than 'lastsize', the next decompression
		 * can't complete in a decompression operation. Thus, when 
		 * 'file-&gt;lastsize &gt; left_bytes', we need more bytes and fill_buffer is called.
		 * 
		 * When the condition 'file-&gt;block.datalen == len' is met, a new
		 * request just start. In this case lastsize is an init value, and 
		 * cannot provide the information about how many bytes required
		 * to finish the first frame decompression. In this case, enough
		 * bytes(more than ZSTD_DStreamInSize() returning) should be filled
		 * into 'file-&gt;in.ptr' to ensure that the first decompression 
		 * completing.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>lastsize</name></name> <operator>&gt;</operator> <name>left_bytes</name> <operator>||</operator> <name><name>file</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>datalen</name></name> <operator>==</operator> <name>len</name></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
			<decl_stmt><decl><type><name>int</name></type> <name>wantsz</name> <init>= <expr><call><name>ZSTD_DStreamInSize</name><argument_list>()</argument_list></call> <operator>-</operator> <name>left_bytes</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>wantsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> 
	<else>else 
	<block>{<block_content>
		<comment type="block">/* read data block */</comment>
		<if_stmt><if>if <condition>(<expr><name>bufsz</name> <operator>&gt;</operator> <name><name>file</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>datalen</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>bufsz</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>datalen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>bufsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr>;</expr_stmt>

	<comment type="block">/* if gpfdist closed connection prematurely or died catch it here */</comment>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>still_running</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"gpfdist server closed connection"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"The root cause is likely to be an overload of the ETL host or "</literal>
							 <literal type="string">"a temporary network glitch between the database and the ETL host "</literal>
							 <literal type="string">"causing the connection between the gpfdist and database to disconnect."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>bufsz</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name>bufsz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>zstd</name></name> <operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>zstd_dctx</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
		<comment type="block">/* It is absolutely to put the decompression code in a loop.
		 * Since not every call of decompress_zstd_data will get data into bout.
		 * However, even thought there is no data in bout, the call of 
		 * decompress_zstd_data is neccersary for following decompression.
		 * If a empty buf is returned to gpdb, the error will occur. 
		 * So the loop ensures that we push forward the decompression until there 
		 * is data in bout.
		 */</comment>
		<do>do
		<block>{<block_content>
			<decl_stmt><decl><type><name>ZSTD_inBuffer</name></type> <name>bin</name> <init>= <expr><block>{<expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr>, <expr><name><name>file</name><operator>-&gt;</operator><name>lastsize</name></name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ZSTD_outBuffer</name></type> <name>bout</name> <init>= <expr><block>{<expr><name>buf</name></expr>, <expr><name>bufsz</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decompress_zstd_data</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>zstd_dctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>bout</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt> 
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>+=</operator> <name><name>bin</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>lastsize</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>lastsize</name></name> <operator>=</operator> <call><name>ZSTD_initDStream</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>zstd_dctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>		
		</block_content>}</block> while <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>bot</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>datalen</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * gp_proto0_write
 *
 * use curl to write data to a the remote gpfdist server. We use
 * a push model with a POST request.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>gp_proto0_write</name><parameter_list>(<parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>		<name>buf</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>nbytes</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>top</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* post binary data */</comment>
	<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDS</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set the size of the postfields data */</comment>
	<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDSIZE</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set sequence number */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>seq</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>INT64_FORMAT</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>seq_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>replace_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-SEQ"</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>gp_perform_backoff_and_check_response</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>easy_perform_work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>seq_number</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Send an empty POST request, with an added X-GP-DONE header.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>gp_proto0_write_done</name><parameter_list>(<parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>set_httpheader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"X-GP-DONE"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* use empty message */</comment>
	<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDS</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CURL_EASY_SETOPT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curl</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDSIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* post away! */</comment>
	<expr_stmt><expr><call><name>gp_perform_backoff_and_check_response</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>easy_perform_work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>curl_fread</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsz</name></decl></parameter>, <parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>		<name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>		<name>q</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>bufsz</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> 	<name>gp_proto</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>gp_proto</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>gp_proto</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>gp_proto</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unknown gp protocol %d"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>gp_proto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <name>n</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>gp_proto</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gp_proto0_read</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gp_proto1_read</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>p</name> <operator>-</operator> <name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>curl_fwrite</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>for_write</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot write to a read-mode external table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>gp_proto</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>gp_proto</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unknown gp protocol %d"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>gp_proto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * if buffer is full (current item can't fit) - write it out to
	 * the server. if item still doesn't fit after we emptied the
	 * buffer, make more room.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name>nbytes</name> <operator>&gt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>max</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* item doesn't fit */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>top</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* write out existing data, empty the buffer */</comment>
			<expr_stmt><expr><call><name>gp_proto0_write</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<comment type="block">/* does it still not fit? enlarge buffer */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name>nbytes</name> <operator>&gt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>max</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> 	<name>n</name> <init>= <expr><name>nbytes</name> <operator>+</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>	<name>newbuf</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>newbuf</name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newbuf</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"out of memory (curl_fwrite)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>newbuf</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>max</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nbytes</name> <operator>&lt;</operator> <name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* copy buffer into file-&gt;buf */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>top</name></name> <operator>+=</operator> <name>nbytes</name></expr>;</expr_stmt>

	<return>return <expr><name>nbytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>url_curl_fread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>cfile</name> <init>= <expr><operator>(</operator><name>URL_CURL_FILE</name> <operator>*</operator><operator>)</operator> <name>file</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* get data (up size) from the http/gpfdist server */</comment>
	<return>return <expr><call><name>curl_fread</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>cfile</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>url_curl_fwrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>URL_CURL_FILE</name> <modifier>*</modifier></type><name>cfile</name> <init>= <expr><operator>(</operator><name>URL_CURL_FILE</name> <operator>*</operator><operator>)</operator> <name>file</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* write data to the gpfdist server via curl */</comment>
	<return>return <expr><call><name>curl_fwrite</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>cfile</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * flush all remaining buffered data waiting to be written out to external source
 */</comment>
<function><type><name>void</name></type>
<name>url_curl_fflush</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>gp_proto0_write</name><argument_list>(<argument><expr><operator>(</operator><name>URL_CURL_FILE</name> <operator>*</operator><operator>)</operator> <name>file</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* USE_CURL */</comment>


<comment type="block">/* Dummy versions of all the url_curl_* functions, when built without libcurl. */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>curl_not_compiled_error</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unsupported external table URI"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"This functionality requires the server to be built with libcurl support."</literal></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"You need to rebuild the server using --with-libcurl."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>URL_FILE</name> <modifier>*</modifier></type>
<name>url_curl_fopen</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forwrite</name></decl></parameter>, <parameter><decl><type><name>extvar_t</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>curl_not_compiled_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return> <comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>url_curl_fclose</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>failOnError</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>curl_not_compiled_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>url_curl_feof</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytesread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>curl_not_compiled_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return> <comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>url_curl_ferror</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytesread</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ebuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>curl_not_compiled_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return> <comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function>
<function><type><name>size_t</name></type> <name>url_curl_fread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>curl_not_compiled_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function>
<function><type><name>size_t</name></type> <name>url_curl_fwrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>curl_not_compiled_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>url_curl_fflush</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>curl_not_compiled_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_CURL */</comment>
</unit>
