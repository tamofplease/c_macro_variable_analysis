<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/external/url_custom.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * url_custom.c
 *	  Core support for opening external relations via a custom URL
 *
 * Portions Copyright (c) 2007-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 * IDENTIFICATION
 *	  src/backend/access/external/url_custom.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/extprotocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_extprotocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Private state for an external table that's backend by a user-defined
 * protocol handler function.
 */</comment>
<typedef>typedef <type><struct>struct <name>URL_CUSTOM_FILE</name>
<block>{
	<decl_stmt><decl><type><name>URL_FILE</name></type>	<name>common</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>protocol_udf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExtProtocol</name></type> <name>extprotocol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>protcxt</name></decl>;</decl_stmt>

}</block></struct></type> <name>URL_CUSTOM_FILE</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int32</name></type>
<name>InvokeExtProtocol</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
                  <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>,
                  <parameter><decl><type><name>URL_CUSTOM_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
                  <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>,
                  <parameter><decl><type><name>bool</name></type> <name>last_call</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>URL_FILE</name> <modifier>*</modifier></type>
<name>url_custom_fopen</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
                 <parameter><decl><type><name>bool</name></type> <name>forwrite</name></decl></parameter>,
                 <parameter><decl><type><name>extvar_t</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>,
                 <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>,
                 <parameter><decl><type><name>ExternalSelectDesc</name></type> <name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* we're using a custom protocol */</comment>
	<decl_stmt><decl><type><name>URL_CUSTOM_FILE</name>   <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExtPtcFuncType</name></type> <name>ftype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>procOid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>prot_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>url_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>URL_CUSTOM_FILE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CFTYPE_CUSTOM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ftype</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>forwrite</name></expr> ?</condition><then> <expr><name>EXTPTC_FUNC_WRITER</name></expr> </then><else>: <expr><name>EXTPTC_FUNC_READER</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/* extract protocol name from url string */</comment>
	<expr_stmt><expr><name>url_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>url_len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

	<expr_stmt><expr><name>prot_name</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prot_name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>procOid</name> <operator>=</operator> <call><name>LookupExtProtocolFunction</name><argument_list>(<argument><expr><name>prot_name</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Create a memory context to store all custom UDF private
	 * memory. We do this in order to allow resource cleanup in
	 * cases of query abort. We use TopTransactionContext as a
	 * parent context so that it lives longer than Portal context.
	 * Note that we always Delete our new context, in normal execution
	 * and in abort (see url_fclose()).
	 */</comment>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>protcxt</name></name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopTransactionContext</name></expr></argument>,
										  <argument><expr><literal type="string">"CustomProtocolMemCxt"</literal></expr></argument>,
										  <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
										  <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
										  <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>protcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>protocol_udf</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>extprotocol</name></name> <operator>=</operator> <operator>(</operator><name>ExtProtocolData</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ExtProtocolData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* we found our function. set it in custom file handler */</comment>
	<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>procOid</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>protocol_udf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>extprotocol</name><operator>-&gt;</operator><name>prot_user_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>extprotocol</name><operator>-&gt;</operator><name>prot_last_call</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>extprotocol</name><operator>-&gt;</operator><name>prot_url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>extprotocol</name><operator>-&gt;</operator><name>prot_databuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>extprotocol</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>prot_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>URL_FILE</name> <operator>*</operator><operator>)</operator> <name>file</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>url_custom_fclose</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>failOnError</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>URL_CUSTOM_FILE</name>   <modifier>*</modifier></type><name>cfile</name> <init>= <expr><operator>(</operator><name>URL_CUSTOM_FILE</name> <operator>*</operator><operator>)</operator> <name>file</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* last call. let the user close custom resources */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cfile</name><operator>-&gt;</operator><name>protocol_udf</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>InvokeExtProtocol</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cfile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* now clean up everything not cleaned by user */</comment>
	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>cfile</name><operator>-&gt;</operator><name>protcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>cfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>url_custom_feof</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytesread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>bytesread</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>url_custom_ferror</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytesread</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ebuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>bytesread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>url_custom_fread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>URL_CUSTOM_FILE</name>   <modifier>*</modifier></type><name>cfile</name> <init>= <expr><operator>(</operator><name>URL_CUSTOM_FILE</name> <operator>*</operator><operator>)</operator> <name>file</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>InvokeExtProtocol</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>cfile</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>url_custom_fwrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>URL_CUSTOM_FILE</name>   <modifier>*</modifier></type><name>cfile</name> <init>= <expr><operator>(</operator><name>URL_CUSTOM_FILE</name> <operator>*</operator><operator>)</operator> <name>file</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>InvokeExtProtocol</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>cfile</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32</name></type>
<name>InvokeExtProtocol</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
                  <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>,
                  <parameter><decl><type><name>URL_CUSTOM_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
                  <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>,
                  <parameter><decl><type><name>bool</name></type> <name>last_call</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>LOCAL_FCINFO</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ExtProtocolData</name>      <modifier>*</modifier></type><name>extprotocol</name>     <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>extprotocol</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name>             <modifier>*</modifier></type><name>extprotocol_udf</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>protocol_udf</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>                <name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type>        <name>oldcontext</name></decl>;</decl_stmt>

	<comment type="block">/* must have been created during url_fopen() */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>extprotocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>extprotocol</name><operator>-&gt;</operator><name>type</name></name>           <operator>=</operator> <name>T_ExtProtocolData</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extprotocol</name><operator>-&gt;</operator><name>prot_url</name></name>       <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extprotocol</name><operator>-&gt;</operator><name>prot_relation</name></name>  <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>last_call</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>pstate</name><operator>-&gt;</operator><name>rel</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extprotocol</name><operator>-&gt;</operator><name>prot_databuf</name></name>   <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>last_call</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extprotocol</name><operator>-&gt;</operator><name>prot_maxbytes</name></name>  <operator>=</operator> <name>nbytes</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extprotocol</name><operator>-&gt;</operator><name>prot_last_call</name></name> <operator>=</operator> <name>last_call</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>InitFunctionCallInfoData</name><argument_list>(<comment type="block">/* FunctionCallInfoData */</comment> <argument><expr><operator>*</operator><name>fcinfo</name></expr></argument>,
							 <comment type="block">/* FmgrInfo */</comment> <argument><expr><name>extprotocol_udf</name></expr></argument>,
							 <comment type="block">/* nArgs */</comment> <argument><expr><literal type="number">0</literal></expr></argument>,
							 <comment type="block">/* collation */</comment> <argument><expr><name>InvalidOid</name></expr></argument>,
							 <comment type="block">/* Call Context */</comment> <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>extprotocol</name></expr></argument>,
							 <comment type="block">/* ResultSetInfo */</comment> <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* invoke the protocol within a designated memory context */</comment>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>protcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FunctionCallInvoke</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We do not expect a null result */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fcinfo</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"function %u returned NULL"</literal></expr></argument>, <argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
