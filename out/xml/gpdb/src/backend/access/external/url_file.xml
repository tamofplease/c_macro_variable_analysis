<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/access/external/url_file.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * url_file.c
 *	  Core support for opening external relations via a file URL
 *
 * Portions Copyright (c) 2007-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 * IDENTIFICATION
 *	  src/backend/access/external/url_file.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbsreh.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fstream/gfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fstream/fstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/uri.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Private state for a file external table, backend by an fstream.
 */</comment>
<typedef>typedef <type><struct>struct <name>URL_FSTREAM_FILE</name>
<block>{
	<decl_stmt><decl><type><name>URL_FILE</name></type>	<name>common</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>fstream_t</name>  <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
}</block></struct></type> <name>URL_FSTREAM_FILE</name>;</typedef>

<function><type><name>URL_FILE</name> <modifier>*</modifier></type>
<name>url_file_fopen</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forwrite</name></decl></parameter>, <parameter><decl><type><name>extvar_t</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>URL_FSTREAM_FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>url</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>PROTOCOL_FILE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>fstream_options</name></name></type> <name>fo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>response_code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>response_string</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>forwrite</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot change a readable external table \"%s\""</literal></expr></argument>, <argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>cur_relname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>fo</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"External Table error opening file: '%s', invalid "</literal>
			 <literal type="string">"file path"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>URL_FSTREAM_FILE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CFTYPE_FILE</name></expr>;</expr_stmt> <comment type="block">/* marked as local FILE */</comment>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fo</name><operator>.</operator><name>is_csv</name></name> <operator>=</operator> <name><name>pstate</name><operator>-&gt;</operator><name>csv_mode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fo</name><operator>.</operator><name>quote</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pstate</name><operator>-&gt;</operator><name>quote</name></name></expr> ?</condition><then> <expr><operator>*</operator><name><name>pstate</name><operator>-&gt;</operator><name>quote</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fo</name><operator>.</operator><name>escape</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pstate</name><operator>-&gt;</operator><name>escape</name></name></expr> ?</condition><then> <expr><operator>*</operator><name><name>pstate</name><operator>-&gt;</operator><name>escape</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fo</name><operator>.</operator><name>eol_type</name></name> <operator>=</operator> <name><name>pstate</name><operator>-&gt;</operator><name>eol_type</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fo</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name><name>pstate</name><operator>-&gt;</operator><name>header_line</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fo</name><operator>.</operator><name>bufsize</name></name> <operator>=</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>header_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Open the file stream. This includes opening the first file to be read
	 * and finding and preparing any other files to be opened later (if a
	 * wildcard or directory is used). In addition we check ahead of time
	 * that all the involved files exists and have proper read permissions.
	 */</comment>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <call><name>fstream_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>response_code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>response_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Couldn't open local file. Report error. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %d %s"</literal></expr></argument>,
						<argument><expr><name>path</name></expr></argument>, <argument><expr><name>response_code</name></expr></argument>, <argument><expr><name>response_string</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>URL_FILE</name> <operator>*</operator><operator>)</operator> <name>file</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>url_file_fclose</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>failOnError</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>URL_FSTREAM_FILE</name> <modifier>*</modifier></type><name>ffile</name> <init>= <expr><operator>(</operator><name>URL_FSTREAM_FILE</name> <operator>*</operator><operator>)</operator> <name>file</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fstream_close</name><argument_list>(<argument><expr><name><name>ffile</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>ffile</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>ffile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>url_file_fread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CopyState</name></type> <name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>URL_FSTREAM_FILE</name> <modifier>*</modifier></type><name>ffile</name> <init>= <expr><operator>(</operator><name>URL_FSTREAM_FILE</name> <operator>*</operator><operator>)</operator> <name>file</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>fstream_filename_and_offset</name></name></type> <name>fo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>whole_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* get as much data as possible */</comment>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>want</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>fstream_read</name><argument_list>(<argument><expr><name><name>ffile</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fo</name></expr></argument>, <argument><expr><name>whole_rows</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>want</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fo</name><operator>.</operator><name>line_number</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>cur_lineno</name></name> <operator>=</operator> <name><name>fo</name><operator>.</operator><name>line_number</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>pstate</name><operator>-&gt;</operator><name>cdbsreh</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>cdbsreh</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>,
					 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>cdbsreh</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
					 <argument><expr><literal type="string">"%s [%s]"</literal></expr></argument>, <argument><expr><name><name>ffile</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>url</name></name></expr></argument>, <argument><expr><name><name>fo</name><operator>.</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>want</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>url_file_feof</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytesread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>URL_FSTREAM_FILE</name> <modifier>*</modifier></type><name>ffile</name> <init>= <expr><operator>(</operator><name>URL_FSTREAM_FILE</name> <operator>*</operator><operator>)</operator> <name>file</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>fstream_eof</name><argument_list>(<argument><expr><name><name>ffile</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>url_file_ferror</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytesread</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ebuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>URL_FSTREAM_FILE</name> <modifier>*</modifier></type><name>ffile</name> <init>= <expr><operator>(</operator><name>URL_FSTREAM_FILE</name> <operator>*</operator><operator>)</operator> <name>file</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>fstream_get_error</name><argument_list>(<argument><expr><name><name>ffile</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
