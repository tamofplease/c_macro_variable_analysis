<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/executor/tqueue.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * tqueue.c
 *	  Use shm_mq to send &amp; receive tuples between parallel backends
 *
 * A DestReceiver of type DestTupleQueue, which is a TQueueDestReceiver
 * under the hood, writes tuples from the executor to a shm_mq.
 *
 * A TupleQueueReader reads tuples from a shm_mq and returns the tuples.
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/executor/tqueue.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/tqueue.h"</cpp:file></cpp:include>

<comment type="block">/*
 * DestReceiver object's private contents
 *
 * queue is a pointer to data supplied by DestReceiver's caller.
 */</comment>
<typedef>typedef <type><struct>struct <name>TQueueDestReceiver</name>
<block>{
	<decl_stmt><decl><type><name>DestReceiver</name></type> <name>pub</name></decl>;</decl_stmt>			<comment type="block">/* public fields */</comment>
	<decl_stmt><decl><type><name>shm_mq_handle</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>		<comment type="block">/* shm_mq to send to */</comment>
}</block></struct></type> <name>TQueueDestReceiver</name>;</typedef>

<comment type="block">/*
 * TupleQueueReader object's private contents
 *
 * queue is a pointer to data supplied by reader's caller.
 *
 * "typedef struct TupleQueueReader TupleQueueReader" is in tqueue.h
 */</comment>
<struct>struct <name>TupleQueueReader</name>
<block>{
	<decl_stmt><decl><type><name>shm_mq_handle</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>		<comment type="block">/* shm_mq to receive from */</comment>
}</block>;</struct>

<comment type="block">/*
 * Receive a tuple from a query, and send it to the designated shm_mq.
 *
 * Returns true if successful, false if shm_mq has been detached.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>tqueueReceiveSlot</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TQueueDestReceiver</name> <modifier>*</modifier></type><name>tqueue</name> <init>= <expr><operator>(</operator><name>TQueueDestReceiver</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>shm_mq_result</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>should_free</name></decl>;</decl_stmt>

	<comment type="block">/* Send the tuple itself. */</comment>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>ExecFetchSlotHeapTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>should_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>shm_mq_send</name><argument_list>(<argument><expr><name><name>tqueue</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name><name>tuple</name><operator>-&gt;</operator><name>t_len</name></name></expr></argument>, <argument><expr><name><name>tuple</name><operator>-&gt;</operator><name>t_data</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>should_free</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Check for failure. */</comment>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SHM_MQ_DETACHED</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SHM_MQ_SUCCESS</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <name>SHM_MQ_QUERY_FINISH</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not send tuple to shared-memory queue"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Prepare to receive tuples from executor.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tqueueStartupReceiver</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>typeinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* do nothing */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Clean up at end of an executor run
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tqueueShutdownReceiver</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TQueueDestReceiver</name> <modifier>*</modifier></type><name>tqueue</name> <init>= <expr><operator>(</operator><name>TQueueDestReceiver</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tqueue</name><operator>-&gt;</operator><name>queue</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>shm_mq_detach</name><argument_list>(<argument><expr><name><name>tqueue</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>tqueue</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Destroy receiver when done with it
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tqueueDestroyReceiver</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TQueueDestReceiver</name> <modifier>*</modifier></type><name>tqueue</name> <init>= <expr><operator>(</operator><name>TQueueDestReceiver</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* We probably already detached from queue, but let's be sure */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>tqueue</name><operator>-&gt;</operator><name>queue</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>shm_mq_detach</name><argument_list>(<argument><expr><name><name>tqueue</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Create a DestReceiver that writes tuples to a tuple queue.
 */</comment>
<function><type><name>DestReceiver</name> <modifier>*</modifier></type>
<name>CreateTupleQueueDestReceiver</name><parameter_list>(<parameter><decl><type><name>shm_mq_handle</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TQueueDestReceiver</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>self</name> <operator>=</operator> <operator>(</operator><name>TQueueDestReceiver</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TQueueDestReceiver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>receiveSlot</name></name> <operator>=</operator> <name>tqueueReceiveSlot</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rStartup</name></name> <operator>=</operator> <name>tqueueStartupReceiver</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rShutdown</name></name> <operator>=</operator> <name>tqueueShutdownReceiver</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rDestroy</name></name> <operator>=</operator> <name>tqueueDestroyReceiver</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>mydest</name></name> <operator>=</operator> <name>DestTupleQueue</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>DestReceiver</name> <operator>*</operator><operator>)</operator> <name>self</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create a tuple queue reader.
 */</comment>
<function><type><name>TupleQueueReader</name> <modifier>*</modifier></type>
<name>CreateTupleQueueReader</name><parameter_list>(<parameter><decl><type><name>shm_mq_handle</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleQueueReader</name> <modifier>*</modifier></type><name>reader</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleQueueReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>

	<return>return <expr><name>reader</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Destroy a tuple queue reader.
 *
 * Note: cleaning up the underlying shm_mq is the caller's responsibility.
 * We won't access it here, as it may be detached already.
 */</comment>
<function><type><name>void</name></type>
<name>DestroyTupleQueueReader</name><parameter_list>(<parameter><decl><type><name>TupleQueueReader</name> <modifier>*</modifier></type><name>reader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Fetch a tuple from a tuple queue reader.
 *
 * The return value is NULL if there are no remaining tuples or if
 * nowait = true and no tuple is ready to return.  *done, if not NULL,
 * is set to true when there are no remaining tuples and otherwise to false.
 *
 * The returned tuple, if any, is allocated in CurrentMemoryContext.
 * Note that this routine must not leak memory!  (We used to allow that,
 * but not any more.)
 *
 * Even when shm_mq_receive() returns SHM_MQ_WOULD_BLOCK, this can still
 * accumulate bytes from a partially-read message, so it's useful to call
 * this with nowait = true even if nothing is returned.
 */</comment>
<function><type><name>HeapTuple</name></type>
<name>TupleQueueReaderNext</name><parameter_list>(<parameter><decl><type><name>TupleQueueReader</name> <modifier>*</modifier></type><name>reader</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nowait</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTupleData</name></type> <name>htup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>shm_mq_result</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>nbytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>done</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Attempt to read a message. */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>shm_mq_receive</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>nowait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If queue is detached, set *done and return NULL. */</comment>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SHM_MQ_DETACHED</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>done</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* In non-blocking mode, bail out if no message ready yet. */</comment>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SHM_MQ_WOULD_BLOCK</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>SHM_MQ_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set up a dummy HeapTupleData pointing to the data from the shm_mq
	 * (which had better be sufficiently aligned).
	 */</comment>
	<expr_stmt><expr><call><name>ItemPointerSetInvalid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>htup</name><operator>.</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>htup</name><operator>.</operator><name>t_tableOid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>htup</name><operator>.</operator><name>t_len</name></name> <operator>=</operator> <name>nbytes</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>htup</name><operator>.</operator><name>t_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

	<return>return <expr><call><name>heap_copytuple</name><argument_list>(<argument><expr><operator>&amp;</operator><name>htup</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
