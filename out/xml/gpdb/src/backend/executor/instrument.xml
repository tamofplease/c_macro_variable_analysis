<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/executor/instrument.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * instrument.c
 *	 functions for instrumentation of plan execution
 *
 *
 * Portions Copyright (c) 2006-2009, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 * Copyright (c) 2001-2019, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/executor/instrument.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/spin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/instrument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbdtxcontextinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbtm.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>BufferUsage</name></type> <name>pgBufferUsage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>BufferUsage</name></type> <name>save_pgBufferUsage</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BufferUsageAdd</name><parameter_list>(<parameter><decl><type><name>BufferUsage</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BufferUsage</name> <modifier>*</modifier></type><name>add</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BufferUsageAccumDiff</name><parameter_list>(<parameter><decl><type><name>BufferUsage</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
								 <parameter><decl><type><specifier>const</specifier> <name>BufferUsage</name> <modifier>*</modifier></type><name>add</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BufferUsage</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* GPDB specific */</comment>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>shouldPickInstrInShmem</name><parameter_list>(<parameter><decl><type><name>NodeTag</name></type> <name>tag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Instrumentation</name> <modifier>*</modifier></type><name>pickInstrFromShmem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Plan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>instrument_options</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>instrShmemRecycleCallback</name><parameter_list>(<parameter><decl><type><name>ResourceReleasePhase</name></type> <name>phase</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>,
						  <parameter><decl><type><name>bool</name></type> <name>isTopLevel</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>InstrumentationHeader</name> <modifier>*</modifier></type><name>InstrumentGlobal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>scanNodeCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>shmemNumSlots</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>instrumentResownerCallbackRegistered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>InstrumentationResownerSet</name> <modifier>*</modifier></type><name>slotsOccupied</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Allocate new instrumentation structure(s) */</comment>
<function><type><name>Instrumentation</name> <modifier>*</modifier></type>
<name>InstrAlloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>instrument_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name></decl>;</decl_stmt>

	<comment type="block">/* initialize all fields to zeroes, then modify as needed */</comment>
	<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Instrumentation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>instrument_options</name> <operator>&amp;</operator> <operator>(</operator><name>INSTRUMENT_BUFFERS</name> <operator>|</operator> <name>INSTRUMENT_TIMER</name> <operator>|</operator> <name>INSTRUMENT_CDB</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>need_buffers</name> <init>= <expr><operator>(</operator><name>instrument_options</name> <operator>&amp;</operator> <name>INSTRUMENT_BUFFERS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>need_timer</name> <init>= <expr><operator>(</operator><name>instrument_options</name> <operator>&amp;</operator> <name>INSTRUMENT_TIMER</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>need_cdb</name> <init>= <expr><operator>(</operator><name>instrument_options</name> <operator>&amp;</operator> <name>INSTRUMENT_CDB</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>instr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>need_bufusage</name> <operator>=</operator> <name>need_buffers</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>instr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>need_timer</name> <operator>=</operator> <name>need_timer</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>instr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>need_cdb</name> <operator>=</operator> <name>need_cdb</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>instr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Initialize a pre-allocated instrumentation structure. */</comment>
<function><type><name>void</name></type>
<name>InstrInit</name><parameter_list>(<parameter><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>instrument_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Instrumentation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>need_bufusage</name></name> <operator>=</operator> <operator>(</operator><name>instrument_options</name> <operator>&amp;</operator> <name>INSTRUMENT_BUFFERS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>need_timer</name></name> <operator>=</operator> <operator>(</operator><name>instrument_options</name> <operator>&amp;</operator> <name>INSTRUMENT_TIMER</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Entry to a plan node */</comment>
<function><type><name>void</name></type>
<name>InstrStartNode</name><parameter_list>(<parameter><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>need_timer</name></name> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>INSTR_TIME_SET_CURRENT_LAZY</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>starttime</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"InstrStartNode called twice in a row"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* save buffer usage totals at node entry, if needed */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>need_bufusage</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name></name> <operator>=</operator> <name>pgBufferUsage</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Exit from a plan node */</comment>
<function><type><name>void</name></type>
<name>InstrStopNode</name><parameter_list>(<parameter><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>nTuples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>instr_time</name></type>	<name>endtime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>instr_time</name></type>	<name>starttime</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>starttime</name> <operator>=</operator> <name><name>instr</name><operator>-&gt;</operator><name>starttime</name></name></expr>;</expr_stmt>

	<comment type="block">/* count the returned tuples */</comment>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>tuplecount</name></name> <operator>+=</operator> <name>nTuples</name></expr>;</expr_stmt>

	<comment type="block">/* let's update the time only if the timer was requested */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>need_timer</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>INSTR_TIME_IS_ZERO</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>starttime</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"InstrStopNode called without start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>endtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INSTR_TIME_ACCUM_DIFF</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>starttime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>starttime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Add delta of buffer usage since entry to node's totals */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>need_bufusage</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BufferUsageAccumDiff</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>instr</name><operator>-&gt;</operator><name>bufusage</name></name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>pgBufferUsage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Is this the first tuple of this cycle? */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>instr</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>firsttuple</name></name> <operator>=</operator> <call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* CDB: save this start time as the first start */</comment>
		<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>firststart</name></name> <operator>=</operator> <name>starttime</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Finish a run cycle for a plan node */</comment>
<function><type><name>void</name></type>
<name>InstrEndLoop</name><parameter_list>(<parameter><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type>		<name>totaltime</name></decl>;</decl_stmt>

	<comment type="block">/* Skip if nothing has happened, or already shut down */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>instr</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>INSTR_TIME_IS_ZERO</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>starttime</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"InstrEndLoop called on running node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Accumulate per-cycle statistics into totals */</comment>
	<expr_stmt><expr><name>totaltime</name> <operator>=</operator> <call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* CDB: Report startup time from only the first cycle. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>nloops</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>startup</name></name> <operator>=</operator> <name><name>instr</name><operator>-&gt;</operator><name>firsttuple</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>total</name></name> <operator>+=</operator> <name>totaltime</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>ntuples</name></name> <operator>+=</operator> <name><name>instr</name><operator>-&gt;</operator><name>tuplecount</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>nloops</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* Reset for next cycle (if any) */</comment>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>starttime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>firsttuple</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>tuplecount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* aggregate instrumentation information */</comment>
<function><type><name>void</name></type>
<name>InstrAggNode</name><parameter_list>(<parameter><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>add</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>running</name></name> <operator>&amp;&amp;</operator> <name><name>add</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>firsttuple</name></name> <operator>=</operator> <name><name>add</name><operator>-&gt;</operator><name>firsttuple</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>running</name></name> <operator>&amp;&amp;</operator> <name><name>add</name><operator>-&gt;</operator><name>running</name></name> <operator>&amp;&amp;</operator> <name><name>dst</name><operator>-&gt;</operator><name>firsttuple</name></name> <operator>&gt;</operator> <name><name>add</name><operator>-&gt;</operator><name>firsttuple</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>firsttuple</name></name> <operator>=</operator> <name><name>add</name><operator>-&gt;</operator><name>firsttuple</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>, <argument><expr><name><name>add</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>tuplecount</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>tuplecount</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>startup</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>startup</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>total</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>total</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ntuples</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>ntuples</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ntuples2</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>ntuples2</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>nloops</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>nloops</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>nfiltered1</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>nfiltered1</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>nfiltered2</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>nfiltered2</name></name></expr>;</expr_stmt>

	<comment type="block">/* Add delta of buffer usage since entry to node's totals */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>need_bufusage</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BufferUsageAdd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>bufusage</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>add</name><operator>-&gt;</operator><name>bufusage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* note current values during parallel executor startup */</comment>
<function><type><name>void</name></type>
<name>InstrStartParallelQuery</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>save_pgBufferUsage</name> <operator>=</operator> <name>pgBufferUsage</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* report usage after parallel executor shutdown */</comment>
<function><type><name>void</name></type>
<name>InstrEndParallelQuery</name><parameter_list>(<parameter><decl><type><name>BufferUsage</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferUsage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BufferUsageAccumDiff</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgBufferUsage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_pgBufferUsage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* accumulate work done by workers in leader's stats */</comment>
<function><type><name>void</name></type>
<name>InstrAccumParallelQuery</name><parameter_list>(<parameter><decl><type><name>BufferUsage</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>BufferUsageAdd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgBufferUsage</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dst += add */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>BufferUsageAdd</name><parameter_list>(<parameter><decl><type><name>BufferUsage</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BufferUsage</name> <modifier>*</modifier></type><name>add</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared_blks_hit</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>shared_blks_hit</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared_blks_read</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>shared_blks_read</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared_blks_dirtied</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>shared_blks_dirtied</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared_blks_written</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>shared_blks_written</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>local_blks_hit</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>local_blks_hit</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>local_blks_read</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>local_blks_read</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>local_blks_dirtied</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>local_blks_dirtied</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>local_blks_written</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>local_blks_written</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>temp_blks_read</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>temp_blks_read</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>temp_blks_written</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>temp_blks_written</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>blk_read_time</name></name></expr></argument>, <argument><expr><name><name>add</name><operator>-&gt;</operator><name>blk_read_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>blk_write_time</name></name></expr></argument>, <argument><expr><name><name>add</name><operator>-&gt;</operator><name>blk_write_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dst += add - sub */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>BufferUsageAccumDiff</name><parameter_list>(<parameter><decl><type><name>BufferUsage</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>BufferUsage</name> <modifier>*</modifier></type><name>add</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>BufferUsage</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared_blks_hit</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>shared_blks_hit</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>shared_blks_hit</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared_blks_read</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>shared_blks_read</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>shared_blks_read</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared_blks_dirtied</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>shared_blks_dirtied</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>shared_blks_dirtied</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared_blks_written</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>shared_blks_written</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>shared_blks_written</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>local_blks_hit</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>local_blks_hit</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>local_blks_hit</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>local_blks_read</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>local_blks_read</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>local_blks_read</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>local_blks_dirtied</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>local_blks_dirtied</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>local_blks_dirtied</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>local_blks_written</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>local_blks_written</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>local_blks_written</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>temp_blks_read</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>temp_blks_read</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>temp_blks_read</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>temp_blks_written</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>temp_blks_written</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>temp_blks_written</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_ACCUM_DIFF</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>blk_read_time</name></name></expr></argument>,
						  <argument><expr><name><name>add</name><operator>-&gt;</operator><name>blk_read_time</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>blk_read_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_ACCUM_DIFF</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>blk_write_time</name></name></expr></argument>,
						  <argument><expr><name><name>add</name><operator>-&gt;</operator><name>blk_write_time</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>blk_write_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Calculate number slots from gp_instrument_shmem_size */</comment>
<function><type><name>Size</name></type>
<name>InstrShmemNumSlots</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>shmemNumSlots</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>shmemNumSlots</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>gp_instrument_shmem_size</name> <operator>*</operator> <literal type="number">1024</literal> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>InstrumentationHeader</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>InstrumentationSlot</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name>shmemNumSlots</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>shmemNumSlots</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>shmemNumSlots</name></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>shmemNumSlots</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Allocate a header and an array of Instrumentation slots */</comment>
<function><type><name>Size</name></type>
<name>InstrShmemSize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>number_slots</name></decl>;</decl_stmt>

	<comment type="block">/* If start in utility mode, disallow Instrumentation on Shmem */</comment>
	<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_UTILITY</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* If GUCs not enabled, bypass Instrumentation on Shmem */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gp_enable_query_metrics</name> <operator>||</operator> <name>gp_instrument_shmem_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>number_slots</name> <operator>=</operator> <call><name>InstrShmemNumSlots</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>number_slots</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>InstrumentationHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><name>number_slots</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>InstrumentationSlot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Initialize Shmem space to construct a free list of Instrumentation */</comment>
<function><type><name>void</name></type>
<name>InstrShmemInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>size</name></decl>, <decl><type ref="prev"/><name>number_slots</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>InstrumentationSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>InstrumentationHeader</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>number_slots</name> <operator>=</operator> <call><name>InstrShmemNumSlots</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>InstrShmemSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Allocate space from Shmem */</comment>
	<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator><name>InstrumentationHeader</name> <operator>*</operator><operator>)</operator> <call><name>ShmemAlloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>header</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of shared memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Initialize header and all slots to zeroes, then modify as needed */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>PATTERN</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* pointer to the first Instrumentation slot */</comment>
	<expr_stmt><expr><name>slot</name> <operator>=</operator> <operator>(</operator><name>InstrumentationSlot</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>header</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/* header points to the first slot */</comment>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>number_slots</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Each slot points to next one to construct the free list */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>number_slots</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GetInstrumentNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><name><name>slot</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>GetInstrumentNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* Finished init the free list */</comment>
	<expr_stmt><expr><name>InstrumentGlobal</name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>InstrumentGlobal</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>instrumentResownerCallbackRegistered</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Register a callback function in ResourceOwner to recycle Instr in
		 * shmem
		 */</comment>
		<expr_stmt><expr><call><name>RegisterResourceReleaseCallback</name><argument_list>(<argument><expr><name>instrShmemRecycleCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>instrumentResownerCallbackRegistered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This is GPDB replacement of InstrAlloc for ExecInitNode to get an
 * Instrumentation struct
 *
 * Use shmem if gp_enable_query_metrics is on and there is free slot.
 * Otherwise use local memory.
 */</comment>
<function><type><name>Instrumentation</name> <modifier>*</modifier></type>
<name>GpInstrAlloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Plan</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>instrument_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>shouldPickInstrInShmem</name><argument_list>(<argument><expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>pickInstrFromShmem</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>instrument_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>instr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>InstrAlloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>instrument_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>instr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>shouldPickInstrInShmem</name><parameter_list>(<parameter><decl><type><name>NodeTag</name></type> <name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* For utility mode, don't alloc in shmem */</comment>
	<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_UTILITY</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gp_enable_query_metrics</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>InstrumentGlobal</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>tag</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_SeqScan</name></expr>:</case>

			<comment type="block">/*
			 * If table has many partitions, Postgres planner will generate a
			 * plan with many SCAN nodes under a APPEND node. If the number of
			 * partitions are too many, this plan will occupy too many slots.
			 * Here is a limitation on number of shmem slots used by scan
			 * nodes for each backend. Instruments exceeding the limitation
			 * are allocated local memory.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>scanNodeCounter</name> <operator>&gt;=</operator> <name>MAX_SCAN_ON_SHMEM</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>scanNodeCounter</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Pick an Instrumentation from free slots in Shmem.
 * Return NULL when no more free slots in Shmem.
 *
 * Instrumentation returned by this function requires to be
 * recycled back to the free slots list when the query is done.
 * See instrShmemRecycleCallback for recycling behavior
 */</comment>
<function><type><specifier>static</specifier> <name>Instrumentation</name> <modifier>*</modifier></type>
<name>pickInstrFromShmem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Plan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>instrument_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>InstrumentationSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>InstrumentationResownerSet</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

	<comment type="block">/* Lock to protect write to header */</comment>
	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>InstrumentGlobal</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Pick the first free slot */</comment>
	<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>InstrumentGlobal</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>slot</name> <operator>&amp;&amp;</operator> <call><name>SlotIsEmpty</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Header points to the next free slot */</comment>
		<expr_stmt><expr><name><name>InstrumentGlobal</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <call><name>GetInstrumentNext</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>InstrumentGlobal</name><operator>-&gt;</operator><name>free</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>InstrumentGlobal</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>slot</name> <operator>&amp;&amp;</operator> <call><name>SlotIsEmpty</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>InstrumentationSlot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* initialize the picked slot */</comment>
		<expr_stmt><expr><name>instr</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>slot</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>segid</name></name> <operator>=</operator> <operator>(</operator><name>int16</name><operator>)</operator> <name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gp_gettmid</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>slot</name><operator>-&gt;</operator><name>tmid</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>ssid</name></name> <operator>=</operator> <name>gp_session_id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>ccnt</name></name> <operator>=</operator> <name>gp_command_count</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>nid</name></name> <operator>=</operator> <operator>(</operator><name>int16</name><operator>)</operator> <name><name>plan</name><operator>-&gt;</operator><name>plan_node_id</name></name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>contextSave</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>InstrumentationResownerSet</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>InstrumentationResownerSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>slot</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>slotsOccupied</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>slotsOccupied</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>contextSave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>instr</name> <operator>&amp;&amp;</operator> <name>instrument_options</name> <operator>&amp;</operator> <operator>(</operator><name>INSTRUMENT_TIMER</name> <operator>|</operator> <name>INSTRUMENT_CDB</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>need_timer</name></name> <operator>=</operator> <operator>(</operator><name>instrument_options</name> <operator>&amp;</operator> <name>INSTRUMENT_TIMER</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>need_cdb</name></name> <operator>=</operator> <operator>(</operator><name>instrument_options</name> <operator>&amp;</operator> <name>INSTRUMENT_CDB</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>instr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Recycle instrumentation in shmem
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>instrShmemRecycleCallback</name><parameter_list>(<parameter><decl><type><name>ResourceReleasePhase</name></type> <name>phase</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isTopLevel</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>InstrumentationResownerSet</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>InstrumentationResownerSet</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>InstrumentationSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>InstrumentGlobal</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>slotsOccupied</name> <operator>||</operator> <name>phase</name> <operator>!=</operator> <name>RESOURCE_RELEASE_AFTER_LOCKS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Reset scanNodeCounter */</comment>
	<expr_stmt><expr><name>scanNodeCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>next</name> <operator>=</operator> <name>slotsOccupied</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>slotsOccupied</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>InstrumentGlobal</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>next</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>owner</name></name> <operator>!=</operator> <name>CurrentResourceOwner</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>slotsOccupied</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>slotsOccupied</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>slot</name></name></expr>;</expr_stmt>

		<comment type="block">/* Recycle Instrumentation slot back to the free list */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>PATTERN</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>InstrumentationSlot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>GetInstrumentNext</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>InstrumentGlobal</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>InstrumentGlobal</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>InstrumentGlobal</name><operator>-&gt;</operator><name>free</name></name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>InstrumentGlobal</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Cast PgStartTime from TimestampTz to int32. Separated from gp_gettmid() to avoid elog() in
 * gp_gettmid() to cause panic when running unit tests.
 * Return -1 for invalid PgStartTime or overflow values.
 */</comment>
<function><type><specifier>static</specifier> <name>int32</name></type> <name>gp_gettmid_helper</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_time_t</name></type> <name>time</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>PgStartTime</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>time</name> <operator>=</operator> <call><name>timestamptz_to_time_t</name><argument_list>(<argument><expr><name>PgStartTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>time</name> <operator>&gt;</operator> <name>INT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>int32</name><operator>)</operator><name>time</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Wrapper for gp_gettmid_helper()
 */</comment>
<function><type><name>void</name></type>
<name>gp_gettmid</name><parameter_list>(<parameter><decl><type><name>int32</name><modifier>*</modifier></type> <name>tmid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type> <name>time</name> <init>= <expr><call><name>gp_gettmid_helper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>time</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"time_t converted from PgStartTime is too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>tmid</name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
