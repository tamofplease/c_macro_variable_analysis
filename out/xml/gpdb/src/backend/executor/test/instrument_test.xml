<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/executor/test/instrument_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../instrument.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OF_IN_PROGRESS_ARRAY</name></cpp:macro> <cpp:value>(10 * sizeof(DistributedTransactionId))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__GetTmid_Test</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_time_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * For very large PgStartTime values, result from timestamptz_to_time_t either overflows or equals to -1,
	 * and should not match the value casted to int32 from gp_gettmid_helper()
	 */</comment>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>delta</name> <init>= <expr><literal type="number">0x4000000000000000</literal> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>TimestampTz</name></type> <name>time</name> <init>= <expr><literal type="number">0x7FFFFFFFFFFFFFFF</literal> <operator>-</operator> <name>delta</name></expr></init></decl>;</init> <condition><expr><name>time</name> <operator>&gt;</operator> <literal type="number">0x3fffffffffffffff</literal></expr>;</condition> <incr><expr><name>time</name> <operator>-=</operator> <name>delta</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>PgStartTime</name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int32</name></type> <name>tmid</name> <init>= <expr><call><name>gp_gettmid_helper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_time_t</name></type> <name>res</name> <init>= <expr><call><name>timestamptz_to_time_t</name><argument_list>(<argument><expr><name>PgStartTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><operator>(</operator><name>int64</name><operator>)</operator><name>tmid</name> <operator>-</operator> <name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/*
	 * For smaller PgStartTime values, the result from timestamptz_to_time_t casted to int32
	 * should match the result from gp_gettmid_helper()
	 */</comment>
	<expr_stmt><expr><name>delta</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>TimestampTz</name></type> <name>time</name> <init>= <expr><literal type="number">0x3ffffffffffff</literal> <operator>-</operator> <name>delta</name></expr></init></decl>;</init> <condition><expr><name>time</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>time</name> <operator>-=</operator> <name>delta</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>PgStartTime</name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int32</name></type> <name>tmid</name> <init>= <expr><call><name>gp_gettmid_helper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_time_t</name></type> <name>res</name> <init>= <expr><call><name>timestamptz_to_time_t</name><argument_list>(<argument><expr><name>PgStartTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>(</operator><name>int64</name><operator>)</operator><name>tmid</name> <operator>-</operator> <name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* gp_gettmid_helper should return -1 for negative PgStartTime */</comment>
	<expr_stmt><expr><name>PgStartTime</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>tmid</name> <init>= <expr><call><name>gp_gettmid_helper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>tmid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* gp_gettmid_helper should return -1 for very large PgStartTime value */</comment>
	<expr_stmt><expr><name>PgStartTime</name> <operator>=</operator> <literal type="number">0x7FFFFFFFFFFFFFFF</literal> <operator>-</operator> <name>delta</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmid</name> <operator>=</operator> <call><name>gp_gettmid_helper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>tmid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>=
	<expr><block>{
		<macro><name>unit_test</name><argument_list>(<argument>test__GetTmid_Test</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
