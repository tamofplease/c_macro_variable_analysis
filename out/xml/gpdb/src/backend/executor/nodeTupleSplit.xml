<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/executor/nodeTupleSplit.c"><comment type="block">/*-------------------------------------------------------------------------
 * nodeTupleSplit.c
 *	  Implementation of nodeTupleSplit.
 *
 * Portions Copyright (c) 2019-Present VMware, Inc. or its affiliates.
 *
 * IDENTIFICATION
 *	    src/backend/executor/nodeTupleSplit.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeTupleSplit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/tlist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/optimizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type><name>ExecTupleSplit</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* -----------------
 * ExecInitTupleSplit
 *
 *	Creates the run-time information for the tuple split node produced by the
 *	planner and initializes its outer subtree
 * -----------------
 */</comment>
<function><type><name>TupleSplitState</name> <modifier>*</modifier></type>
<name>ExecInitTupleSplit</name><parameter_list>(<parameter><decl><type><name>TupleSplit</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleSplitState</name>     <modifier>*</modifier></type><name>tup_spl_state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Plan</name>                <modifier>*</modifier></type><name>outerPlan</name></decl>;</decl_stmt>

	<comment type="block">/* check for unsupported flags */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>eflags</name> <operator>&amp;</operator> <operator>(</operator><name>EXEC_FLAG_BACKWARD</name> <operator>|</operator> <name>EXEC_FLAG_MARK</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tup_spl_state</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>TupleSplitState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name> <operator>=</operator> <operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>estate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ExecProcNode</name></name> <operator>=</operator> <name>ExecTupleSplit</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExecAssignExprContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tup_spl_state</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>estate</name><operator>-&gt;</operator><name>es_instrument</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>estate</name><operator>-&gt;</operator><name>es_instrument</name></name> <operator>&amp;</operator> <name>INSTRUMENT_CDB</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>cdbexplainbuf</name></name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>cdbexplainfun</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * initialize child nodes
	 */</comment>
	<expr_stmt><expr><name>outerPlan</name> <operator>=</operator> <call><name>outerPlan</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>tup_spl_state</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ExecInitNode</name><argument_list>(<argument><expr><name>outerPlan</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * initialize source tuple type.
	 */</comment>
	<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>outerops</name></name> <operator>=</operator>
		<call><name>ExecGetResultSlotOps</name><argument_list>(<argument><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tup_spl_state</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>tup_spl_state</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>outeropsfixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>outeropsset</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExecCreateScanSlotFromOuterPlan</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tup_spl_state</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>,
									<argument><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>outerops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* initialize result type, slot and projection. */</comment>
	<expr_stmt><expr><call><name>ExecInitResultTupleSlotTL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tup_spl_state</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TTSOpsVirtual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecAssignProjectionInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tup_spl_state</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * initialize input tuple isnull buffer
	 */</comment>
	<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>isnull_orig</name></name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>list_length</name><argument_list>(<argument><expr><call><name>outerPlan</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>targetlist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* create bitmap set for each dqa expr to store its input tuple attribute number */</comment>
	<decl_stmt><decl><type><name>AttrNumber</name></type> <name>maxAttrNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>numDisDQAs</name></name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>dqa_expr_lst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>dqa_split_bms</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Bitmapset</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tup_spl_state</name><operator>-&gt;</operator><name>numDisDQAs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>agg_filter_array</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ExprState</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tup_spl_state</name><operator>-&gt;</operator><name>numDisDQAs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>dqa_id_array</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tup_spl_state</name><operator>-&gt;</operator><name>numDisDQAs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>node-&gt;dqa_expr_lst</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DQAExpr</name> <modifier>*</modifier></type><name>dqaExpr</name> <init>= <expr><operator>(</operator><name>DQAExpr</name> <operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>j</name> <operator>=</operator> <call><name>bms_next_member</name><argument_list>(<argument><expr><name><name>dqaExpr</name><operator>-&gt;</operator><name>agg_args_id_bms</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>te</name> <init>= <expr><call><name>get_sortgroupref_tle</name><argument_list>(<argument><expr><operator>(</operator><name>Index</name><operator>)</operator><name>j</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>plan</name><operator>.</operator><name>lefttree</name><operator>-&gt;</operator><name>targetlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>dqa_split_bms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>dqa_split_bms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>te</name><operator>-&gt;</operator><name>resno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>maxAttrNum</name> <operator>&lt;</operator> <name><name>te</name><operator>-&gt;</operator><name>resno</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>maxAttrNum</name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>resno</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></while>

		<comment type="block">/* init filter expr */</comment>
		<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>agg_filter_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ExecInitExpr</name><argument_list>(<argument><expr><name><name>dqaExpr</name><operator>-&gt;</operator><name>agg_filter</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator><name>tup_spl_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>dqa_id_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dqaExpr</name><operator>-&gt;</operator><name>agg_expr_id</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>maxAttrNum</name></name> <operator>=</operator> <name>maxAttrNum</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * fetch group by expr bitmap set
	 */</comment>
	<decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>grpbySet</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>keyno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>keyno</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>numCols</name></name></expr>;</condition> <incr><expr><name>keyno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>grpbySet</name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name>grpbySet</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>grpColIdx</name><index>[<expr><name>keyno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * fetch all columns which is not referenced by all DQAs
	 */</comment>
	<decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>all_input_attr_bms</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <call><name>list_length</name><argument_list>(<argument><expr><call><name>outerPlan</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>targetlist</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>all_input_attr_bms</name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name>all_input_attr_bms</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>dqa_not_used_bms</name> <init>= <expr><name>all_input_attr_bms</name></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name><name>tup_spl_state</name><operator>-&gt;</operator><name>numDisDQAs</name></name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>dqa_not_used_bms</name> <operator>=</operator>
			<call><name>bms_del_members</name><argument_list>(<argument><expr><name>dqa_not_used_bms</name></expr></argument>, <argument><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>dqa_split_bms</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* grpbySet + dqa_not_used_bms is common skip splitting pattern */</comment>
	<decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>skip_split_bms</name> <init>= <expr><call><name>bms_join</name><argument_list>(<argument><expr><name>dqa_not_used_bms</name></expr></argument>, <argument><expr><name>grpbySet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * For each DQA splitting tuple, it contain DQA's expr needed column and
	 * common skip column.
	 */</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name><name>tup_spl_state</name><operator>-&gt;</operator><name>numDisDQAs</name></name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>orig_bms</name> <init>= <expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>dqa_split_bms</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>tup_spl_state</name><operator>-&gt;</operator><name>dqa_split_bms</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator>
			<call><name>bms_union</name><argument_list>(<argument><expr><name>orig_bms</name></expr></argument>, <argument><expr><name>skip_split_bms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name>orig_bms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name>skip_split_bms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>tup_spl_state</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ExecTupleSplit -
 *
 *      ExecTupleSplit receives tuples from its outer subplan. Every
 *      input tuple will generate n output tuples (n is the number of
 *      the DQAs exprs). Each output tuple only contain one DQA expr and
 *      all GROUP BY exprs.
 */</comment>
<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>ExecTupleSplit</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleSplitState</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>TupleSplitState</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name>  <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExprContext</name>     <modifier>*</modifier></type><name>econtext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleSplit</name>      <modifier>*</modifier></type><name>plan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>             <name>filter_out</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>econtext</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>plan</name> <operator>=</operator> <operator>(</operator><name>TupleSplit</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr>;</expr_stmt>

	<do>do <block>{<block_content>
		<comment type="block">/* if all DQAs of the last slot were processed, get a new slot */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>currentExprId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>outerslot</name></name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>outerslot</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>slot_getsomeattrs</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>outerslot</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>maxAttrNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* store original tupleslot isnull array */</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>isnull_orig</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>outerslot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></argument>,
		           <argument><expr><name><name>node</name><operator>-&gt;</operator><name>outerslot</name><operator>-&gt;</operator><name>tts_nvalid</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_outertuple</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>outerslot</name></name></expr>;</expr_stmt>

		<comment type="block">/* The filter is pushed down from relative DQA */</comment>
		<decl_stmt><decl><type><name>ExprState</name> <modifier>*</modifier></type> <name>filter</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>agg_filter_array</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>currentExprId</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>filter</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Datum</name></type>		<name>res</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ExecEvalExprSwitchContext</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>isnull</name> <operator>||</operator> <operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* skip tuple split once, if the tuple filter out */</comment>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>currentExprId</name></name> <operator>=</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>currentExprId</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>node</name><operator>-&gt;</operator><name>numDisDQAs</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>filter_out</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>

				<expr_stmt><expr><name>filter_out</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

		</block_content>}</block></if></if_stmt>
	</block_content>}</block> while<condition>(<expr><name>filter_out</name></expr>)</condition>;</do>

	<comment type="block">/* reset the isnull array to the original state */</comment>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>outerslot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>isnull</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>isnull_orig</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>outerslot</name><operator>-&gt;</operator><name>tts_nvalid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>AttrNumber</name></type> <name>attno</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>attno</name> <operator>&lt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>outerslot</name><operator>-&gt;</operator><name>tts_nvalid</name></name></expr>;</condition> <incr><expr><name>attno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* If the column is relevant to the current dqa, keep it */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>bms_is_member</name><argument_list>(<argument><expr><name>attno</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>dqa_split_bms</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>currentExprId</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* otherwise, null this column out */</comment>
		<expr_stmt><expr><name><name>isnull</name><index>[<expr><name>attno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* project the tuple */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ExecProject</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* the next DQA to process */</comment>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>currentExprId</name></name> <operator>=</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>currentExprId</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>node</name><operator>-&gt;</operator><name>numDisDQAs</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ResetExprContext</name><argument_list>(<argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecEndTupleSplit</name><parameter_list>(<parameter><decl><type><name>TupleSplitState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlanState</name>   <modifier>*</modifier></type><name>outerPlan</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>isnull_orig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We don't actually free any ExprContexts here (see comment in
	 * ExecFreeExprContext), just unlink the output one from the plan node
	 * suffices.
	 */</comment>
	<expr_stmt><expr><call><name>ExecFreeExprContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* clean up tuple table */</comment>
	<expr_stmt><expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_ScanTupleSlot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>outerPlan</name> <operator>=</operator> <call><name>outerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecEndNode</name><argument_list>(<argument><expr><name>outerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecReScanTupleSplit</name><parameter_list>(<parameter><decl><type><name>TupleSplitState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>currentExprId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name><operator>-&gt;</operator><name>chgParam</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ExecReScan</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecSquelchTupleSplit</name><parameter_list>(<parameter><decl><type><name>TupleSplitState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ExecSquelchNode</name><argument_list>(<argument><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
