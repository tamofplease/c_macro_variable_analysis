<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/executor/nodeDynamicIndexscan.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * nodeDynamicIndexscan.c
 *	  Support routines for scanning one or more indexes that are
 *	  determined at runtime.
 *
 * DynamicIndexScan node scans each index one after the other. For each
 * index, it creates a regular IndexScan executor node, scans, and returns
 * the relevant tuples.
 *
 * Portions Copyright (c) 2013 - present, EMC/Greenplum
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/executor/nodeDynamicIndexscan.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/partition.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/instrument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/execnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/execPartition.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeIndexscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeDynamicIndexscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tableam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Initialize ScanState in DynamicIndexScan.
 */</comment>
<function><type><name>DynamicIndexScanState</name> <modifier>*</modifier></type>
<name>ExecInitDynamicIndexScan</name><parameter_list>(<parameter><decl><type><name>DynamicIndexScan</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DynamicIndexScanState</name> <modifier>*</modifier></type><name>dynamicIndexScanState</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* check for unsupported flags */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>eflags</name> <operator>&amp;</operator> <operator>(</operator><name>EXEC_FLAG_BACKWARD</name> <operator>|</operator> <name>EXEC_FLAG_MARK</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dynamicIndexScanState</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>DynamicIndexScanState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dynamicIndexScanState</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name> <operator>=</operator> <operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dynamicIndexScanState</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>estate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dynamicIndexScanState</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ExecProcNode</name></name> <operator>=</operator> <name>ExecDynamicIndexScan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dynamicIndexScanState</name><operator>-&gt;</operator><name>eflags</name></name> <operator>=</operator> <name>eflags</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dynamicIndexScanState</name><operator>-&gt;</operator><name>scan_state</name></name> <operator>=</operator> <name>SCAN_INIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dynamicIndexScanState</name><operator>-&gt;</operator><name>whichPart</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dynamicIndexScanState</name><operator>-&gt;</operator><name>nOids</name></name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>partOids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dynamicIndexScanState</name><operator>-&gt;</operator><name>partOids</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dynamicIndexScanState</name><operator>-&gt;</operator><name>nOids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach_with_count</name><argument_list>(<argument>lc</argument>, <argument>node-&gt;partOids</argument>, <argument>i</argument>)</argument_list></macro>
		<expr_stmt><expr><name><name>dynamicIndexScanState</name><operator>-&gt;</operator><name>partOids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lfirst_oid</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Initialize child expressions
	 *
	 * These are not used for anything, we rely on the child IndexScan node
	 * to do all evaluation for us. But I think this is still needed to
	 * find and process any SubPlans. See comment in ExecInitIndexScan.
	 */</comment>
	<expr_stmt><expr><name><name>dynamicIndexScanState</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>qual</name></name> <operator>=</operator> <call><name>ExecInitQual</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>indexscan</name><operator>.</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>qual</name></name></expr></argument>,
					 <argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator> <name>dynamicIndexScanState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * tuple table initialization
	 */</comment>
	<decl_stmt><decl><type><name>Relation</name></type> <name>scanRel</name> <init>= <expr><call><name>ExecOpenScanRelation</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>indexscan</name><operator>.</operator><name>scan</name><operator>.</operator><name>scanrelid</name></name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecInitScanTupleSlot</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dynamicIndexScanState</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>, <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>scanRel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>table_slot_callbacks</name><argument_list>(<argument><expr><name>scanRel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Initialize result tuple type and projection info.
	 */</comment>
	<expr_stmt><expr><call><name>ExecInitResultTypeTL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dynamicIndexScanState</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * This context will be reset per-partition to free up per-partition
	 * copy of LogicalIndexInfo
	 */</comment>
	<expr_stmt><expr><name><name>dynamicIndexScanState</name><operator>-&gt;</operator><name>partitionMemoryContext</name></name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>,
									 <argument><expr><literal type="string">"DynamicIndexScanPerPartition"</literal></expr></argument>,
									 <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
									 <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
									 <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>dynamicIndexScanState</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DynamicIndexScan_ReMapColumns</name><parameter_list>(<parameter><decl><type><name>DynamicIndexScan</name> <modifier>*</modifier></type><name>dIndexScan</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oldOid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>newOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexScan</name> <modifier>*</modifier></type><name>indexScan</name> <init>= <expr><operator>&amp;</operator><name><name>dIndexScan</name><operator>-&gt;</operator><name>indexscan</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttrNumber</name> <modifier>*</modifier></type><name>attMap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>newOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>oldOid</name> <operator>==</operator> <name>newOid</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * If we have only one partition and we are rescanning then we can
		 * have this scenario.
		 */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>attMap</name> <operator>=</operator> <call><name>IndexScan_GetColumnMapping</name><argument_list>(<argument><expr><name>oldOid</name></expr></argument>, <argument><expr><name>newOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>attMap</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Also map attrnos in targetlist and quals */</comment>
		<expr_stmt><expr><call><name>change_varattnos_of_a_varno</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>indexScan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>targetlist</name></name></expr></argument>,
									<argument><expr><name>attMap</name></expr></argument>, <argument><expr><name><name>indexScan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>scanrelid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>change_varattnos_of_a_varno</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>indexScan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>qual</name></name></expr></argument>,
									<argument><expr><name>attMap</name></expr></argument>, <argument><expr><name><name>indexScan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>scanrelid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>change_varattnos_of_a_varno</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>indexScan</name><operator>-&gt;</operator><name>indexqual</name></name></expr></argument>,
									<argument><expr><name>attMap</name></expr></argument>, <argument><expr><name><name>indexScan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>scanrelid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>change_varattnos_of_a_varno</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>indexScan</name><operator>-&gt;</operator><name>indexqualorig</name></name></expr></argument>,
									<argument><expr><name>attMap</name></expr></argument>, <argument><expr><name><name>indexScan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>scanrelid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>attMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Find the correct index in the given partition, and create a IndexScan executor
 * node to scan it.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>beginCurrentIndexScan</name><parameter_list>(<parameter><decl><type><name>DynamicIndexScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>,
					  <parameter><decl><type><name>Oid</name></type> <name>tableOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DynamicIndexScan</name> <modifier>*</modifier></type><name>dynamicIndexScan</name> <init>= <expr><operator>(</operator><name>DynamicIndexScan</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>currentRelation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>indexOid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>save_tupletable</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldCxt</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * open the base relation and acquire appropriate lock on it.
	 */</comment>
	<expr_stmt><expr><name>currentRelation</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>tableOid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_currentRelation</name></name> <operator>=</operator> <name>currentRelation</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>save_tupletable</name> <operator>=</operator> <name><name>estate</name><operator>-&gt;</operator><name>es_tupleTable</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_tupleTable</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldCxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>partitionMemoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Re-map the index columns, per the new partition, and find the correct
	 * index.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>columnLayoutOid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Very first partition */</comment>
		<comment type="line">// Just get the direct parent, we don't support multi-level partitioning</comment>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>columnLayoutOid</name></name> <operator>=</operator> <call><name>get_partition_parent</name><argument_list>(<argument><expr><name>tableOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>DynamicIndexScan_ReMapColumns</name><argument_list>(<argument><expr><name>dynamicIndexScan</name></expr></argument>,
								  <argument><expr><name>tableOid</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>columnLayoutOid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>columnLayoutOid</name></name> <operator>=</operator> <name>tableOid</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>indexOid</name> <operator>=</operator> <call><name>index_get_partition</name><argument_list>(<argument><expr><name>currentRelation</name></expr></argument>, <argument><expr><name><name>dynamicIndexScan</name><operator>-&gt;</operator><name>indexscan</name><operator>.</operator><name>indexid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>indexOid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to find index for partition \"%s\" in dynamic index scan"</literal></expr></argument>,
			 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>currentRelation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>indexScanState</name></name> <operator>=</operator> <call><name>ExecInitIndexScanForPartition</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dynamicIndexScan</name><operator>-&gt;</operator><name>indexscan</name></name></expr></argument>, <argument><expr><name>estate</name></expr></argument>,
														 <argument><expr><name><name>node</name><operator>-&gt;</operator><name>eflags</name></name></expr></argument>,
														 <argument><expr><name>currentRelation</name></expr></argument>, <argument><expr><name>indexOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* The IndexScan node takes ownership of currentRelation, and will close it when done */</comment>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tuptable</name></name> <operator>=</operator> <name><name>estate</name><operator>-&gt;</operator><name>es_tupleTable</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_tupleTable</name></name> <operator>=</operator> <name>save_tupletable</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>outer_exprContext</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ExecReScanIndexScan</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>indexScanState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>endCurrentIndexScan</name><parameter_list>(<parameter><decl><type><name>DynamicIndexScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>indexScanState</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ExecEndIndexScan</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>indexScanState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>indexScanState</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_currentRelation</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ExecResetTupleTable</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>tuptable</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tuptable</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>partitionMemoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This function initializes a part and returns true if a new index has been prepared for scanning.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>initNextIndexToScan</name><parameter_list>(<parameter><decl><type><name>DynamicIndexScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Load new index when the scanning of the previous index is done. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>scan_state</name></name> <operator>==</operator> <name>SCAN_INIT</name> <operator>||</operator>
		<name><name>node</name><operator>-&gt;</operator><name>scan_state</name></name> <operator>==</operator> <name>SCAN_DONE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* This is the oid of a partition of the table (*not* index) */</comment>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>tableOid</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>node</name><operator>-&gt;</operator><name>whichPart</name></name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>nOids</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>tableOid</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>partOids</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>whichPart</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

		<comment type="block">/* Collect number of partitions scanned in EXPLAIN ANALYZE */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>instrument</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>instrument</name><operator>-&gt;</operator><name>numPartScanned</name></name> <operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>endCurrentIndexScan</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>beginCurrentIndexScan</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>tableOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scan_state</name></name> <operator>=</operator> <name>SCAN_SCAN</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Execution of DynamicIndexScan
 */</comment>
<function><type><name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>ExecDynamicIndexScan</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DynamicIndexScanState</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>DynamicIndexScanState</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>DynamicIndexScan</name>	   <modifier>*</modifier></type><name>plan</name> <init>= <expr><operator>(</operator><name>DynamicIndexScan</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>as_valid_subplans</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>plan</name><operator>-&gt;</operator><name>join_prune_paramids</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>did_pruning</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>did_pruning</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>as_valid_subplans</name></name> <operator>=</operator>
				<call><name>ExecFindMatchingSubPlans</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>as_prune_state</name></name></expr></argument>,
										 <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name></expr></argument>,
										 <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>partOids</name></name></expr></argument>)</argument_list></call></expr></argument>,
										 <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>join_prune_paramids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>partOidIdx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>newPartOids</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
		<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>bms_num_members</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>as_valid_subplans</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>partOidIdx</name> <operator>=</operator> <call><name>bms_next_member</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>as_valid_subplans</name></name></expr></argument>, <argument><expr><name>partOidIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>newPartOids</name> <operator>=</operator> <call><name>lappend_oid</name><argument_list>(<argument><expr><name>newPartOids</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>partOids</name><index>[<expr><name>partOidIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>partOids</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>newPartOids</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>foreach_with_count</name><argument_list>(<argument>lc</argument>, <argument>newPartOids</argument>, <argument>i</argument>)</argument_list></macro>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>partOids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lfirst_oid</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nOids</name></name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>newPartOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Scan index to find next tuple to return. If the current index
	 * is exhausted, close it and open the next index for scan.
	 */</comment>
	<while>while <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		   <call><name>initNextIndexToScan</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>indexScanState</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>endCurrentIndexScan</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scan_state</name></name> <operator>=</operator> <name>SCAN_INIT</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>slot</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Release resources of DynamicIndexScan
 */</comment>
<function><type><name>void</name></type>
<name>ExecEndDynamicIndexScan</name><parameter_list>(<parameter><decl><type><name>DynamicIndexScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>endCurrentIndexScan</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scan_state</name></name> <operator>=</operator> <name>SCAN_END</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>partitionMemoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Allow rescanning an index.
 */</comment>
<function><type><name>void</name></type>
<name>ExecReScanDynamicIndex</name><parameter_list>(<parameter><decl><type><name>DynamicIndexScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>indexScanState</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ExecEndIndexScan</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>indexScanState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>indexScanState</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scan_state</name></name> <operator>=</operator> <name>SCAN_INIT</name></expr>;</expr_stmt>
	<comment type="line">// reset partition internal state</comment>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>whichPart</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * IndexScan_GetColumnMapping
 *             Returns the mapping of columns between two relation Oids because of
 *             dropped attributes.
 *
 *             Returns NULL for identical mapping.
 */</comment>
<function><type><name>AttrNumber</name><modifier>*</modifier></type>
<name>IndexScan_GetColumnMapping</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>oldOid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>newOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>oldOid</name> <operator>==</operator> <name>newOid</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>AttrNumber</name>	  <modifier>*</modifier></type><name>attMap</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Relation</name></type> <name>oldRel</name> <init>= <expr><call><name>heap_open</name><argument_list>(<argument><expr><name>oldOid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>newRel</name> <init>= <expr><call><name>heap_open</name><argument_list>(<argument><expr><name>newOid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>oldTupDesc</name> <init>= <expr><name><name>oldRel</name><operator>-&gt;</operator><name>rd_att</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>newTupDesc</name> <init>= <expr><name><name>newRel</name><operator>-&gt;</operator><name>rd_att</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>attMap</name> <operator>=</operator> <call><name>convert_tuples_by_name_map_if_req</name><argument_list>(<argument><expr><name>oldTupDesc</name></expr></argument>, <argument><expr><name>newTupDesc</name></expr></argument>, <argument><expr><literal type="string">"unused msg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>oldRel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>newRel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>attMap</name></expr>;</return>
</block_content>}</block></function>
</unit>
