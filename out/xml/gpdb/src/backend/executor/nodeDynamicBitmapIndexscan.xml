<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/executor/nodeDynamicBitmapIndexscan.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * nodeDynamicBitmapIndexscan.c
 *	  Support routines for bitmap-scanning a partition of a table, where
 *	  the partition is determined at runtime.
 *
 * This is a thin wrapper around a regular non-dynamic Bitmap Index Scan
 * executor node. The Begin function doesn't do much. But when
 * MultiExecDynamicBitmapIndexScan() is called, to get the result,
 * we initialize a BitmapIndexScanState executor node for the currently
 * open partition, and call MultiExecBitmapIndexScan() on it. On rescan,
 * the underlying BitmapIndexScanState is destroyed.
 *
 * This is somewhat different from a Dynamic Index Scan. While a Dynamic
 * Index Scan needs to iterate through all the active partitions, a Dynamic
 * Bitmap Index Scan works as a slave of a dynamic Bitmap Heap Scan node
 * above it. It scans only one partition at a time, but the partition
 * can change at a rescan.
 *
 * Portions Copyright (c) 2013 - present, EMC/Greenplum
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/executor/nodeDynamicBitmapIndexscan.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/partition.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/instrument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/execnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeBitmapIndexscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeDynamicIndexscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeDynamicBitmapIndexscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tableam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Initialize ScanState in DynamicBitmapIndexScan.
 */</comment>
<function><type><name>DynamicBitmapIndexScanState</name> <modifier>*</modifier></type>
<name>ExecInitDynamicBitmapIndexScan</name><parameter_list>(<parameter><decl><type><name>DynamicBitmapIndexScan</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DynamicBitmapIndexScanState</name> <modifier>*</modifier></type><name>dynamicBitmapIndexScanState</name></decl>;</decl_stmt>

	<comment type="block">/* check for unsupported flags */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>eflags</name> <operator>&amp;</operator> <operator>(</operator><name>EXEC_FLAG_BACKWARD</name> <operator>|</operator> <name>EXEC_FLAG_MARK</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dynamicBitmapIndexScanState</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>DynamicBitmapIndexScanState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dynamicBitmapIndexScanState</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name> <operator>=</operator> <operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dynamicBitmapIndexScanState</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>estate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dynamicBitmapIndexScanState</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ExecProcNode</name></name> <operator>=</operator> <name>ExecDynamicIndexScan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dynamicBitmapIndexScanState</name><operator>-&gt;</operator><name>eflags</name></name> <operator>=</operator> <name>eflags</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dynamicBitmapIndexScanState</name><operator>-&gt;</operator><name>scan_state</name></name> <operator>=</operator> <name>SCAN_INIT</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Initialize child expressions
	 *
	 * These are not used for anything, we rely on the child IndexScan node
	 * to do all evaluation for us. But I think this is still needed to
	 * find and process any SubPlans. See comment in ExecInitIndexScan.
	 */</comment>
	<expr_stmt><expr><name><name>dynamicBitmapIndexScanState</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>qual</name></name> <operator>=</operator>
			<call><name>ExecInitQual</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>biscan</name><operator>.</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>qual</name></name></expr></argument>,
						 <argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator> <name>dynamicBitmapIndexScanState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * tuple table initialization
	 */</comment>
	<decl_stmt><decl><type><name>Relation</name></type> <name>scanRel</name> <init>= <expr><call><name>ExecOpenScanRelation</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>biscan</name><operator>.</operator><name>scan</name><operator>.</operator><name>scanrelid</name></name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecInitScanTupleSlot</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dynamicBitmapIndexScanState</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>, <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>scanRel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>table_slot_callbacks</name><argument_list>(<argument><expr><name>scanRel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Initialize result tuple type and projection info.
	 */</comment>
	<expr_stmt><expr><call><name>ExecInitResultTypeTL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dynamicBitmapIndexScanState</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * This context will be reset per-partition to free up per-partition
	 * copy of LogicalIndexInfo
	 */</comment>
	<expr_stmt><expr><name><name>dynamicBitmapIndexScanState</name><operator>-&gt;</operator><name>partitionMemoryContext</name></name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>,
									 <argument><expr><literal type="string">"DynamicBitmapIndexScanPerPartition"</literal></expr></argument>,
									 <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
									 <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
									 <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>dynamicBitmapIndexScanState</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>BitmapIndexScan_ReMapColumns</name><parameter_list>(<parameter><decl><type><name>DynamicBitmapIndexScan</name> <modifier>*</modifier></type><name>dbiScan</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oldOid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>newOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AttrNumber</name> <modifier>*</modifier></type><name>attMap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>newOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>oldOid</name> <operator>==</operator> <name>newOid</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * If we have only one partition and we are rescanning
		 * then we can have this scenario.
		 */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>attMap</name> <operator>=</operator> <call><name>IndexScan_GetColumnMapping</name><argument_list>(<argument><expr><name>oldOid</name></expr></argument>, <argument><expr><name>newOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>attMap</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* A bitmap index scan has no target list or quals */</comment>
		<comment type="line">// FIXME: no quals remapping?</comment>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>attMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Find the correct index in the given partition, and create a BitmapIndexScan executor
 * node to scan it.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>beginCurrentBitmapIndexScan</name><parameter_list>(<parameter><decl><type><name>DynamicBitmapIndexScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>,
							<parameter><decl><type><name>Oid</name></type> <name>tableOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DynamicBitmapIndexScan</name> <modifier>*</modifier></type><name>dbiScan</name> <init>= <expr><operator>(</operator><name>DynamicBitmapIndexScan</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>currentRelation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>indexOid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldCxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>save_tupletable</name></decl>;</decl_stmt>


	<comment type="block">/*
	 * open the base relation and acquire appropriate lock on it.
	 */</comment>
	<expr_stmt><expr><name>currentRelation</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>tableOid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_currentRelation</name></name> <operator>=</operator> <name>currentRelation</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>save_tupletable</name> <operator>=</operator> <name><name>estate</name><operator>-&gt;</operator><name>es_tupleTable</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_tupleTable</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldCxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>partitionMemoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Re-map the index columns, per the new partition, and find the correct
	 * index.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>columnLayoutOid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Very first partition */</comment>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>columnLayoutOid</name></name> <operator>=</operator> <call><name>get_partition_parent</name><argument_list>(<argument><expr><name>tableOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>BitmapIndexScan_ReMapColumns</name><argument_list>(<argument><expr><name>dbiScan</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>columnLayoutOid</name></name></expr></argument>, <argument><expr><name>tableOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>columnLayoutOid</name></name> <operator>=</operator> <name>tableOid</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * The is the oid of the partition of an *index*. Note: a partitioned table
	 * has a root and a set of partitions (may be multi-level). An index
	 * on a partitioned table also has a root and a set of index partitions.
	 * We started at table level, and now we are fetching the oid of an index
	 * partition.
	 */</comment>
	<decl_stmt><decl><type><name>Oid</name></type> <name>indexOidOld</name> <init>= <expr><name><name>dbiScan</name><operator>-&gt;</operator><name>biscan</name><operator>.</operator><name>indexid</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>indexOid</name> <operator>=</operator> <call><name>index_get_partition</name><argument_list>(<argument><expr><name>currentRelation</name></expr></argument>, <argument><expr><name><name>dbiScan</name><operator>-&gt;</operator><name>biscan</name><operator>.</operator><name>indexid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>indexOid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to find index for partition \"%s\" for \"%d\"in dynamic index scan"</literal></expr></argument>,
			 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>currentRelation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dbiScan</name><operator>-&gt;</operator><name>biscan</name><operator>.</operator><name>indexid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>currentRelation</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Modify the plan node with the index ID */</comment>
	<expr_stmt><expr><name><name>dbiScan</name><operator>-&gt;</operator><name>biscan</name><operator>.</operator><name>indexid</name></name> <operator>=</operator> <name>indexOid</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>bitmapIndexScanState</name></name> <operator>=</operator> <call><name>ExecInitBitmapIndexScan</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbiScan</name><operator>-&gt;</operator><name>biscan</name></name></expr></argument>,
														 <argument><expr><name>estate</name></expr></argument>,
														 <argument><expr><name><name>node</name><operator>-&gt;</operator><name>eflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dbiScan</name><operator>-&gt;</operator><name>biscan</name><operator>.</operator><name>indexid</name></name> <operator>=</operator> <name>indexOidOld</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>instrument</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Let the BitmapIndexScan share our Instrument node */</comment>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>bitmapIndexScanState</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>instrument</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>instrument</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tuptable</name></name> <operator>=</operator> <name><name>estate</name><operator>-&gt;</operator><name>es_tupleTable</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_tupleTable</name></name> <operator>=</operator> <name>save_tupletable</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>outer_exprContext</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ExecReScanBitmapIndexScan</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>bitmapIndexScanState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * End the currently open BitmapIndexScan executor node, if any.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>endCurrentBitmapIndexScan</name><parameter_list>(<parameter><decl><type><name>DynamicBitmapIndexScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>bitmapIndexScanState</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ExecEndBitmapIndexScan</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>bitmapIndexScanState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>bitmapIndexScanState</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ExecResetTupleTable</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>tuptable</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tuptable</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>partitionMemoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Execution of DynamicBitmapIndexScan
 */</comment>
<function><type><name>Node</name> <modifier>*</modifier></type>
<name>MultiExecDynamicBitmapIndexScan</name><parameter_list>(<parameter><decl><type><name>DynamicBitmapIndexScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EState</name>	   <modifier>*</modifier></type><name>estate</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>tableOid</name></decl>;</decl_stmt>

	<comment type="block">/* close previously open scan, if any. */</comment>
	<expr_stmt><expr><call><name>endCurrentBitmapIndexScan</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Fetch the OID of the current partition, and of the index on
	 * that partition to scan.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>estate</name><operator>-&gt;</operator><name>partitionOid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tableOid</name> <operator>=</operator> <name><name>estate</name><operator>-&gt;</operator><name>partitionOid</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Create the underlying regular BitmapIndexScan executor node,
	 * for the current partition, and call it.
	 *
	 * Note: don't close the BitmapIndexScan executor node yet,
	 * because it might return a streaming bitmap, which still needs
	 * the underlying scan if more tuples are pulled from it after
	 * we return.
	 */</comment>
	<expr_stmt><expr><call><name>beginCurrentBitmapIndexScan</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>tableOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>MultiExecBitmapIndexScan</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>bitmapIndexScanState</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Release resources of DynamicBitmapIndexScan
 */</comment>
<function><type><name>void</name></type>
<name>ExecEndDynamicBitmapIndexScan</name><parameter_list>(<parameter><decl><type><name>DynamicBitmapIndexScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>endCurrentBitmapIndexScan</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scan_state</name></name> <operator>=</operator> <name>SCAN_END</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>partitionMemoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Allow rescanning an index.
 *
 * The current partition might've changed.
 */</comment>
<function><type><name>void</name></type>
<name>ExecReScanDynamicBitmapIndex</name><parameter_list>(<parameter><decl><type><name>DynamicBitmapIndexScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>bitmapIndexScanState</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ExecEndBitmapIndexScan</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>bitmapIndexScanState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>bitmapIndexScanState</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scan_state</name></name> <operator>=</operator> <name>SCAN_INIT</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
