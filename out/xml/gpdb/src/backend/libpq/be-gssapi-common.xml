<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/libpq/be-gssapi-common.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * be-gssapi-common.c
 *     Common code for GSSAPI authentication and encryption
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *       src/backend/libpq/be-gssapi-common.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/be-gssapi-common.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Helper function for getting all strings of a GSSAPI error (of specified
 * stat).  Call once for GSS_CODE and once for MECH_CODE.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pg_GSS_error_int</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>OM_uint32</name></type> <name>stat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>gmsg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OM_uint32</name></type>	<name>lmin_s</name></decl>,
				<decl><type ref="prev"/><name>msg_ctx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>gmsg</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gmsg</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<expr_stmt><expr><call><name>gss_display_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lmin_s</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
						   <argument><expr><name>GSS_C_NO_OID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>gmsg</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>gmsg</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lmin_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	while <condition>(<expr><name>msg_ctx</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><name>msg_ctx</name> <operator>||</operator> <name>i</name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"incomplete GSS error report"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Fetch and report all error messages from GSSAPI.  To avoid allocation,
 * total error size is capped (at 128 bytes for each of major and minor).  No
 * known mechanisms will produce error messages beyond this cap.
 */</comment>
<comment type="block">/*
 * In GPDB backend, we also link with fe-gssapi-common.o, which contains
 * this same function. Rename it with a "_be" suffix here to avoid linker error.
 */</comment>
<function><type><name>void</name></type>
<name>pg_GSS_error_be</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl></parameter>,
			 <parameter><decl><type><name>OM_uint32</name></type> <name>maj_stat</name></decl></parameter>, <parameter><decl><type><name>OM_uint32</name></type> <name>min_stat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>msg_major</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>,
				<decl><type ref="prev"/><name><name>msg_minor</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* Fetch major status message */</comment>
	<expr_stmt><expr><call><name>pg_GSS_error_int</name><argument_list>(<argument><expr><name>msg_major</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg_major</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>maj_stat</name></expr></argument>, <argument><expr><name>GSS_C_GSS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Fetch mechanism minor status message */</comment>
	<expr_stmt><expr><call><name>pg_GSS_error_int</name><argument_list>(<argument><expr><name>msg_minor</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg_minor</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>min_stat</name></expr></argument>, <argument><expr><name>GSS_C_MECH_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * errmsg_internal, since translation of the first part must be done
	 * before calling this function anyway.
	 */</comment>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>severity</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errdetail_internal</name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>msg_major</name></expr></argument>, <argument><expr><name>msg_minor</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
