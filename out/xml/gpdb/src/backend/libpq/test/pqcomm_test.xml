<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/libpq/test/pqcomm_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Mocked function of accept, because we cannot simulate accepting an
 * incoming connection in a unit test
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>accept</name></cpp:macro> <cpp:value>pqcomm_accept_mock</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>pqcomm_accept_mock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>socket</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>address</name></decl></parameter>,
		<parameter><decl><type><name>socklen_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>address_len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../pqcomm.c"</cpp:file></cpp:include>

<comment type="block">/* Number of bytes requested to be sent through internal_flush */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_NUM_BYTES</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<comment type="block">/* Number of seconds to set the SO_SNDTIMEO to */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKET_TIMEOUT_SECONDS</name></cpp:macro> <cpp:value>1978</cpp:value></cpp:define>

<comment type="block">/* The mocked accept() function will return this socket when called */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>test_accept_socket</name></decl>;</decl_stmt>

<comment type="block">/*
 *  Test for internal_flush() for the case when:
 *    - requesting to send TEST_NUM_BYTES bytes
 *    - secure_write returns TEST_NUM_BYTES (send successful)
 *    - errno is not changed
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__internal_flush_successfulSend</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>secure_write</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>secure_write</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>secure_write</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>secure_write</name></expr></argument>, <argument><expr><name>TEST_NUM_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>PqSendPointer</name> <operator>=</operator> <name>TEST_NUM_BYTES</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>internal_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>result</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>ClientConnectionLost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>InterruptPending</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Simulate side effects of secure_write. Sets the errno variable to val
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_set_errno</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>val</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *  Test for internal_flush() for the case when:
 *    - secure_write returns 0 (send failed)
 *    - errno is set to EINTR
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__internal_flush_failedSendEINTR</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * In the case secure_write gets interrupted, we loop around and
	 * try the send again.
	 * In this test we simulate that, and secure_write will be called twice.
	 *
	 * First call to secure_write: returns 0 and sets errno to EINTR.
	 */</comment>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>secure_write</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>secure_write</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>secure_write</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>errval</name> <init>= <expr><name>EINTR</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>will_return_with_sideeffect</name><argument_list>(<argument><expr><name>secure_write</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_set_errno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Second call to secure_write: returns TEST_NUM_BYTES, i.e. success */</comment>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>secure_write</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>secure_write</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>secure_write</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>secure_write</name></expr></argument>, <argument><expr><name>TEST_NUM_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>PqSendPointer</name> <operator>=</operator> <name>TEST_NUM_BYTES</name></expr>;</expr_stmt>

	<comment type="block">/* Call function under test */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>internal_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>result</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>ClientConnectionLost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>InterruptPending</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *  Test for internal_flush() for the case when:
 *    - secure_write returns 0 (send failed)
 *    - errno is set to EPIPE
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__internal_flush_failedSendEPIPE</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

	<comment type="block">/* Simulating that secure_write will fail, and set the errno to EPIPE */</comment>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>secure_write</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>secure_write</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>secure_write</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>errval</name> <init>= <expr><name>EPIPE</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>will_return_with_sideeffect</name><argument_list>(<argument><expr><name>secure_write</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_set_errno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* In that case, we expect ereport(COMERROR, ...) to be called */</comment>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>errstart</name></expr></argument>, <argument><expr><name>elevel</name></expr></argument>, <argument><expr><name>COMMERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>errstart</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>errstart</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>PqSendPointer</name> <operator>=</operator> <name>TEST_NUM_BYTES</name></expr>;</expr_stmt>

	<comment type="block">/* Call function under test */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>internal_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>result</name></expr></argument>,<argument><expr><name>EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>ClientConnectionLost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>InterruptPending</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This is a mocked version of the accept() system call
 * We don't actually accept an incoming connection, but we just return
 * a socket from the global variable test_accept_socket.
 */</comment>
<function><type><name>int</name></type>
<name>pqcomm_accept_mock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>accept_sock</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>address</name></decl></parameter>,
				   <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>address_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>test_accept_socket</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Test for StreamConnection that verifies that the socket has the SO_SNDTIMEO
 * timeout set for it when the connection is through a TCP/IP socket (AF_INET)
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__StreamConnection_set_SNDTIMEO_AF_INET</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Port</name> <modifier>*</modifier></type><name>port</name> <init>= <expr><operator>(</operator><name>Port</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Port</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgsocket</name></type> <name>server_fd</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name> <operator>=</operator> <name>MASTER_CONTENT_ID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>gp_connection_send_timeout</name> <operator>=</operator> <name>SOCKET_TIMEOUT_SECONDS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_accept_socket</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* protocol */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>StreamConnection</name><argument_list>(<argument><expr><name>server_fd</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>STATUS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socklen_t</name></type> <name>timeout_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>getsockopt</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDTIMEO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Check that getsockopt ran successfully */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Check that the timeout is actually set */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name>SOCKET_TIMEOUT_SECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>test_accept_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Test for StreamConnection that verifies that the socket has the SO_SNDTIMEO
 * timeout set for it when the connection is through a UNIX socket (AF_UNIX)
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__StreamConnection_set_SNDTIMEO_AF_UNIX</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Port</name> <modifier>*</modifier></type><name>port</name> <init>= <expr><operator>(</operator><name>Port</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Port</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgsocket</name></type> <name>server_fd</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name> <operator>=</operator> <name>MASTER_CONTENT_ID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>gp_connection_send_timeout</name> <operator>=</operator> <name>SOCKET_TIMEOUT_SECONDS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_accept_socket</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* protocol */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>StreamConnection</name><argument_list>(<argument><expr><name>server_fd</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>STATUS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socklen_t</name></type> <name>timeout_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>getsockopt</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDTIMEO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check that getsockopt ran successfully */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Check that the timeout is actually set */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name>SOCKET_TIMEOUT_SECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>test_accept_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Test for StreamConnection that verifies that we don't set the socket
 * SO_SNDTIMEO timeout on segments
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__StreamConnection_set_SNDTIMEO_segment</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Port</name> <modifier>*</modifier></type><name>port</name> <init>= <expr><operator>(</operator><name>Port</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Port</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgsocket</name></type> <name>server_fd</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Use another segindex than master, anything != MASTER_CONTENT_ID will do */</comment>
	<expr_stmt><expr><name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>gp_connection_send_timeout</name> <operator>=</operator> <name>SOCKET_TIMEOUT_SECONDS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_accept_socket</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* protocol */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>StreamConnection</name><argument_list>(<argument><expr><name>server_fd</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>STATUS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socklen_t</name></type> <name>timeout_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>getsockopt</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDTIMEO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check that getsockopt ran successfully */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Check that the timeout is NOT actually set */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>test_accept_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ==================== main ==================== */</comment>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__internal_flush_successfulSend</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__internal_flush_failedSendEINTR</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__internal_flush_failedSendEPIPE</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__StreamConnection_set_SNDTIMEO_AF_INET</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__StreamConnection_set_SNDTIMEO_AF_UNIX</name></expr></argument>)</argument_list></call></expr>,
		<macro><name>unit_test</name><argument_list>(<argument>test__StreamConnection_set_SNDTIMEO_segment</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
