<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/regex/regc_lex.c"><comment type="block">/*
 * lexical analyzer
 * This file is #included by regcomp.c.
 *
 * Copyright (c) 1998, 1999 Henry Spencer.  All rights reserved.
 *
 * Development of this software was funded, in part, by Cray Research Inc.,
 * UUNET Communications Services Inc., Sun Microsystems Inc., and Scriptics
 * Corporation, none of whom are responsible for the results.  The author
 * thanks all of them.
 *
 * Redistribution and use in source and binary forms -- with or without
 * modification -- are permitted for any purpose, provided that
 * redistributions in source form retain this entire copyright notice and
 * indicate the origin and nature of any modifications.
 *
 * I'd appreciate being given credit for this package in the documentation
 * of software which uses it, but that is not a requirement.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * HENRY SPENCER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * src/backend/regex/regc_lex.c
 *
 */</comment>

<comment type="block">/* scanning macros (know about v) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATEOS</name><parameter_list>()</parameter_list></cpp:macro>		<cpp:value>(v-&gt;now &gt;= v-&gt;stop)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(v-&gt;stop - v-&gt;now &gt;= (n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT1</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(!ATEOS() &amp;&amp; *v-&gt;now == CHR(c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(HAVE(2) &amp;&amp; *v-&gt;now == CHR(a) &amp;&amp; *(v-&gt;now+1) == CHR(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(HAVE(3) &amp;&amp; *v-&gt;now == CHR(a) &amp;&amp; \
						*(v-&gt;now+1) == CHR(b) &amp;&amp; \
						*(v-&gt;now+2) == CHR(c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(v-&gt;nexttype = (c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETV</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(v-&gt;nexttype = (c), v-&gt;nextvalue = (n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RET</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>return (SET(c), 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETV</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>return (SETV(c, n), 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAILW</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>return (ERR(e), 0)</cpp:value></cpp:define>	<comment type="block">/* ERR does SET(EOS) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LASTTYPE</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v-&gt;lasttype == (t))</cpp:value></cpp:define>

<comment type="block">/* lexical contexts */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_ERE</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>				<comment type="block">/* mainline ERE/ARE */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_BRE</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>				<comment type="block">/* mainline BRE */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_Q</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>					<comment type="block">/* REG_QUOTE */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_EBND</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>				<comment type="block">/* ERE/ARE bound */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_BBND</name></cpp:macro>	<cpp:value>5</cpp:value></cpp:define>				<comment type="block">/* BRE bound */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_BRACK</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>				<comment type="block">/* brackets */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_CEL</name></cpp:macro>	<cpp:value>7</cpp:value></cpp:define>				<comment type="block">/* collating element */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_ECL</name></cpp:macro>	<cpp:value>8</cpp:value></cpp:define>				<comment type="block">/* equivalence class */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_CCL</name></cpp:macro>	<cpp:value>9</cpp:value></cpp:define>				<comment type="block">/* character class */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTOCON</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(v-&gt;lexcon = (c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCON</name><parameter_list>(<parameter><type><name>con</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(v-&gt;lexcon == (con))</cpp:value></cpp:define>

<comment type="block">/* construct pointer past end of chr array */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENDOF</name><parameter_list>(<parameter><type><name>array</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((array) + sizeof(array)/sizeof(chr))</cpp:value></cpp:define>

<comment type="block">/*
 * lexstart - set up lexical stuff, scan leading options
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>lexstart</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>prefixes</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block">/* may turn on new type bits etc. */</comment>
	<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_QUOTE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <operator>(</operator><name>REG_ADVANCED</name> <operator>|</operator> <name>REG_EXPANDED</name> <operator>|</operator> <name>REG_NEWLINE</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INTOCON</name><argument_list>(<argument><expr><name>L_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_EXTENDED</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_QUOTE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INTOCON</name><argument_list>(<argument><expr><name>L_ERE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <operator>(</operator><name>REG_QUOTE</name> <operator>|</operator> <name>REG_ADVF</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INTOCON</name><argument_list>(<argument><expr><name>L_BRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nexttype</name></name> <operator>=</operator> <name>EMPTY</name></expr>;</expr_stmt>		<comment type="block">/* remember we were at the start */</comment>
	<expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>					<comment type="block">/* set up the first token */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * prefixes - implement various special prefixes
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>prefixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* literal string doesn't get any of this stuff */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_QUOTE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* initial "***" gets special things */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>HAVE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>NEXT3</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>:</case>		<comment type="block">/* "***?" error, msg shows version */</comment>
				<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>REG_BADPAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>			<comment type="block">/* proceed no further */</comment>
				<break>break;</break>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>:</case>		<comment type="block">/* "***=" shifts to literal string */</comment>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UNONPOSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>|=</operator> <name>REG_QUOTE</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>REG_ADVANCED</name> <operator>|</operator> <name>REG_EXPANDED</name> <operator>|</operator> <name>REG_NEWLINE</name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
				<return>return;</return>			<comment type="block">/* and there can be no more prefixes */</comment>
				<break>break;</break>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>:</case>		<comment type="block">/* "***:" shifts to AREs */</comment>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UNONPOSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>|=</operator> <name>REG_ADVANCED</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>			<comment type="block">/* otherwise *** is just an error */</comment>
				<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>REG_BADRPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
				<break>break;</break>
		</block_content>}</block></switch></block_content></block></if></if_stmt>

	<comment type="block">/* BREs and EREs don't get embedded options */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_ADVANCED</name><operator>)</operator> <operator>!=</operator> <name>REG_ADVANCED</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* embedded options (AREs only) */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>HAVE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>NEXT2</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>iscalpha</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UNONPOSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><call><name>ATEOS</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>iscalpha</name><argument_list>(<argument><expr><operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<switch>switch <condition>(<expr><operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* BREs (but why???) */</comment>
					<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>REG_ADVANCED</name> <operator>|</operator> <name>REG_QUOTE</name><operator>)</operator></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* case sensitive */</comment>
					<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REG_ICASE</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* plain EREs */</comment>
					<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>|=</operator> <name>REG_EXTENDED</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>REG_ADVF</name> <operator>|</operator> <name>REG_QUOTE</name><operator>)</operator></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* case insensitive */</comment>
					<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>|=</operator> <name>REG_ICASE</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* Perloid synonym for n */</comment>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* \n affects ^ $ . [^ */</comment>
					<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>|=</operator> <name>REG_NEWLINE</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* ~Perl, \n affects . [^ */</comment>
					<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>|=</operator> <name>REG_NLSTOP</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REG_NLANCH</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* literal string */</comment>
					<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>|=</operator> <name>REG_QUOTE</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REG_ADVANCED</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* single line, \n ordinary */</comment>
					<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REG_NEWLINE</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* tight syntax */</comment>
					<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REG_EXPANDED</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* weird, \n affects ^ $ only */</comment>
					<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REG_NLSTOP</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>|=</operator> <name>REG_NLANCH</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* expanded syntax */</comment>
					<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>|=</operator> <name>REG_EXPANDED</name></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>REG_BADOPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
			</block_content>}</block></switch></block_content></block></for>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NEXT1</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>REG_BADOPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_QUOTE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>REG_EXPANDED</name> <operator>|</operator> <name>REG_NEWLINE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * lexnest - "call a subroutine", interpolating string at the lexical level
 *
 * Note, this is not a very general facility.  There are a number of
 * implicit assumptions about what sorts of strings can be subroutines.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>lexnest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
		<parameter><decl><type><specifier>const</specifier> <name>chr</name> <modifier>*</modifier></type><name>beginp</name></decl></parameter>,		<comment type="block">/* start of interpolation */</comment>
		<parameter><decl><type><specifier>const</specifier> <name>chr</name> <modifier>*</modifier></type><name>endp</name></decl></parameter>)</parameter_list>		<comment type="block">/* one past end of interpolation */</comment>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>savenow</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* only one level of nesting */</comment>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>savenow</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>now</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>savestop</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>stop</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>=</operator> <name>beginp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>endp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * string constants to interpolate as expansions of things like \d
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>chr</name></type> <name><name>backd</name><index>[]</index></name> <init>= <expr><block>{	<comment type="block">/* \d */</comment>
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>CHR</name><argument_list>(<argument><literal type="char">']'</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>chr</name></type> <name><name>backD</name><index>[]</index></name> <init>= <expr><block>{	<comment type="block">/* \D */</comment>
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>CHR</name><argument_list>(<argument><literal type="char">']'</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>chr</name></type> <name><name>brbackd</name><index>[]</index></name> <init>= <expr><block>{	<comment type="block">/* \d within brackets */</comment>
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>CHR</name><argument_list>(<argument><literal type="char">']'</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>chr</name></type> <name><name>backs</name><index>[]</index></name> <init>= <expr><block>{	<comment type="block">/* \s */</comment>
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>CHR</name><argument_list>(<argument><literal type="char">']'</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>chr</name></type> <name><name>backS</name><index>[]</index></name> <init>= <expr><block>{	<comment type="block">/* \S */</comment>
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>CHR</name><argument_list>(<argument><literal type="char">']'</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>chr</name></type> <name><name>brbacks</name><index>[]</index></name> <init>= <expr><block>{	<comment type="block">/* \s within brackets */</comment>
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>CHR</name><argument_list>(<argument><literal type="char">']'</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>chr</name></type> <name><name>backw</name><index>[]</index></name> <init>= <expr><block>{	<comment type="block">/* \w */</comment>
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>CHR</name><argument_list>(<argument><literal type="char">']'</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>chr</name></type> <name><name>backW</name><index>[]</index></name> <init>= <expr><block>{	<comment type="block">/* \W */</comment>
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>CHR</name><argument_list>(<argument><literal type="char">']'</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>chr</name></type> <name><name>brbackw</name><index>[]</index></name> <init>= <expr><block>{	<comment type="block">/* \w within brackets */</comment>
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>CHR</name><argument_list>(<argument><literal type="char">'_'</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * lexword - interpolate a bracket expression for word characters
 * Possibly ought to inquire whether there is a "word" character class.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>lexword</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>lexnest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>backw</name></expr></argument>, <argument><expr><call><name>ENDOF</name><argument_list>(<argument><expr><name>backw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * next - get next token
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>						<comment type="block">/* 1 normal, 0 failure */</comment>
<name>next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>chr</name></type>			<name>c</name></decl>;</decl_stmt>

	<comment type="block">/* errors yield an infinite sequence of failures */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>				<comment type="block">/* the error has set nexttype to EOS */</comment>

	<comment type="block">/* remember flavor of last token */</comment>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lasttype</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>nexttype</name></name></expr>;</expr_stmt>

	<comment type="block">/* REG_BOSONLY */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>nexttype</name></name> <operator>==</operator> <name>EMPTY</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_BOSONLY</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* at start of a REG_BOSONLY RE */</comment>
		<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>SBEGIN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* same as \A */</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* if we're nested and we've hit end, return to outer level */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>savenow</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>ATEOS</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>savenow</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>savestop</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>savenow</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>savestop</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* skip white space etc. if appropriate (not in literal or []) */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_EXPANDED</name></expr>)</condition><block type="pseudo"><block_content>
		<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>lexcon</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>L_ERE</name></expr>:</case>
			<case>case <expr><name>L_BRE</name></expr>:</case>
			<case>case <expr><name>L_EBND</name></expr>:</case>
			<case>case <expr><name>L_BBND</name></expr>:</case>
				<expr_stmt><expr><call><name>skip</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch></block_content></block></if></if_stmt>

	<comment type="block">/* handle EOS, depending on context */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>ATEOS</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>lexcon</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>L_ERE</name></expr>:</case>
			<case>case <expr><name>L_BRE</name></expr>:</case>
			<case>case <expr><name>L_Q</name></expr>:</case>
				<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><name>EOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>L_EBND</name></expr>:</case>
			<case>case <expr><name>L_BBND</name></expr>:</case>
				<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_EBRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>L_BRACK</name></expr>:</case>
			<case>case <expr><name>L_CEL</name></expr>:</case>
			<case>case <expr><name>L_ECL</name></expr>:</case>
			<case>case <expr><name>L_CCL</name></expr>:</case>
				<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_EBRACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NOTREACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* okay, time to actually get a character */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/* deal with the easy contexts, punt EREs to code below */</comment>
	<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>lexcon</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>L_BRE</name></expr>:</case>				<comment type="block">/* punt BREs to separate function */</comment>
			<return>return <expr><call><name>brenext</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>L_ERE</name></expr>:</case>				<comment type="block">/* see below */</comment>
			<break>break;</break>
		<case>case <expr><name>L_Q</name></expr>:</case>				<comment type="block">/* literal strings are easy */</comment>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>L_BBND</name></expr>:</case>			<comment type="block">/* bounds are fairly simple */</comment>
		<case>case <expr><name>L_EBND</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>:</case>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>:</case>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>:</case>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr>:</case>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'7'</literal></expr></argument>)</argument_list></call></expr>:</case>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call></expr>:</case>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>:</case>
					<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>DIGIT</name></expr></argument>, <argument><expr><operator>(</operator><name>chr</name><operator>)</operator> <call><name>DIGITVAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>:</case>
					<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* ERE bound ends with } */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>INCON</name><argument_list>(<argument><expr><name>L_EBND</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>INTOCON</name><argument_list>(<argument><expr><name>L_ERE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_ADVF</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>NEXT1</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UNONPOSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_BADBR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<break>break;</break>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>:</case> <comment type="block">/* BRE bound ends with \} */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>INCON</name><argument_list>(<argument><expr><name>L_BBND</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>NEXT1</name><argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>INTOCON</name><argument_list>(<argument><expr><name>L_BRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_BADBR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_BADBR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NOTREACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>L_BRACK</name></expr>:</case>			<comment type="block">/* brackets are not too hard */</comment>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>:</case>
					<if_stmt><if>if <condition>(<expr><call><name>LASTTYPE</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><call><name>INTOCON</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_EXTENDED</name><operator>)</operator></expr> ?</condition><then>
								<expr><name>L_ERE</name></expr> </then><else>: <expr><name>L_BRE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
					<break>break;</break>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>:</case>
					<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UBBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_ADVF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UNONPOSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><call><name>ATEOS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_EESCAPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><operator>(</operator><name>DISCARD</name><operator>)</operator> <call><name>lexescape</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>nexttype</name></name></expr>)</condition>
					<block>{<block_content>			<comment type="block">/* not all escapes okay here */</comment>
						<case>case <expr><name>PLAIN</name></expr>:</case>
							<return>return <expr><literal type="number">1</literal></expr>;</return>
							<break>break;</break>
						<case>case <expr><name>CCLASS</name></expr>:</case>
							<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>nextvalue</name></name></expr>)</condition>
							<block>{<block_content>
								<case>case <expr><literal type="char">'d'</literal></expr>:</case>
									<expr_stmt><expr><call><name>lexnest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>brbackd</name></expr></argument>, <argument><expr><call><name>ENDOF</name><argument_list>(<argument><expr><name>brbackd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<break>break;</break>
								<case>case <expr><literal type="char">'s'</literal></expr>:</case>
									<expr_stmt><expr><call><name>lexnest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>brbacks</name></expr></argument>, <argument><expr><call><name>ENDOF</name><argument_list>(<argument><expr><name>brbacks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<break>break;</break>
								<case>case <expr><literal type="char">'w'</literal></expr>:</case>
									<expr_stmt><expr><call><name>lexnest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>brbackw</name></expr></argument>, <argument><expr><call><name>ENDOF</name><argument_list>(<argument><expr><name>brbackw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<break>break;</break>
								<default>default:</default>
									<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_EESCAPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<break>break;</break>
							</block_content>}</block></switch>
							<comment type="block">/* lexnest done, back up and try again */</comment>
							<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nexttype</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>lasttype</name></name></expr>;</expr_stmt>
							<return>return <expr><call><name>next</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
							<break>break;</break>
					</block_content>}</block></switch>
					<comment type="block">/* not one of the acceptable escapes */</comment>
					<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_EESCAPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>:</case>
					<if_stmt><if>if <condition>(<expr><call><name>LASTTYPE</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>NEXT1</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>RANGE</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<break>break;</break>
				<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>:</case>
					<if_stmt><if>if <condition>(<expr><call><name>ATEOS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_EBRACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<switch>switch <condition>(<expr><operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>)</condition>
					<block>{<block_content>
						<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>:</case>
							<expr_stmt><expr><call><name>INTOCON</name><argument_list>(<argument><expr><name>L_CEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<comment type="block">/* might or might not be locale-specific */</comment>
							<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><name>COLLEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>:</case>
							<expr_stmt><expr><call><name>INTOCON</name><argument_list>(<argument><expr><name>L_ECL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_ULOCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><name>ECLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>:</case>
							<expr_stmt><expr><call><name>INTOCON</name><argument_list>(<argument><expr><name>L_CCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_ULOCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><name>CCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						<default>default:</default>	<comment type="block">/* oops */</comment>
							<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>--</operator></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
					</block_content>}</block></switch>
					<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NOTREACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NOTREACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>L_CEL</name></expr>:</case>				<comment type="block">/* collating elements are easy */</comment>
			<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>NEXT1</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>INTOCON</name><argument_list>(<argument><expr><name>L_BRACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>END</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>L_ECL</name></expr>:</case>				<comment type="block">/* ditto equivalence classes */</comment>
			<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>NEXT1</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>INTOCON</name><argument_list>(<argument><expr><name>L_BRACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>END</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>L_CCL</name></expr>:</case>				<comment type="block">/* ditto character classes */</comment>
			<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>NEXT1</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>INTOCON</name><argument_list>(<argument><expr><name>L_BRACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>END</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NOTREACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/* that got rid of everything except EREs and AREs */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>INCON</name><argument_list>(<argument><expr><name>L_ERE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* deal with EREs and AREs, except for backslashes */</comment>
	<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_ADVF</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>NEXT1</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UNONPOSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_ADVF</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>NEXT1</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UNONPOSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_ADVF</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>NEXT1</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UNONPOSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>:</case>			<comment type="block">/* bounds start or plain character */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_EXPANDED</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>skip</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ATEOS</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>iscdigit</name><argument_list>(<argument><expr><operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UBRACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UUNSPEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UBOUNDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>INTOCON</name><argument_list>(<argument><expr><name>L_EBND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NOTREACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>:</case>			<comment type="block">/* parenthesis, or advanced extension */</comment>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_ADVF</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>NEXT1</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UNONPOSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>ATEOS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_BADRPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<switch>switch <condition>(<expr><operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* non-capturing paren */</comment>
						<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* comment */</comment>
						<while>while <condition>(<expr><operator>!</operator><call><name>ATEOS</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>!=</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ATEOS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nexttype</name></name> <operator>==</operator> <name><name>v</name><operator>-&gt;</operator><name>lasttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><call><name>next</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
						<break>break;</break>
					<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* positive lookahead */</comment>
						<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_ULOOKAROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>LACON</name></expr></argument>, <argument><expr><name>LATYPE_AHEAD_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* negative lookahead */</comment>
						<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_ULOOKAROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>LACON</name></expr></argument>, <argument><expr><name>LATYPE_AHEAD_NEG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>:</case>
						<if_stmt><if>if <condition>(<expr><call><name>ATEOS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_BADRPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<switch>switch <condition>(<expr><operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>)</condition>
						<block>{<block_content>
							<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* positive lookbehind */</comment>
								<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_ULOOKAROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>LACON</name></expr></argument>, <argument><expr><name>LATYPE_BEHIND_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<break>break;</break>
							<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call></expr>:</case>	<comment type="block">/* negative lookbehind */</comment>
								<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_ULOOKAROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>LACON</name></expr></argument>, <argument><expr><name>LATYPE_BEHIND_NEG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<break>break;</break>
							<default>default:</default>
								<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_BADRPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<break>break;</break>
						</block_content>}</block></switch>
						<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NOTREACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_BADRPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>
				<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NOTREACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_NOSUB</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>	<comment type="block">/* all parens non-capturing */</comment>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>LASTTYPE</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UUNSPEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>:</case>			<comment type="block">/* easy except for [[:&lt;:]] and [[:&gt;:]] */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>HAVE</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
				<operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
				<operator>(</operator><operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call> <operator>||</operator>
				 <operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
				<operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
				<operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
				<operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UNONPOSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'&lt;'</literal></expr> </then><else>: <expr><literal type="char">'&gt;'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>INTOCON</name><argument_list>(<argument><expr><name>L_BRACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>NEXT1</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>:</case>			<comment type="block">/* mostly punt backslashes to code below */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>ATEOS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_EESCAPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>				<comment type="block">/* ordinary character */</comment>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/* ERE/ARE backslash handling; backslash already eaten */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>ATEOS</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_ADVF</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* only AREs have non-trivial escapes */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>iscalnum</name><argument_list>(<argument><expr><operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UBSALNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UUNSPEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>(</operator><name>DISCARD</name><operator>)</operator> <call><name>lexescape</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_EESCAPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>nexttype</name></name> <operator>==</operator> <name>CCLASS</name></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* fudge at lexical level */</comment>
		<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>nextvalue</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="char">'d'</literal></expr>:</case>
				<expr_stmt><expr><call><name>lexnest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>backd</name></expr></argument>, <argument><expr><call><name>ENDOF</name><argument_list>(<argument><expr><name>backd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'D'</literal></expr>:</case>
				<expr_stmt><expr><call><name>lexnest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>backD</name></expr></argument>, <argument><expr><call><name>ENDOF</name><argument_list>(<argument><expr><name>backD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'s'</literal></expr>:</case>
				<expr_stmt><expr><call><name>lexnest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>backs</name></expr></argument>, <argument><expr><call><name>ENDOF</name><argument_list>(<argument><expr><name>backs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'S'</literal></expr>:</case>
				<expr_stmt><expr><call><name>lexnest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>backS</name></expr></argument>, <argument><expr><call><name>ENDOF</name><argument_list>(<argument><expr><name>backS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'w'</literal></expr>:</case>
				<expr_stmt><expr><call><name>lexnest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>backw</name></expr></argument>, <argument><expr><call><name>ENDOF</name><argument_list>(<argument><expr><name>backw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'W'</literal></expr>:</case>
				<expr_stmt><expr><call><name>lexnest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>backW</name></expr></argument>, <argument><expr><call><name>ENDOF</name><argument_list>(<argument><expr><name>backW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NOTREACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_ASSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
		<comment type="block">/* lexnest done, back up and try again */</comment>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nexttype</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>lasttype</name></name></expr>;</expr_stmt>
		<return>return <expr><call><name>next</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* otherwise, lexescape has already done the work */</comment>
	<return>return <expr><operator>!</operator><call><name>ISERR</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * lexescape - parse an ARE backslash escape (backslash already eaten)
 * Note slightly nonstandard use of the CCLASS type code.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>						<comment type="block">/* not actually used, but convenient for RETV */</comment>
<name>lexescape</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>chr</name></type>			<name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>chr</name></type> <name><name>alert</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>CHR</name><argument_list>(<argument><literal type="char">'t'</literal></argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>chr</name></type> <name><name>esc</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>CHR</name><argument_list>(<argument><literal type="char">'C'</literal></argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>chr</name>  <modifier>*</modifier></type><name>save</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_ADVF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>ATEOS</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iscalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UNONPOSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><call><name>chrnamed</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>alert</name></expr></argument>, <argument><expr><call><name>ENDOF</name><argument_list>(<argument><expr><name>alert</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'\007'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>SBEGIN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'\b'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UUNPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ATEOS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_EESCAPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><operator>(</operator><name>chr</name><operator>)</operator> <operator>(</operator><operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator> <operator>&amp;</operator> <literal type="number">037</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_ULOCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>CCLASS</name></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_ULOCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>CCLASS</name></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UUNPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><call><name>chrnamed</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>esc</name></expr></argument>, <argument><expr><call><name>ENDOF</name><argument_list>(<argument><expr><name>esc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'\033'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'\f'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_ULOCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>CCLASS</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_ULOCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>CCLASS</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lexdigits</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>CHR_IS_IN_RANGE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_EESCAPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lexdigits</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>CHR_IS_IN_RANGE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_EESCAPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'\v'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_ULOCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>CCLASS</name></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_ULOCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>CCLASS</name></expr></argument>, <argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UUNPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lexdigits</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* REs &gt;255 long outside spec */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>CHR_IS_IN_RANGE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_EESCAPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_ULOCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>WBDRY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_ULOCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>NWBDRY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>SEND</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>:</case>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>:</case>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr>:</case>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'7'</literal></expr></argument>)</argument_list></call></expr>:</case>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call></expr>:</case>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><name>save</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>now</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>--</operator></expr>;</expr_stmt>			<comment type="block">/* put first digit back */</comment>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lexdigits</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* REs &gt;255 long outside spec */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_EESCAPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<comment type="block">/* ugly heuristic (first test is "exactly 1 digit?") */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>==</operator> <name>save</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>c</name> <operator>&lt;=</operator> <name><name>v</name><operator>-&gt;</operator><name>nsubexp</name></name><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UBACKREF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>BACKREF</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* oops, doesn't look like it's a backref after all... */</comment>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
			<comment type="block">/* and fall through into octal number */</comment>
			<comment type="block">/* FALLTHROUGH */</comment>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UUNPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>--</operator></expr>;</expr_stmt>			<comment type="block">/* put first digit back */</comment>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lexdigits</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_EESCAPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0xff</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* out of range, so we handled one digit too much */</comment>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>iscalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_EESCAPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* unknown alphabetic escape */</comment>
			<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NOTREACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * lexdigits - slurp up digits and return chr value
 *
 * This does not account for overflow; callers should range-check the result
 * if maxlen is large enough to make that possible.
 */</comment>
<function><type><specifier>static</specifier> <name>chr</name></type>						<comment type="block">/* chr value; errors signalled via ERR */</comment>
<name>lexdigits</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
		  <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>,
		  <parameter><decl><type><name>int</name></type> <name>minlen</name></decl></parameter>,
		  <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uchr</name></type>		<name>n</name></decl>;</decl_stmt>				<comment type="block">/* unsigned to avoid overflow misbehavior */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name></type>			<name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uchr</name></type>	<name>ub</name> <init>= <expr><operator>(</operator><name>uchr</name><operator>)</operator> <name>base</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name>maxlen</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ATEOS</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'7'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>:</case>
				<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>DIGITVAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>:</case>
				<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr>:</case>
				<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>:</case>
				<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>:</case>
				<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>:</case>
				<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>:</case>
				<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>--</operator></expr>;</expr_stmt>		<comment type="block">/* oops, not a digit at all */</comment>
				<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <name>base</name></expr>)</condition>
		<block>{<block_content>						<comment type="block">/* not a plausible digit */</comment>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>				<comment type="block">/* NOTE BREAK OUT */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>*</operator> <name>ub</name> <operator>+</operator> <operator>(</operator><name>uchr</name><operator>)</operator> <name>d</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>minlen</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>REG_EESCAPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>chr</name><operator>)</operator> <name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * brenext - get next BRE token
 *
 * This is much like EREs except for all the stupid backslashes and the
 * context-dependency of some things.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>						<comment type="block">/* 1 normal, 0 failure */</comment>
<name>brenext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
		<parameter><decl><type><name>chr</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>LASTTYPE</name><argument_list>(<argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>LASTTYPE</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>LASTTYPE</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>HAVE</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
				<operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
				<operator>(</operator><operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call> <operator>||</operator>
				 <operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
				<operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
				<operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
				<operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UNONPOSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'&lt;'</literal></expr> </then><else>: <expr><literal type="char">'&gt;'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>INTOCON</name><argument_list>(<argument><expr><name>L_BRACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>NEXT1</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>LASTTYPE</name><argument_list>(<argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>LASTTYPE</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UUNSPEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_EXPANDED</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>skip</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ATEOS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>NEXT2</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UUNSPEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<break>break;</break>				<comment type="block">/* see below */</comment>
		<default>default:</default>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ATEOS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAILW</name><argument_list>(<argument><expr><name>REG_EESCAPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>INTOCON</name><argument_list>(<argument><expr><name>L_BBND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UBOUNDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UNONPOSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UNONPOSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>:</case>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>:</case>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr>:</case>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'7'</literal></expr></argument>)</argument_list></call></expr>:</case>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call></expr>:</case>
		<case>case <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>:</case>
			<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UBACKREF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>BACKREF</name></expr></argument>, <argument><expr><operator>(</operator><name>chr</name><operator>)</operator> <call><name>DIGITVAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<if_stmt><if>if <condition>(<expr><call><name>iscalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UBSALNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UUNSPEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>RETV</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NOTREACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * skip - skip white space and comments in expanded form
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>chr</name>  <modifier>*</modifier></type><name>start</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_EXPANDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<while>while <condition>(<expr><operator>!</operator><call><name>ATEOS</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>iscspace</name><argument_list>(<argument><expr><operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		<if_stmt><if>if <condition>(<expr><call><name>ATEOS</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>!=</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>				<comment type="block">/* NOTE BREAK OUT */</comment>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>NEXT1</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>!</operator><call><name>ATEOS</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>!=</operator> <call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		<comment type="block">/* leave the newline to be picked up by the iscspace loop */</comment>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>now</name></name> <operator>!=</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>NOTE</name><argument_list>(<argument><expr><name>REG_UNONPOSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * newline - return the chr for a newline
 *
 * This helps confine use of CHR to this source file.
 */</comment>
<function><type><specifier>static</specifier> <name>chr</name></type>
<name>newline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>CHR</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * chrnamed - return the chr known by a given (chr string) name
 *
 * The code is a bit clumsy, but this routine gets only such specialized
 * use that it hardly matters.
 */</comment>
<function><type><specifier>static</specifier> <name>chr</name></type>
<name>chrnamed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
		 <parameter><decl><type><specifier>const</specifier> <name>chr</name> <modifier>*</modifier></type><name>startp</name></decl></parameter>,		<comment type="block">/* start of name */</comment>
		 <parameter><decl><type><specifier>const</specifier> <name>chr</name> <modifier>*</modifier></type><name>endp</name></decl></parameter>,		<comment type="block">/* just past end of name */</comment>
		 <parameter><decl><type><name>chr</name></type> <name>lastresort</name></decl></parameter>)</parameter_list>		<comment type="block">/* what to return if name lookup fails */</comment>
<block>{<block_content>
	<decl_stmt><decl><type><name>chr</name></type>			<name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>errsave</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>e</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cvec</name></name> <modifier>*</modifier></type><name>cv</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>errsave</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>err</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>element</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>startp</name></expr></argument>, <argument><expr><name>endp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>err</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>errsave</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>lastresort</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cv</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cv</name><operator>-&gt;</operator><name>nchrs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>lastresort</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name><name>cv</name><operator>-&gt;</operator><name>chrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
</unit>
