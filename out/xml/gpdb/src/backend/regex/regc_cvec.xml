<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/regex/regc_cvec.c"><comment type="block">/*
 * Utility functions for handling cvecs
 * This file is #included by regcomp.c.
 *
 * Copyright (c) 1998, 1999 Henry Spencer.  All rights reserved.
 *
 * Development of this software was funded, in part, by Cray Research Inc.,
 * UUNET Communications Services Inc., Sun Microsystems Inc., and Scriptics
 * Corporation, none of whom are responsible for the results.  The author
 * thanks all of them.
 *
 * Redistribution and use in source and binary forms -- with or without
 * modification -- are permitted for any purpose, provided that
 * redistributions in source form retain this entire copyright notice and
 * indicate the origin and nature of any modifications.
 *
 * I'd appreciate being given credit for this package in the documentation
 * of software which uses it, but that is not a requirement.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * HENRY SPENCER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * src/backend/regex/regc_cvec.c
 *
 */</comment>

<comment type="block">/*
 * Notes:
 * Only (selected) functions in _this_ file should treat the chr arrays
 * of a cvec as non-constant.
 */</comment>

<comment type="block">/*
 * newcvec - allocate a new cvec
 */</comment>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>cvec</name></name> <modifier>*</modifier></type>
<name>newcvec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nchrs</name></decl></parameter>,				<comment type="block">/* to hold this many chrs... */</comment>
		<parameter><decl><type><name>int</name></type> <name>nranges</name></decl></parameter>)</parameter_list>			<comment type="block">/* ... and this many ranges */</comment>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>nc</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>nchrs</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>nranges</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>n</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cvec</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>chr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cvec</name></name> <modifier>*</modifier></type><name>cv</name> <init>= <expr><operator>(</operator>struct <name>cvec</name> <operator>*</operator><operator>)</operator> <call><name>MALLOC</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>chrspace</name></name> <operator>=</operator> <name>nchrs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>chrs</name></name> <operator>=</operator> <operator>(</operator><name>chr</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>cv</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>cvec</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>ranges</name></name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>chrs</name></name> <operator>+</operator> <name>nchrs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>rangespace</name></name> <operator>=</operator> <name>nranges</name></expr>;</expr_stmt>
	<return>return <expr><call><name>clearcvec</name><argument_list>(<argument><expr><name>cv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * clearcvec - clear a possibly-new cvec
 * Returns pointer as convenience.
 */</comment>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>cvec</name></name> <modifier>*</modifier></type>
<name>clearcvec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cvec</name></name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cv</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>nchrs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>nranges</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>cclasscode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<return>return <expr><name>cv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * addchr - add a chr to a cvec
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>addchr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cvec</name></name> <modifier>*</modifier></type><name>cv</name></decl></parameter>,			<comment type="block">/* character vector */</comment>
	   <parameter><decl><type><name>chr</name></type> <name>c</name></decl></parameter>)</parameter_list>					<comment type="block">/* character to add */</comment>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cv</name><operator>-&gt;</operator><name>nchrs</name></name> <operator>&lt;</operator> <name><name>cv</name><operator>-&gt;</operator><name>chrspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>chrs</name><index>[<expr><name><name>cv</name><operator>-&gt;</operator><name>nchrs</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * addrange - add a range to a cvec
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>addrange</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cvec</name></name> <modifier>*</modifier></type><name>cv</name></decl></parameter>,		<comment type="block">/* character vector */</comment>
		 <parameter><decl><type><name>chr</name></type> <name>from</name></decl></parameter>,				<comment type="block">/* first character of range */</comment>
		 <parameter><decl><type><name>chr</name></type> <name>to</name></decl></parameter>)</parameter_list>				<comment type="block">/* last character of range */</comment>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cv</name><operator>-&gt;</operator><name>nranges</name></name> <operator>&lt;</operator> <name><name>cv</name><operator>-&gt;</operator><name>rangespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name><name>cv</name><operator>-&gt;</operator><name>nranges</name></name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name><name>cv</name><operator>-&gt;</operator><name>nranges</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cv</name><operator>-&gt;</operator><name>nranges</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * getcvec - get a transient cvec, initialized to empty
 *
 * The returned cvec is valid only until the next call of getcvec, which
 * typically will recycle the space.  Callers should *not* free the cvec
 * explicitly; it will be cleaned up when the struct vars is destroyed.
 *
 * This is typically used while interpreting bracket expressions.  In that
 * usage the cvec is only needed momentarily until we build arcs from it,
 * so transientness is a convenient behavior.
 */</comment>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>cvec</name></name> <modifier>*</modifier></type>
<name>getcvec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,			<comment type="block">/* context */</comment>
		<parameter><decl><type><name>int</name></type> <name>nchrs</name></decl></parameter>,				<comment type="block">/* to hold this many chrs... */</comment>
		<parameter><decl><type><name>int</name></type> <name>nranges</name></decl></parameter>)</parameter_list>			<comment type="block">/* ... and this many ranges */</comment>
<block>{<block_content>
	<comment type="block">/* recycle existing transient cvec if large enough */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>cv</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>nchrs</name> <operator>&lt;=</operator> <name><name>v</name><operator>-&gt;</operator><name>cv</name><operator>-&gt;</operator><name>chrspace</name></name> <operator>&amp;&amp;</operator>
		<name>nranges</name> <operator>&lt;=</operator> <name><name>v</name><operator>-&gt;</operator><name>cv</name><operator>-&gt;</operator><name>rangespace</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>clearcvec</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* nope, make a new one */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>cv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>freecvec</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cv</name></name> <operator>=</operator> <call><name>newcvec</name><argument_list>(<argument><expr><name>nchrs</name></expr></argument>, <argument><expr><name>nranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>cv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>REG_ESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>cv</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * freecvec - free a cvec
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>freecvec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cvec</name></name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
