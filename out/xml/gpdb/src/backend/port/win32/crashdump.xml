<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/port/win32/crashdump.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * win32_crashdump.c
 *		   Automatic crash dump creation for PostgreSQL on Windows
 *
 * The crashdump feature traps unhandled win32 exceptions produced by the
 * backend, and tries to produce a Windows MiniDump crash
 * dump for later debugging and analysis. The machine performing the dump
 * doesn't need any special debugging tools; the user only needs to send
 * the dump to somebody who has the same version of PostgreSQL and has debugging
 * tools.
 *
 * crashdump module originally by Craig Ringer &lt;ringerc@ringerc.id.au&gt;
 *
 * LIMITATIONS
 * ===========
 * This *won't* work in hard OOM situations or stack overflows.
 *
 * For those, it'd be necessary to take a much more complicated approach where
 * the handler switches to a new stack (if it can) and forks a helper process
 * to debug it self.
 *
 * POSSIBLE FUTURE WORK
 * ====================
 * For bonus points, the crash dump format permits embedding of user-supplied
 * data. If there's anything else that should always be supplied with a crash
 * dump (postgresql.conf? Last few lines of a log file?), it could potentially
 * be added, though at the cost of a greater chance of the crash dump failing.
 *
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/port/win32/crashdump.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>

<comment type="block">/*
 * Some versions of the MS SDK contain "typedef enum { ... } ;" which the MS
 * compiler quite sanely complains about. Well done, Microsoft.
 * This pragma disables the warning just while we include the header.
 * The pragma is known to work with all (as at the time of writing) supported
 * versions of MSVC.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4091</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dbghelp.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Much of the following code is based on CodeProject and MSDN examples,
 * particularly
 * http://www.codeproject.com/KB/debug/postmortemdebug_standalone1.aspx
 *
 * Useful MSDN articles:
 *
 * http://msdn.microsoft.com/en-us/library/ff805116(v=VS.85).aspx
 * http://msdn.microsoft.com/en-us/library/ms679294(VS.85).aspx
 *
 * Other useful articles on working with minidumps:
 * http://www.debuginfo.com/articles/effminidumps.html
 */</comment>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>MINIDUMPWRITEDUMP</name>) <parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>hProcess</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>dwPid</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>hFile</name></decl></parameter>, <parameter><decl><type><name>MINIDUMP_TYPE</name></type> <name>DumpType</name></decl></parameter>,
										   <parameter><decl><type><name>CONST</name> <name>PMINIDUMP_EXCEPTION_INFORMATION</name></type> <name>ExceptionParam</name></decl></parameter>,
										   <parameter><decl><type><name>CONST</name> <name>PMINIDUMP_USER_STREAM_INFORMATION</name></type> <name>UserStreamParam</name></decl></parameter>,
										   <parameter><decl><type><name>CONST</name> <name>PMINIDUMP_CALLBACK_INFORMATION</name></type> <name>CallbackParam</name></decl></parameter>
)</parameter_list>;</function_decl></typedef>


<comment type="block">/*
 * This function is the exception handler passed to SetUnhandledExceptionFilter.
 * It's invoked only if there's an unhandled exception. The handler will use
 * dbghelp.dll to generate a crash dump, then resume the normal unhandled
 * exception process, which will generally exit with an error message from
 * the runtime.
 *
 * This function is run under the unhandled exception handler, effectively
 * in a crash context, so it should be careful with memory and avoid using
 * any PostgreSQL functions.
 */</comment>
<function><type><specifier>static</specifier> <name>LONG</name> <name>WINAPI</name></type>
<name>crashDumpHandler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_EXCEPTION_POINTERS</name></name> <modifier>*</modifier></type><name>pExceptionInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We only write crash dumps if the "crashdumps" directory within the
	 * postgres data directory exists.
	 */</comment>
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>attribs</name> <init>= <expr><call><name>GetFileAttributesA</name><argument_list>(<argument><expr><literal type="string">"crashdumps"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>attribs</name> <operator>!=</operator> <name>INVALID_FILE_ATTRIBUTES</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>attribs</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* 'crashdumps' exists and is a directory. Try to write a dump' */</comment>
		<decl_stmt><decl><type><name>HMODULE</name></type>		<name>hDll</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MINIDUMPWRITEDUMP</name></type> <name>pDump</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MINIDUMP_TYPE</name></type> <name>dumpType</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>dumpPath</name><index>[<expr><name>_MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HANDLE</name></type>		<name>selfProcHandle</name> <init>= <expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DWORD</name></type>		<name>selfPid</name> <init>= <expr><call><name>GetProcessId</name><argument_list>(<argument><expr><name>selfProcHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HANDLE</name></type>		<name>dumpFile</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DWORD</name></type>		<name>systemTicks</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>_MINIDUMP_EXCEPTION_INFORMATION</name></name></type> <name>ExInfo</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>ExInfo</name><operator>.</operator><name>ThreadId</name></name> <operator>=</operator> <call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ExInfo</name><operator>.</operator><name>ExceptionPointers</name></name> <operator>=</operator> <name>pExceptionInfo</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ExInfo</name><operator>.</operator><name>ClientPointers</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

		<comment type="block">/* Load the dbghelp.dll library and functions */</comment>
		<expr_stmt><expr><name>hDll</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><literal type="string">"dbghelp.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>hDll</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>write_stderr</name><argument_list>(<argument><expr><literal type="string">"could not load dbghelp.dll, cannot write crash dump\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>EXCEPTION_CONTINUE_SEARCH</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>pDump</name> <operator>=</operator> <operator>(</operator><name>MINIDUMPWRITEDUMP</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hDll</name></expr></argument>, <argument><expr><literal type="string">"MiniDumpWriteDump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>pDump</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>write_stderr</name><argument_list>(<argument><expr><literal type="string">"could not load required functions in dbghelp.dll, cannot write crash dump\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>EXCEPTION_CONTINUE_SEARCH</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Dump as much as we can, except shared memory, code segments, and
		 * memory mapped files. Exactly what we can dump depends on the
		 * version of dbghelp.dll, see:
		 * http://msdn.microsoft.com/en-us/library/ms680519(v=VS.85).aspx
		 */</comment>
		<expr_stmt><expr><name>dumpType</name> <operator>=</operator> <name>MiniDumpNormal</name> <operator>|</operator> <name>MiniDumpWithHandleData</name> <operator>|</operator>
			<name>MiniDumpWithDataSegs</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hDll</name></expr></argument>, <argument><expr><literal type="string">"EnumDirTree"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* If this function exists, we have version 5.2 or newer */</comment>
			<expr_stmt><expr><name>dumpType</name> <operator>|=</operator> <name>MiniDumpWithIndirectlyReferencedMemory</name> <operator>|</operator>
				<name>MiniDumpWithPrivateReadWriteMemory</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>systemTicks</name> <operator>=</operator> <call><name>GetTickCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dumpPath</name></expr></argument>, <argument><expr><name>_MAX_PATH</name></expr></argument>,
				 <argument><expr><literal type="string">"crashdumps\\postgres-pid%0i-%0i.mdmp"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>selfPid</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>systemTicks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dumpPath</name><index>[<expr><name>_MAX_PATH</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>dumpFile</name> <operator>=</operator> <call><name>CreateFile</name><argument_list>(<argument><expr><name>dumpPath</name></expr></argument>, <argument><expr><name>GENERIC_WRITE</name></expr></argument>, <argument><expr><name>FILE_SHARE_WRITE</name></expr></argument>,
							  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CREATE_ALWAYS</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>,
							  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dumpFile</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>write_stderr</name><argument_list>(<argument><expr><literal type="string">"could not open crash dump file \"%s\" for writing: error code %lu\n"</literal></expr></argument>,
						 <argument><expr><name>dumpPath</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>EXCEPTION_CONTINUE_SEARCH</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>pDump</name>) <argument_list>(<argument><expr><name>selfProcHandle</name></expr></argument>, <argument><expr><name>selfPid</name></expr></argument>, <argument><expr><name>dumpFile</name></expr></argument>, <argument><expr><name>dumpType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ExInfo</name></expr></argument>,
					  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>write_stderr</name><argument_list>(<argument><expr><literal type="string">"wrote crash dump to file \"%s\"\n"</literal></expr></argument>, <argument><expr><name>dumpPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>write_stderr</name><argument_list>(<argument><expr><literal type="string">"could not write crash dump to file \"%s\": error code %lu\n"</literal></expr></argument>,
						 <argument><expr><name>dumpPath</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>dumpFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>EXCEPTION_CONTINUE_SEARCH</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>pgwin32_install_crashdump_handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SetUnhandledExceptionFilter</name><argument_list>(<argument><expr><name>crashDumpHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
