<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/port/win32/mingwcompat.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * mingwcompat.c
 *	  MinGW compatibility functions
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/port/win32/mingwcompat.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_MSC_VER</name></cpp:ifndef>
<comment type="block">/*
 * MingW defines an extern to this struct, but the actual struct isn't present
 * in any library. It's trivial enough that we can safely define it
 * ourselves.
 */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>in6_addr</name></name></type> <name>in6addr_any</name> <init>= <expr><block>{<expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * This file contains loaders for functions that are missing in the MinGW
 * import libraries. It's only for actual Win32 API functions, so they are
 * all present in proper Win32 compilers.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>HMODULE</name></type> <name>kernel32</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * MingW defines an extern to this struct, but the actual struct isn't present
 * in any library. It's trivial enough that we can safely define it
 * ourselves.
 */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>in6_addr</name></name></type> <name>in6addr_any</name> <init>= <expr><block>{<expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Load DLL file just once regardless of how many functions
 * we load/call in it.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>LoadKernel32</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>kernel32</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>kernel32</name> <operator>=</operator> <call><name>LoadLibraryEx</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>kernel32</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"could not load kernel32.dll: error code %lu"</literal></expr></argument>,
								 <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Replacement for RegisterWaitForSingleObject(), which lives in
 * kernel32.dll
 */</comment>
<typedef>typedef
<function_decl><type><name>BOOL</name></type>		(<name>WINAPI</name> <modifier>*</modifier> <name>__RegisterWaitForSingleObject</name>)
			<parameter_list>(<parameter><decl><type><name>PHANDLE</name></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>WAITORTIMERCALLBACK</name></type></decl></parameter>, <parameter><decl><type><name>PVOID</name></type></decl></parameter>, <parameter><decl><type><name>ULONG</name></type></decl></parameter>, <parameter><decl><type><name>ULONG</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>__RegisterWaitForSingleObject</name></type> <name>_RegisterWaitForSingleObject</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>BOOL</name>		<name>WINAPI</name></type>
<name>RegisterWaitForSingleObject</name><parameter_list>(<parameter><decl><type><name>PHANDLE</name></type> <name>phNewWaitObject</name></decl></parameter>,
							<parameter><decl><type><name>HANDLE</name></type> <name>hObject</name></decl></parameter>,
							<parameter><decl><type><name>WAITORTIMERCALLBACK</name></type> <name>Callback</name></decl></parameter>,
							<parameter><decl><type><name>PVOID</name></type> <name>Context</name></decl></parameter>,
							<parameter><decl><type><name>ULONG</name></type> <name>dwMilliseconds</name></decl></parameter>,
							<parameter><decl><type><name>ULONG</name></type> <name>dwFlags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>_RegisterWaitForSingleObject</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LoadKernel32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>_RegisterWaitForSingleObject</name> <operator>=</operator> <operator>(</operator><name>__RegisterWaitForSingleObject</name><operator>)</operator>
			<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>kernel32</name></expr></argument>, <argument><expr><literal type="string">"RegisterWaitForSingleObject"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>_RegisterWaitForSingleObject</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"could not locate RegisterWaitForSingleObject in kernel32.dll: error code %lu"</literal></expr></argument>,
									 <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>_RegisterWaitForSingleObject</name><operator>)</operator>
		<operator>(</operator><name>phNewWaitObject</name><operator>,</operator> <name>hObject</name><operator>,</operator> <name>Callback</name><operator>,</operator> <name>Context</name><operator>,</operator> <name>dwMilliseconds</name><operator>,</operator> <name>dwFlags</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
