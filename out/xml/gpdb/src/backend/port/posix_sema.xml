<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/port/posix_sema.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * posix_sema.c
 *	  Implement PGSemaphores using POSIX semaphore facilities
 *
 * We prefer the unnamed style of POSIX semaphore (the kind made with
 * sem_init).  We can cope with the kind made with sem_open, however.
 *
 * In either implementation, typedef PGSemaphore is equivalent to "sem_t *".
 * With unnamed semaphores, the sem_t structs live in an array in shared
 * memory.  With named semaphores, that's not true because we cannot persuade
 * sem_open to do its allocation there.  Therefore, the named-semaphore code
 * *does not cope with EXEC_BACKEND*.  The sem_t structs will just be in the
 * postmaster's private memory, where they are successfully inherited by
 * forked backends, but they could not be accessed by exec'd backends.
 *
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/port/posix_sema.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;semaphore.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/pg_sema.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>


<comment type="block">/* see file header comment */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NAMED_POSIX_SEMAPHORES</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EXEC_BACKEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> cannot use named POSIX semaphores with EXEC_BACKEND</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><union>union <name>SemTPadded</name>
<block>{
	<decl_stmt><decl><type><name>sem_t</name></type>		<name>pgsem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>pad</name><index>[<expr><name>PG_CACHE_LINE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></union></type> <name>SemTPadded</name>;</typedef>

<comment type="block">/* typedef PGSemaphore is equivalent to pointer to sem_t */</comment>
<typedef>typedef <type><struct>struct <name>PGSemaphoreData</name>
<block>{
	<decl_stmt><decl><type><name>SemTPadded</name></type>	<name>sem_padded</name></decl>;</decl_stmt>
}</block></struct></type> <name>PGSemaphoreData</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_SEM_REF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(&amp;(x)-&gt;sem_padded.pgsem)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPCProtection</name></cpp:macro>	<cpp:value>(0600)</cpp:value></cpp:define>	<comment type="block">/* access/modify by user only */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_NAMED_POSIX_SEMAPHORES</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>sem_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>mySemPointers</name></decl>;</decl_stmt>	<comment type="block">/* keep track of created semaphores */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>PGSemaphore</name></type> <name>sharedSemas</name></decl>;</decl_stmt> <comment type="block">/* array of PGSemaphoreData in shared memory */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>numSems</name></decl>;</decl_stmt>			<comment type="block">/* number of semas acquired so far */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>maxSems</name></decl>;</decl_stmt>			<comment type="block">/* allocated size of above arrays */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>nextSemKey</name></decl>;</decl_stmt>			<comment type="block">/* next name to try */</comment>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ReleaseSemaphores</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_NAMED_POSIX_SEMAPHORES</name></cpp:ifdef>

<comment type="block">/*
 * PosixSemaphoreCreate
 *
 * Attempt to create a new named semaphore.
 *
 * If we fail with a failure code other than collision-with-existing-sema,
 * print out an error and abort.  Other types of errors suggest nonrecoverable
 * problems.
 */</comment>
<function><type><specifier>static</specifier> <name>sem_t</name> <modifier>*</modifier></type>
<name>PosixSemaphoreCreate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>semKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>semname</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sem_t</name>	   <modifier>*</modifier></type><name>mySem</name></decl>;</decl_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>semKey</name> <operator>=</operator> <name>nextSemKey</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>semname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>semname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/pgsql-%d"</literal></expr></argument>, <argument><expr><name>semKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>mySem</name> <operator>=</operator> <call><name>sem_open</name><argument_list>(<argument><expr><name>semname</name></expr></argument>, <argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name></expr></argument>,
						 <argument><expr><operator>(</operator><name>mode_t</name><operator>)</operator> <name>IPCProtection</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SEM_FAILED</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>mySem</name> <operator>!=</operator> <operator>(</operator><name>sem_t</name> <operator>*</operator><operator>)</operator> <name>SEM_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>mySem</name> <operator>!=</operator> <operator>(</operator><name>sem_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/* Loop if error indicates a collision */</comment>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EEXIST</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EACCES</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Else complain and abort
		 */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"sem_open(\"%s\") failed: %m"</literal></expr></argument>, <argument><expr><name>semname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Unlink the semaphore immediately, so it can't be accessed externally.
	 * This also ensures that it will go away if we crash.
	 */</comment>
	<expr_stmt><expr><call><name>sem_unlink</name><argument_list>(<argument><expr><name>semname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>mySem</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !USE_NAMED_POSIX_SEMAPHORES */</comment>

<comment type="block">/*
 * PosixSemaphoreCreate
 *
 * Attempt to create a new unnamed semaphore.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PosixSemaphoreCreate</name><parameter_list>(<parameter><decl><type><name>sem_t</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>sem_init</name><argument_list>(<argument><expr><name>sem</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"sem_init failed: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* USE_NAMED_POSIX_SEMAPHORES */</comment>


<comment type="block">/*
 * PosixSemaphoreKill	- removes a semaphore
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PosixSemaphoreKill</name><parameter_list>(<parameter><decl><type><name>sem_t</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_NAMED_POSIX_SEMAPHORES</name></cpp:ifdef>
	<comment type="block">/* Got to use sem_close for named semaphores */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>sem_close</name><argument_list>(<argument><expr><name>sem</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"sem_close failed: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* Got to use sem_destroy for unnamed semaphores */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>sem_destroy</name><argument_list>(<argument><expr><name>sem</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"sem_destroy failed: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<comment type="block">/*
 * Report amount of shared memory needed for semaphores
 */</comment>
<function><type><name>Size</name></type>
<name>PGSemaphoreShmemSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxSemas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_NAMED_POSIX_SEMAPHORES</name></cpp:ifdef>
	<comment type="block">/* No shared memory needed in this case */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* Need a PGSemaphoreData per semaphore */</comment>
	<return>return <expr><call><name>mul_size</name><argument_list>(<argument><expr><name>maxSemas</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGSemaphoreData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * PGReserveSemaphores --- initialize semaphore support
 *
 * This is called during postmaster start or shared memory reinitialization.
 * It should do whatever is needed to be able to support up to maxSemas
 * subsequent PGSemaphoreCreate calls.  Also, if any system resources
 * are acquired here or in PGSemaphoreCreate, register an on_shmem_exit
 * callback to release them.
 *
 * The port number is passed for possible use as a key (for Posix, we use
 * it to generate the starting semaphore name).  In a standalone backend,
 * zero will be passed.
 *
 * In the Posix implementation, we acquire semaphores on-demand; the
 * maxSemas parameter is just used to size the arrays.  For unnamed
 * semaphores, there is an array of PGSemaphoreData structs in shared memory.
 * For named semaphores, we keep a postmaster-local array of sem_t pointers,
 * which we use for releasing the semphores when done.
 * (This design minimizes the dependency of postmaster shutdown on the
 * contents of shared memory, which a failed backend might have clobbered.
 * We can't do much about the possibility of sem_destroy() crashing, but
 * we don't have to expose the counters to other processes.)
 */</comment>
<function><type><name>void</name></type>
<name>PGReserveSemaphores</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxSemas</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_NAMED_POSIX_SEMAPHORES</name></cpp:ifdef>
	<expr_stmt><expr><name>mySemPointers</name> <operator>=</operator> <operator>(</operator><name>sem_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>maxSemas</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sem_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>mySemPointers</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

	<comment type="block">/*
	 * We must use ShmemAllocUnlocked(), since the spinlock protecting
	 * ShmemAlloc() won't be ready yet.  (This ordering is necessary when we
	 * are emulating spinlocks with semaphores.)
	 */</comment>
	<expr_stmt><expr><name>sharedSemas</name> <operator>=</operator> <operator>(</operator><name>PGSemaphore</name><operator>)</operator>
		<call><name>ShmemAllocUnlocked</name><argument_list>(<argument><expr><call><name>PGSemaphoreShmemSize</name><argument_list>(<argument><expr><name>maxSemas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>numSems</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>maxSems</name> <operator>=</operator> <name>maxSemas</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nextSemKey</name> <operator>=</operator> <name>port</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>on_shmem_exit</name><argument_list>(<argument><expr><name>ReleaseSemaphores</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Release semaphores at shutdown or shmem reinitialization
 *
 * (called as an on_shmem_exit callback, hence funny argument list)
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ReleaseSemaphores</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_NAMED_POSIX_SEMAPHORES</name></cpp:ifdef>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numSems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PosixSemaphoreKill</name><argument_list>(<argument><expr><name><name>mySemPointers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mySemPointers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_UNNAMED_POSIX_SEMAPHORES</name></cpp:ifdef>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numSems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PosixSemaphoreKill</name><argument_list>(<argument><expr><call><name>PG_SEM_REF</name><argument_list>(<argument><expr><name>sharedSemas</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * PGSemaphoreCreate
 *
 * Allocate a PGSemaphore structure with initial count 1
 */</comment>
<function><type><name>PGSemaphore</name></type>
<name>PGSemaphoreCreate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGSemaphore</name></type> <name>sema</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sem_t</name>	   <modifier>*</modifier></type><name>newsem</name></decl>;</decl_stmt>

	<comment type="block">/* Can't do this in a backend, because static state is postmaster's */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>IsUnderPostmaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>numSems</name> <operator>&gt;=</operator> <name>maxSems</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"too many semaphores created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_NAMED_POSIX_SEMAPHORES</name></cpp:ifdef>
	<expr_stmt><expr><name>newsem</name> <operator>=</operator> <call><name>PosixSemaphoreCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Remember new sema for ReleaseSemaphores */</comment>
	<expr_stmt><expr><name><name>mySemPointers</name><index>[<expr><name>numSems</name></expr>]</index></name> <operator>=</operator> <name>newsem</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sema</name> <operator>=</operator> <operator>(</operator><name>PGSemaphore</name><operator>)</operator> <name>newsem</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>sema</name> <operator>=</operator> <operator>&amp;</operator><name><name>sharedSemas</name><index>[<expr><name>numSems</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>newsem</name> <operator>=</operator> <call><name>PG_SEM_REF</name><argument_list>(<argument><expr><name>sema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PosixSemaphoreCreate</name><argument_list>(<argument><expr><name>newsem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>numSems</name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>sema</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PGSemaphoreReset
 *
 * Reset a previously-initialized PGSemaphore to have count 0
 */</comment>
<function><type><name>void</name></type>
<name>PGSemaphoreReset</name><parameter_list>(<parameter><decl><type><name>PGSemaphore</name></type> <name>sema</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * There's no direct API for this in POSIX, so we have to ratchet the
	 * semaphore down to 0 with repeated trywait's.
	 */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>sem_trywait</name><argument_list>(<argument><expr><call><name>PG_SEM_REF</name><argument_list>(<argument><expr><name>sema</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EDEADLK</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>			<comment type="block">/* got it down to 0 */</comment>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>		<comment type="block">/* can this happen? */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"sem_trywait failed: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * PGSemaphoreLock
 *
 * Lock a semaphore (decrement count), blocking if count would be &lt; 0
 */</comment>
<function><type><name>void</name></type>
<name>PGSemaphoreLock</name><parameter_list>(<parameter><decl><type><name>PGSemaphore</name></type> <name>sema</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>errStatus</name></decl>;</decl_stmt>

	<comment type="block">/* See notes in sysv_sema.c's implementation of PGSemaphoreLock. */</comment>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>errStatus</name> <operator>=</operator> <call><name>sem_wait</name><argument_list>(<argument><expr><call><name>PG_SEM_REF</name><argument_list>(<argument><expr><name>sema</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>errStatus</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><name>errStatus</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"sem_wait failed: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * PGSemaphoreLockInterruptable
 *
 * Lock a semaphore (decrement count), blocking if count would be &lt; 0.
 * Return true if the lock obtained or false if an interrupt occurred.
 */</comment>
<function><type><name>bool</name></type>
<name>PGSemaphoreLockInterruptable</name><parameter_list>(<parameter><decl><type><name>PGSemaphore</name></type> <name>sema</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>errStatus</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>errStatus</name> <operator>=</operator> <call><name>sem_wait</name><argument_list>(<argument><expr><call><name>PG_SEM_REF</name><argument_list>(<argument><expr><name>sema</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>errStatus</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"sem_wait failed: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PGSemaphoreUnlock
 *
 * Unlock a semaphore (increment count)
 */</comment>
<function><type><name>void</name></type>
<name>PGSemaphoreUnlock</name><parameter_list>(<parameter><decl><type><name>PGSemaphore</name></type> <name>sema</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>errStatus</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Note: if errStatus is -1 and errno == EINTR then it means we returned
	 * from the operation prematurely because we were sent a signal.  So we
	 * try and unlock the semaphore again. Not clear this can really happen,
	 * but might as well cope.
	 */</comment>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>errStatus</name> <operator>=</operator> <call><name>sem_post</name><argument_list>(<argument><expr><call><name>PG_SEM_REF</name><argument_list>(<argument><expr><name>sema</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>errStatus</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><name>errStatus</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"sem_post failed: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * PGSemaphoreTryLock
 *
 * Lock a semaphore only if able to do so without blocking
 */</comment>
<function><type><name>bool</name></type>
<name>PGSemaphoreTryLock</name><parameter_list>(<parameter><decl><type><name>PGSemaphore</name></type> <name>sema</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>errStatus</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Note: if errStatus is -1 and errno == EINTR then it means we returned
	 * from the operation prematurely because we were sent a signal.  So we
	 * try and lock the semaphore again.
	 */</comment>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>errStatus</name> <operator>=</operator> <call><name>sem_trywait</name><argument_list>(<argument><expr><call><name>PG_SEM_REF</name><argument_list>(<argument><expr><name>sema</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>errStatus</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><name>errStatus</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EDEADLK</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>		<comment type="block">/* failed to lock it */</comment>
		<comment type="block">/* Otherwise we got trouble */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"sem_trywait failed: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
