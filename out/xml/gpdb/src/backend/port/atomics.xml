<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/port/atomics.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * atomics.c
 *	   Non-Inline parts of the atomics implementation
 *
 * Portions Copyright (c) 2013-2019, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/backend/port/atomics.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/atomics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/spin.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PG_HAVE_MEMORY_BARRIER_EMULATION</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"barriers are required (and provided) on WIN32 platforms"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PG_HAVE_MEMORY_BARRIER_EMULATION</name></cpp:ifdef>
<function><type><name>void</name></type>
<name>pg_spinlock_barrier</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * NB: we have to be reentrant here, some barriers are placed in signal
	 * handlers.
	 *
	 * We use kill(0) for the fallback barrier as we assume that kernels on
	 * systems old enough to require fallback barrier support will include an
	 * appropriate barrier while checking the existence of the postmaster pid.
	 */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>kill</name><argument_list>(<argument><expr><name>PostmasterPid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PG_HAVE_COMPILER_BARRIER_EMULATION</name></cpp:ifdef>
<function><type><name>void</name></type>
<name>pg_extern_compiler_barrier</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* do nothing */</comment>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PG_HAVE_ATOMIC_FLAG_SIMULATION</name></cpp:ifdef>

<function><type><name>void</name></type>
<name>pg_atomic_init_flag_impl</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>pg_atomic_flag</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>slock_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
					 <argument><expr><literal type="string">"size mismatch of atomic_flag vs slock_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_SPINLOCKS</name></cpp:ifndef>

	<comment type="block">/*
	 * NB: If we're using semaphore based TAS emulation, be careful to use a
	 * separate set of semaphores. Otherwise we'd get in trouble if an atomic
	 * var would be manipulated while spinlock is held.
	 */</comment>
	<expr_stmt><expr><call><name>s_init_lock_sema</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>pg_atomic_test_set_flag_impl</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>pg_atomic_flag</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>oldval</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldval</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>oldval</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_atomic_clear_flag_impl</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>pg_atomic_flag</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>pg_atomic_unlocked_test_flag_impl</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>pg_atomic_flag</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>ptr</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* PG_HAVE_ATOMIC_FLAG_SIMULATION */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PG_HAVE_ATOMIC_U32_SIMULATION</name></cpp:ifdef>
<function><type><name>void</name></type>
<name>pg_atomic_init_u32_impl</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>pg_atomic_uint32</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>val_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>slock_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
					 <argument><expr><literal type="string">"size mismatch of atomic_uint32 vs slock_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we're using semaphore based atomic flags, be careful about nested
	 * usage of atomics while a spinlock is held.
	 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_SPINLOCKS</name></cpp:ifndef>
	<expr_stmt><expr><call><name>s_init_lock_sema</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>val_</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_atomic_write_u32_impl</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>pg_atomic_uint32</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * One might think that an unlocked write doesn't need to acquire the
	 * spinlock, but one would be wrong. Even an unlocked write has to cause a
	 * concurrent pg_atomic_compare_exchange_u32() (et al) to fail.
	 */</comment>
	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>pg_atomic_compare_exchange_u32_impl</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>pg_atomic_uint32</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
									<parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>newval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ret</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Do atomic op under a spinlock. It might look like we could just skip
	 * the cmpxchg if the lock isn't available, but that'd just emulate a
	 * 'weak' compare and swap. I.e. one that allows spurious failures. Since
	 * several algorithms rely on a strong variant and that is efficiently
	 * implementable on most major architectures let's emulate it here as
	 * well.
	 */</comment>
	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* perform compare/exchange logic */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <operator>*</operator><name>expected</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>expected</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* and release lock */</comment>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32</name></type>
<name>pg_atomic_fetch_add_u32_impl</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>pg_atomic_uint32</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>add_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>oldval</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldval</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>value</name></name> <operator>+=</operator> <name>add_</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>oldval</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* PG_HAVE_ATOMIC_U32_SIMULATION */</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PG_HAVE_ATOMIC_U64_SIMULATION</name></cpp:ifdef>

<function><type><name>void</name></type>
<name>pg_atomic_init_u64_impl</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>pg_atomic_uint64</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>val_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>slock_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
					 <argument><expr><literal type="string">"size mismatch of atomic_uint64 vs slock_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we're using semaphore based atomic flags, be careful about nested
	 * usage of atomics while a spinlock is held.
	 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_SPINLOCKS</name></cpp:ifndef>
	<expr_stmt><expr><call><name>s_init_lock_sema</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>val_</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>pg_atomic_compare_exchange_u64_impl</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>pg_atomic_uint64</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
									<parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>newval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ret</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Do atomic op under a spinlock. It might look like we could just skip
	 * the cmpxchg if the lock isn't available, but that'd just emulate a
	 * 'weak' compare and swap. I.e. one that allows spurious failures. Since
	 * several algorithms rely on a strong variant and that is efficiently
	 * implementable on most major architectures let's emulate it here as
	 * well.
	 */</comment>
	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* perform compare/exchange logic */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <operator>*</operator><name>expected</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>expected</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* and release lock */</comment>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64</name></type>
<name>pg_atomic_fetch_add_u64_impl</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>pg_atomic_uint64</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>add_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>oldval</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldval</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>value</name></name> <operator>+=</operator> <name>add_</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>(</operator><name>slock_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>oldval</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* PG_HAVE_ATOMIC_U64_SIMULATION */</comment>
</unit>
