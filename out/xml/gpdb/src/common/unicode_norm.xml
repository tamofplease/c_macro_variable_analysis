<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/common/unicode_norm.c"><comment type="block">/*-------------------------------------------------------------------------
 * unicode_norm.c
 *		Normalize a Unicode string to NFKC form
 *
 * This implements Unicode normalization, per the documentation at
 * http://www.unicode.org/reports/tr15/.
 *
 * Portions Copyright (c) 2017-2019, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/common/unicode_norm.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/unicode_norm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/unicode_norm_table.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>palloc(size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pfree(size)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(size)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Constants for calculations with Hangul characters */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBASE</name></cpp:macro>		<cpp:value>0xAC00</cpp:value></cpp:define>		<comment type="block">/* U+AC00 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LBASE</name></cpp:macro>		<cpp:value>0x1100</cpp:value></cpp:define>		<comment type="block">/* U+1100 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBASE</name></cpp:macro>		<cpp:value>0x1161</cpp:value></cpp:define>		<comment type="block">/* U+1161 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TBASE</name></cpp:macro>		<cpp:value>0x11A7</cpp:value></cpp:define>		<comment type="block">/* U+11A7 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCOUNT</name></cpp:macro>		<cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCOUNT</name></cpp:macro>		<cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCOUNT</name></cpp:macro>		<cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCOUNT</name></cpp:macro>		<cpp:value>VCOUNT * TCOUNT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCOUNT</name></cpp:macro>		<cpp:value>LCOUNT * NCOUNT</cpp:value></cpp:define>

<comment type="block">/* comparison routine for bsearch() of decomposition lookup table. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>conv_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>v1</name></decl>,
				<decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>p1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>v2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>pg_unicode_decomposition</name> <operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator><operator>-&gt;</operator><name>codepoint</name></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>v1</name> <operator>&gt;</operator> <name>v2</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>v1</name> <operator>==</operator> <name>v2</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the entry corresponding to code in the decomposition lookup table.
 */</comment>
<function><type><specifier>static</specifier> <name>pg_unicode_decomposition</name> <modifier>*</modifier></type>
<name>get_code_entry</name><parameter_list>(<parameter><decl><type><name>pg_wchar</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name>code</name><operator>)</operator></expr></argument>,
				   <argument><expr><name>UnicodeDecompMain</name></expr></argument>,
				   <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>UnicodeDecompMain</name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_unicode_decomposition</name></expr></argument>)</argument_list></sizeof></expr></argument>,
				   <argument><expr><name>conv_compare</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Given a decomposition entry looked up earlier, get the decomposed
 * characters.
 *
 * Note: the returned pointer can point to statically allocated buffer, and
 * is only valid until next call to this function!
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>pg_wchar</name> <modifier>*</modifier></type>
<name>get_code_decomposition</name><parameter_list>(<parameter><decl><type><name>pg_unicode_decomposition</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dec_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>pg_wchar</name></type> <name>x</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>DECOMPOSITION_IS_INLINE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DECOMPOSITION_SIZE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>pg_wchar</name><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>dec_index</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>dec_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><operator>&amp;</operator><name>x</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>dec_size</name> <operator>=</operator> <call><name>DECOMPOSITION_SIZE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>&amp;</operator><name><name>UnicodeDecomp_codepoints</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>dec_index</name></name></expr>]</index></name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Calculate how many characters a given character will decompose to.
 *
 * This needs to recurse, if the character decomposes into characters that
 * are, in turn, decomposable.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_decomposed_size</name><parameter_list>(<parameter><decl><type><name>pg_wchar</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_unicode_decomposition</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name> <modifier>*</modifier></type><name>decomp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>dec_size</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Fast path for Hangul characters not stored in tables to save memory as
	 * decomposition is algorithmic. See
	 * http://unicode.org/reports/tr15/tr15-18.html, annex 10 for details on
	 * the matter.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <name>SBASE</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;</operator> <name>SBASE</name> <operator>+</operator> <name>SCOUNT</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>tindex</name></decl>,
					<decl><type ref="prev"/><name>sindex</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>sindex</name> <operator>=</operator> <name>code</name> <operator>-</operator> <name>SBASE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tindex</name> <operator>=</operator> <name>sindex</name> <operator>%</operator> <name>TCOUNT</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>tindex</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><literal type="number">2</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>get_code_entry</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Just count current code if no other decompositions.  A NULL entry is
	 * equivalent to a character with class 0 and no decompositions.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>DECOMPOSITION_SIZE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If this entry has other decomposition codes look at them as well. First
	 * get its decomposition in the list of tables available.
	 */</comment>
	<expr_stmt><expr><name>decomp</name> <operator>=</operator> <call><name>get_code_decomposition</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dec_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>lcode</name> <init>= <expr><name><name>decomp</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>get_decomposed_size</name><argument_list>(<argument><expr><name>lcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Recompose a set of characters. For hangul characters, the calculation
 * is algorithmic. For others, an inverse lookup at the decomposition
 * table is necessary. Returns true if a recomposition can be done, and
 * false otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>recompose_code</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Handle Hangul characters algorithmically, per the Unicode spec.
	 *
	 * Check if two current characters are L and V.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>LBASE</name> <operator>&amp;&amp;</operator> <name>start</name> <operator>&lt;</operator> <name>LBASE</name> <operator>+</operator> <name>LCOUNT</name> <operator>&amp;&amp;</operator>
		<name>code</name> <operator>&gt;=</operator> <name>VBASE</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;</operator> <name>VBASE</name> <operator>+</operator> <name>VCOUNT</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* make syllable of form LV */</comment>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>lindex</name> <init>= <expr><name>start</name> <operator>-</operator> <name>LBASE</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>vindex</name> <init>= <expr><name>code</name> <operator>-</operator> <name>VBASE</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>SBASE</name> <operator>+</operator> <operator>(</operator><name>lindex</name> <operator>*</operator> <name>VCOUNT</name> <operator>+</operator> <name>vindex</name><operator>)</operator> <operator>*</operator> <name>TCOUNT</name></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<comment type="block">/* Check if two current characters are LV and T */</comment>
	<if type="elseif">else if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>SBASE</name> <operator>&amp;&amp;</operator> <name>start</name> <operator>&lt;</operator> <operator>(</operator><name>SBASE</name> <operator>+</operator> <name>SCOUNT</name><operator>)</operator> <operator>&amp;&amp;</operator>
			 <operator>(</operator><operator>(</operator><name>start</name> <operator>-</operator> <name>SBASE</name><operator>)</operator> <operator>%</operator> <name>TCOUNT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			 <name>code</name> <operator>&gt;=</operator> <name>TBASE</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;</operator> <operator>(</operator><name>TBASE</name> <operator>+</operator> <name>TCOUNT</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* make syllable of from LVT */</comment>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>tindex</name> <init>= <expr><name>code</name> <operator>-</operator> <name>TBASE</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>tindex</name></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Do an inverse lookup of the decomposition tables to see if anything
		 * matches. The comparison just needs to be a perfect match on the
		 * sub-table of size two, because the start character has already been
		 * recomposed partially.
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>UnicodeDecompMain</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>pg_unicode_decomposition</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>UnicodeDecompMain</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>DECOMPOSITION_SIZE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>DECOMPOSITION_NO_COMPOSE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name><name>UnicodeDecomp_codepoints</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>dec_index</name></name></expr>]</index></name> <operator>&amp;&amp;</operator>
				<name>code</name> <operator>==</operator> <name><name>UnicodeDecomp_codepoints</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>dec_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>codepoint</name></name></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Decompose the given code into the array given by caller. The
 * decomposition begins at the position given by caller, saving one
 * lookup on the decomposition table. The current position needs to be
 * updated here to let the caller know from where to continue filling
 * in the array result.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>decompose_code</name><parameter_list>(<parameter><decl><type><name>pg_wchar</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>pg_wchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_unicode_decomposition</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name> <modifier>*</modifier></type><name>decomp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>dec_size</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Fast path for Hangul characters not stored in tables to save memory as
	 * decomposition is algorithmic. See
	 * http://unicode.org/reports/tr15/tr15-18.html, annex 10 for details on
	 * the matter.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <name>SBASE</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;</operator> <name>SBASE</name> <operator>+</operator> <name>SCOUNT</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>l</name></decl>,
					<decl><type ref="prev"/><name>v</name></decl>,
					<decl><type ref="prev"/><name>tindex</name></decl>,
					<decl><type ref="prev"/><name>sindex</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_wchar</name>   <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>*</operator><name>result</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>sindex</name> <operator>=</operator> <name>code</name> <operator>-</operator> <name>SBASE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <name>LBASE</name> <operator>+</operator> <name>sindex</name> <operator>/</operator> <operator>(</operator><name>VCOUNT</name> <operator>*</operator> <name>TCOUNT</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>=</operator> <name>VBASE</name> <operator>+</operator> <operator>(</operator><name>sindex</name> <operator>%</operator> <operator>(</operator><name>VCOUNT</name> <operator>*</operator> <name>TCOUNT</name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>TCOUNT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tindex</name> <operator>=</operator> <name>sindex</name> <operator>%</operator> <name>TCOUNT</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>res</name><index>[<expr><operator>*</operator><name>current</name></expr>]</index></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>current</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>res</name><index>[<expr><operator>*</operator><name>current</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>current</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>tindex</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>res</name><index>[<expr><operator>*</operator><name>current</name></expr>]</index></name> <operator>=</operator> <name>TBASE</name> <operator>+</operator> <name>tindex</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>current</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>get_code_entry</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Just fill in with the current decomposition if there are no
	 * decomposition codes to recurse to.  A NULL entry is equivalent to a
	 * character with class 0 and no decompositions, so just leave also in
	 * this case.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>DECOMPOSITION_SIZE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>pg_wchar</name>   <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>*</operator><name>result</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>res</name><index>[<expr><operator>*</operator><name>current</name></expr>]</index></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>current</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If this entry has other decomposition codes look at them as well.
	 */</comment>
	<expr_stmt><expr><name>decomp</name> <operator>=</operator> <call><name>get_code_decomposition</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dec_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>pg_wchar</name></type>	<name>lcode</name> <init>= <expr><operator>(</operator><name>pg_wchar</name><operator>)</operator> <name><name>decomp</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Leave if no more decompositions */</comment>
		<expr_stmt><expr><call><name>decompose_code</name><argument_list>(<argument><expr><name>lcode</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * unicode_normalize_kc - Normalize a Unicode string to NFKC form.
 *
 * The input is a 0-terminated array of codepoints.
 *
 * In frontend, returns a 0-terminated array of codepoints, allocated with
 * malloc. Or NULL if we run out of memory. In frontend, the returned
 * string is palloc'd instead, and OOM is reported with ereport().
 */</comment>
<function><type><name>pg_wchar</name> <modifier>*</modifier></type>
<name>unicode_normalize_kc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pg_wchar</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_wchar</name>   <modifier>*</modifier></type><name>decomp_chars</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_wchar</name>   <modifier>*</modifier></type><name>recomp_chars</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>decomp_size</name></decl>,
				<decl><type ref="prev"/><name>current_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>pg_wchar</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<comment type="block">/* variables for recomposition */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>last_class</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>starter_pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>target_pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>starter_ch</name></decl>;</decl_stmt>

	<comment type="block">/* First, do character decomposition */</comment>

	<comment type="block">/*
	 * Calculate how many characters long the decomposed version will be.
	 */</comment>
	<expr_stmt><expr><name>decomp_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>input</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>decomp_size</name> <operator>+=</operator> <call><name>get_decomposed_size</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>decomp_chars</name> <operator>=</operator> <operator>(</operator><name>pg_wchar</name> <operator>*</operator><operator>)</operator> <call><name>ALLOC</name><argument_list>(<argument><expr><operator>(</operator><name>decomp_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pg_wchar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>decomp_chars</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Now fill in each entry recursively. This needs a second pass on the
	 * decomposition table.
	 */</comment>
	<expr_stmt><expr><name>current_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>input</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>decompose_code</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decomp_chars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>current_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><name><name>decomp_chars</name><index>[<expr><name>decomp_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>decomp_size</name> <operator>==</operator> <name>current_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Now apply canonical ordering.
	 */</comment>
	<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>decomp_size</name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>pg_wchar</name></type>	<name>prev</name> <init>= <expr><name><name>decomp_chars</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_wchar</name></type>	<name>next</name> <init>= <expr><name><name>decomp_chars</name><index>[<expr><name>count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_wchar</name></type>	<name>tmp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_unicode_decomposition</name> <modifier>*</modifier></type><name>prevEntry</name> <init>= <expr><call><name>get_code_entry</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_unicode_decomposition</name> <modifier>*</modifier></type><name>nextEntry</name> <init>= <expr><call><name>get_code_entry</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * If no entries are found, the character used is either an Hangul
		 * character or a character with a class of 0 and no decompositions,
		 * so move to next result.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>prevEntry</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>nextEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Per Unicode (http://unicode.org/reports/tr15/tr15-18.html) annex 4,
		 * a sequence of two adjacent characters in a string is an
		 * exchangeable pair if the combining class (from the Unicode
		 * Character Database) for the first character is greater than the
		 * combining class for the second, and the second is not a starter.  A
		 * character is a starter if its combining class is 0.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>nextEntry</name><operator>-&gt;</operator><name>comb_class</name></name> <operator>==</operator> <literal type="number">0x0</literal> <operator>||</operator> <name><name>prevEntry</name><operator>-&gt;</operator><name>comb_class</name></name> <operator>==</operator> <literal type="number">0x0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>prevEntry</name><operator>-&gt;</operator><name>comb_class</name></name> <operator>&lt;=</operator> <name><name>nextEntry</name><operator>-&gt;</operator><name>comb_class</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* exchange can happen */</comment>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>decomp_chars</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>decomp_chars</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>decomp_chars</name><index>[<expr><name>count</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>decomp_chars</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

		<comment type="block">/* backtrack to check again */</comment>
		<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>count</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * The last phase of NFKC is the recomposition of the reordered Unicode
	 * string using combining classes. The recomposed string cannot be longer
	 * than the decomposed one, so make the allocation of the output string
	 * based on that assumption.
	 */</comment>
	<expr_stmt><expr><name>recomp_chars</name> <operator>=</operator> <operator>(</operator><name>pg_wchar</name> <operator>*</operator><operator>)</operator> <call><name>ALLOC</name><argument_list>(<argument><expr><operator>(</operator><name>decomp_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pg_wchar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>recomp_chars</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>decomp_chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>last_class</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>			<comment type="block">/* this eliminates a special check */</comment>
	<expr_stmt><expr><name>starter_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>target_pos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>starter_ch</name> <operator>=</operator> <name><name>recomp_chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>decomp_chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>decomp_size</name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>pg_wchar</name></type>	<name>ch</name> <init>= <expr><name><name>decomp_chars</name><index>[<expr><name>count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_unicode_decomposition</name> <modifier>*</modifier></type><name>ch_entry</name> <init>= <expr><call><name>get_code_entry</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>ch_class</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>ch_entry</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>ch_entry</name><operator>-&gt;</operator><name>comb_class</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_wchar</name></type>	<name>composite</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>last_class</name> <operator>&lt;</operator> <name>ch_class</name> <operator>&amp;&amp;</operator>
			<call><name>recompose_code</name><argument_list>(<argument><expr><name>starter_ch</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>composite</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>recomp_chars</name><index>[<expr><name>starter_pos</name></expr>]</index></name> <operator>=</operator> <name>composite</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>starter_ch</name> <operator>=</operator> <name>composite</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>ch_class</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>starter_pos</name> <operator>=</operator> <name>target_pos</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>starter_ch</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>last_class</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>recomp_chars</name><index>[<expr><name>target_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>last_class</name> <operator>=</operator> <name>ch_class</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>recomp_chars</name><index>[<expr><name>target_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>recomp_chars</name><index>[<expr><name>target_pos</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>pg_wchar</name><operator>)</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>decomp_chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>recomp_chars</name></expr>;</return>
</block_content>}</block></function>
</unit>
