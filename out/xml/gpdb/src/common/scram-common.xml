<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/common/scram-common.c"><comment type="block">/*-------------------------------------------------------------------------
 * scram-common.c
 *		Shared frontend/backend code for SCRAM authentication
 *
 * This contains the common low-level functions needed in both frontend and
 * backend, for implement the Salted Challenge Response Authentication
 * Mechanism (SCRAM), per IETF's RFC 5802.
 *
 * Portions Copyright (c) 2017-2019, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/common/scram-common.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/scram-common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/pg_bswap.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_IPAD</name></cpp:macro> <cpp:value>0x36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_OPAD</name></cpp:macro> <cpp:value>0x5C</cpp:value></cpp:define>

<comment type="block">/*
 * Calculate HMAC per RFC2104.
 *
 * The hash function used is SHA-256.
 */</comment>
<function><type><name>void</name></type>
<name>scram_HMAC_init</name><parameter_list>(<parameter><decl><type><name>scram_HMAC_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>k_ipad</name><index>[<expr><name>SHA256_HMAC_B</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>keybuf</name><index>[<expr><name>SCRAM_KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If the key is longer than the block size (64 bytes for SHA-256), pass
	 * it through SHA-256 once to shrink it down.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&gt;</operator> <name>SHA256_HMAC_B</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>pg_sha256_ctx</name></type> <name>sha256_ctx</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>pg_sha256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha256_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha256_ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_sha256_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha256_ctx</name></expr></argument>, <argument><expr><name>keybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>keybuf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name>SCRAM_KEY_LEN</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>k_ipad</name></expr></argument>, <argument><expr><name>HMAC_IPAD</name></expr></argument>, <argument><expr><name>SHA256_HMAC_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>k_opad</name></name></expr></argument>, <argument><expr><name>HMAC_OPAD</name></expr></argument>, <argument><expr><name>SHA256_HMAC_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keylen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>k_ipad</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>k_opad</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* tmp = H(K XOR ipad, text) */</comment>
	<expr_stmt><expr><call><name>pg_sha256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sha256ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sha256ctx</name></name></expr></argument>, <argument><expr><name>k_ipad</name></expr></argument>, <argument><expr><name>SHA256_HMAC_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Update HMAC calculation
 * The hash function used is SHA-256.
 */</comment>
<function><type><name>void</name></type>
<name>scram_HMAC_update</name><parameter_list>(<parameter><decl><type><name>scram_HMAC_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pg_sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sha256ctx</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Finalize HMAC calculation.
 * The hash function used is SHA-256.
 */</comment>
<function><type><name>void</name></type>
<name>scram_HMAC_final</name><parameter_list>(<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>scram_HMAC_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>h</name><index>[<expr><name>SCRAM_KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_sha256_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sha256ctx</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* H(K XOR opad, tmp) */</comment>
	<expr_stmt><expr><call><name>pg_sha256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sha256ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sha256ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>k_opad</name></name></expr></argument>, <argument><expr><name>SHA256_HMAC_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sha256ctx</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>SCRAM_KEY_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_sha256_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sha256ctx</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Calculate SaltedPassword.
 *
 * The password should already be normalized by SASLprep.
 */</comment>
<function><type><name>void</name></type>
<name>scram_SaltedPassword</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>saltlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iterations</name></decl></parameter>,
					 <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>password_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>one</name> <init>= <expr><call><name>pg_hton32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>Ui</name><index>[<expr><name>SCRAM_KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>Ui_prev</name><index>[<expr><name>SCRAM_KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>scram_HMAC_ctx</name></type> <name>hmac_ctx</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Iterate hash calculation of HMAC entry using given salt.  This is
	 * essentially PBKDF2 (see RFC2898) with HMAC() as the pseudorandom
	 * function.
	 */</comment>

	<comment type="block">/* First iteration */</comment>
	<expr_stmt><expr><call><name>scram_HMAC_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac_ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <name>password</name></expr></argument>, <argument><expr><name>password_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scram_HMAC_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac_ctx</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>saltlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scram_HMAC_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac_ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>one</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scram_HMAC_final</name><argument_list>(<argument><expr><name>Ui_prev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hmac_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>Ui_prev</name></expr></argument>, <argument><expr><name>SCRAM_KEY_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Subsequent iterations */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>iterations</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>scram_HMAC_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac_ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <name>password</name></expr></argument>, <argument><expr><name>password_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scram_HMAC_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac_ctx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>Ui_prev</name></expr></argument>, <argument><expr><name>SCRAM_KEY_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scram_HMAC_final</name><argument_list>(<argument><expr><name>Ui</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hmac_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SCRAM_KEY_LEN</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>result</name><index>[<expr><name>j</name></expr>]</index></name> <operator>^=</operator> <name><name>Ui</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Ui_prev</name></expr></argument>, <argument><expr><name>Ui</name></expr></argument>, <argument><expr><name>SCRAM_KEY_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
 * Calculate SHA-256 hash for a NULL-terminated string. (The NULL terminator is
 * not included in the hash).
 */</comment>
<function><type><name>void</name></type>
<name>scram_H</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha256_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_sha256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_sha256_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Calculate ClientKey.
 */</comment>
<function><type><name>void</name></type>
<name>scram_ClientKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>salted_password</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>scram_HMAC_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>scram_HMAC_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>salted_password</name></expr></argument>, <argument><expr><name>SCRAM_KEY_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scram_HMAC_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Client Key"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"Client Key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scram_HMAC_final</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Calculate ServerKey.
 */</comment>
<function><type><name>void</name></type>
<name>scram_ServerKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>salted_password</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>scram_HMAC_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>scram_HMAC_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>salted_password</name></expr></argument>, <argument><expr><name>SCRAM_KEY_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scram_HMAC_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Server Key"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"Server Key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scram_HMAC_final</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Construct a verifier string for SCRAM, stored in pg_authid.rolpassword.
 *
 * The password should already have been processed with SASLprep, if necessary!
 *
 * If iterations is 0, default number of iterations is used.  The result is
 * palloc'd or malloc'd, so caller is responsible for freeing it.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>scram_build_verifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>saltlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iterations</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>salted_password</name><index>[<expr><name>SCRAM_KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>stored_key</name><index>[<expr><name>SCRAM_KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>server_key</name><index>[<expr><name>SCRAM_KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>maxlen</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>iterations</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>iterations</name> <operator>=</operator> <name>SCRAM_DEFAULT_ITERATIONS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Calculate StoredKey and ServerKey */</comment>
	<expr_stmt><expr><call><name>scram_SaltedPassword</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>saltlen</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>,
						 <argument><expr><name>salted_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scram_ClientKey</name><argument_list>(<argument><expr><name>salted_password</name></expr></argument>, <argument><expr><name>stored_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scram_H</name><argument_list>(<argument><expr><name>stored_key</name></expr></argument>, <argument><expr><name>SCRAM_KEY_LEN</name></expr></argument>, <argument><expr><name>stored_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>scram_ServerKey</name><argument_list>(<argument><expr><name>salted_password</name></expr></argument>, <argument><expr><name>server_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*----------
	 * The format is:
	 * SCRAM-SHA-256$&lt;iteration count&gt;:&lt;salt&gt;$&lt;StoredKey&gt;:&lt;ServerKey&gt;
	 *----------
	 */</comment>
	<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"SCRAM-SHA-256"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal>
		<operator>+</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">1</literal>				<comment type="block">/* iteration count */</comment>
		<operator>+</operator> <call><name>pg_b64_enc_len</name><argument_list>(<argument><expr><name>saltlen</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal>	<comment type="block">/* Base64-encoded salt */</comment>
		<operator>+</operator> <call><name>pg_b64_enc_len</name><argument_list>(<argument><expr><name>SCRAM_KEY_LEN</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <comment type="block">/* Base64-encoded StoredKey */</comment>
		<operator>+</operator> <call><name>pg_b64_enc_len</name><argument_list>(<argument><expr><name>SCRAM_KEY_LEN</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>	<comment type="block">/* Base64-encoded ServerKey */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FRONTEND</name></cpp:ifdef>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>result</name> <operator>+</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"SCRAM-SHA-256$%d:"</literal></expr></argument>, <argument><expr><name>iterations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>pg_b64_encode</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr><name>saltlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>pg_b64_encode</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>stored_key</name></expr></argument>, <argument><expr><name>SCRAM_KEY_LEN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>pg_b64_encode</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>server_key</name></expr></argument>, <argument><expr><name>SCRAM_KEY_LEN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>result</name> <operator>&lt;=</operator> <name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
