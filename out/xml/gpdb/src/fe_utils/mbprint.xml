<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/fe_utils/mbprint.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * Multibyte character printing support for frontend code
 *
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/fe_utils/mbprint.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fe_utils/mbprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>


<comment type="block">/*
 * To avoid version-skew problems, this file must not use declarations
 * from pg_wchar.h: the encoding IDs we are dealing with are determined
 * by the libpq.so we are linked with, and that might not match the
 * numbers we see at compile time.  (If this file were inside libpq,
 * the problem would go away...)
 *
 * Hence, we have our own definition of pg_wchar, and we get the values
 * of any needed encoding IDs on-the-fly.
 */</comment>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>pg_wchar</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pg_get_utf8_id</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>utf8_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>utf8_id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>utf8_id</name> <operator>=</operator> <call><name>pg_char_to_encoding</name><argument_list>(<argument><expr><literal type="string">"utf8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>utf8_id</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_UTF8</name></cpp:macro>		<cpp:value>pg_get_utf8_id()</cpp:value></cpp:define>


<comment type="block">/*
 * Convert a UTF-8 character to a Unicode code point.
 * This is a one-character version of pg_utf2wchar_with_len.
 *
 * No error checks here, c must point to a long-enough string.
 */</comment>
<function><type><specifier>static</specifier> <name>pg_wchar</name></type>
<name>utf8_to_unicode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>pg_wchar</name><operator>)</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xc0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>pg_wchar</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>
						   <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xe0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>pg_wchar</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>
						   <operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>
						   <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xf8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xf0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>pg_wchar</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator>
						   <operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>
						   <operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>
						   <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<comment type="block">/* that is an invalid code on purpose */</comment>
		<return>return <expr><literal type="number">0xffffffff</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Unicode 3.1 compliant validation : for each category, it checks the
 * combination of each byte to make sure it maps to a valid range. It also
 * returns -1 for the following UCS values: ucs &gt; 0x10ffff ucs &amp; 0xfffe =
 * 0xfffe 0xfdd0 &lt; ucs &lt; 0xfdef ucs &amp; 0xdb00 = 0xd800 (surrogates)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>utf_charcheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xc0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* two-byte char */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xe0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* three-byte char */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&amp;&amp;</operator>
			<operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x00</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x20</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
			<operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>z</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>yx</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>lx</name> <init>= <expr><name>yx</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></init></decl>;</decl_stmt>

			<comment type="block">/* check 0xfffe/0xffff, 0xfdd0..0xfedf range, surrogates */</comment>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>z</name> <operator>==</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&amp;&amp;</operator>
				 <operator>(</operator><operator>(</operator><operator>(</operator><name>yx</name> <operator>&amp;</operator> <literal type="number">0xffe</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xffe</literal><operator>)</operator> <operator>||</operator>
				  <operator>(</operator><operator>(</operator><operator>(</operator><name>yx</name> <operator>&amp;</operator> <literal type="number">0xf80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xd80</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>lx</name> <operator>&gt;=</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>lx</name> <operator>&lt;=</operator> <literal type="number">0x4f</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator> <operator>||</operator>
				<operator>(</operator><operator>(</operator><name>z</name> <operator>==</operator> <literal type="number">0x0d</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>yx</name> <operator>&amp;</operator> <literal type="number">0xb00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x800</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
			<return>return <expr><literal type="number">3</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xf8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xf0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>u</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

		<comment type="block">/* four-byte char */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&amp;&amp;</operator>
			<operator>(</operator><name>u</name> <operator>&gt;</operator> <literal type="number">0x00</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>u</name> <operator>&lt;=</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&amp;&amp;</operator>
			<operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* test for 0xzzzzfffe/0xzzzzfffff */</comment>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&amp;&amp;</operator>
				<operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3e</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x3e</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
			<return>return <expr><literal type="number">4</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>mb_utf_validate</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pwcs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>pwcs</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>pwcs</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>utf_charcheck</name><argument_list>(<argument><expr><name>pwcs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>pwcs</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pwcs</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>pwcs</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<comment type="block">/* we skip the char */</comment>
			<expr_stmt><expr><name>pwcs</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>pwcs</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * public functions : wcswidth and mbvalidate
 */</comment>

<comment type="block">/*
 * pg_wcswidth is the dumb display-width function.
 * It assumes that everything will appear on one line.
 * OTOH it is easier to use than pg_wcssize if this applies to you.
 */</comment>
<function><type><name>int</name></type>
<name>pg_wcswidth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pwcs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>chlen</name></decl>,
					<decl><type ref="prev"/><name>chwidth</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>chlen</name> <operator>=</operator> <call><name>PQmblen</name><argument_list>(<argument><expr><name>pwcs</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>chlen</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>				<comment type="block">/* Invalid string */</comment>

		<expr_stmt><expr><name>chwidth</name> <operator>=</operator> <call><name>PQdsplen</name><argument_list>(<argument><expr><name>pwcs</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>chwidth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>width</name> <operator>+=</operator> <name>chwidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>pwcs</name> <operator>+=</operator> <name>chlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>chlen</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>width</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pg_wcssize takes the given string in the given encoding and returns three
 * values:
 *	  result_width: Width in display characters of the longest line in string
 *	  result_height: Number of lines in display output
 *	  result_format_size: Number of bytes required to store formatted
 *		representation of string
 *
 * This MUST be kept in sync with pg_wcsformat!
 */</comment>
<function><type><name>void</name></type>
<name>pg_wcssize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pwcs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>,
		   <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result_width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result_height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result_format_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>w</name></decl>,
				<decl><type ref="prev"/><name>chlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>linewidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>height</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>format_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>pwcs</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>pwcs</name> <operator>+=</operator> <name>chlen</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>chlen</name> <operator>=</operator> <call><name>PQmblen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>pwcs</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>chlen</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>PQdsplen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>pwcs</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>chlen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>			<comment type="block">/* single-byte char */</comment>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pwcs</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>	<comment type="block">/* Newline */</comment>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>linewidth</name> <operator>&gt;</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>width</name> <operator>=</operator> <name>linewidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>linewidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>height</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>format_size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>	<comment type="block">/* For NUL char */</comment>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>*</operator><name>pwcs</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <comment type="block">/* Linefeed */</comment>
			<block>{<block_content>
				<expr_stmt><expr><name>linewidth</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>format_size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>*</operator><name>pwcs</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <comment type="block">/* Tab */</comment>
			<block>{<block_content>
				<do>do
				<block>{<block_content>
					<expr_stmt><expr><name>linewidth</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>format_size</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block> while <condition>(<expr><name>linewidth</name> <operator>%</operator> <literal type="number">8</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>		<comment type="block">/* Other control char */</comment>
			<block>{<block_content>
				<expr_stmt><expr><name>linewidth</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>format_size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else				<comment type="block">/* Output it as-is */</comment>
			<block>{<block_content>
				<expr_stmt><expr><name>linewidth</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>format_size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>			<comment type="block">/* Non-ascii control char */</comment>
		<block>{<block_content>
			<expr_stmt><expr><name>linewidth</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>		<comment type="block">/* \u0000 */</comment>
			<expr_stmt><expr><name>format_size</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else					<comment type="block">/* All other chars */</comment>
		<block>{<block_content>
			<expr_stmt><expr><name>linewidth</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>format_size</name> <operator>+=</operator> <name>chlen</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>chlen</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>linewidth</name> <operator>&gt;</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>width</name> <operator>=</operator> <name>linewidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>format_size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>			<comment type="block">/* For NUL char */</comment>

	<comment type="block">/* Set results */</comment>
	<if_stmt><if>if <condition>(<expr><name>result_width</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>result_width</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>result_height</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>result_height</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>result_format_size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>result_format_size</name> <operator>=</operator> <name>format_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *	Format a string into one or more "struct lineptr" lines.
 *	lines[i].ptr == NULL indicates the end of the array.
 *
 * This MUST be kept in sync with pg_wcssize!
 */</comment>
<function><type><name>void</name></type>
<name>pg_wcsformat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pwcs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>,
			 <parameter><decl><type><name><name>struct</name> <name>lineptr</name></name> <modifier>*</modifier></type><name>lines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>w</name></decl>,
				<decl><type ref="prev"/><name>chlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>linewidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>lines</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>	<comment type="block">/* Pointer to data area */</comment>

	<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>pwcs</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>pwcs</name> <operator>+=</operator> <name>chlen</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>chlen</name> <operator>=</operator> <call><name>PQmblen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>pwcs</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>chlen</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>PQdsplen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>pwcs</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>chlen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>			<comment type="block">/* single-byte char */</comment>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pwcs</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>	<comment type="block">/* Newline */</comment>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lines</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>linewidth</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>linewidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>lines</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>	<comment type="block">/* Screwup */</comment>

				<comment type="block">/* make next line point to remaining memory */</comment>
				<expr_stmt><expr><name><name>lines</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>*</operator><name>pwcs</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <comment type="block">/* Linefeed */</comment>
			<block>{<block_content>
				<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="string">"\\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>linewidth</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>*</operator><name>pwcs</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <comment type="block">/* Tab */</comment>
			<block>{<block_content>
				<do>do
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>linewidth</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block> while <condition>(<expr><name>linewidth</name> <operator>%</operator> <literal type="number">8</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>		<comment type="block">/* Other control char */</comment>
			<block>{<block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="string">"\\x%02X"</literal></expr></argument>, <argument><expr><operator>*</operator><name>pwcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>linewidth</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else				<comment type="block">/* Output it as-is */</comment>
			<block>{<block_content>
				<expr_stmt><expr><name>linewidth</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pwcs</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>			<comment type="block">/* Non-ascii control char */</comment>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>PG_UTF8</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="string">"\\u%04X"</literal></expr></argument>, <argument><expr><call><name>utf8_to_unicode</name><argument_list>(<argument><expr><name>pwcs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/*
				 * This case cannot happen in the current code because only
				 * UTF-8 signals multibyte control characters. But we may need
				 * to support it at some stage
				 */</comment>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="string">"\\u????"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>linewidth</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else					<comment type="block">/* All other chars */</comment>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>chlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name><name>pwcs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><name>linewidth</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>chlen</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>lines</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>linewidth</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>				<comment type="block">/* Terminate formatted string */</comment>

	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>				<comment type="block">/* Screwup */</comment>

	<expr_stmt><expr><operator>(</operator><name>lines</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>	<comment type="block">/* terminate line array */</comment>
</block_content>}</block></function>


<comment type="block">/*
 * Encoding validation: delete any unvalidatable characters from the string
 *
 * This seems redundant with existing functionality elsewhere?
 */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>mbvalidate</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pwcs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>PG_UTF8</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>mb_utf_validate</name><argument_list>(<argument><expr><name>pwcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * other encodings needing validation should add their own routines
		 * here
		 */</comment>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>pwcs</name></expr>;</return>
</block_content>}</block></function>
</unit>
