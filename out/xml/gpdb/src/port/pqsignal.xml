<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/port/pqsignal.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pqsignal.c
 *	  reliable BSD-style signal(2) routine stolen from RWW who stole it
 *	  from Stevens...
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/port/pqsignal.c
 *
 *	We now assume that all Unix-oid systems have POSIX sigaction(2)
 *	with support for restartable signals (SA_RESTART).  We used to also
 *	support BSD-style signal(2), but there really shouldn't be anything
 *	out there anymore that doesn't have the POSIX API.
 *
 *	Windows, of course, is resolutely in a class by itself.  In the backend,
 *	we don't use this file at all; src/backend/port/win32/signal.c provides
 *	pqsignal() for the backend environment.  Frontend programs can use
 *	this version of pqsignal() if they wish, but beware that this does
 *	not provide restartable signals on Windows.
 *
 * ------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FRONTEND</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/*
 * Set up a signal handler, with SA_RESTART, for signal "signo"
 *
 * Returns the previous handler.
 */</comment>
<function><type><name>pqsigfunc</name></type>
<name>pqsignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>, <parameter><decl><type><name>pqsigfunc</name></type> <name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>,
				<decl><type ref="prev"/><name>oact</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_RESTART</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SA_NOCLDSTOP</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>signo</name> <operator>==</operator> <name>SIGCHLD</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>|=</operator> <name>SA_NOCLDSTOP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>signo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oact</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SIG_ERR</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name><name>oact</name><operator>.</operator><name>sa_handler</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* WIN32 */</comment>
	<return>return <expr><call><name>signal</name><argument_list>(<argument><expr><name>signo</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * Set up a signal handler, without SA_RESTART, for signal "signo"
 *
 * Returns the previous handler.
 *
 * On Windows, this would be identical to pqsignal(), so don't bother.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>

<function><type><name>pqsigfunc</name></type>
<name>pqsignal_no_restart</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>, <parameter><decl><type><name>pqsigfunc</name></type> <name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>,
				<decl><type ref="prev"/><name>oact</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SA_NOCLDSTOP</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>signo</name> <operator>==</operator> <name>SIGCHLD</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>|=</operator> <name>SA_NOCLDSTOP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>signo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oact</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SIG_ERR</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name><name>oact</name><operator>.</operator><name>sa_handler</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* !WIN32 */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* !defined(WIN32) || defined(FRONTEND) */</comment>
</unit>
