<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/port/strerror.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * strerror.c
 *	  Replacements for standard strerror() and strerror_r() functions
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/port/strerror.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Within this file, "strerror" means the platform's function not pg_strerror,
 * and likewise for "strerror_r"
 */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strerror</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strerror_r</name></cpp:undef>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>gnuish_strerror_r</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_errno_symbol</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>win32_socket_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * A slightly cleaned-up version of strerror()
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>pg_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>errorstr_buf</name><index>[<expr><name>PG_STRERROR_R_BUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

	<return>return <expr><call><name>pg_strerror_r</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>, <argument><expr><name>errorstr_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errorstr_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * A slightly cleaned-up version of strerror_r()
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>pg_strerror_r</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

	<comment type="block">/* If it's a Windows Winsock error, that needs special handling */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
	<comment type="block">/* Winsock error code range, per WinError.h */</comment>
	<if_stmt><if>if <condition>(<expr><name>errnum</name> <operator>&gt;=</operator> <literal type="number">10000</literal> <operator>&amp;&amp;</operator> <name>errnum</name> <operator>&lt;=</operator> <literal type="number">11999</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>win32_socket_strerror</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Try the platform's strerror_r(), or maybe just strerror() */</comment>
	<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>gnuish_strerror_r</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Some strerror()s return an empty string for out-of-range errno.  This
	 * is ANSI C spec compliant, but not exactly useful.  Also, we may get
	 * back strings of question marks if libc cannot transcode the message to
	 * the codeset specified by LC_CTYPE.  If we get nothing useful, first try
	 * get_errno_symbol(), and if that fails, print the numeric errno.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>get_errno_symbol</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"operating system error %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>str</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Simple wrapper to emulate GNU strerror_r if what the platform provides is
 * POSIX.  Also, if platform lacks strerror_r altogether, fall back to plain
 * strerror; it might not be very thread-safe, but tough luck.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>gnuish_strerror_r</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRERROR_R</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STRERROR_R_INT</name></cpp:ifdef>
	<comment type="block">/* POSIX API */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strerror_r</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>buf</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>				<comment type="block">/* let caller deal with failure */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* GNU API */</comment>
	<return>return <expr><call><name>strerror_r</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !HAVE_STRERROR_R */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>sbuf</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* can this still happen anywhere? */</comment>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* To minimize thread-unsafety hazard, copy into caller's buffer */</comment>
	<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sbuf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>buf</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * Returns a symbol (e.g. "ENOENT") for an errno code.
 * Returns NULL if the code is unrecognized.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_errno_symbol</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>errnum</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>E2BIG</name></expr>:</case>
			<return>return <expr><literal type="string">"E2BIG"</literal></expr>;</return>
		<case>case <expr><name>EACCES</name></expr>:</case>
			<return>return <expr><literal type="string">"EACCES"</literal></expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EADDRINUSE</name></cpp:ifdef>
		<case>case <expr><name>EADDRINUSE</name></expr>:</case>
			<return>return <expr><literal type="string">"EADDRINUSE"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EADDRNOTAVAIL</name></cpp:ifdef>
		<case>case <expr><name>EADDRNOTAVAIL</name></expr>:</case>
			<return>return <expr><literal type="string">"EADDRNOTAVAIL"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><name>EAFNOSUPPORT</name></expr>:</case>
			<return>return <expr><literal type="string">"EAFNOSUPPORT"</literal></expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EAGAIN</name></cpp:ifdef>
		<case>case <expr><name>EAGAIN</name></expr>:</case>
			<return>return <expr><literal type="string">"EAGAIN"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EALREADY</name></cpp:ifdef>
		<case>case <expr><name>EALREADY</name></expr>:</case>
			<return>return <expr><literal type="string">"EALREADY"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><name>EBADF</name></expr>:</case>
			<return>return <expr><literal type="string">"EBADF"</literal></expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EBADMSG</name></cpp:ifdef>
		<case>case <expr><name>EBADMSG</name></expr>:</case>
			<return>return <expr><literal type="string">"EBADMSG"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><name>EBUSY</name></expr>:</case>
			<return>return <expr><literal type="string">"EBUSY"</literal></expr>;</return>
		<case>case <expr><name>ECHILD</name></expr>:</case>
			<return>return <expr><literal type="string">"ECHILD"</literal></expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ECONNABORTED</name></cpp:ifdef>
		<case>case <expr><name>ECONNABORTED</name></expr>:</case>
			<return>return <expr><literal type="string">"ECONNABORTED"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><name>ECONNREFUSED</name></expr>:</case>
			<return>return <expr><literal type="string">"ECONNREFUSED"</literal></expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ECONNRESET</name></cpp:ifdef>
		<case>case <expr><name>ECONNRESET</name></expr>:</case>
			<return>return <expr><literal type="string">"ECONNRESET"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><name>EDEADLK</name></expr>:</case>
			<return>return <expr><literal type="string">"EDEADLK"</literal></expr>;</return>
		<case>case <expr><name>EDOM</name></expr>:</case>
			<return>return <expr><literal type="string">"EDOM"</literal></expr>;</return>
		<case>case <expr><name>EEXIST</name></expr>:</case>
			<return>return <expr><literal type="string">"EEXIST"</literal></expr>;</return>
		<case>case <expr><name>EFAULT</name></expr>:</case>
			<return>return <expr><literal type="string">"EFAULT"</literal></expr>;</return>
		<case>case <expr><name>EFBIG</name></expr>:</case>
			<return>return <expr><literal type="string">"EFBIG"</literal></expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EHOSTUNREACH</name></cpp:ifdef>
		<case>case <expr><name>EHOSTUNREACH</name></expr>:</case>
			<return>return <expr><literal type="string">"EHOSTUNREACH"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><name>EIDRM</name></expr>:</case>
			<return>return <expr><literal type="string">"EIDRM"</literal></expr>;</return>
		<case>case <expr><name>EINPROGRESS</name></expr>:</case>
			<return>return <expr><literal type="string">"EINPROGRESS"</literal></expr>;</return>
		<case>case <expr><name>EINTR</name></expr>:</case>
			<return>return <expr><literal type="string">"EINTR"</literal></expr>;</return>
		<case>case <expr><name>EINVAL</name></expr>:</case>
			<return>return <expr><literal type="string">"EINVAL"</literal></expr>;</return>
		<case>case <expr><name>EIO</name></expr>:</case>
			<return>return <expr><literal type="string">"EIO"</literal></expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EISCONN</name></cpp:ifdef>
		<case>case <expr><name>EISCONN</name></expr>:</case>
			<return>return <expr><literal type="string">"EISCONN"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><name>EISDIR</name></expr>:</case>
			<return>return <expr><literal type="string">"EISDIR"</literal></expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ELOOP</name></cpp:ifdef>
		<case>case <expr><name>ELOOP</name></expr>:</case>
			<return>return <expr><literal type="string">"ELOOP"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><name>EMFILE</name></expr>:</case>
			<return>return <expr><literal type="string">"EMFILE"</literal></expr>;</return>
		<case>case <expr><name>EMLINK</name></expr>:</case>
			<return>return <expr><literal type="string">"EMLINK"</literal></expr>;</return>
		<case>case <expr><name>EMSGSIZE</name></expr>:</case>
			<return>return <expr><literal type="string">"EMSGSIZE"</literal></expr>;</return>
		<case>case <expr><name>ENAMETOOLONG</name></expr>:</case>
			<return>return <expr><literal type="string">"ENAMETOOLONG"</literal></expr>;</return>
		<case>case <expr><name>ENFILE</name></expr>:</case>
			<return>return <expr><literal type="string">"ENFILE"</literal></expr>;</return>
		<case>case <expr><name>ENOBUFS</name></expr>:</case>
			<return>return <expr><literal type="string">"ENOBUFS"</literal></expr>;</return>
		<case>case <expr><name>ENODEV</name></expr>:</case>
			<return>return <expr><literal type="string">"ENODEV"</literal></expr>;</return>
		<case>case <expr><name>ENOENT</name></expr>:</case>
			<return>return <expr><literal type="string">"ENOENT"</literal></expr>;</return>
		<case>case <expr><name>ENOEXEC</name></expr>:</case>
			<return>return <expr><literal type="string">"ENOEXEC"</literal></expr>;</return>
		<case>case <expr><name>ENOMEM</name></expr>:</case>
			<return>return <expr><literal type="string">"ENOMEM"</literal></expr>;</return>
		<case>case <expr><name>ENOSPC</name></expr>:</case>
			<return>return <expr><literal type="string">"ENOSPC"</literal></expr>;</return>
		<case>case <expr><name>ENOSYS</name></expr>:</case>
			<return>return <expr><literal type="string">"ENOSYS"</literal></expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENOTCONN</name></cpp:ifdef>
		<case>case <expr><name>ENOTCONN</name></expr>:</case>
			<return>return <expr><literal type="string">"ENOTCONN"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><name>ENOTDIR</name></expr>:</case>
			<return>return <expr><literal type="string">"ENOTDIR"</literal></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOTEMPTY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>ENOTEMPTY</name> <operator>!=</operator> <name>EEXIST</name><operator>)</operator></expr></cpp:if> <comment type="block">/* same code on AIX */</comment>
		<case>case <expr><name>ENOTEMPTY</name></expr>:</case>
			<return>return <expr><literal type="string">"ENOTEMPTY"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENOTSOCK</name></cpp:ifdef>
		<case>case <expr><name>ENOTSOCK</name></expr>:</case>
			<return>return <expr><literal type="string">"ENOTSOCK"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENOTSUP</name></cpp:ifdef>
		<case>case <expr><name>ENOTSUP</name></expr>:</case>
			<return>return <expr><literal type="string">"ENOTSUP"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><name>ENOTTY</name></expr>:</case>
			<return>return <expr><literal type="string">"ENOTTY"</literal></expr>;</return>
		<case>case <expr><name>ENXIO</name></expr>:</case>
			<return>return <expr><literal type="string">"ENXIO"</literal></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EOPNOTSUPP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENOTSUP</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>EOPNOTSUPP</name> <operator>!=</operator> <name>ENOTSUP</name><operator>)</operator><operator>)</operator></expr></cpp:if>
		<case>case <expr><name>EOPNOTSUPP</name></expr>:</case>
			<return>return <expr><literal type="string">"EOPNOTSUPP"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EOVERFLOW</name></cpp:ifdef>
		<case>case <expr><name>EOVERFLOW</name></expr>:</case>
			<return>return <expr><literal type="string">"EOVERFLOW"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><name>EPERM</name></expr>:</case>
			<return>return <expr><literal type="string">"EPERM"</literal></expr>;</return>
		<case>case <expr><name>EPIPE</name></expr>:</case>
			<return>return <expr><literal type="string">"EPIPE"</literal></expr>;</return>
		<case>case <expr><name>EPROTONOSUPPORT</name></expr>:</case>
			<return>return <expr><literal type="string">"EPROTONOSUPPORT"</literal></expr>;</return>
		<case>case <expr><name>ERANGE</name></expr>:</case>
			<return>return <expr><literal type="string">"ERANGE"</literal></expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EROFS</name></cpp:ifdef>
		<case>case <expr><name>EROFS</name></expr>:</case>
			<return>return <expr><literal type="string">"EROFS"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><name>ESRCH</name></expr>:</case>
			<return>return <expr><literal type="string">"ESRCH"</literal></expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ETIMEDOUT</name></cpp:ifdef>
		<case>case <expr><name>ETIMEDOUT</name></expr>:</case>
			<return>return <expr><literal type="string">"ETIMEDOUT"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ETXTBSY</name></cpp:ifdef>
		<case>case <expr><name>ETXTBSY</name></expr>:</case>
			<return>return <expr><literal type="string">"ETXTBSY"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EWOULDBLOCK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>EWOULDBLOCK</name> <operator>!=</operator> <name>EAGAIN</name><operator>)</operator><operator>)</operator></expr></cpp:if>
		<case>case <expr><name>EWOULDBLOCK</name></expr>:</case>
			<return>return <expr><literal type="string">"EWOULDBLOCK"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><name>EXDEV</name></expr>:</case>
			<return>return <expr><literal type="string">"EXDEV"</literal></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>

<comment type="block">/*
 * Windows' strerror() doesn't know the Winsock codes, so handle them this way
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>win32_socket_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>handleDLL</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>handleDLL</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>handleDLL</name> <operator>=</operator> <call><name>LoadLibraryEx</name><argument_list>(<argument><expr><literal type="string">"netmsg.dll"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
								  <argument><expr><name>DONT_RESOLVE_DLL_REFERENCES</name> <operator>|</operator> <name>LOAD_LIBRARY_AS_DATAFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>handleDLL</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>,
					 <argument><expr><literal type="string">"winsock error %d (could not load netmsg.dll to translate: error code %lu)"</literal></expr></argument>,
					 <argument><expr><name>errnum</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>buf</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>FormatMessage</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_IGNORE_INSERTS</name> <operator>|</operator>
					  <name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator>
					  <name>FORMAT_MESSAGE_FROM_HMODULE</name></expr></argument>,
					  <argument><expr><name>handleDLL</name></expr></argument>,
					  <argument><expr><name>errnum</name></expr></argument>,
					  <argument><expr><call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_ENGLISH</name></expr></argument>, <argument><expr><name>SUBLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>buf</name></expr></argument>,
					  <argument><expr><name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
					  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Failed to get id */</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"unrecognized winsock error %d"</literal></expr></argument>, <argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WIN32 */</comment>
</unit>
