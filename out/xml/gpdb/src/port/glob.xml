<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/port/glob.c"><comment type="block">/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Guido van Rossum.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<comment type="block">/* $Id: glob.c,v 1.7 2007/11/10 09:56:37 dmitry Exp $ */</comment>

<comment type="block">/*
 * glob(3) -- a superset of the one defined in POSIX 1003.2.
 *
 * The [!...] convention to negate a range is supported (SysV, Posix, ksh).
 *
 * Optional extra services, controlled by flags not defined by POSIX:
 *
 * GLOB_QUOTE:
 *	Escaping convention: \ inhibits any special meaning the following
 *	character might have (except \ at end of string is retained).
 * GLOB_MAGCHAR:
 *	Set in gl_flags if pattern contained a globbing character.
 * GLOB_NOMAGIC:
 *	Same as GLOB_NOCHECK, but it will only append pattern if it did
 *	not contain any magic characters.  [Used in csh style globbing]
 * GLOB_ALTDIRFUNC:
 *	Use alternately specified directory access functions.
 * GLOB_TILDE:
 *	expand ~user/foo to the /home/dir/of/user/foo
 * GLOB_BRACE:
 *	expand {1,2}{a,b} to 1a 1b 2a 2b
 * gl_matchc:
 *	Number of matches in the current invocation of glob.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SLASH</name></cpp:macro> <cpp:value>'\\'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SLASH</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) == '/' || (c) == DEFAULT_SLASH)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_</name></cpp:undef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>S_ISDIR</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISDIR</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; _S_IFDIR) == _S_IFDIR)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>S_ISLNK</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISLNK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SLASH</name></cpp:macro> <cpp:value>'/'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SLASH</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) == DEFAULT_SLASH || (c) == '\\')</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glob.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAXPATHLEN</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PATH_MAX</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXPATHLEN</name></cpp:macro> <cpp:value>PATH_MAX</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXPATHLEN</name></cpp:macro> <cpp:value>MAX_PATH</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXPATHLEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define> <comment type="block">/* seems reasonable */</comment> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>DOLLAR</name></cpp:macro>		<cpp:value>'$'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>DOT</name></cpp:macro>		<cpp:value>'.'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>EOS</name></cpp:macro>		<cpp:value>'\0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>LBRACKET</name></cpp:macro>	<cpp:value>'['</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>NOT</name></cpp:macro>		<cpp:value>'!'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>QUESTION</name></cpp:macro>	<cpp:value>'?'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>QUOTE</name></cpp:macro>		<cpp:value>'\\'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>RANGE</name></cpp:macro>		<cpp:value>'-'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>RBRACKET</name></cpp:macro>	<cpp:value>']'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SEP</name></cpp:macro>		<cpp:value>DEFAULT_SLASH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>STAR</name></cpp:macro>		<cpp:value>'*'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>TILDE</name></cpp:macro>		<cpp:value>'~'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>UNDERSCORE</name></cpp:macro>	<cpp:value>'_'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>LBRACE</name></cpp:macro>		<cpp:value>'{'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>RBRACE</name></cpp:macro>		<cpp:value>'}'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SLASH</name></cpp:macro>		<cpp:value>'/'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>COMMA</name></cpp:macro>		<cpp:value>','</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DEBUG</name></cpp:ifndef>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>M_QUOTE</name></cpp:macro>		<cpp:value>0x8000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>M_PROTECT</name></cpp:macro>	<cpp:value>0x4000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>M_MASK</name></cpp:macro>		<cpp:value>0xffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>M_ASCII</name></cpp:macro>		<cpp:value>0x00ff</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>Char</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>u_int</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>u_char</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_MAX</name></cpp:macro> <cpp:value>(256 * 1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lstat</name><parameter_list>(<parameter><type><name>path</name></type></parameter>, <parameter><type><name>sb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stat((path), (sb))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>u_short</name></type> <name>Char</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>M_QUOTE</name></cpp:macro>		<cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>M_PROTECT</name></cpp:macro>	<cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>M_MASK</name></cpp:macro>		<cpp:value>0xff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>M_ASCII</name></cpp:macro>		<cpp:value>0x7f</cpp:value></cpp:define>

<typedef>typedef <type><name>char</name></type> <name>Char</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>CHAR</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((Char)((c)&amp;M_ASCII))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>META</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((Char)((c)|M_QUOTE))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>M_ALL</name></cpp:macro>		<cpp:value>META('*')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>M_END</name></cpp:macro>		<cpp:value>META(']')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>M_NOT</name></cpp:macro>		<cpp:value>META('!')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>M_ONE</name></cpp:macro>		<cpp:value>META('?')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>M_RNG</name></cpp:macro>		<cpp:value>META('-')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>M_SET</name></cpp:macro>		<cpp:value>META('[')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>ismeta</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(((c)&amp;M_QUOTE) != 0)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type>	 <name>compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	 <name>g_Ctoc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	 <name>g_lstat</name><parameter_list>(<parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>glob_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>DIR</name>	<modifier>*</modifier></type><name>g_opendir</name><parameter_list>(<parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>glob_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Char</name>	<modifier>*</modifier></type><name>g_strchr</name><parameter_list>(<parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	 <name>g_stat</name><parameter_list>(<parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>glob_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	 <name>glob0</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>glob_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	 <name>glob1</name><parameter_list>(<parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>glob_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	 <name>glob2</name><parameter_list>(<parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>,
		    <parameter><decl><type><name>glob_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	 <name>glob3</name><parameter_list>(<parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>,
		    <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>glob_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	 <name>globextend</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>glob_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type>
		 <name>globtilde</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>glob_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	 <name>globexp1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>glob_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	 <name>globexp2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>glob_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	 <name>match</name><parameter_list>(<parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>void</name></type>	 <name>qprintf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type>
<name>glob</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>errfunc</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>)</argument_list>
	const <name>char</name> <modifier>*</modifier><name>pattern</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>, <argument_list>(<argument><expr><operator>*</operator><name>errfunc</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list>;</decl_stmt>
	<decl_stmt><decl><type><name>glob_t</name> <modifier>*</modifier></type><name>pglob</name></decl>;</decl_stmt>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>patnext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>bufnext</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bufend</name></decl>, <decl><type ref="prev"/><name><name>patbuf</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
	<comment type="block">/* Force skipping escape sequences on windows
	 * due to the ambiguity with path backslashes
	 */</comment>
	<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>GLOB_NOESCAPE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>patnext</name> <operator>=</operator> <operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator> <name>pattern</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>GLOB_APPEND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>GLOB_DOOFFS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_offs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>GLOB_MAGCHAR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_errfunc</name></name> <operator>=</operator> <name>errfunc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_matchc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>bufnext</name> <operator>=</operator> <name>patbuf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>bufend</name> <operator>=</operator> <name>bufnext</name> <operator>+</operator> <name>MAXPATHLEN</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GLOB_NOESCAPE</name></expr>)</condition><block type="pseudo"><block_content>
		<while>while <condition>(<expr><name>bufnext</name> <operator>&lt;</operator> <name>bufend</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>patnext</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <name>EOS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>bufnext</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></while></block_content></block></if>
	<else>else <block>{<block_content>
		<comment type="block">/* Protect the quoted characters. */</comment>
		<while>while <condition>(<expr><name>bufnext</name> <operator>&lt;</operator> <name>bufend</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>patnext</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <name>EOS</name></expr>)</condition><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>QUOTE</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>patnext</name><operator>++</operator><operator>)</operator> <operator>==</operator> <name>EOS</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>c</name> <operator>=</operator> <name>QUOTE</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>--</operator><name>patnext</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><operator>*</operator><name>bufnext</name><operator>++</operator> <operator>=</operator> <name>c</name> <operator>|</operator> <name>M_PROTECT</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>bufnext</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></while>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>bufnext</name> <operator>=</operator> <name>EOS</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GLOB_BRACE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>globexp1</name><argument_list>(<argument><expr><name>patbuf</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name>glob0</name><argument_list>(<argument><expr><name>patbuf</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block>

<comment type="block">/*
 * Expand recursively a glob {} pattern. When there is no more expansion
 * invoke the standard globbing routine to glob the rest of the magic
 * characters
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>globexp1</name><parameter_list>(<parameter><decl><type><name>pattern</name></type></decl></parameter>, <parameter><decl><type><name>pglob</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>glob_t</name> <modifier>*</modifier></type><name>pglob</name></decl>;</decl_stmt>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Char</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><name>pattern</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<comment type="block">/* Protect a single {}, for find(1), like csh */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LBRACE</name> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>RBRACE</name> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>EOS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>glob0</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>Char</name> <operator>*</operator><operator>)</operator> <call><name>g_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>Char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><name>LBRACE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>globexp2</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>rv</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

	<return>return <expr><call><name>glob0</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Recursive brace globbing helper. Tries to expand a single brace.
 * If it succeeds then it invokes globexp1 with the new pattern.
 * If it fails then it tries to glob the rest of the pattern and returns.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>globexp2</name><parameter_list>(<parameter><decl><type><name>ptr</name></type></decl></parameter>, <parameter><decl><type><name>pattern</name></type></decl></parameter>, <parameter><decl><type><name>pglob</name></type></decl></parameter>, <parameter><decl><type><name>rv</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>glob_t</name> <modifier>*</modifier></type><name>pglob</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>rv</name></decl>;</decl_stmt>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>     <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Char</name>   <modifier>*</modifier></type><name>lm</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type><name>pe</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pm</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Char</name></type>    <name><name>patbuf</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* copy part up to the brace */</comment>
	<for>for <control>(<init><expr><name>lm</name> <operator>=</operator> <name>patbuf</name></expr><operator>,</operator> <expr><name>pm</name> <operator>=</operator> <name>pattern</name></expr>;</init> <condition><expr><name>pm</name> <operator>!=</operator> <name>ptr</name></expr>;</condition> <incr><expr><operator>*</operator><name>lm</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pm</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<empty_stmt>;</empty_stmt></block_content></block></for>
	<expr_stmt><expr><operator>*</operator><name>lm</name> <operator>=</operator> <name>EOS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ls</name> <operator>=</operator> <name>lm</name></expr>;</expr_stmt>

	<comment type="block">/* Find the balanced brace */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>pe</name> <operator>=</operator> <operator>++</operator><name>ptr</name></expr>;</init> <condition><expr><operator>*</operator><name>pe</name></expr>;</condition> <incr><expr><name>pe</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pe</name> <operator>==</operator> <name>LBRACKET</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Ignore everything between [] */</comment>
			<for>for <control>(<init><expr><name>pm</name> <operator>=</operator> <name>pe</name><operator>++</operator></expr>;</init> <condition><expr><operator>*</operator><name>pe</name> <operator>!=</operator> <name>RBRACKET</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pe</name> <operator>!=</operator> <name>EOS</name></expr>;</condition> <incr><expr><name>pe</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<empty_stmt>;</empty_stmt></block_content></block></for>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pe</name> <operator>==</operator> <name>EOS</name></expr>)</condition> <block>{<block_content>
				<comment type="block">/*
				 * We could not find a matching RBRACKET.
				 * Ignore and just look for RBRACE
				 */</comment>
				<expr_stmt><expr><name>pe</name> <operator>=</operator> <name>pm</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>pe</name> <operator>==</operator> <name>LBRACE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>*</operator><name>pe</name> <operator>==</operator> <name>RBRACE</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt></block_content></block></for>

	<comment type="block">/* Non matching braces; just glob the pattern */</comment>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>pe</name> <operator>==</operator> <name>EOS</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>rv</name> <operator>=</operator> <call><name>glob0</name><argument_list>(<argument><expr><name>patbuf</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>pl</name> <operator>=</operator> <name>pm</name> <operator>=</operator> <name>ptr</name></expr>;</init> <condition><expr><name>pm</name> <operator>&lt;=</operator> <name>pe</name></expr>;</condition> <incr><expr><name>pm</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><operator>*</operator><name>pm</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>LBRACKET</name></expr>:</case>
			<comment type="block">/* Ignore everything between [] */</comment>
			<for>for <control>(<init><expr><name>pl</name> <operator>=</operator> <name>pm</name><operator>++</operator></expr>;</init> <condition><expr><operator>*</operator><name>pm</name> <operator>!=</operator> <name>RBRACKET</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pm</name> <operator>!=</operator> <name>EOS</name></expr>;</condition> <incr><expr><name>pm</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<empty_stmt>;</empty_stmt></block_content></block></for>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pm</name> <operator>==</operator> <name>EOS</name></expr>)</condition> <block>{<block_content>
				<comment type="block">/*
				 * We could not find a matching RBRACKET.
				 * Ignore and just look for RBRACE
				 */</comment>
				<expr_stmt><expr><name>pm</name> <operator>=</operator> <name>pl</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>LBRACE</name></expr>:</case>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>RBRACE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* FALLTHROUGH */</comment>
		<case>case <expr><name>COMMA</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pm</name> <operator>==</operator> <name>COMMA</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if>
			<else>else <block>{<block_content>
				<comment type="block">/* Append the current string */</comment>
				<for>for <control>(<init><expr><name>lm</name> <operator>=</operator> <name>ls</name></expr>;</init> <condition><expr><operator>(</operator><name>pl</name> <operator>&lt;</operator> <name>pm</name><operator>)</operator></expr>;</condition> <incr><expr><operator>*</operator><name>lm</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pl</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<empty_stmt>;</empty_stmt></block_content></block></for>

				<comment type="block">/*
				 * Append the rest of the pattern after the
				 * closing brace
				 */</comment>
				<for>for <control>(<init><expr><name>pl</name> <operator>=</operator> <name>pe</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><operator>*</operator><name>lm</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pl</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <name>EOS</name></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
					<empty_stmt>;</empty_stmt></block_content></block></for>

				<comment type="block">/* Expand the current pattern */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
				<expr_stmt><expr><call><name>qprintf</name><argument_list>(<argument><expr><literal type="string">"globexp2:"</literal></expr></argument>, <argument><expr><name>patbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><operator>*</operator><name>rv</name> <operator>=</operator> <call><name>globexp1</name><argument_list>(<argument><expr><name>patbuf</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* move after the comma, to the next string */</comment>
				<expr_stmt><expr><name>pl</name> <operator>=</operator> <name>pm</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>

		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></for>
	<expr_stmt><expr><operator>*</operator><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<comment type="block">/*
 * expand tilde from the passwd file.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type>
<name>globtilde</name><parameter_list>(<parameter><decl><type><name>pattern</name></type></decl></parameter>, <parameter><decl><type><name>patbuf</name></type></decl></parameter>, <parameter><decl><type><name>patbuf_len</name></type></decl></parameter>, <parameter><decl><type><name>pglob</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>patbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>patbuf_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>glob_t</name> <modifier>*</modifier></type><name>pglob</name></decl>;</decl_stmt>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>pwd</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eb</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pattern</name> <operator>!=</operator> <name>TILDE</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>&amp;</operator> <name>GLOB_TILDE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>pattern</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Copy up to the end of the string or / */</comment>
	<expr_stmt><expr><name>eb</name> <operator>=</operator> <operator>&amp;</operator><name><name>patbuf</name><index>[<expr><name>patbuf_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>pattern</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>h</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>patbuf</name></expr>;</init>
	    <condition><expr><name>h</name> <operator>&lt;</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>eb</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>SLASH</name></expr>;</condition> <incr><expr><operator>*</operator><name>h</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>*</operator><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<empty_stmt>;</empty_stmt></block_content></block></for>

	<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name>EOS</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	if (h == (char *)eb)
		return what;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>patbuf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <name>EOS</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * handle a plain ~ or ~/ by expanding $HOME
		 * first and then trying the password file
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>h</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pwd</name> <operator>=</operator> <call><name>getpwuid</name><argument_list>(<argument><expr><call><name>getuid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>pattern</name></expr>;</return></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>pwd</name><operator>-&gt;</operator><name>pw_dir</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<return>return <expr><name>pattern</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/*
		 * Expand a ~user
		 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pwd</name> <operator>=</operator> <call><name>getpwnam</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>patbuf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>pattern</name></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>pwd</name><operator>-&gt;</operator><name>pw_dir</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><name>pattern</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Copy the home directory */</comment>
	<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <name>patbuf</name></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>eb</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>h</name></expr>;</condition> <incr><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>h</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<empty_stmt>;</empty_stmt></block_content></block></for>

	<comment type="block">/* Append the rest of the pattern */</comment>
	<while>while <condition>(<expr><name>b</name> <operator>&lt;</operator> <name>eb</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <name>EOS</name></expr>)</condition><block type="pseudo"><block_content>
		<empty_stmt>;</empty_stmt></block_content></block></while>
	<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>EOS</name></expr>;</expr_stmt>

	<return>return <expr><name>patbuf</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * The main glob() routine: compiles the pattern (optionally processing
 * quotes), calls glob1() to do the real pattern matching, and finally
 * sorts the list (unless unsorted operation is requested).  Returns 0
 * if things went well, nonzero if errors occurred.  It is not an error
 * to find no matches.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>glob0</name><parameter_list>(<parameter><decl><type><name>pattern</name></type></decl></parameter>, <parameter><decl><type><name>pglob</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>glob_t</name> <modifier>*</modifier></type><name>pglob</name></decl>;</decl_stmt>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type><name>qpatnext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>oldpathc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>bufnext</name></decl>, <decl><type ref="prev"/><name><name>patbuf</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>limit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>qpatnext</name> <operator>=</operator> <call><name>globtilde</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>patbuf</name></expr></argument>, <argument><expr><name>MAXPATHLEN</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldpathc</name> <operator>=</operator> <name><name>pglob</name><operator>-&gt;</operator><name>gl_pathc</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>bufnext</name> <operator>=</operator> <name>patbuf</name></expr>;</expr_stmt>

	<comment type="block">/* We don't need to check for buffer overflow any more. */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>qpatnext</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <name>EOS</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>LBRACKET</name></expr>:</case>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>qpatnext</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NOT</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>++</operator><name>qpatnext</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>qpatnext</name> <operator>==</operator> <name>EOS</name> <operator>||</operator>
			    <call><name>g_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>Char</name> <operator>*</operator><operator>)</operator> <name>qpatnext</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>RBRACKET</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>bufnext</name><operator>++</operator> <operator>=</operator> <name>LBRACKET</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NOT</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>--</operator><name>qpatnext</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>bufnext</name><operator>++</operator> <operator>=</operator> <name>M_SET</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NOT</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>bufnext</name><operator>++</operator> <operator>=</operator> <name>M_NOT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>qpatnext</name><operator>++</operator></expr>;</expr_stmt>
			<do>do <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>bufnext</name><operator>++</operator> <operator>=</operator> <call><name>CHAR</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><name>qpatnext</name> <operator>==</operator> <name>RANGE</name> <operator>&amp;&amp;</operator>
				    <operator>(</operator><name>c</name> <operator>=</operator> <name><name>qpatnext</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>RBRACKET</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>bufnext</name><operator>++</operator> <operator>=</operator> <name>M_RNG</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>bufnext</name><operator>++</operator> <operator>=</operator> <call><name>CHAR</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>qpatnext</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block> while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>qpatnext</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <name>RBRACKET</name></expr>)</condition>;</do>
			<expr_stmt><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>|=</operator> <name>GLOB_MAGCHAR</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>bufnext</name><operator>++</operator> <operator>=</operator> <name>M_END</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>QUESTION</name></expr>:</case>
			<expr_stmt><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>|=</operator> <name>GLOB_MAGCHAR</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>bufnext</name><operator>++</operator> <operator>=</operator> <name>M_ONE</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>STAR</name></expr>:</case>
			<expr_stmt><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>|=</operator> <name>GLOB_MAGCHAR</name></expr>;</expr_stmt>
			<comment type="block">/* collapse adjacent stars to one,
			 * to avoid exponential behavior
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>bufnext</name> <operator>==</operator> <name>patbuf</name> <operator>||</operator> <name><name>bufnext</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>M_ALL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>bufnext</name><operator>++</operator> <operator>=</operator> <name>M_ALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><operator>*</operator><name>bufnext</name><operator>++</operator> <operator>=</operator> <call><name>CHAR</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>bufnext</name> <operator>=</operator> <name>EOS</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>qprintf</name><argument_list>(<argument><expr><literal type="string">"glob0:"</literal></expr></argument>, <argument><expr><name>patbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>glob1</name><argument_list>(<argument><expr><name>patbuf</name></expr></argument>, <argument><expr><name>patbuf</name><operator>+</operator><name>MAXPATHLEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pglob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return<expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If there was no match we are going to append the pattern
	 * if GLOB_NOCHECK was specified or if GLOB_NOMAGIC was specified
	 * and the pattern did not contain any magic characters
	 * GLOB_NOMAGIC is there just for compatibility with csh.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathc</name></name> <operator>==</operator> <name>oldpathc</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>&amp;</operator> <name>GLOB_NOCHECK</name><operator>)</operator> <operator>||</operator>
		    <operator>(</operator><operator>(</operator><name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>&amp;</operator> <name>GLOB_NOMAGIC</name><operator>)</operator> <operator>&amp;&amp;</operator>
		    <operator>!</operator><operator>(</operator><name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>&amp;</operator> <name>GLOB_MAGCHAR</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return<expr><operator>(</operator><call><name>globextend</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return<expr><operator>(</operator><name>GLOB_NOMATCH</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>&amp;</operator> <name>GLOB_NOSORT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathv</name></name> <operator>+</operator> <name><name>pglob</name><operator>-&gt;</operator><name>gl_offs</name></name> <operator>+</operator> <name>oldpathc</name></expr></argument>,
			<argument><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathc</name></name> <operator>-</operator> <name>oldpathc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator> <name>compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare</name><parameter_list>(<parameter><decl><type><name>p</name></type></decl></parameter>, <parameter><decl><type><name>q</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<block>{<block_content>
	<return>return<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>q</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>glob1</name><parameter_list>(<parameter><decl><type><name>pattern</name></type></decl></parameter>, <parameter><decl><type><name>pattern_last</name></type></decl></parameter>, <parameter><decl><type><name>pglob</name></type></decl></parameter>, <parameter><decl><type><name>limitp</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>pattern</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pattern_last</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>glob_t</name> <modifier>*</modifier></type><name>pglob</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>limitp</name></decl>;</decl_stmt>
<block>{<block_content>
	<decl_stmt><decl><type><name>Char</name></type> <name><name>pathbuf</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* A null pathname is invalid -- POSIX 1003.1 sect. 2.4. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pattern</name> <operator>==</operator> <name>EOS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return<expr><operator>(</operator><call><name>glob2</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>pathbuf</name><operator>+</operator><name>MAXPATHLEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>,
	    <argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>pathbuf</name><operator>+</operator><name>MAXPATHLEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>,
	    <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>pattern_last</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>, <argument><expr><name>limitp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * The functions glob2 and glob3 are mutually recursive; there is one level
 * of recursion for each segment in the pattern that contains one or more
 * meta characters.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>glob2</name><parameter_list>(<parameter><decl><type><name>pathbuf</name></type></decl></parameter>, <parameter><decl><type><name>pathbuf_last</name></type></decl></parameter>, <parameter><decl><type><name>pathend</name></type></decl></parameter>, <parameter><decl><type><name>pathend_last</name></type></decl></parameter>, <parameter><decl><type><name>pattern</name></type></decl></parameter>,
    <parameter><decl><type><name>pattern_last</name></type></decl></parameter>, <parameter><decl><type><name>pglob</name></type></decl></parameter>, <parameter><decl><type><name>limitp</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>pathbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pathbuf_last</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pathend</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pathend_last</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>pattern</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pattern_last</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>glob_t</name> <modifier>*</modifier></type><name>pglob</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>limitp</name></decl>;</decl_stmt>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>anymeta</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Loop over pattern segments until end of pattern or until
	 * segment with meta character found.
	 */</comment>
	<for>for <control>(<init><expr><name>anymeta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pattern</name> <operator>==</operator> <name>EOS</name></expr>)</condition> <block>{<block_content>		<comment type="block">/* End of pattern? */</comment>
			<expr_stmt><expr><operator>*</operator><name>pathend</name> <operator>=</operator> <name>EOS</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>g_lstat</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>&amp;</operator> <name>GLOB_MARK</name><operator>)</operator> <operator>&amp;&amp;</operator>
			    <operator>!</operator><call><name>IS_SLASH</name><argument_list>(<argument><expr><name><name>pathend</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
			    <operator>(</operator><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			    <operator>(</operator><call><name>g_stat</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
			    <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>pathend</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <name>pathend_last</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><operator>*</operator><name>pathend</name><operator>++</operator> <operator>=</operator> <name>SEP</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>pathend</name> <operator>=</operator> <name>EOS</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><operator>++</operator><name><name>pglob</name><operator>-&gt;</operator><name>gl_matchc</name></name></expr>;</expr_stmt>
			<return>return<expr><operator>(</operator><call><name>globextend</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>, <argument><expr><name>limitp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Find end of next segment, copy tentatively to pathend. */</comment>
		<expr_stmt><expr><name>q</name> <operator>=</operator> <name>pathend</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <name>pattern</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>EOS</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_SLASH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>ismeta</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>anymeta</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>q</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <name>pathend_last</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anymeta</name></expr>)</condition> <block>{<block_content>		<comment type="block">/* No expansion, do next segment. */</comment>
			<expr_stmt><expr><name>pathend</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pattern</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
			<while>while <condition>(<expr><call><name>IS_SLASH</name><argument_list>(<argument><expr><operator>*</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>pathend</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <name>pathend_last</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><operator>*</operator><name>pathend</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pattern</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<comment type="block">/* Need expansion, recurse. */</comment>
			<return>return<expr><operator>(</operator><call><name>glob3</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>pathbuf_last</name></expr></argument>, <argument><expr><name>pathend</name></expr></argument>,
			    <argument><expr><name>pathend_last</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>pattern_last</name></expr></argument>,
			    <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pattern_last</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>, <argument><expr><name>limitp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* NOTREACHED */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>glob3</name><parameter_list>(<parameter><decl><type><name>pathbuf</name></type></decl></parameter>, <parameter><decl><type><name>pathbuf_last</name></type></decl></parameter>, <parameter><decl><type><name>pathend</name></type></decl></parameter>, <parameter><decl><type><name>pathend_last</name></type></decl></parameter>, <parameter><decl><type><name>pattern</name></type></decl></parameter>, <parameter><decl><type><name>pattern_last</name></type></decl></parameter>,
    <parameter><decl><type><name>restpattern</name></type></decl></parameter>, <parameter><decl><type><name>restpattern_last</name></type></decl></parameter>, <parameter><decl><type><name>pglob</name></type></decl></parameter>, <parameter><decl><type><name>limitp</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>pathbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pathbuf_last</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pathend</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pathend_last</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>pattern</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pattern_last</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>restpattern</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>restpattern_last</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>glob_t</name> <modifier>*</modifier></type><name>pglob</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>limitp</name></decl>;</decl_stmt>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dirp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/*
	 * The readdirfunc declaration can't be prototyped, because it is
	 * assigned, below, to two functions which are prototyped in glob.h
	 * and dirent.h as taking pointers to differently typed opaque
	 * structures.
	 */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><argument_list>(<argument><expr><operator>*</operator><name>readdirfunc</name></expr></argument>)</argument_list><argument_list>()</argument_list></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>pathend</name> <operator>&gt;</operator> <name>pathend_last</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>pathend</name> <operator>=</operator> <name>EOS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dirp</name> <operator>=</operator> <call><name>g_opendir</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* TODO: don't call for ENOENT or ENOTDIR? */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_errfunc</name></name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>g_Ctoc</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return<expr><operator>(</operator><name>GLOB_ABORTED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><name>pglob</name><operator>-&gt;</operator><name>gl_errfunc</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call> <operator>||</operator>
			    <name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>&amp;</operator> <name>GLOB_ERR</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return<expr><operator>(</operator><name>GLOB_ABORTED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Search directory for matching names. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>&amp;</operator> <name>GLOB_ALTDIRFUNC</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>readdirfunc</name> <operator>=</operator> <name><name>pglob</name><operator>-&gt;</operator><name>gl_readdir</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>readdirfunc</name> <operator>=</operator> <name>readdir</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>dp</name> <operator>=</operator> <call>(<modifier>*</modifier><name>readdirfunc</name>)<argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>register</specifier> <name>u_char</name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>register</specifier> <name>Char</name> <modifier>*</modifier></type><name>dc</name></decl>;</decl_stmt>

		<comment type="block">/* Initial DOT must be matched literally. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>DOT</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pattern</name> <operator>!=</operator> <name>DOT</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>dc</name> <operator>=</operator> <name>pathend</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sc</name> <operator>=</operator> <operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator> <name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>dc</name> <operator>&lt;</operator> <name>pathend_last</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>dc</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sc</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <name>EOS</name></expr>)</condition><block type="pseudo"><block_content>
			<empty_stmt>;</empty_stmt></block_content></block></while>
		<if_stmt><if>if <condition>(<expr><name>dc</name> <operator>&gt;=</operator> <name>pathend_last</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>dc</name> <operator>=</operator> <name>EOS</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>match</name><argument_list>(<argument><expr><name>pathend</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>restpattern</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>pathend</name> <operator>=</operator> <name>EOS</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>glob2</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>pathbuf_last</name></expr></argument>, <argument><expr><operator>--</operator><name>dc</name></expr></argument>, <argument><expr><name>pathend_last</name></expr></argument>,
		    <argument><expr><name>restpattern</name></expr></argument>, <argument><expr><name>restpattern_last</name></expr></argument>, <argument><expr><name>pglob</name></expr></argument>, <argument><expr><name>limitp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>&amp;</operator> <name>GLOB_ALTDIRFUNC</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call>(<modifier>*</modifier><name><name>pglob</name><operator>-&gt;</operator><name>gl_closedir</name></name>)<argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return<expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Extend the gl_pathv member of a glob_t structure to accomodate a new item,
 * add the new item, and update gl_pathc.
 *
 * This assumes the BSD realloc, which only copies the block when its size
 * crosses a power-of-two boundary; for v7 realloc, this would cause quadratic
 * behavior.
 *
 * Return 0 if new item added, error code if memory couldn't be allocated.
 *
 * Invariant of the glob_t structure:
 *	Either gl_pathc is zero and gl_pathv is NULL; or gl_pathc &gt; 0 and
 *	gl_pathv points to (gl_offs + gl_pathc + 1) items.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>globextend</name><parameter_list>(<parameter><decl><type><name>path</name></type></decl></parameter>, <parameter><decl><type><name>pglob</name></type></decl></parameter>, <parameter><decl><type><name>limitp</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>glob_t</name> <modifier>*</modifier></type><name>pglob</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>limitp</name></decl>;</decl_stmt>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pathv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u_int</name></type> <name>newsize</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>copy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>newsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pathv</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name><name>pglob</name><operator>-&gt;</operator><name>gl_pathc</name></name> <operator>+</operator> <name><name>pglob</name><operator>-&gt;</operator><name>gl_offs</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>pathv</name> <operator>=</operator> <ternary><condition><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathv</name></name></expr> ?</condition><then> <expr><call><name>realloc</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathv</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr> </then><else>:
	    <expr><call><name>malloc</name><argument_list>(<argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pathv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathv</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return<expr><operator>(</operator><name>GLOB_NOSPACE</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathv</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pglob</name><operator>-&gt;</operator><name>gl_offs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* first time around -- clear initial gl_offs items */</comment>
		<expr_stmt><expr><name>pathv</name> <operator>+=</operator> <name><name>pglob</name><operator>-&gt;</operator><name>gl_offs</name></name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>pglob</name><operator>-&gt;</operator><name>gl_offs</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><operator>--</operator><name>pathv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathv</name></name> <operator>=</operator> <name>pathv</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>path</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name><operator>++</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
		<empty_stmt>;</empty_stmt></block_content></block></for>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>path</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>limitp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>copy</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>g_Ctoc</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return<expr><operator>(</operator><name>GLOB_NOSPACE</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pathv</name><index>[<expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_offs</name></name> <operator>+</operator> <name><name>pglob</name><operator>-&gt;</operator><name>gl_pathc</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>copy</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pathv</name><index>[<expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_offs</name></name> <operator>+</operator> <name><name>pglob</name><operator>-&gt;</operator><name>gl_pathc</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>&amp;</operator> <name>GLOB_LIMIT</name><operator>)</operator> <operator>&amp;&amp;</operator>
	    <name>newsize</name> <operator>+</operator> <operator>*</operator><name>limitp</name> <operator>&gt;=</operator> <name>ARG_MAX</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return<expr><operator>(</operator><name>GLOB_NOSPACE</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return<expr><operator>(</operator><ternary><condition><expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>GLOB_NOSPACE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * pattern matching function for filenames.  Each occurrence of the *
 * pattern causes a recursion level.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>match</name><parameter_list>(<parameter><decl><type><name>name</name></type></decl></parameter>, <parameter><decl><type><name>pat</name></type></decl></parameter>, <parameter><decl><type><name>patend</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><specifier>register</specifier> <name>Char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>patend</name></decl>;</decl_stmt>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>, <decl><type ref="prev"/><name>negate_range</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Char</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>pat</name> <operator>&lt;</operator> <name>patend</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>pat</name><operator>++</operator></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name>c</name> <operator>&amp;</operator> <name>M_MASK</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>M_ALL</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>==</operator> <name>patend</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<do>do<block type="pseudo"><block_content>
			    <if_stmt><if>if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>patend</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				    <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block>
			while <condition>(<expr><operator>*</operator><name>name</name><operator>++</operator> <operator>!=</operator> <name>EOS</name></expr>)</condition>
				;</do>
			<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		<case>case <expr><name>M_ONE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name><operator>++</operator> <operator>==</operator> <name>EOS</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>M_SET</name></expr>:</case>
			<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>=</operator> <operator>*</operator><name>name</name><operator>++</operator><operator>)</operator> <operator>==</operator> <name>EOS</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>negate_range</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pat</name> <operator>&amp;</operator> <name>M_MASK</name><operator>)</operator> <operator>==</operator> <name>M_NOT</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>EOS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>++</operator><name>pat</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<while>while <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>pat</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <name>M_MASK</name><operator>)</operator> <operator>!=</operator> <name>M_END</name></expr>)</condition><block type="pseudo"><block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>pat</name> <operator>&amp;</operator> <name>M_MASK</name><operator>)</operator> <operator>==</operator> <name>M_RNG</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;=</operator> <name><name>pat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>pat</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>
			<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>==</operator> <name>negate_range</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name><operator>++</operator> <operator>!=</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>
	<return>return<expr><operator>(</operator><operator>*</operator><name>name</name> <operator>==</operator> <name>EOS</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Free allocated data belonging to a glob_t structure. */</comment>
<function><type><name>void</name></type>
<name>globfree</name><parameter_list>(<parameter><decl><type><name>pglob</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><name>glob_t</name> <modifier>*</modifier></type><name>pglob</name></decl>;</decl_stmt>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pp</name> <operator>=</operator> <name><name>pglob</name><operator>-&gt;</operator><name>gl_pathv</name></name> <operator>+</operator> <name><name>pglob</name><operator>-&gt;</operator><name>gl_offs</name></name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>pglob</name><operator>-&gt;</operator><name>gl_pathc</name></name></expr>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr><expr><operator>++</operator><name>pp</name></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_pathv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DIR</name> <modifier>*</modifier></type>
<name>g_opendir</name><parameter_list>(<parameter><decl><type><name>str</name></type></decl></parameter>, <parameter><decl><type><name>pglob</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><specifier>register</specifier> <name>Char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>glob_t</name> <modifier>*</modifier></type><name>pglob</name></decl>;</decl_stmt>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name> <init>= <expr><literal type="string">"."</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>g_Ctoc</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>&amp;</operator> <name>GLOB_ALTDIRFUNC</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return<expr><operator>(</operator><call>(<modifier>*</modifier><name><name>pglob</name><operator>-&gt;</operator><name>gl_opendir</name></name>)<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return<expr><operator>(</operator><call><name>opendir</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>g_lstat</name><parameter_list>(<parameter><decl><type><name>fn</name></type></decl></parameter>, <parameter><decl><type><name>sb</name></type></decl></parameter>, <parameter><decl><type><name>pglob</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><specifier>register</specifier> <name>Char</name> <modifier>*</modifier></type><name>fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>glob_t</name> <modifier>*</modifier></type><name>pglob</name></decl>;</decl_stmt>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
	<comment type="block">/*
	 * Behavior of stat() is not stable across C Runtime versions.
	 * If linked to system basic msvcrt.dll it calls FindFirstFile().
	 * If linked with normal CRT comes with Visual Studio or Redistribute
	 * packages, it calls CreateFile(). CreateFile() is problematic here,
	 * if path is a pipe, it will open the pipe once then close, causing
	 * the other side to connect to the wrong pipe. Skip stat() if the
	 * name is pipe and pretend there is one.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>wcsstr</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="string">L"\\\\.\\pipe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>fn</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>st_dev</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>st_rdev</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>st_nlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>=</operator> <name>_S_IFIFO</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>g_Ctoc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>&amp;</operator> <name>GLOB_ALTDIRFUNC</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return<expr><operator>(</operator><call>(<modifier>*</modifier><name><name>pglob</name><operator>-&gt;</operator><name>gl_lstat</name></name>)<argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return<expr><operator>(</operator><call><name>lstat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>g_stat</name><parameter_list>(<parameter><decl><type><name>fn</name></type></decl></parameter>, <parameter><decl><type><name>sb</name></type></decl></parameter>, <parameter><decl><type><name>pglob</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><specifier>register</specifier> <name>Char</name> <modifier>*</modifier></type><name>fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>glob_t</name> <modifier>*</modifier></type><name>pglob</name></decl>;</decl_stmt>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
	<comment type="block">/*
	 * Behavior of stat() is not stable across C Runtime versions.
	 * If linked to system basic msvcrt.dll it calls FindFirstFile().
	 * If linked with normal CRT comes with Visual Studio or Redistribute
	 * packages, it calls CreateFile(). CreateFile() is problematic here,
	 * if path is a pipe, it will open the pipe once then close, causing
	 * the other side to connect to the wrong pipe. Skip stat() if the
	 * name is pipe and pretend there is one.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>wcsstr</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="string">L"\\\\.\\pipe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>fn</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>st_dev</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>st_rdev</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>st_nlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>=</operator> <name>_S_IFIFO</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>g_Ctoc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>pglob</name><operator>-&gt;</operator><name>gl_flags</name></name> <operator>&amp;</operator> <name>GLOB_ALTDIRFUNC</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return<expr><operator>(</operator><call>(<modifier>*</modifier><name><name>pglob</name><operator>-&gt;</operator><name>gl_stat</name></name>)<argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return<expr><operator>(</operator><call><name>stat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Char</name> <modifier>*</modifier></type>
<name>g_strchr</name><parameter_list>(<parameter><decl><type><name>str</name></type></decl></parameter>, <parameter><decl><type><name>ch</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<block>{<block_content>
	<do>do <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block> while <condition>(<expr><operator>*</operator><name>str</name><operator>++</operator></expr>)</condition>;</do>
	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>g_Ctoc</name><parameter_list>(<parameter><decl><type><name>str</name></type></decl></parameter>, <parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>Char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u_int</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>

	<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>*</operator><name>str</name><operator>++</operator><operator>)</operator> <operator>==</operator> <name>EOS</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>qprintf</name><parameter_list>(<parameter><decl><type><name>str</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>Char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>register</specifier> <name>Char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><call><name>CHAR</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>p</name> <operator>&amp;</operator> <name>M_PROTECT</name></expr> ?</condition><then> <expr><literal type="char">'"'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>ismeta</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'_'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
