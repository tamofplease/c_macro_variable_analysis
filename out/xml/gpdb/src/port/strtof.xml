<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/port/strtof.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * strtof.c
 *
 * Portions Copyright (c) 2019, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/port/strtof.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_STRTOF</name></cpp:ifndef>
<comment type="block">/*
 * strtof() is part of C99; this version is only for the benefit of obsolete
 * platforms. As such, it is known to return incorrect values for edge cases,
 * which have to be allowed for in variant files for regression test results
 * for any such platform.
 */</comment>

<function><type><name>float</name></type>
<name>strtof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>caller_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>dresult</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type>		<name>fresult</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>dresult</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fresult</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>dresult</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Value might be in-range for double but not float.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>dresult</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fresult</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>caller_errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>	<comment type="block">/* underflow */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isinf</name><argument_list>(<argument><expr><name>dresult</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isinf</name><argument_list>(<argument><expr><name>fresult</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>caller_errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>	<comment type="block">/* overflow */</comment>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>caller_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>caller_errno</name></expr>;</expr_stmt>
	<return>return <expr><name>fresult</name></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_BUGGY_STRTOF</name></expr></cpp:elif>
<comment type="block">/*
 * On Windows, there's a slightly different problem: VS2013 has a strtof()
 * that returns the correct results for valid input, but may fail to report an
 * error for underflow or overflow, returning 0 instead. Work around that by
 * trying strtod() when strtof() returns 0.0 or [+-]Inf, and calling it an
 * error if the result differs. Also, strtof() doesn't handle subnormal input
 * well, so prefer to round the strtod() result in such cases. (Normally we'd
 * just say "too bad" if strtof() doesn't support subnormals, but since we're
 * already in here fixing stuff, we might as well do the best fix we can.)
 *
 * Cygwin has a strtof() which is literally just (float)strtod(), which means
 * we can't avoid the double-rounding problem; but using this wrapper does get
 * us proper over/underflow checks. (Also, if they fix their strtof(), the
 * wrapper doesn't break anything.)
 *
 * Test results on Mingw suggest that it has the same problem, though looking
 * at the code I can't figure out why.
 */</comment>
<function><type><name>float</name></type>
<name>pg_strtof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>caller_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type>		<name>fresult</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fresult</name> <operator>=</operator> <operator>(</operator><name>strtof</name><operator>)</operator> <operator>(</operator><name>nptr</name><operator>,</operator> <name>endptr</name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* On error, just return the error to the caller. */</comment>
		<return>return <expr><name>fresult</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>endptr</name> <operator>==</operator> <name>nptr</name><operator>)</operator> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>fresult</name></expr></argument>)</argument_list></call> <operator>||</operator>
			 <operator>(</operator><operator>(</operator><name>fresult</name> <operator>&gt;=</operator> <name>FLT_MIN</name> <operator>||</operator> <name>fresult</name> <operator>&lt;=</operator> <operator>-</operator><name>FLT_MIN</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isinf</name><argument_list>(<argument><expr><name>fresult</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * If we got nothing parseable, or if we got a non-0 non-subnormal
		 * finite value (or NaN) without error, then return that to the caller
		 * without error.
		 */</comment>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>caller_errno</name></expr>;</expr_stmt>
		<return>return <expr><name>fresult</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * Try again. errno is already 0 here.
		 */</comment>
		<decl_stmt><decl><type><name>double</name></type>		<name>dresult</name> <init>= <expr><call><name>strtod</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* On error, just return the error */</comment>
			<return>return <expr><name>fresult</name></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>(</operator><name>dresult</name> <operator>==</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name>fresult</name> <operator>==</operator> <literal type="number">0.0</literal><operator>)</operator> <operator>||</operator>
				 <operator>(</operator><call><name>isinf</name><argument_list>(<argument><expr><name>dresult</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isinf</name><argument_list>(<argument><expr><name>fresult</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>fresult</name> <operator>==</operator> <name>dresult</name><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* both values are 0 or infinities of the same sign */</comment>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>caller_errno</name></expr>;</expr_stmt>
			<return>return <expr><name>fresult</name></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>(</operator><name>dresult</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dresult</name> <operator>&lt;=</operator> <name>FLT_MIN</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>dresult</name> <operator>!=</operator> <literal type="number">0.0</literal><operator>)</operator> <operator>||</operator>
				 <operator>(</operator><name>dresult</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dresult</name> <operator>&gt;=</operator> <operator>-</operator><name>FLT_MIN</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>dresult</name> <operator>!=</operator> <literal type="number">0.0</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* subnormal but nonzero value */</comment>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>caller_errno</name></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>float</name><operator>)</operator> <name>dresult</name></expr>;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
			<return>return <expr><name>fresult</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
