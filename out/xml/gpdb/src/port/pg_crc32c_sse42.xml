<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/port/pg_crc32c_sse42.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pg_crc32c_sse42.c
 *	  Compute CRC-32C checksum using Intel SSE 4.2 instructions.
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/port/pg_crc32c_sse42.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/pg_crc32c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nmmintrin.h&gt;</cpp:file></cpp:include>

<function><type><name>pg_crc32c</name></type>
<name>pg_comp_crc32c_sse42</name><parameter_list>(<parameter><decl><type><name>pg_crc32c</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pend</name> <init>= <expr><name>p</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Process eight bytes of data at a time.
	 *
	 * NB: We do unaligned accesses here. The Intel architecture allows that,
	 * and performance testing didn't show any performance gain from aligning
	 * the begin address.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__x86_64__</name></cpp:ifdef>
	<while>while <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;=</operator> <name>pend</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <call><name>_mm_crc32_u64</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint64</name> <operator>*</operator><operator>)</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Process remaining full four bytes if any */</comment>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;=</operator> <name>pend</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>_mm_crc32_u32</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

	<comment type="block">/*
	 * Process four bytes at a time. (The eight byte instruction is not
	 * available on the 32-bit x86 architecture).
	 */</comment>
	<while>while <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;=</operator> <name>pend</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>_mm_crc32_u32</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* __x86_64__ */</comment>

	<comment type="block">/* Process any remaining bytes one at a time. */</comment>
	<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>pend</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>_mm_crc32_u8</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>crc</name></expr>;</return>
</block_content>}</block></function>
</unit>
