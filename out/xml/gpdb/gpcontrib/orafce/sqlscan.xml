<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/gpcontrib/orafce/sqlscan.c"><cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"sqlscan.c"</cpp:file></cpp:line>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3</cpp:number> <cpp:file>"sqlscan.c"</cpp:file></cpp:line>

<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>YY_INT_ALIGNED</name></cpp:macro> <cpp:value>short int</cpp:value></cpp:define>

<comment type="block">/* A lexical scanner generated by flex */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_create_buffer</name></cpp:macro> <cpp:value>orafce_sql_yy_create_buffer</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_delete_buffer</name></cpp:macro> <cpp:value>orafce_sql_yy_delete_buffer</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_scan_buffer</name></cpp:macro> <cpp:value>orafce_sql_yy_scan_buffer</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_scan_string</name></cpp:macro> <cpp:value>orafce_sql_yy_scan_string</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_scan_bytes</name></cpp:macro> <cpp:value>orafce_sql_yy_scan_bytes</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_init_buffer</name></cpp:macro> <cpp:value>orafce_sql_yy_init_buffer</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_flush_buffer</name></cpp:macro> <cpp:value>orafce_sql_yy_flush_buffer</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_load_buffer_state</name></cpp:macro> <cpp:value>orafce_sql_yy_load_buffer_state</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_switch_to_buffer</name></cpp:macro> <cpp:value>orafce_sql_yy_switch_to_buffer</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yypush_buffer_state</name></cpp:macro> <cpp:value>orafce_sql_yypush_buffer_state</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yypop_buffer_state</name></cpp:macro> <cpp:value>orafce_sql_yypop_buffer_state</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyensure_buffer_stack</name></cpp:macro> <cpp:value>orafce_sql_yyensure_buffer_stack</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_flex_debug</name></cpp:macro> <cpp:value>orafce_sql_yy_flex_debug</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyin</name></cpp:macro> <cpp:value>orafce_sql_yyin</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyleng</name></cpp:macro> <cpp:value>orafce_sql_yyleng</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylex</name></cpp:macro> <cpp:value>orafce_sql_yylex</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylineno</name></cpp:macro> <cpp:value>orafce_sql_yylineno</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyout</name></cpp:macro> <cpp:value>orafce_sql_yyout</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyrestart</name></cpp:macro> <cpp:value>orafce_sql_yyrestart</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yytext</name></cpp:macro> <cpp:value>orafce_sql_yytext</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yywrap</name></cpp:macro> <cpp:value>orafce_sql_yywrap</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyalloc</name></cpp:macro> <cpp:value>orafce_sql_yyalloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyrealloc</name></cpp:macro> <cpp:value>orafce_sql_yyrealloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyfree</name></cpp:macro> <cpp:value>orafce_sql_yyfree</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLEX_SCANNER</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_FLEX_MAJOR_VERSION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_FLEX_MINOR_VERSION</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_FLEX_SUBMINOR_VERSION</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YY_FLEX_SUBMINOR_VERSION</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLEX_BETA</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yy_create_buffer</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yy_create_buffer_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_create_buffer</name></cpp:macro> <cpp:value>orafce_sql_yy_create_buffer</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yy_delete_buffer</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yy_delete_buffer_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_delete_buffer</name></cpp:macro> <cpp:value>orafce_sql_yy_delete_buffer</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yy_scan_buffer</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yy_scan_buffer_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_scan_buffer</name></cpp:macro> <cpp:value>orafce_sql_yy_scan_buffer</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yy_scan_string</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yy_scan_string_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_scan_string</name></cpp:macro> <cpp:value>orafce_sql_yy_scan_string</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yy_scan_bytes</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yy_scan_bytes_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_scan_bytes</name></cpp:macro> <cpp:value>orafce_sql_yy_scan_bytes</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yy_init_buffer</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yy_init_buffer_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_init_buffer</name></cpp:macro> <cpp:value>orafce_sql_yy_init_buffer</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yy_flush_buffer</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yy_flush_buffer_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_flush_buffer</name></cpp:macro> <cpp:value>orafce_sql_yy_flush_buffer</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yy_load_buffer_state</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yy_load_buffer_state_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_load_buffer_state</name></cpp:macro> <cpp:value>orafce_sql_yy_load_buffer_state</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yy_switch_to_buffer</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yy_switch_to_buffer_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_switch_to_buffer</name></cpp:macro> <cpp:value>orafce_sql_yy_switch_to_buffer</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yypush_buffer_state</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yypush_buffer_state_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yypush_buffer_state</name></cpp:macro> <cpp:value>orafce_sql_yypush_buffer_state</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yypop_buffer_state</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yypop_buffer_state_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yypop_buffer_state</name></cpp:macro> <cpp:value>orafce_sql_yypop_buffer_state</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyensure_buffer_stack</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyensure_buffer_stack_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyensure_buffer_stack</name></cpp:macro> <cpp:value>orafce_sql_yyensure_buffer_stack</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yylex</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yylex_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylex</name></cpp:macro> <cpp:value>orafce_sql_yylex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyrestart</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyrestart_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyrestart</name></cpp:macro> <cpp:value>orafce_sql_yyrestart</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yylex_init</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yylex_init_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylex_init</name></cpp:macro> <cpp:value>orafce_sql_yylex_init</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yylex_init_extra</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yylex_init_extra_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylex_init_extra</name></cpp:macro> <cpp:value>orafce_sql_yylex_init_extra</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yylex_destroy</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yylex_destroy_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylex_destroy</name></cpp:macro> <cpp:value>orafce_sql_yylex_destroy</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyget_debug</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyget_debug_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyget_debug</name></cpp:macro> <cpp:value>orafce_sql_yyget_debug</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyset_debug</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyset_debug_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyset_debug</name></cpp:macro> <cpp:value>orafce_sql_yyset_debug</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyget_extra</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyget_extra_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyget_extra</name></cpp:macro> <cpp:value>orafce_sql_yyget_extra</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyset_extra</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyset_extra_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyset_extra</name></cpp:macro> <cpp:value>orafce_sql_yyset_extra</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyget_in</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyget_in_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyget_in</name></cpp:macro> <cpp:value>orafce_sql_yyget_in</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyset_in</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyset_in_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyset_in</name></cpp:macro> <cpp:value>orafce_sql_yyset_in</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyget_out</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyget_out_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyget_out</name></cpp:macro> <cpp:value>orafce_sql_yyget_out</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyset_out</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyset_out_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyset_out</name></cpp:macro> <cpp:value>orafce_sql_yyset_out</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyget_leng</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyget_leng_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyget_leng</name></cpp:macro> <cpp:value>orafce_sql_yyget_leng</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyget_text</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyget_text_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyget_text</name></cpp:macro> <cpp:value>orafce_sql_yyget_text</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyget_lineno</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyget_lineno_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyget_lineno</name></cpp:macro> <cpp:value>orafce_sql_yyget_lineno</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyset_lineno</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyset_lineno_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyset_lineno</name></cpp:macro> <cpp:value>orafce_sql_yyset_lineno</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yywrap</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yywrap_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yywrap</name></cpp:macro> <cpp:value>orafce_sql_yywrap</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyalloc</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyalloc_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyalloc</name></cpp:macro> <cpp:value>orafce_sql_yyalloc</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyrealloc</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyrealloc_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyrealloc</name></cpp:macro> <cpp:value>orafce_sql_yyrealloc</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyfree</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyfree_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyfree</name></cpp:macro> <cpp:value>orafce_sql_yyfree</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yytext</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yytext_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yytext</name></cpp:macro> <cpp:value>orafce_sql_yytext</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyleng</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyleng_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyleng</name></cpp:macro> <cpp:value>orafce_sql_yyleng</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyin</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyin_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyin</name></cpp:macro> <cpp:value>orafce_sql_yyin</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yyout</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yyout_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyout</name></cpp:macro> <cpp:value>orafce_sql_yyout</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yy_flex_debug</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yy_flex_debug_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_flex_debug</name></cpp:macro> <cpp:value>orafce_sql_yy_flex_debug</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yylineno</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yylineno_ALREADY_DEFINED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylineno</name></cpp:macro> <cpp:value>orafce_sql_yylineno</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* First, we deal with  platform-specific or compiler-specific issues. */</comment>

<comment type="block">/* begin standard C headers. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<comment type="block">/* end standard C headers. */</comment>

<comment type="block">/* flex integer type definitions */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FLEXINT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLEXINT_H</name></cpp:macro></cpp:define>

<comment type="block">/* C99 systems have &lt;inttypes.h&gt;. Non-C99 systems may or may not. */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal></expr></cpp:if>

<comment type="block">/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__STDC_LIMIT_MACROS</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__STDC_LIMIT_MACROS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>int8_t</name></type> <name>flex_int8_t</name>;</typedef>
<typedef>typedef <type><name>uint8_t</name></type> <name>flex_uint8_t</name>;</typedef>
<typedef>typedef <type><name>int16_t</name></type> <name>flex_int16_t</name>;</typedef>
<typedef>typedef <type><name>uint16_t</name></type> <name>flex_uint16_t</name>;</typedef>
<typedef>typedef <type><name>int32_t</name></type> <name>flex_int32_t</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>flex_uint32_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>flex_int8_t</name>;</typedef>
<typedef>typedef <type><name>short</name> <name>int</name></type> <name>flex_int16_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>flex_int32_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>flex_uint8_t</name>;</typedef> 
<typedef>typedef <type><name>unsigned</name> <name>short</name> <name>int</name></type> <name>flex_uint16_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>flex_uint32_t</name>;</typedef>

<comment type="block">/* Limits of integral types. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>INT8_MIN</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT8_MIN</name></cpp:macro>               <cpp:value>(-128)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>INT16_MIN</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT16_MIN</name></cpp:macro>              <cpp:value>(-32767-1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>INT32_MIN</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT32_MIN</name></cpp:macro>              <cpp:value>(-2147483647-1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>INT8_MAX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT8_MAX</name></cpp:macro>               <cpp:value>(127)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>INT16_MAX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT16_MAX</name></cpp:macro>              <cpp:value>(32767)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>INT32_MAX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT32_MAX</name></cpp:macro>              <cpp:value>(2147483647)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UINT8_MAX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT8_MAX</name></cpp:macro>              <cpp:value>(255U)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UINT16_MAX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT16_MAX</name></cpp:macro>             <cpp:value>(65535U)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UINT32_MAX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT32_MAX</name></cpp:macro>             <cpp:value>(4294967295U)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIZE_MAX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MAX</name></cpp:macro>               <cpp:value>(~(size_t)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ! C99 */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ! FLEXINT_H */</comment>

<comment type="block">/* begin standard C++ headers. */</comment>

<comment type="block">/* TODO: this is always defined, so inline it */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyconst</name></cpp:macro> <cpp:value>const</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__GNUC__</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yynoreturn</name></cpp:macro> <cpp:value>__attribute__((__noreturn__))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yynoreturn</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Returned upon end-of-file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<comment type="block">/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_SC_TO_UI</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((YY_CHAR) (c))</cpp:value></cpp:define>

<comment type="block">/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEGIN</name></cpp:macro> <cpp:value>(yy_start) = 1 + 2 *</cpp:value></cpp:define>
<comment type="block">/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_START</name></cpp:macro> <cpp:value>(((yy_start) - 1) / 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTATE</name></cpp:macro> <cpp:value>YY_START</cpp:value></cpp:define>
<comment type="block">/* Action number for EOF rule of a given start state. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_STATE_EOF</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(YY_END_OF_BUFFER + state + 1)</cpp:value></cpp:define>
<comment type="block">/* Special action meaning "start processing a new file". */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_NEW_FILE</name></cpp:macro> <cpp:value>yyrestart( yyin  )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_END_OF_BUFFER_CHAR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<comment type="block">/* Size of default input buffer. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_BUF_SIZE</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__ia64__</name></cpp:ifdef>
<comment type="block">/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_BUF_SIZE</name></cpp:macro> <cpp:value>32768</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_BUF_SIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __ia64__ */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* The state buf must be large enough to hold one state per character in the main buffer.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_STATE_BUF_SIZE</name></cpp:macro>   <cpp:value>((YY_BUF_SIZE + 2) * sizeof(yy_state_type))</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_TYPEDEF_YY_BUFFER_STATE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_TYPEDEF_YY_BUFFER_STATE</name></cpp:macro></cpp:define>
<typedef>typedef <type><name><name>struct</name> <name>yy_buffer_state</name></name> <modifier>*</modifier></type><name>YY_BUFFER_STATE</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_TYPEDEF_YY_SIZE_T</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_TYPEDEF_YY_SIZE_T</name></cpp:macro></cpp:define>
<typedef>typedef <type><name>size_t</name></type> <name>yy_size_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>yyleng</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>FILE</name> <modifier>*</modifier></type><name>yyin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yyout</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOB_ACT_CONTINUE_SCAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOB_ACT_END_OF_FILE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOB_ACT_LAST_MATCH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
    
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_LESS_LINENO</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_LINENO_REWIND_TO</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
    
<comment type="block">/* Return all but the first "n" matched characters back to the input stream. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyless</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do \
		{ \
		<comment type="block">/* Undo effects of setting up yytext. */</comment> \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; <comment type="block">/* set up yytext again */</comment> \
		} \
	while ( 0 )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unput</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>yyunput( c, (yytext_ptr)  )</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_STRUCT_YY_BUFFER_STATE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_STRUCT_YY_BUFFER_STATE</name></cpp:macro></cpp:define>
<struct>struct <name>yy_buffer_state</name>
	<block>{
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>yy_input_file</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>yy_ch_buf</name></decl>;</decl_stmt>		<comment type="block">/* input buffer */</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>yy_buf_pos</name></decl>;</decl_stmt>		<comment type="block">/* current position in input buffer */</comment>

	<comment type="block">/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>yy_buf_size</name></decl>;</decl_stmt>

	<comment type="block">/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>yy_n_chars</name></decl>;</decl_stmt>

	<comment type="block">/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>yy_is_our_buffer</name></decl>;</decl_stmt>

	<comment type="block">/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>yy_is_interactive</name></decl>;</decl_stmt>

	<comment type="block">/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>yy_at_bol</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>yy_bs_lineno</name></decl>;</decl_stmt> <comment type="block" format="doxygen">/**&lt; The line count. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>yy_bs_column</name></decl>;</decl_stmt> <comment type="block" format="doxygen">/**&lt; The column count. */</comment>

	<comment type="block">/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>yy_fill_buffer</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>yy_buffer_status</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_BUFFER_NEW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_BUFFER_NORMAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
	<comment type="block">/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_BUFFER_EOF_PENDING</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

	}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !YY_STRUCT_YY_BUFFER_STATE */</comment>

<comment type="block">/* Stack of input buffers. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>yy_buffer_stack_top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block" format="doxygen">/**&lt; index of top of stack. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>yy_buffer_stack_max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block" format="doxygen">/**&lt; capacity of stack. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>YY_BUFFER_STATE</name> <modifier>*</modifier></type> <name>yy_buffer_stack</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="block" format="doxygen">/**&lt; Stack as an array. */</comment>

<comment type="block">/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_CURRENT_BUFFER</name></cpp:macro> <cpp:value>( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)</cpp:value></cpp:define>
<comment type="block">/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_CURRENT_BUFFER_LVALUE</name></cpp:macro> <cpp:value>(yy_buffer_stack)[(yy_buffer_stack_top)]</cpp:value></cpp:define>

<comment type="block">/* yy_hold_char holds the character lost when yytext is formed. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>yy_hold_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>yy_n_chars</name></decl>;</decl_stmt>		<comment type="block">/* number of characters read into yy_ch_buf */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>yyleng</name></decl>;</decl_stmt>

<comment type="block">/* Points to current character in buffer. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>yy_c_buf_p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>yy_init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>		<comment type="block">/* whether we need to initialize */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>yy_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* start state number */</comment>

<comment type="block">/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>yy_did_buffer_switch_on_eof</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>yyrestart</name> <parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>input_file</name></decl></parameter>  )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>yy_switch_to_buffer</name> <parameter_list>( <parameter><decl><type><name>YY_BUFFER_STATE</name></type> <name>new_buffer</name></decl></parameter>  )</parameter_list>;</function_decl>
<function_decl><type><name>YY_BUFFER_STATE</name></type> <name>yy_create_buffer</name> <parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>  )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>yy_delete_buffer</name> <parameter_list>( <parameter><decl><type><name>YY_BUFFER_STATE</name></type> <name>b</name></decl></parameter>  )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>yy_flush_buffer</name> <parameter_list>( <parameter><decl><type><name>YY_BUFFER_STATE</name></type> <name>b</name></decl></parameter>  )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>yypush_buffer_state</name> <parameter_list>( <parameter><decl><type><name>YY_BUFFER_STATE</name></type> <name>new_buffer</name></decl></parameter>  )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>yypop_buffer_state</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>yyensure_buffer_stack</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>yy_load_buffer_state</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>yy_init_buffer</name> <parameter_list>( <parameter><decl><type><name>YY_BUFFER_STATE</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>  )</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_FLUSH_BUFFER</name></cpp:macro> <cpp:value>yy_flush_buffer( YY_CURRENT_BUFFER )</cpp:value></cpp:define>

<function_decl><type><name>YY_BUFFER_STATE</name></type> <name>yy_scan_buffer</name> <parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>yy_size_t</name></type> <name>size</name></decl></parameter>  )</parameter_list>;</function_decl>
<function_decl><type><name>YY_BUFFER_STATE</name></type> <name>yy_scan_string</name> <parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>yy_str</name></decl></parameter>  )</parameter_list>;</function_decl>
<function_decl><type><name>YY_BUFFER_STATE</name></type> <name>yy_scan_bytes</name> <parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>  )</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>yyalloc</name> <parameter_list>( <parameter><decl><type><name>yy_size_t</name></type></decl></parameter>  )</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>yyrealloc</name> <parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>yy_size_t</name></type></decl></parameter>  )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>yyfree</name> <parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>  )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_new_buffer</name></cpp:macro> <cpp:value>yy_create_buffer</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_set_interactive</name><parameter_list>(<parameter><type><name>is_interactive</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE-&gt;yy_is_interactive = is_interactive; \
	}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy_set_bol</name><parameter_list>(<parameter><type><name>at_bol</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE-&gt;yy_at_bol = at_bol; \
	}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_AT_BOL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(YY_CURRENT_BUFFER_LVALUE-&gt;yy_at_bol)</cpp:value></cpp:define>

<comment type="block">/* Begin user sect3 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orafce_sql_yywrap</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(<comment type="block">/*CONSTCOND*/</comment>1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_SKIP_YYWRAP</name></cpp:macro></cpp:define>
<typedef>typedef <type><name>flex_uint8_t</name></type> <name>YY_CHAR</name>;</typedef>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>yyin</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yyout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name>int</name></type> <name>yy_state_type</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>yylineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yylineno</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>yytext</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yytext_ptr</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>yytext_ptr</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yytext_ptr</name></cpp:macro> <cpp:value>yytext</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>yy_state_type</name></type> <name>yy_get_previous_state</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>yy_state_type</name></type> <name>yy_try_NUL_trans</name> <parameter_list>( <parameter><decl><type><name>yy_state_type</name></type> <name>current_state</name></decl></parameter>  )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>yy_get_next_buffer</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <name>yynoreturn</name></type> <name>yy_fatal_error</name> <parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>  )</parameter_list>;</function_decl>

<comment type="block">/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_DO_BEFORE_ACTION</name></cpp:macro> \
	<cpp:value>(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_NUM_RULES</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_END_OF_BUFFER</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define>
<comment type="block">/* This struct is not used in this scanner,
   but its presence is necessary. */</comment>
<struct>struct <name>yy_trans_info</name>
	<block>{
	<decl_stmt><decl><type><name>flex_int32_t</name></type> <name>yy_verify</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>flex_int32_t</name></type> <name>yy_nxt</name></decl>;</decl_stmt>
	}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>flex_int16_t</name></type> <name><name>yy_accept</name><index>[<expr><literal type="number">155</literal></expr>]</index></name> <init>=
    <expr><block>{   <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">13</literal></expr>,   <expr><literal type="number">13</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">12</literal></expr>,   <expr><literal type="number">12</literal></expr>,
        <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">54</literal></expr>,   <expr><literal type="number">52</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,
       <expr><literal type="number">44</literal></expr>,   <expr><literal type="number">38</literal></expr>,   <expr><literal type="number">52</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">20</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">46</literal></expr>,
       <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">13</literal></expr>,   <expr><literal type="number">10</literal></expr>,    <expr><literal type="number">6</literal></expr>,    <expr><literal type="number">6</literal></expr>,
        <expr><literal type="number">7</literal></expr>,    <expr><literal type="number">7</literal></expr>,   <expr><literal type="number">41</literal></expr>,   <expr><literal type="number">39</literal></expr>,   <expr><literal type="number">12</literal></expr>,   <expr><literal type="number">17</literal></expr>,   <expr><literal type="number">26</literal></expr>,   <expr><literal type="number">26</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">31</literal></expr>,
       <expr><literal type="number">25</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">35</literal></expr>,   <expr><literal type="number">35</literal></expr>,   <expr><literal type="number">37</literal></expr>,    <expr><literal type="number">1</literal></expr>,   <expr><literal type="number">44</literal></expr>,   <expr><literal type="number">32</literal></expr>,   <expr><literal type="number">45</literal></expr>,   <expr><literal type="number">33</literal></expr>,
        <expr><literal type="number">2</literal></expr>,   <expr><literal type="number">47</literal></expr>,    <expr><literal type="number">3</literal></expr>,   <expr><literal type="number">47</literal></expr>,   <expr><literal type="number">46</literal></expr>,   <expr><literal type="number">49</literal></expr>,   <expr><literal type="number">42</literal></expr>,   <expr><literal type="number">51</literal></expr>,    <expr><literal type="number">9</literal></expr>,   <expr><literal type="number">21</literal></expr>,
       <expr><literal type="number">19</literal></expr>,   <expr><literal type="number">16</literal></expr>,   <expr><literal type="number">13</literal></expr>,   <expr><literal type="number">10</literal></expr>,   <expr><literal type="number">10</literal></expr>,   <expr><literal type="number">11</literal></expr>,    <expr><literal type="number">6</literal></expr>,    <expr><literal type="number">8</literal></expr>,    <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">4</literal></expr>,
       <expr><literal type="number">41</literal></expr>,   <expr><literal type="number">40</literal></expr>,   <expr><literal type="number">12</literal></expr>,   <expr><literal type="number">17</literal></expr>,   <expr><literal type="number">17</literal></expr>,   <expr><literal type="number">18</literal></expr>,   <expr><literal type="number">26</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">24</literal></expr>,
       <expr><literal type="number">23</literal></expr>,   <expr><literal type="number">27</literal></expr>,   <expr><literal type="number">28</literal></expr>,   <expr><literal type="number">27</literal></expr>,   <expr><literal type="number">25</literal></expr>,   <expr><literal type="number">35</literal></expr>,   <expr><literal type="number">34</literal></expr>,   <expr><literal type="number">36</literal></expr>,   <expr><literal type="number">33</literal></expr>,    <expr><literal type="number">2</literal></expr>,

        <expr><literal type="number">2</literal></expr>,    <expr><literal type="number">3</literal></expr>,   <expr><literal type="number">47</literal></expr>,   <expr><literal type="number">50</literal></expr>,   <expr><literal type="number">48</literal></expr>,   <expr><literal type="number">10</literal></expr>,   <expr><literal type="number">15</literal></expr>,   <expr><literal type="number">11</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">4</literal></expr>,
       <expr><literal type="number">17</literal></expr>,   <expr><literal type="number">14</literal></expr>,   <expr><literal type="number">18</literal></expr>,    <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">30</literal></expr>,   <expr><literal type="number">23</literal></expr>,    <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">28</literal></expr>,   <expr><literal type="number">29</literal></expr>,
       <expr><literal type="number">36</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">28</literal></expr>,   <expr><literal type="number">29</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>
    }</block></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YY_CHAR</name></type> <name><name>yy_ec</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=
    <expr><block>{   <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">2</literal></expr>,    <expr><literal type="number">3</literal></expr>,
        <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">2</literal></expr>,    <expr><literal type="number">4</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,
        <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,
        <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">2</literal></expr>,    <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">6</literal></expr>,    <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">7</literal></expr>,    <expr><literal type="number">8</literal></expr>,    <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">9</literal></expr>,   <expr><literal type="number">10</literal></expr>,
       <expr><literal type="number">10</literal></expr>,   <expr><literal type="number">11</literal></expr>,   <expr><literal type="number">12</literal></expr>,   <expr><literal type="number">10</literal></expr>,   <expr><literal type="number">13</literal></expr>,   <expr><literal type="number">14</literal></expr>,   <expr><literal type="number">15</literal></expr>,   <expr><literal type="number">16</literal></expr>,   <expr><literal type="number">16</literal></expr>,   <expr><literal type="number">16</literal></expr>,
       <expr><literal type="number">16</literal></expr>,   <expr><literal type="number">16</literal></expr>,   <expr><literal type="number">16</literal></expr>,   <expr><literal type="number">16</literal></expr>,   <expr><literal type="number">16</literal></expr>,   <expr><literal type="number">17</literal></expr>,   <expr><literal type="number">17</literal></expr>,   <expr><literal type="number">18</literal></expr>,   <expr><literal type="number">10</literal></expr>,    <expr><literal type="number">8</literal></expr>,
        <expr><literal type="number">8</literal></expr>,    <expr><literal type="number">8</literal></expr>,    <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">5</literal></expr>,   <expr><literal type="number">19</literal></expr>,   <expr><literal type="number">20</literal></expr>,   <expr><literal type="number">19</literal></expr>,   <expr><literal type="number">19</literal></expr>,   <expr><literal type="number">21</literal></expr>,   <expr><literal type="number">19</literal></expr>,
       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">23</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,
       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">24</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,
       <expr><literal type="number">10</literal></expr>,   <expr><literal type="number">25</literal></expr>,   <expr><literal type="number">10</literal></expr>,    <expr><literal type="number">8</literal></expr>,   <expr><literal type="number">22</literal></expr>,    <expr><literal type="number">5</literal></expr>,   <expr><literal type="number">19</literal></expr>,   <expr><literal type="number">20</literal></expr>,   <expr><literal type="number">19</literal></expr>,   <expr><literal type="number">19</literal></expr>,

       <expr><literal type="number">21</literal></expr>,   <expr><literal type="number">19</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">23</literal></expr>,
       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">26</literal></expr>,
       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">1</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,
       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,
       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,
       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,
       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,
       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,
       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,
       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,

       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,
       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,
       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,
       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,
       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,
       <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">22</literal></expr>
    }</block></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YY_CHAR</name></type> <name><name>yy_meta</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <init>=
    <expr><block>{   <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">2</literal></expr>,    <expr><literal type="number">3</literal></expr>,    <expr><literal type="number">3</literal></expr>,    <expr><literal type="number">4</literal></expr>,    <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">6</literal></expr>,    <expr><literal type="number">4</literal></expr>,    <expr><literal type="number">7</literal></expr>,    <expr><literal type="number">1</literal></expr>,
        <expr><literal type="number">8</literal></expr>,    <expr><literal type="number">4</literal></expr>,    <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">8</literal></expr>,   <expr><literal type="number">10</literal></expr>,   <expr><literal type="number">10</literal></expr>,    <expr><literal type="number">1</literal></expr>,   <expr><literal type="number">11</literal></expr>,   <expr><literal type="number">11</literal></expr>,
       <expr><literal type="number">11</literal></expr>,   <expr><literal type="number">12</literal></expr>,   <expr><literal type="number">12</literal></expr>,   <expr><literal type="number">12</literal></expr>,   <expr><literal type="number">13</literal></expr>,   <expr><literal type="number">12</literal></expr>
    }</block></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>flex_int16_t</name></type> <name><name>yy_base</name><index>[<expr><literal type="number">193</literal></expr>]</index></name> <init>=
    <expr><block>{   <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">201</literal></expr>,  <expr><literal type="number">200</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">33</literal></expr>,  <expr><literal type="number">202</literal></expr>,  <expr><literal type="number">201</literal></expr>,  <expr><literal type="number">197</literal></expr>,  <expr><literal type="number">196</literal></expr>,
       <expr><literal type="number">33</literal></expr>,   <expr><literal type="number">40</literal></expr>,  <expr><literal type="number">195</literal></expr>,  <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">25</literal></expr>,   <expr><literal type="number">44</literal></expr>,  <expr><literal type="number">198</literal></expr>,  <expr><literal type="number">711</literal></expr>,   <expr><literal type="number">50</literal></expr>,   <expr><literal type="number">53</literal></expr>,
        <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">711</literal></expr>,   <expr><literal type="number">43</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">711</literal></expr>,  <expr><literal type="number">711</literal></expr>,  <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">23</literal></expr>,  <expr><literal type="number">185</literal></expr>,   <expr><literal type="number">52</literal></expr>,
      <expr><literal type="number">177</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">178</literal></expr>,    <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">72</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">52</literal></expr>,  <expr><literal type="number">175</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">179</literal></expr>,    <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">84</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">96</literal></expr>,   <expr><literal type="number">45</literal></expr>,
        <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">177</literal></expr>,   <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">711</literal></expr>,   <expr><literal type="number">64</literal></expr>,  <expr><literal type="number">176</literal></expr>,
      <expr><literal type="number">105</literal></expr>,   <expr><literal type="number">73</literal></expr>,    <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">109</literal></expr>,  <expr><literal type="number">711</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">711</literal></expr>,  <expr><literal type="number">711</literal></expr>,
      <expr><literal type="number">711</literal></expr>,  <expr><literal type="number">711</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">93</literal></expr>,  <expr><literal type="number">169</literal></expr>,    <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">92</literal></expr>,  <expr><literal type="number">711</literal></expr>,    <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">711</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">95</literal></expr>,  <expr><literal type="number">116</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">110</literal></expr>,  <expr><literal type="number">102</literal></expr>,  <expr><literal type="number">711</literal></expr>,
      <expr><literal type="number">101</literal></expr>,  <expr><literal type="number">711</literal></expr>,   <expr><literal type="number">96</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">711</literal></expr>,   <expr><literal type="number">94</literal></expr>,   <expr><literal type="number">88</literal></expr>,    <expr><literal type="number">0</literal></expr>,

      <expr><literal type="number">122</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">107</literal></expr>,   <expr><literal type="number">66</literal></expr>,  <expr><literal type="number">115</literal></expr>,  <expr><literal type="number">127</literal></expr>,  <expr><literal type="number">711</literal></expr>,   <expr><literal type="number">80</literal></expr>,  <expr><literal type="number">139</literal></expr>,    <expr><literal type="number">0</literal></expr>,
      <expr><literal type="number">135</literal></expr>,  <expr><literal type="number">711</literal></expr>,   <expr><literal type="number">71</literal></expr>,  <expr><literal type="number">151</literal></expr>,  <expr><literal type="number">136</literal></expr>,  <expr><literal type="number">711</literal></expr>,   <expr><literal type="number">59</literal></expr>,  <expr><literal type="number">163</literal></expr>,   <expr><literal type="number">54</literal></expr>,    <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">57</literal></expr>,  <expr><literal type="number">135</literal></expr>,  <expr><literal type="number">175</literal></expr>,  <expr><literal type="number">187</literal></expr>,  <expr><literal type="number">137</literal></expr>,  <expr><literal type="number">199</literal></expr>,  <expr><literal type="number">153</literal></expr>,  <expr><literal type="number">211</literal></expr>,  <expr><literal type="number">223</literal></expr>,  <expr><literal type="number">138</literal></expr>,
      <expr><literal type="number">235</literal></expr>,  <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">247</literal></expr>,  <expr><literal type="number">259</literal></expr>,  <expr><literal type="number">159</literal></expr>,  <expr><literal type="number">271</literal></expr>,  <expr><literal type="number">711</literal></expr>,  <expr><literal type="number">711</literal></expr>,  <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">160</literal></expr>,
        <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">49</literal></expr>,  <expr><literal type="number">283</literal></expr>,  <expr><literal type="number">159</literal></expr>,  <expr><literal type="number">161</literal></expr>,    <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">18</literal></expr>,  <expr><literal type="number">295</literal></expr>,  <expr><literal type="number">177</literal></expr>,  <expr><literal type="number">162</literal></expr>,
        <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">16</literal></expr>,  <expr><literal type="number">307</literal></expr>,  <expr><literal type="number">711</literal></expr>,  <expr><literal type="number">320</literal></expr>,  <expr><literal type="number">333</literal></expr>,  <expr><literal type="number">346</literal></expr>,  <expr><literal type="number">359</literal></expr>,  <expr><literal type="number">372</literal></expr>,  <expr><literal type="number">385</literal></expr>,
      <expr><literal type="number">398</literal></expr>,  <expr><literal type="number">408</literal></expr>,  <expr><literal type="number">412</literal></expr>,  <expr><literal type="number">419</literal></expr>,  <expr><literal type="number">431</literal></expr>,  <expr><literal type="number">444</literal></expr>,  <expr><literal type="number">457</literal></expr>,  <expr><literal type="number">470</literal></expr>,  <expr><literal type="number">483</literal></expr>,  <expr><literal type="number">495</literal></expr>,
      <expr><literal type="number">508</literal></expr>,  <expr><literal type="number">521</literal></expr>,  <expr><literal type="number">529</literal></expr>,  <expr><literal type="number">536</literal></expr>,  <expr><literal type="number">548</literal></expr>,  <expr><literal type="number">558</literal></expr>,  <expr><literal type="number">566</literal></expr>,  <expr><literal type="number">572</literal></expr>,  <expr><literal type="number">580</literal></expr>,  <expr><literal type="number">588</literal></expr>,
      <expr><literal type="number">588</literal></expr>,  <expr><literal type="number">594</literal></expr>,  <expr><literal type="number">606</literal></expr>,  <expr><literal type="number">619</literal></expr>,  <expr><literal type="number">632</literal></expr>,  <expr><literal type="number">636</literal></expr>,  <expr><literal type="number">647</literal></expr>,  <expr><literal type="number">659</literal></expr>,  <expr><literal type="number">668</literal></expr>,  <expr><literal type="number">680</literal></expr>,
      <expr><literal type="number">689</literal></expr>,  <expr><literal type="number">701</literal></expr>

    }</block></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>flex_int16_t</name></type> <name><name>yy_def</name><index>[<expr><literal type="number">193</literal></expr>]</index></name> <init>=
    <expr><block>{   <expr><literal type="number">0</literal></expr>,
      <expr><literal type="number">154</literal></expr>,    <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">158</literal></expr>,  <expr><literal type="number">158</literal></expr>,
      <expr><literal type="number">159</literal></expr>,  <expr><literal type="number">159</literal></expr>,  <expr><literal type="number">160</literal></expr>,  <expr><literal type="number">160</literal></expr>,  <expr><literal type="number">161</literal></expr>,  <expr><literal type="number">161</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">162</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">163</literal></expr>,  <expr><literal type="number">162</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">162</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">162</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">164</literal></expr>,  <expr><literal type="number">164</literal></expr>,  <expr><literal type="number">164</literal></expr>,  <expr><literal type="number">164</literal></expr>,  <expr><literal type="number">164</literal></expr>,  <expr><literal type="number">165</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">166</literal></expr>,  <expr><literal type="number">166</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">167</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">168</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">169</literal></expr>,  <expr><literal type="number">169</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">170</literal></expr>,
      <expr><literal type="number">171</literal></expr>,   <expr><literal type="number">49</literal></expr>,  <expr><literal type="number">172</literal></expr>,  <expr><literal type="number">172</literal></expr>,  <expr><literal type="number">173</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">162</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">174</literal></expr>,
      <expr><literal type="number">175</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">176</literal></expr>,  <expr><literal type="number">154</literal></expr>,   <expr><literal type="number">30</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">164</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">38</literal></expr>,  <expr><literal type="number">177</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">166</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">178</literal></expr>,
      <expr><literal type="number">167</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">168</literal></expr>,   <expr><literal type="number">46</literal></expr>,  <expr><literal type="number">179</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">169</literal></expr>,   <expr><literal type="number">49</literal></expr>,  <expr><literal type="number">180</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">181</literal></expr>,  <expr><literal type="number">171</literal></expr>,  <expr><literal type="number">172</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">182</literal></expr>,  <expr><literal type="number">174</literal></expr>,  <expr><literal type="number">175</literal></expr>,

      <expr><literal type="number">175</literal></expr>,  <expr><literal type="number">176</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">177</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">178</literal></expr>,
      <expr><literal type="number">179</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">180</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">186</literal></expr>,
      <expr><literal type="number">182</literal></expr>,  <expr><literal type="number">187</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">188</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">189</literal></expr>,  <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">190</literal></expr>,
      <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">191</literal></expr>,  <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">192</literal></expr>,  <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">187</literal></expr>,  <expr><literal type="number">188</literal></expr>,
      <expr><literal type="number">140</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">189</literal></expr>,  <expr><literal type="number">190</literal></expr>,  <expr><literal type="number">145</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">191</literal></expr>,  <expr><literal type="number">192</literal></expr>,
      <expr><literal type="number">150</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">185</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>

    }</block></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>flex_int16_t</name></type> <name><name>yy_nxt</name><index>[<expr><literal type="number">738</literal></expr>]</index></name> <init>=
    <expr><block>{   <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">18</literal></expr>,   <expr><literal type="number">19</literal></expr>,   <expr><literal type="number">20</literal></expr>,   <expr><literal type="number">19</literal></expr>,   <expr><literal type="number">21</literal></expr>,   <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">23</literal></expr>,   <expr><literal type="number">24</literal></expr>,   <expr><literal type="number">25</literal></expr>,   <expr><literal type="number">26</literal></expr>,
       <expr><literal type="number">24</literal></expr>,   <expr><literal type="number">24</literal></expr>,   <expr><literal type="number">27</literal></expr>,   <expr><literal type="number">28</literal></expr>,   <expr><literal type="number">29</literal></expr>,   <expr><literal type="number">30</literal></expr>,   <expr><literal type="number">30</literal></expr>,   <expr><literal type="number">31</literal></expr>,   <expr><literal type="number">32</literal></expr>,   <expr><literal type="number">33</literal></expr>,
       <expr><literal type="number">34</literal></expr>,   <expr><literal type="number">32</literal></expr>,   <expr><literal type="number">35</literal></expr>,   <expr><literal type="number">36</literal></expr>,   <expr><literal type="number">18</literal></expr>,   <expr><literal type="number">36</literal></expr>,   <expr><literal type="number">40</literal></expr>,   <expr><literal type="number">54</literal></expr>,  <expr><literal type="number">132</literal></expr>,   <expr><literal type="number">40</literal></expr>,
      <expr><literal type="number">127</literal></expr>,   <expr><literal type="number">55</literal></expr>,   <expr><literal type="number">41</literal></expr>,   <expr><literal type="number">40</literal></expr>,   <expr><literal type="number">40</literal></expr>,   <expr><literal type="number">48</literal></expr>,   <expr><literal type="number">42</literal></expr>,   <expr><literal type="number">40</literal></expr>,   <expr><literal type="number">62</literal></expr>,   <expr><literal type="number">62</literal></expr>,
       <expr><literal type="number">40</literal></expr>,   <expr><literal type="number">49</literal></expr>,   <expr><literal type="number">48</literal></expr>,   <expr><literal type="number">41</literal></expr>,   <expr><literal type="number">40</literal></expr>,   <expr><literal type="number">40</literal></expr>,   <expr><literal type="number">54</literal></expr>,   <expr><literal type="number">42</literal></expr>,   <expr><literal type="number">49</literal></expr>,   <expr><literal type="number">58</literal></expr>,
       <expr><literal type="number">55</literal></expr>,   <expr><literal type="number">56</literal></expr>,   <expr><literal type="number">56</literal></expr>,   <expr><literal type="number">56</literal></expr>,   <expr><literal type="number">56</literal></expr>,   <expr><literal type="number">56</literal></expr>,   <expr><literal type="number">56</literal></expr>,   <expr><literal type="number">50</literal></expr>,   <expr><literal type="number">59</literal></expr>,   <expr><literal type="number">59</literal></expr>,
       <expr><literal type="number">93</literal></expr>,  <expr><literal type="number">122</literal></expr>,   <expr><literal type="number">78</literal></expr>,   <expr><literal type="number">97</literal></expr>,   <expr><literal type="number">50</literal></expr>,   <expr><literal type="number">64</literal></expr>,   <expr><literal type="number">79</literal></expr>,   <expr><literal type="number">65</literal></expr>,   <expr><literal type="number">65</literal></expr>,  <expr><literal type="number">137</literal></expr>,
       <expr><literal type="number">94</literal></expr>,  <expr><literal type="number">132</literal></expr>,   <expr><literal type="number">66</literal></expr>,   <expr><literal type="number">74</literal></expr>,   <expr><literal type="number">75</literal></expr>,   <expr><literal type="number">75</literal></expr>,   <expr><literal type="number">56</literal></expr>,   <expr><literal type="number">56</literal></expr>,   <expr><literal type="number">56</literal></expr>,   <expr><literal type="number">59</literal></expr>,
       <expr><literal type="number">59</literal></expr>,  <expr><literal type="number">105</literal></expr>,  <expr><literal type="number">105</literal></expr>,  <expr><literal type="number">127</literal></expr>,   <expr><literal type="number">76</literal></expr>,   <expr><literal type="number">84</literal></expr>,   <expr><literal type="number">85</literal></expr>,   <expr><literal type="number">85</literal></expr>,   <expr><literal type="number">62</literal></expr>,   <expr><literal type="number">62</literal></expr>,
      <expr><literal type="number">103</literal></expr>,  <expr><literal type="number">103</literal></expr>,  <expr><literal type="number">122</literal></expr>,   <expr><literal type="number">66</literal></expr>,   <expr><literal type="number">58</literal></expr>,   <expr><literal type="number">66</literal></expr>,   <expr><literal type="number">86</literal></expr>,   <expr><literal type="number">88</literal></expr>,   <expr><literal type="number">89</literal></expr>,   <expr><literal type="number">89</literal></expr>,

       <expr><literal type="number">97</literal></expr>,  <expr><literal type="number">107</literal></expr>,   <expr><literal type="number">78</literal></expr>,  <expr><literal type="number">112</literal></expr>,   <expr><literal type="number">90</literal></expr>,  <expr><literal type="number">108</literal></expr>,   <expr><literal type="number">79</literal></expr>,  <expr><literal type="number">113</literal></expr>,   <expr><literal type="number">91</literal></expr>,  <expr><literal type="number">101</literal></expr>,
      <expr><literal type="number">116</literal></expr>,  <expr><literal type="number">119</literal></expr>,  <expr><literal type="number">101</literal></expr>,  <expr><literal type="number">118</literal></expr>,  <expr><literal type="number">117</literal></expr>,  <expr><literal type="number">101</literal></expr>,  <expr><literal type="number">101</literal></expr>,  <expr><literal type="number">101</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">101</literal></expr>,
      <expr><literal type="number">104</literal></expr>,  <expr><literal type="number">104</literal></expr>,  <expr><literal type="number">103</literal></expr>,  <expr><literal type="number">103</literal></expr>,  <expr><literal type="number">105</literal></expr>,  <expr><literal type="number">105</literal></expr>,  <expr><literal type="number">101</literal></expr>,   <expr><literal type="number">66</literal></expr>,  <expr><literal type="number">114</literal></expr>,  <expr><literal type="number">101</literal></expr>,
      <expr><literal type="number">105</literal></expr>,  <expr><literal type="number">105</literal></expr>,  <expr><literal type="number">101</literal></expr>,  <expr><literal type="number">101</literal></expr>,  <expr><literal type="number">101</literal></expr>,  <expr><literal type="number">107</literal></expr>,  <expr><literal type="number">101</literal></expr>,  <expr><literal type="number">140</literal></expr>,  <expr><literal type="number">140</literal></expr>,  <expr><literal type="number">108</literal></expr>,
      <expr><literal type="number">124</literal></expr>,  <expr><literal type="number">125</literal></expr>,  <expr><literal type="number">125</literal></expr>,  <expr><literal type="number">112</literal></expr>,  <expr><literal type="number">116</literal></expr>,  <expr><literal type="number">107</literal></expr>,  <expr><literal type="number">112</literal></expr>,  <expr><literal type="number">113</literal></expr>,  <expr><literal type="number">117</literal></expr>,  <expr><literal type="number">142</literal></expr>,
      <expr><literal type="number">147</literal></expr>,  <expr><literal type="number">126</literal></expr>,  <expr><literal type="number">129</literal></expr>,  <expr><literal type="number">130</literal></expr>,  <expr><literal type="number">130</literal></expr>,  <expr><literal type="number">145</literal></expr>,  <expr><literal type="number">145</literal></expr>,  <expr><literal type="number">150</literal></expr>,  <expr><literal type="number">150</literal></expr>,  <expr><literal type="number">140</literal></expr>,
      <expr><literal type="number">140</literal></expr>,  <expr><literal type="number">145</literal></expr>,  <expr><literal type="number">145</literal></expr>,  <expr><literal type="number">131</literal></expr>,  <expr><literal type="number">134</literal></expr>,  <expr><literal type="number">135</literal></expr>,  <expr><literal type="number">135</literal></expr>,  <expr><literal type="number">116</literal></expr>,  <expr><literal type="number">107</literal></expr>,  <expr><literal type="number">112</literal></expr>,
      <expr><literal type="number">116</literal></expr>,  <expr><literal type="number">152</literal></expr>,  <expr><literal type="number">142</literal></expr>,  <expr><literal type="number">147</literal></expr>,  <expr><literal type="number">152</literal></expr>,  <expr><literal type="number">136</literal></expr>,  <expr><literal type="number">124</literal></expr>,  <expr><literal type="number">125</literal></expr>,  <expr><literal type="number">125</literal></expr>,  <expr><literal type="number">150</literal></expr>,
      <expr><literal type="number">150</literal></expr>,  <expr><literal type="number">109</literal></expr>,   <expr><literal type="number">58</literal></expr>,   <expr><literal type="number">97</literal></expr>,   <expr><literal type="number">82</literal></expr>,   <expr><literal type="number">80</literal></expr>,   <expr><literal type="number">72</literal></expr>,  <expr><literal type="number">126</literal></expr>,  <expr><literal type="number">124</literal></expr>,  <expr><literal type="number">125</literal></expr>,
      <expr><literal type="number">125</literal></expr>,   <expr><literal type="number">71</literal></expr>,   <expr><literal type="number">70</literal></expr>,   <expr><literal type="number">69</literal></expr>,   <expr><literal type="number">67</literal></expr>,   <expr><literal type="number">63</literal></expr>,   <expr><literal type="number">61</literal></expr>,  <expr><literal type="number">154</literal></expr>,   <expr><literal type="number">52</literal></expr>,  <expr><literal type="number">126</literal></expr>,

      <expr><literal type="number">124</literal></expr>,  <expr><literal type="number">125</literal></expr>,  <expr><literal type="number">125</literal></expr>,   <expr><literal type="number">52</literal></expr>,   <expr><literal type="number">46</literal></expr>,   <expr><literal type="number">46</literal></expr>,   <expr><literal type="number">44</literal></expr>,   <expr><literal type="number">44</literal></expr>,   <expr><literal type="number">38</literal></expr>,   <expr><literal type="number">38</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">143</literal></expr>,  <expr><literal type="number">129</literal></expr>,  <expr><literal type="number">130</literal></expr>,  <expr><literal type="number">130</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">131</literal></expr>,  <expr><literal type="number">129</literal></expr>,  <expr><literal type="number">130</literal></expr>,  <expr><literal type="number">130</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">131</literal></expr>,  <expr><literal type="number">129</literal></expr>,  <expr><literal type="number">130</literal></expr>,  <expr><literal type="number">130</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">148</literal></expr>,  <expr><literal type="number">134</literal></expr>,  <expr><literal type="number">135</literal></expr>,
      <expr><literal type="number">135</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">136</literal></expr>,
      <expr><literal type="number">134</literal></expr>,  <expr><literal type="number">135</literal></expr>,  <expr><literal type="number">135</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">136</literal></expr>,  <expr><literal type="number">134</literal></expr>,  <expr><literal type="number">135</literal></expr>,  <expr><literal type="number">135</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">153</literal></expr>,  <expr><literal type="number">124</literal></expr>,  <expr><literal type="number">125</literal></expr>,  <expr><literal type="number">125</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">143</literal></expr>,  <expr><literal type="number">129</literal></expr>,  <expr><literal type="number">130</literal></expr>,  <expr><literal type="number">130</literal></expr>,  <expr><literal type="number">154</literal></expr>,

      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">148</literal></expr>,  <expr><literal type="number">134</literal></expr>,  <expr><literal type="number">135</literal></expr>,
      <expr><literal type="number">135</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">153</literal></expr>,
       <expr><literal type="number">37</literal></expr>,   <expr><literal type="number">37</literal></expr>,   <expr><literal type="number">37</literal></expr>,   <expr><literal type="number">37</literal></expr>,   <expr><literal type="number">37</literal></expr>,   <expr><literal type="number">37</literal></expr>,   <expr><literal type="number">37</literal></expr>,   <expr><literal type="number">37</literal></expr>,   <expr><literal type="number">37</literal></expr>,   <expr><literal type="number">37</literal></expr>,
       <expr><literal type="number">37</literal></expr>,   <expr><literal type="number">37</literal></expr>,   <expr><literal type="number">37</literal></expr>,   <expr><literal type="number">39</literal></expr>,   <expr><literal type="number">39</literal></expr>,   <expr><literal type="number">39</literal></expr>,   <expr><literal type="number">39</literal></expr>,   <expr><literal type="number">39</literal></expr>,   <expr><literal type="number">39</literal></expr>,   <expr><literal type="number">39</literal></expr>,
       <expr><literal type="number">39</literal></expr>,   <expr><literal type="number">39</literal></expr>,   <expr><literal type="number">39</literal></expr>,   <expr><literal type="number">39</literal></expr>,   <expr><literal type="number">39</literal></expr>,   <expr><literal type="number">39</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">43</literal></expr>,
       <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">45</literal></expr>,
       <expr><literal type="number">45</literal></expr>,   <expr><literal type="number">45</literal></expr>,   <expr><literal type="number">45</literal></expr>,   <expr><literal type="number">45</literal></expr>,   <expr><literal type="number">45</literal></expr>,   <expr><literal type="number">45</literal></expr>,   <expr><literal type="number">45</literal></expr>,   <expr><literal type="number">45</literal></expr>,   <expr><literal type="number">45</literal></expr>,   <expr><literal type="number">45</literal></expr>,
       <expr><literal type="number">45</literal></expr>,   <expr><literal type="number">45</literal></expr>,   <expr><literal type="number">47</literal></expr>,   <expr><literal type="number">47</literal></expr>,   <expr><literal type="number">47</literal></expr>,   <expr><literal type="number">47</literal></expr>,   <expr><literal type="number">47</literal></expr>,   <expr><literal type="number">47</literal></expr>,   <expr><literal type="number">47</literal></expr>,   <expr><literal type="number">47</literal></expr>,
       <expr><literal type="number">47</literal></expr>,   <expr><literal type="number">47</literal></expr>,   <expr><literal type="number">47</literal></expr>,   <expr><literal type="number">47</literal></expr>,   <expr><literal type="number">47</literal></expr>,   <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">51</literal></expr>,
       <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">53</literal></expr>,   <expr><literal type="number">53</literal></expr>,

       <expr><literal type="number">53</literal></expr>,   <expr><literal type="number">53</literal></expr>,   <expr><literal type="number">53</literal></expr>,   <expr><literal type="number">53</literal></expr>,   <expr><literal type="number">53</literal></expr>,   <expr><literal type="number">53</literal></expr>,   <expr><literal type="number">53</literal></expr>,   <expr><literal type="number">53</literal></expr>,   <expr><literal type="number">53</literal></expr>,   <expr><literal type="number">53</literal></expr>,
       <expr><literal type="number">53</literal></expr>,   <expr><literal type="number">57</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,   <expr><literal type="number">57</literal></expr>,   <expr><literal type="number">57</literal></expr>,   <expr><literal type="number">60</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,   <expr><literal type="number">60</literal></expr>,   <expr><literal type="number">60</literal></expr>,   <expr><literal type="number">60</literal></expr>,   <expr><literal type="number">68</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,   <expr><literal type="number">68</literal></expr>,   <expr><literal type="number">68</literal></expr>,
       <expr><literal type="number">68</literal></expr>,   <expr><literal type="number">73</literal></expr>,   <expr><literal type="number">73</literal></expr>,   <expr><literal type="number">73</literal></expr>,   <expr><literal type="number">73</literal></expr>,   <expr><literal type="number">73</literal></expr>,   <expr><literal type="number">73</literal></expr>,  <expr><literal type="number">154</literal></expr>,   <expr><literal type="number">73</literal></expr>,   <expr><literal type="number">73</literal></expr>,
       <expr><literal type="number">73</literal></expr>,   <expr><literal type="number">73</literal></expr>,   <expr><literal type="number">73</literal></expr>,   <expr><literal type="number">73</literal></expr>,   <expr><literal type="number">77</literal></expr>,   <expr><literal type="number">77</literal></expr>,   <expr><literal type="number">77</literal></expr>,   <expr><literal type="number">77</literal></expr>,   <expr><literal type="number">77</literal></expr>,   <expr><literal type="number">77</literal></expr>,
       <expr><literal type="number">77</literal></expr>,  <expr><literal type="number">154</literal></expr>,   <expr><literal type="number">77</literal></expr>,   <expr><literal type="number">77</literal></expr>,   <expr><literal type="number">77</literal></expr>,   <expr><literal type="number">77</literal></expr>,   <expr><literal type="number">77</literal></expr>,   <expr><literal type="number">81</literal></expr>,   <expr><literal type="number">81</literal></expr>,   <expr><literal type="number">81</literal></expr>,
       <expr><literal type="number">81</literal></expr>,  <expr><literal type="number">154</literal></expr>,   <expr><literal type="number">81</literal></expr>,   <expr><literal type="number">81</literal></expr>,   <expr><literal type="number">81</literal></expr>,   <expr><literal type="number">81</literal></expr>,   <expr><literal type="number">81</literal></expr>,   <expr><literal type="number">81</literal></expr>,   <expr><literal type="number">81</literal></expr>,   <expr><literal type="number">81</literal></expr>,
       <expr><literal type="number">83</literal></expr>,   <expr><literal type="number">83</literal></expr>,   <expr><literal type="number">83</literal></expr>,   <expr><literal type="number">83</literal></expr>,   <expr><literal type="number">83</literal></expr>,   <expr><literal type="number">83</literal></expr>,  <expr><literal type="number">154</literal></expr>,   <expr><literal type="number">83</literal></expr>,   <expr><literal type="number">83</literal></expr>,   <expr><literal type="number">83</literal></expr>,
       <expr><literal type="number">83</literal></expr>,   <expr><literal type="number">83</literal></expr>,   <expr><literal type="number">83</literal></expr>,   <expr><literal type="number">87</literal></expr>,   <expr><literal type="number">87</literal></expr>,   <expr><literal type="number">87</literal></expr>,   <expr><literal type="number">87</literal></expr>,   <expr><literal type="number">87</literal></expr>,   <expr><literal type="number">87</literal></expr>,  <expr><literal type="number">154</literal></expr>,
       <expr><literal type="number">87</literal></expr>,   <expr><literal type="number">87</literal></expr>,   <expr><literal type="number">87</literal></expr>,   <expr><literal type="number">87</literal></expr>,   <expr><literal type="number">87</literal></expr>,   <expr><literal type="number">92</literal></expr>,   <expr><literal type="number">92</literal></expr>,   <expr><literal type="number">92</literal></expr>,   <expr><literal type="number">92</literal></expr>,   <expr><literal type="number">92</literal></expr>,

       <expr><literal type="number">92</literal></expr>,   <expr><literal type="number">92</literal></expr>,   <expr><literal type="number">92</literal></expr>,   <expr><literal type="number">92</literal></expr>,   <expr><literal type="number">92</literal></expr>,   <expr><literal type="number">92</literal></expr>,   <expr><literal type="number">92</literal></expr>,   <expr><literal type="number">92</literal></expr>,   <expr><literal type="number">95</literal></expr>,   <expr><literal type="number">95</literal></expr>,
       <expr><literal type="number">95</literal></expr>,   <expr><literal type="number">95</literal></expr>,   <expr><literal type="number">95</literal></expr>,   <expr><literal type="number">95</literal></expr>,  <expr><literal type="number">154</literal></expr>,   <expr><literal type="number">95</literal></expr>,   <expr><literal type="number">95</literal></expr>,   <expr><literal type="number">95</literal></expr>,   <expr><literal type="number">95</literal></expr>,   <expr><literal type="number">95</literal></expr>,
       <expr><literal type="number">95</literal></expr>,   <expr><literal type="number">96</literal></expr>,   <expr><literal type="number">96</literal></expr>,   <expr><literal type="number">96</literal></expr>,   <expr><literal type="number">96</literal></expr>,   <expr><literal type="number">96</literal></expr>,  <expr><literal type="number">154</literal></expr>,   <expr><literal type="number">96</literal></expr>,   <expr><literal type="number">96</literal></expr>,   <expr><literal type="number">96</literal></expr>,
       <expr><literal type="number">96</literal></expr>,   <expr><literal type="number">96</literal></expr>,   <expr><literal type="number">96</literal></expr>,   <expr><literal type="number">96</literal></expr>,   <expr><literal type="number">98</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,   <expr><literal type="number">98</literal></expr>,
       <expr><literal type="number">98</literal></expr>,   <expr><literal type="number">99</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,   <expr><literal type="number">99</literal></expr>,   <expr><literal type="number">99</literal></expr>,   <expr><literal type="number">99</literal></expr>,  <expr><literal type="number">100</literal></expr>,  <expr><literal type="number">100</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">100</literal></expr>,  <expr><literal type="number">100</literal></expr>,  <expr><literal type="number">100</literal></expr>,  <expr><literal type="number">100</literal></expr>,  <expr><literal type="number">100</literal></expr>,  <expr><literal type="number">100</literal></expr>,  <expr><literal type="number">100</literal></expr>,  <expr><literal type="number">100</literal></expr>,  <expr><literal type="number">100</literal></expr>,
      <expr><literal type="number">100</literal></expr>,  <expr><literal type="number">102</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">102</literal></expr>,  <expr><literal type="number">102</literal></expr>,  <expr><literal type="number">106</literal></expr>,  <expr><literal type="number">106</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">106</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">106</literal></expr>,  <expr><literal type="number">110</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">110</literal></expr>,
      <expr><literal type="number">110</literal></expr>,  <expr><literal type="number">111</literal></expr>,  <expr><literal type="number">111</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">111</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">111</literal></expr>,  <expr><literal type="number">115</literal></expr>,
      <expr><literal type="number">115</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">115</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">115</literal></expr>,  <expr><literal type="number">120</literal></expr>,  <expr><literal type="number">120</literal></expr>,  <expr><literal type="number">121</literal></expr>,

      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">121</literal></expr>,  <expr><literal type="number">121</literal></expr>,  <expr><literal type="number">121</literal></expr>,  <expr><literal type="number">123</literal></expr>,  <expr><literal type="number">123</literal></expr>,  <expr><literal type="number">123</literal></expr>,  <expr><literal type="number">123</literal></expr>,
      <expr><literal type="number">123</literal></expr>,  <expr><literal type="number">123</literal></expr>,  <expr><literal type="number">123</literal></expr>,  <expr><literal type="number">123</literal></expr>,  <expr><literal type="number">123</literal></expr>,  <expr><literal type="number">123</literal></expr>,  <expr><literal type="number">123</literal></expr>,  <expr><literal type="number">123</literal></expr>,  <expr><literal type="number">123</literal></expr>,  <expr><literal type="number">128</literal></expr>,
      <expr><literal type="number">128</literal></expr>,  <expr><literal type="number">128</literal></expr>,  <expr><literal type="number">128</literal></expr>,  <expr><literal type="number">128</literal></expr>,  <expr><literal type="number">128</literal></expr>,  <expr><literal type="number">128</literal></expr>,  <expr><literal type="number">128</literal></expr>,  <expr><literal type="number">128</literal></expr>,  <expr><literal type="number">128</literal></expr>,  <expr><literal type="number">128</literal></expr>,
      <expr><literal type="number">128</literal></expr>,  <expr><literal type="number">128</literal></expr>,  <expr><literal type="number">133</literal></expr>,  <expr><literal type="number">133</literal></expr>,  <expr><literal type="number">133</literal></expr>,  <expr><literal type="number">133</literal></expr>,  <expr><literal type="number">133</literal></expr>,  <expr><literal type="number">133</literal></expr>,  <expr><literal type="number">133</literal></expr>,  <expr><literal type="number">133</literal></expr>,
      <expr><literal type="number">133</literal></expr>,  <expr><literal type="number">133</literal></expr>,  <expr><literal type="number">133</literal></expr>,  <expr><literal type="number">133</literal></expr>,  <expr><literal type="number">133</literal></expr>,  <expr><literal type="number">138</literal></expr>,  <expr><literal type="number">138</literal></expr>,  <expr><literal type="number">139</literal></expr>,  <expr><literal type="number">139</literal></expr>,  <expr><literal type="number">139</literal></expr>,
      <expr><literal type="number">139</literal></expr>,  <expr><literal type="number">139</literal></expr>,  <expr><literal type="number">139</literal></expr>,  <expr><literal type="number">139</literal></expr>,  <expr><literal type="number">139</literal></expr>,  <expr><literal type="number">139</literal></expr>,  <expr><literal type="number">139</literal></expr>,  <expr><literal type="number">139</literal></expr>,  <expr><literal type="number">139</literal></expr>,  <expr><literal type="number">139</literal></expr>,
      <expr><literal type="number">141</literal></expr>,  <expr><literal type="number">141</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">141</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">141</literal></expr>,  <expr><literal type="number">144</literal></expr>,  <expr><literal type="number">144</literal></expr>,
      <expr><literal type="number">144</literal></expr>,  <expr><literal type="number">144</literal></expr>,  <expr><literal type="number">144</literal></expr>,  <expr><literal type="number">144</literal></expr>,  <expr><literal type="number">144</literal></expr>,  <expr><literal type="number">144</literal></expr>,  <expr><literal type="number">144</literal></expr>,  <expr><literal type="number">144</literal></expr>,  <expr><literal type="number">144</literal></expr>,  <expr><literal type="number">144</literal></expr>,
      <expr><literal type="number">144</literal></expr>,  <expr><literal type="number">146</literal></expr>,  <expr><literal type="number">146</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">146</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">146</literal></expr>,  <expr><literal type="number">149</literal></expr>,
      <expr><literal type="number">149</literal></expr>,  <expr><literal type="number">149</literal></expr>,  <expr><literal type="number">149</literal></expr>,  <expr><literal type="number">149</literal></expr>,  <expr><literal type="number">149</literal></expr>,  <expr><literal type="number">149</literal></expr>,  <expr><literal type="number">149</literal></expr>,  <expr><literal type="number">149</literal></expr>,  <expr><literal type="number">149</literal></expr>,  <expr><literal type="number">149</literal></expr>,

      <expr><literal type="number">149</literal></expr>,  <expr><literal type="number">149</literal></expr>,  <expr><literal type="number">151</literal></expr>,  <expr><literal type="number">151</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">151</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">151</literal></expr>,
       <expr><literal type="number">17</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>
    }</block></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>flex_int16_t</name></type> <name><name>yy_chk</name><index>[<expr><literal type="number">738</literal></expr>]</index></name> <init>=
    <expr><block>{   <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,
        <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,
        <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">5</literal></expr>,   <expr><literal type="number">15</literal></expr>,  <expr><literal type="number">152</literal></expr>,    <expr><literal type="number">5</literal></expr>,
      <expr><literal type="number">147</literal></expr>,   <expr><literal type="number">15</literal></expr>,    <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">5</literal></expr>,   <expr><literal type="number">11</literal></expr>,    <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">6</literal></expr>,   <expr><literal type="number">28</literal></expr>,   <expr><literal type="number">28</literal></expr>,
        <expr><literal type="number">6</literal></expr>,   <expr><literal type="number">11</literal></expr>,   <expr><literal type="number">12</literal></expr>,    <expr><literal type="number">6</literal></expr>,    <expr><literal type="number">6</literal></expr>,    <expr><literal type="number">6</literal></expr>,   <expr><literal type="number">16</literal></expr>,    <expr><literal type="number">6</literal></expr>,   <expr><literal type="number">12</literal></expr>,   <expr><literal type="number">23</literal></expr>,
       <expr><literal type="number">16</literal></expr>,   <expr><literal type="number">19</literal></expr>,   <expr><literal type="number">19</literal></expr>,   <expr><literal type="number">19</literal></expr>,   <expr><literal type="number">20</literal></expr>,   <expr><literal type="number">20</literal></expr>,   <expr><literal type="number">20</literal></expr>,   <expr><literal type="number">11</literal></expr>,   <expr><literal type="number">23</literal></expr>,   <expr><literal type="number">23</literal></expr>,
       <expr><literal type="number">50</literal></expr>,  <expr><literal type="number">142</literal></expr>,   <expr><literal type="number">41</literal></expr>,  <expr><literal type="number">121</literal></expr>,   <expr><literal type="number">12</literal></expr>,   <expr><literal type="number">30</literal></expr>,   <expr><literal type="number">41</literal></expr>,   <expr><literal type="number">30</literal></expr>,   <expr><literal type="number">30</literal></expr>,  <expr><literal type="number">119</literal></expr>,
       <expr><literal type="number">50</literal></expr>,  <expr><literal type="number">117</literal></expr>,   <expr><literal type="number">30</literal></expr>,   <expr><literal type="number">38</literal></expr>,   <expr><literal type="number">38</literal></expr>,   <expr><literal type="number">38</literal></expr>,   <expr><literal type="number">56</literal></expr>,   <expr><literal type="number">56</literal></expr>,   <expr><literal type="number">56</literal></expr>,   <expr><literal type="number">59</literal></expr>,
       <expr><literal type="number">59</literal></expr>,  <expr><literal type="number">104</literal></expr>,  <expr><literal type="number">104</literal></expr>,  <expr><literal type="number">113</literal></expr>,   <expr><literal type="number">38</literal></expr>,   <expr><literal type="number">46</literal></expr>,   <expr><literal type="number">46</literal></expr>,   <expr><literal type="number">46</literal></expr>,   <expr><literal type="number">62</literal></expr>,   <expr><literal type="number">62</literal></expr>,
       <expr><literal type="number">64</literal></expr>,   <expr><literal type="number">64</literal></expr>,  <expr><literal type="number">108</literal></expr>,   <expr><literal type="number">62</literal></expr>,   <expr><literal type="number">99</literal></expr>,   <expr><literal type="number">64</literal></expr>,   <expr><literal type="number">46</literal></expr>,   <expr><literal type="number">49</literal></expr>,   <expr><literal type="number">49</literal></expr>,   <expr><literal type="number">49</literal></expr>,

       <expr><literal type="number">98</literal></expr>,   <expr><literal type="number">75</literal></expr>,   <expr><literal type="number">78</literal></expr>,   <expr><literal type="number">85</literal></expr>,   <expr><literal type="number">49</literal></expr>,   <expr><literal type="number">75</literal></expr>,   <expr><literal type="number">78</literal></expr>,   <expr><literal type="number">85</literal></expr>,   <expr><literal type="number">49</literal></expr>,   <expr><literal type="number">61</literal></expr>,
       <expr><literal type="number">89</literal></expr>,   <expr><literal type="number">93</literal></expr>,   <expr><literal type="number">61</literal></expr>,   <expr><literal type="number">91</literal></expr>,   <expr><literal type="number">89</literal></expr>,   <expr><literal type="number">61</literal></expr>,   <expr><literal type="number">61</literal></expr>,   <expr><literal type="number">61</literal></expr>,   <expr><literal type="number">88</literal></expr>,   <expr><literal type="number">61</literal></expr>,
       <expr><literal type="number">66</literal></expr>,   <expr><literal type="number">66</literal></expr>,  <expr><literal type="number">103</literal></expr>,  <expr><literal type="number">103</literal></expr>,   <expr><literal type="number">66</literal></expr>,   <expr><literal type="number">66</literal></expr>,  <expr><literal type="number">101</literal></expr>,  <expr><literal type="number">103</literal></expr>,   <expr><literal type="number">86</literal></expr>,  <expr><literal type="number">101</literal></expr>,
      <expr><literal type="number">105</literal></expr>,  <expr><literal type="number">105</literal></expr>,  <expr><literal type="number">101</literal></expr>,  <expr><literal type="number">101</literal></expr>,  <expr><literal type="number">101</literal></expr>,  <expr><literal type="number">106</literal></expr>,  <expr><literal type="number">101</literal></expr>,  <expr><literal type="number">122</literal></expr>,  <expr><literal type="number">122</literal></expr>,  <expr><literal type="number">106</literal></expr>,
      <expr><literal type="number">109</literal></expr>,  <expr><literal type="number">109</literal></expr>,  <expr><literal type="number">109</literal></expr>,  <expr><literal type="number">111</literal></expr>,  <expr><literal type="number">115</literal></expr>,  <expr><literal type="number">125</literal></expr>,  <expr><literal type="number">130</literal></expr>,  <expr><literal type="number">111</literal></expr>,  <expr><literal type="number">115</literal></expr>,  <expr><literal type="number">125</literal></expr>,
      <expr><literal type="number">130</literal></expr>,  <expr><literal type="number">109</literal></expr>,  <expr><literal type="number">114</literal></expr>,  <expr><literal type="number">114</literal></expr>,  <expr><literal type="number">114</literal></expr>,  <expr><literal type="number">127</literal></expr>,  <expr><literal type="number">127</literal></expr>,  <expr><literal type="number">132</literal></expr>,  <expr><literal type="number">132</literal></expr>,  <expr><literal type="number">139</literal></expr>,
      <expr><literal type="number">139</literal></expr>,  <expr><literal type="number">144</literal></expr>,  <expr><literal type="number">144</literal></expr>,  <expr><literal type="number">114</literal></expr>,  <expr><literal type="number">118</literal></expr>,  <expr><literal type="number">118</literal></expr>,  <expr><literal type="number">118</literal></expr>,  <expr><literal type="number">135</literal></expr>,  <expr><literal type="number">140</literal></expr>,  <expr><literal type="number">145</literal></expr>,
      <expr><literal type="number">150</literal></expr>,  <expr><literal type="number">135</literal></expr>,  <expr><literal type="number">140</literal></expr>,  <expr><literal type="number">145</literal></expr>,  <expr><literal type="number">150</literal></expr>,  <expr><literal type="number">118</literal></expr>,  <expr><literal type="number">123</literal></expr>,  <expr><literal type="number">123</literal></expr>,  <expr><literal type="number">123</literal></expr>,  <expr><literal type="number">149</literal></expr>,
      <expr><literal type="number">149</literal></expr>,   <expr><literal type="number">76</literal></expr>,   <expr><literal type="number">60</literal></expr>,   <expr><literal type="number">55</literal></expr>,   <expr><literal type="number">44</literal></expr>,   <expr><literal type="number">42</literal></expr>,   <expr><literal type="number">36</literal></expr>,  <expr><literal type="number">123</literal></expr>,  <expr><literal type="number">124</literal></expr>,  <expr><literal type="number">124</literal></expr>,
      <expr><literal type="number">124</literal></expr>,   <expr><literal type="number">35</literal></expr>,   <expr><literal type="number">34</literal></expr>,   <expr><literal type="number">33</literal></expr>,   <expr><literal type="number">31</literal></expr>,   <expr><literal type="number">29</literal></expr>,   <expr><literal type="number">27</literal></expr>,   <expr><literal type="number">17</literal></expr>,   <expr><literal type="number">14</literal></expr>,  <expr><literal type="number">124</literal></expr>,

      <expr><literal type="number">126</literal></expr>,  <expr><literal type="number">126</literal></expr>,  <expr><literal type="number">126</literal></expr>,   <expr><literal type="number">13</literal></expr>,   <expr><literal type="number">10</literal></expr>,    <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">8</literal></expr>,    <expr><literal type="number">7</literal></expr>,    <expr><literal type="number">4</literal></expr>,    <expr><literal type="number">3</literal></expr>,
        <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">126</literal></expr>,  <expr><literal type="number">128</literal></expr>,  <expr><literal type="number">128</literal></expr>,  <expr><literal type="number">128</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">128</literal></expr>,  <expr><literal type="number">129</literal></expr>,  <expr><literal type="number">129</literal></expr>,  <expr><literal type="number">129</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">129</literal></expr>,  <expr><literal type="number">131</literal></expr>,  <expr><literal type="number">131</literal></expr>,  <expr><literal type="number">131</literal></expr>,    <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">131</literal></expr>,  <expr><literal type="number">133</literal></expr>,  <expr><literal type="number">133</literal></expr>,
      <expr><literal type="number">133</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">133</literal></expr>,
      <expr><literal type="number">134</literal></expr>,  <expr><literal type="number">134</literal></expr>,  <expr><literal type="number">134</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">134</literal></expr>,  <expr><literal type="number">136</literal></expr>,  <expr><literal type="number">136</literal></expr>,  <expr><literal type="number">136</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">136</literal></expr>,  <expr><literal type="number">143</literal></expr>,  <expr><literal type="number">143</literal></expr>,  <expr><literal type="number">143</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">143</literal></expr>,  <expr><literal type="number">148</literal></expr>,  <expr><literal type="number">148</literal></expr>,  <expr><literal type="number">148</literal></expr>,    <expr><literal type="number">0</literal></expr>,

        <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">148</literal></expr>,  <expr><literal type="number">153</literal></expr>,  <expr><literal type="number">153</literal></expr>,
      <expr><literal type="number">153</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">153</literal></expr>,
      <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">155</literal></expr>,
      <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">156</literal></expr>,
      <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">157</literal></expr>,
      <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">158</literal></expr>,
      <expr><literal type="number">158</literal></expr>,  <expr><literal type="number">158</literal></expr>,  <expr><literal type="number">158</literal></expr>,  <expr><literal type="number">158</literal></expr>,  <expr><literal type="number">158</literal></expr>,  <expr><literal type="number">158</literal></expr>,  <expr><literal type="number">158</literal></expr>,  <expr><literal type="number">158</literal></expr>,  <expr><literal type="number">158</literal></expr>,  <expr><literal type="number">158</literal></expr>,
      <expr><literal type="number">158</literal></expr>,  <expr><literal type="number">158</literal></expr>,  <expr><literal type="number">159</literal></expr>,  <expr><literal type="number">159</literal></expr>,  <expr><literal type="number">159</literal></expr>,  <expr><literal type="number">159</literal></expr>,  <expr><literal type="number">159</literal></expr>,  <expr><literal type="number">159</literal></expr>,  <expr><literal type="number">159</literal></expr>,  <expr><literal type="number">159</literal></expr>,
      <expr><literal type="number">159</literal></expr>,  <expr><literal type="number">159</literal></expr>,  <expr><literal type="number">159</literal></expr>,  <expr><literal type="number">159</literal></expr>,  <expr><literal type="number">159</literal></expr>,  <expr><literal type="number">160</literal></expr>,  <expr><literal type="number">160</literal></expr>,  <expr><literal type="number">160</literal></expr>,  <expr><literal type="number">160</literal></expr>,  <expr><literal type="number">160</literal></expr>,
      <expr><literal type="number">160</literal></expr>,  <expr><literal type="number">160</literal></expr>,  <expr><literal type="number">160</literal></expr>,  <expr><literal type="number">160</literal></expr>,  <expr><literal type="number">160</literal></expr>,  <expr><literal type="number">160</literal></expr>,  <expr><literal type="number">160</literal></expr>,  <expr><literal type="number">160</literal></expr>,  <expr><literal type="number">161</literal></expr>,  <expr><literal type="number">161</literal></expr>,

      <expr><literal type="number">161</literal></expr>,  <expr><literal type="number">161</literal></expr>,  <expr><literal type="number">161</literal></expr>,  <expr><literal type="number">161</literal></expr>,  <expr><literal type="number">161</literal></expr>,  <expr><literal type="number">161</literal></expr>,  <expr><literal type="number">161</literal></expr>,  <expr><literal type="number">161</literal></expr>,  <expr><literal type="number">161</literal></expr>,  <expr><literal type="number">161</literal></expr>,
      <expr><literal type="number">161</literal></expr>,  <expr><literal type="number">162</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">162</literal></expr>,  <expr><literal type="number">162</literal></expr>,  <expr><literal type="number">163</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">163</literal></expr>,  <expr><literal type="number">163</literal></expr>,  <expr><literal type="number">163</literal></expr>,  <expr><literal type="number">164</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">164</literal></expr>,  <expr><literal type="number">164</literal></expr>,
      <expr><literal type="number">164</literal></expr>,  <expr><literal type="number">165</literal></expr>,  <expr><literal type="number">165</literal></expr>,  <expr><literal type="number">165</literal></expr>,  <expr><literal type="number">165</literal></expr>,  <expr><literal type="number">165</literal></expr>,  <expr><literal type="number">165</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">165</literal></expr>,  <expr><literal type="number">165</literal></expr>,
      <expr><literal type="number">165</literal></expr>,  <expr><literal type="number">165</literal></expr>,  <expr><literal type="number">165</literal></expr>,  <expr><literal type="number">165</literal></expr>,  <expr><literal type="number">166</literal></expr>,  <expr><literal type="number">166</literal></expr>,  <expr><literal type="number">166</literal></expr>,  <expr><literal type="number">166</literal></expr>,  <expr><literal type="number">166</literal></expr>,  <expr><literal type="number">166</literal></expr>,
      <expr><literal type="number">166</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">166</literal></expr>,  <expr><literal type="number">166</literal></expr>,  <expr><literal type="number">166</literal></expr>,  <expr><literal type="number">166</literal></expr>,  <expr><literal type="number">166</literal></expr>,  <expr><literal type="number">167</literal></expr>,  <expr><literal type="number">167</literal></expr>,  <expr><literal type="number">167</literal></expr>,
      <expr><literal type="number">167</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">167</literal></expr>,  <expr><literal type="number">167</literal></expr>,  <expr><literal type="number">167</literal></expr>,  <expr><literal type="number">167</literal></expr>,  <expr><literal type="number">167</literal></expr>,  <expr><literal type="number">167</literal></expr>,  <expr><literal type="number">167</literal></expr>,  <expr><literal type="number">167</literal></expr>,
      <expr><literal type="number">168</literal></expr>,  <expr><literal type="number">168</literal></expr>,  <expr><literal type="number">168</literal></expr>,  <expr><literal type="number">168</literal></expr>,  <expr><literal type="number">168</literal></expr>,  <expr><literal type="number">168</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">168</literal></expr>,  <expr><literal type="number">168</literal></expr>,  <expr><literal type="number">168</literal></expr>,
      <expr><literal type="number">168</literal></expr>,  <expr><literal type="number">168</literal></expr>,  <expr><literal type="number">168</literal></expr>,  <expr><literal type="number">169</literal></expr>,  <expr><literal type="number">169</literal></expr>,  <expr><literal type="number">169</literal></expr>,  <expr><literal type="number">169</literal></expr>,  <expr><literal type="number">169</literal></expr>,  <expr><literal type="number">169</literal></expr>,    <expr><literal type="number">0</literal></expr>,
      <expr><literal type="number">169</literal></expr>,  <expr><literal type="number">169</literal></expr>,  <expr><literal type="number">169</literal></expr>,  <expr><literal type="number">169</literal></expr>,  <expr><literal type="number">169</literal></expr>,  <expr><literal type="number">170</literal></expr>,  <expr><literal type="number">170</literal></expr>,  <expr><literal type="number">170</literal></expr>,  <expr><literal type="number">170</literal></expr>,  <expr><literal type="number">170</literal></expr>,

      <expr><literal type="number">170</literal></expr>,  <expr><literal type="number">170</literal></expr>,  <expr><literal type="number">170</literal></expr>,  <expr><literal type="number">170</literal></expr>,  <expr><literal type="number">170</literal></expr>,  <expr><literal type="number">170</literal></expr>,  <expr><literal type="number">170</literal></expr>,  <expr><literal type="number">170</literal></expr>,  <expr><literal type="number">171</literal></expr>,  <expr><literal type="number">171</literal></expr>,
      <expr><literal type="number">171</literal></expr>,  <expr><literal type="number">171</literal></expr>,  <expr><literal type="number">171</literal></expr>,  <expr><literal type="number">171</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">171</literal></expr>,  <expr><literal type="number">171</literal></expr>,  <expr><literal type="number">171</literal></expr>,  <expr><literal type="number">171</literal></expr>,  <expr><literal type="number">171</literal></expr>,
      <expr><literal type="number">171</literal></expr>,  <expr><literal type="number">172</literal></expr>,  <expr><literal type="number">172</literal></expr>,  <expr><literal type="number">172</literal></expr>,  <expr><literal type="number">172</literal></expr>,  <expr><literal type="number">172</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">172</literal></expr>,  <expr><literal type="number">172</literal></expr>,  <expr><literal type="number">172</literal></expr>,
      <expr><literal type="number">172</literal></expr>,  <expr><literal type="number">172</literal></expr>,  <expr><literal type="number">172</literal></expr>,  <expr><literal type="number">172</literal></expr>,  <expr><literal type="number">173</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">173</literal></expr>,
      <expr><literal type="number">173</literal></expr>,  <expr><literal type="number">174</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">174</literal></expr>,  <expr><literal type="number">174</literal></expr>,  <expr><literal type="number">174</literal></expr>,  <expr><literal type="number">175</literal></expr>,  <expr><literal type="number">175</literal></expr>,
        <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">175</literal></expr>,  <expr><literal type="number">175</literal></expr>,  <expr><literal type="number">175</literal></expr>,  <expr><literal type="number">175</literal></expr>,  <expr><literal type="number">175</literal></expr>,  <expr><literal type="number">175</literal></expr>,  <expr><literal type="number">175</literal></expr>,  <expr><literal type="number">175</literal></expr>,  <expr><literal type="number">175</literal></expr>,
      <expr><literal type="number">175</literal></expr>,  <expr><literal type="number">176</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">176</literal></expr>,  <expr><literal type="number">176</literal></expr>,  <expr><literal type="number">177</literal></expr>,  <expr><literal type="number">177</literal></expr>,    <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">177</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">177</literal></expr>,  <expr><literal type="number">178</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">178</literal></expr>,
      <expr><literal type="number">178</literal></expr>,  <expr><literal type="number">179</literal></expr>,  <expr><literal type="number">179</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">179</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">179</literal></expr>,  <expr><literal type="number">180</literal></expr>,
      <expr><literal type="number">180</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">180</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">180</literal></expr>,  <expr><literal type="number">181</literal></expr>,  <expr><literal type="number">181</literal></expr>,  <expr><literal type="number">182</literal></expr>,

        <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">182</literal></expr>,  <expr><literal type="number">182</literal></expr>,  <expr><literal type="number">182</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">183</literal></expr>,
      <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">184</literal></expr>,
      <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">184</literal></expr>,
      <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">185</literal></expr>,
      <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">186</literal></expr>,  <expr><literal type="number">186</literal></expr>,  <expr><literal type="number">187</literal></expr>,  <expr><literal type="number">187</literal></expr>,  <expr><literal type="number">187</literal></expr>,
      <expr><literal type="number">187</literal></expr>,  <expr><literal type="number">187</literal></expr>,  <expr><literal type="number">187</literal></expr>,  <expr><literal type="number">187</literal></expr>,  <expr><literal type="number">187</literal></expr>,  <expr><literal type="number">187</literal></expr>,  <expr><literal type="number">187</literal></expr>,  <expr><literal type="number">187</literal></expr>,  <expr><literal type="number">187</literal></expr>,  <expr><literal type="number">187</literal></expr>,
      <expr><literal type="number">188</literal></expr>,  <expr><literal type="number">188</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">188</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">188</literal></expr>,  <expr><literal type="number">189</literal></expr>,  <expr><literal type="number">189</literal></expr>,
      <expr><literal type="number">189</literal></expr>,  <expr><literal type="number">189</literal></expr>,  <expr><literal type="number">189</literal></expr>,  <expr><literal type="number">189</literal></expr>,  <expr><literal type="number">189</literal></expr>,  <expr><literal type="number">189</literal></expr>,  <expr><literal type="number">189</literal></expr>,  <expr><literal type="number">189</literal></expr>,  <expr><literal type="number">189</literal></expr>,  <expr><literal type="number">189</literal></expr>,
      <expr><literal type="number">189</literal></expr>,  <expr><literal type="number">190</literal></expr>,  <expr><literal type="number">190</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">190</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">190</literal></expr>,  <expr><literal type="number">191</literal></expr>,
      <expr><literal type="number">191</literal></expr>,  <expr><literal type="number">191</literal></expr>,  <expr><literal type="number">191</literal></expr>,  <expr><literal type="number">191</literal></expr>,  <expr><literal type="number">191</literal></expr>,  <expr><literal type="number">191</literal></expr>,  <expr><literal type="number">191</literal></expr>,  <expr><literal type="number">191</literal></expr>,  <expr><literal type="number">191</literal></expr>,  <expr><literal type="number">191</literal></expr>,

      <expr><literal type="number">191</literal></expr>,  <expr><literal type="number">191</literal></expr>,  <expr><literal type="number">192</literal></expr>,  <expr><literal type="number">192</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">192</literal></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">192</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,
      <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>,  <expr><literal type="number">154</literal></expr>
    }</block></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>yy_state_type</name></type> <name>yy_last_accepting_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>yy_last_accepting_cpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>yy_flex_debug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yy_flex_debug</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REJECT</name></cpp:macro> <cpp:value>reject_used_but_not_detected</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yymore</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yymore_used_but_not_detected</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_MORE_ADJ</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_RESTORE_YY_MORE_OFFSET</name></cpp:macro></cpp:define>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>yytext</name></decl>;</decl_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<comment type="block">/* 
** A scanner for EMP-style numeric ranges 
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/gramparse.h"</cpp:file></cpp:include>
<comment type="block">/* Not needed now that this file is compiled as part of gram.y */</comment>
<comment type="block">/* #include "parser/parse.h" */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/scansup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse_keyword.h"</cpp:file></cpp:include>

<comment type="block">/* Avoid exit() on fatal scanner errors (a bit ugly -- see yy_fatal_error) */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fprintf</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fprintf</name><parameter_list>(<parameter><type><name>file</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>fprintf_to_ereport(fmt, msg)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fprintf_to_ereport</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>		<name>xcdepth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* depth of nesting in slash-star comments */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name>    <modifier>*</modifier></type><name>dolqstart</name></decl>;</decl_stmt>      <comment type="block">/* current $foo$ quote start string */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>extended_string</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<comment type="block">/* No reason to constrain amount of data slurped */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_READ_BUF_SIZE</name></cpp:macro> <cpp:value>16777216</cpp:value></cpp:define>

<comment type="block">/* Handles to the buffer that the lexer uses internally */</comment>


<decl_stmt><decl><type><specifier>static</specifier> <name>YY_BUFFER_STATE</name></type> <name>scanbufhandle</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_YYLLOC</name><parameter_list>()</parameter_list></cpp:macro>  <cpp:value>(orafce_sql_yylval.val.lloc = yytext - scanbuf)</cpp:value></cpp:define>                                                                                              
                                                                                                                                               
<comment type="block">/* Handles to the buffer that the lexer uses internally */</comment>                                                                                     
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>scanbuf</name></decl>;</decl_stmt>       

<comment type="block">/* flex 2.5.4 doesn't bother with a decl for this */</comment>

<function_decl><type><name>int</name></type> <name>orafce_sql_yylex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>orafce_sql_scanner_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>orafce_sql_scanner_finish</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * literalbuf is used to accumulate literal values when multiple rules
 * are needed to parse a single literal.  Call startlit to reset buffer
 * to empty, addlit to add text.  Note that the buffer is palloc'd and
 * starts life afresh on every parse cycle.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name>	   <modifier>*</modifier></type><name>literalbuf</name></decl>;</decl_stmt>		<comment type="block">/* expandable buffer */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>		<name>literallen</name></decl>;</decl_stmt>		<comment type="block">/* actual current length */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>		<name>literalalloc</name></decl>;</decl_stmt>	<comment type="block">/* current allocated buffer size */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>startlit</name><parameter_list>()</parameter_list></cpp:macro>  <cpp:value>(literalbuf[0] = '\0', literallen = 0)</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>addlit</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ytext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yleng</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>addlitchar</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>ychar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>litbufdup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>lexer_errposition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Each call to yylex must set yylloc to the location of the found token
 * (expressed as a byte offset from the start of the input text).
 * When we parse a token that requires multiple lexer rules to process,
 * this should be done in the first such rule, else yylloc will point
 * into the middle of the token.
 */</comment>

<comment type="block">/* Handles to the buffer that the lexer uses internally */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>scanbuf</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>unescape_single_char</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_pg_mbstrlen_with_len</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_pg_mbstrlen_with_len</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> 	<cpp:value>pg_mbstrlen_with_len(buf,loc)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1007</cpp:number> <cpp:file>"sqlscan.c"</cpp:file></cpp:line>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_NO_INPUT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<comment type="block">/*
 * OK, here is a short description of lex/flex rules behavior.
 * The longest pattern which matches an input string is always chosen.
 * For equal-length patterns, the first occurring in the rules list is chosen.
 * INITIAL is the starting state, to which all non-conditional rules apply.
 * Exclusive states change parsing rules while the state is active.  When in
 * an exclusive state, only those rules defined for that state apply.
 *
 * We use exclusive states for quoted strings, extended comments,
 * and to eliminate parsing troubles for numeric strings.
 * Exclusive states:
 *  &lt;xb&gt; bit string literal
 *  &lt;xc&gt; extended C-style comments
 *  &lt;xd&gt; delimited identifiers (double-quoted identifiers)
 *  &lt;xh&gt; hexadecimal numeric string
 *  &lt;xq&gt; standard quoted strings
 *  &lt;xe&gt; extended quoted strings (support backslash escape sequences)
 *  &lt;xdolq&gt; $foo$ quoted strings
 */</comment>

<comment type="block">/*
 * In order to make the world safe for Windows and Mac clients as well as
 * Unix ones, we accept either \n or \r as a newline.  A DOS-style \r\n
 * sequence will be seen as two successive newlines, but that doesn't cause
 * any problems.  Comments that start with -- and extend to the next
 * newline are treated as equivalent to a single whitespace character.
 *
 * NOTE a fine point: if there is no newline following --, we will absorb
 * everything to the end of the input as a comment.  This is correct.  Older
 * versions of Postgres failed to recognize -- as a comment if the input
 * did not end with a newline.
 *
 * XXX perhaps \f (formfeed) should be treated as a newline as well?
 *
 * XXX if you change the set of whitespace characters, fix scanner_isspace()
 * to agree, and see also the plpgsql lexer.
 */</comment>
<comment type="block">/*
 * SQL requires at least one newline in the whitespace separating
 * string literals that are to be concatenated.  Silly, but who are we
 * to argue?  Note that {whitespace_with_newline} should not have * after
 * it, whereas {whitespace} should generally have a * after it...
 */</comment>
<comment type="block">/*
 * To ensure that {quotecontinue} can be scanned without having to back up
 * if the full pattern isn't matched, we include trailing whitespace in
 * {quotestop}.  This matches all cases where {quotecontinue} fails to match,
 * except for {quote} followed by whitespace and just one "-" (not two,
 * which would start a {comment}).  To cover that we have {quotefail}.
 * The actions for {quotestop} and {quotefail} must throw back characters
 * beyond the quote proper.
 */</comment>
<comment type="block">/* Bit string
 * It is tempting to scan the string for only those characters
 * which are allowed. However, this leads to silently swallowed
 * characters if illegal characters are included in the string.
 * For example, if xbinside is [01] then B'ABCD' is interpreted
 * as a zero-length string, and the ABCD' is lost!
 * Better to pass the string forward and let the input routines
 * validate the contents.
 */</comment>
<comment type="block">/* Hexadecimal number */</comment>
<comment type="block">/* National character */</comment>
<comment type="block">/* Quoted string that allows backslash escapes */</comment>
<comment type="block">/* Extended quote
 * xqdouble implements embedded quote, ''''
 */</comment>
<comment type="block">/* $foo$ style quotes ("dollar quoting")
 * The quoted string starts with $foo$ where "foo" is an optional string
 * in the form of an identifier, except that it may not contain "$", 
 * and extends to the first occurrence of an identical string.  
 * There is *no* processing of the quoted text.
 *
 * {dolqfailed} is an error rule to avoid scanner backup when {dolqdelim}
 * fails to match its trailing "$".
 */</comment>
<comment type="block">/* Double quote
 * Allows embedded spaces and other special characters into identifiers.
 */</comment>
<comment type="block">/* C-style comments
 *
 * The "extended comment" syntax closely resembles allowable operator syntax.
 * The tricky part here is to get lex to recognize a string starting with
 * slash-star as a comment, when interpreting it as an operator would produce
 * a longer match --- remember lex will prefer a longer match!  Also, if we
 * have something like plus-slash-star, lex will think this is a 3-character
 * operator whereas we want to see it as a + operator and a comment start.
 * The solution is two-fold:
 * 1. append {op_chars}* to xcstart so that it matches as much text as
 *    {operator} would. Then the tie-breaker (first matching rule of same
 *    length) ensures xcstart wins.  We put back the extra stuff with yyless()
 *    in case it contains a star-slash that should terminate the comment.
 * 2. In the operator rule, check for slash-star within the operator, and
 *    if found throw it back with yyless().  This handles the plus-slash-star
 *    problem.
 * Dash-dash comments have similar interactions with the operator rule.
 */</comment>
<comment type="block">/*
 * "self" is the set of chars that should be returned as single-character
 * tokens.  "op_chars" is the set of chars that can make up "Op" tokens,
 * which can be one or more characters long (but if a single-char token
 * appears in the "self" set, it is not to be returned as an Op).  Note
 * that the sets overlap, but each has some chars that are not in the other.
 *
 * If you change either set, adjust the character lists appearing in the
 * rule for "operator"!
 */</comment>
<comment type="block">/* we no longer allow unary minus in numbers. 
 * instead we pass it separately to parser. there it gets
 * coerced via doNegate() -- Leon aug 20 1999
 *
 * {realfail1} and {realfail2} are added to prevent the need for scanner
 * backup when the {real} rule fails to match completely.
 */</comment>
<comment type="block">/*
 * Dollar quoted strings are totally opaque, and no escaping is done on them.
 * Other quoted strings must allow some special characters such as single-quote
 *  and newline.
 * Embedded single-quotes are implemented both in the SQL standard
 *  style of two adjacent single quotes "''" and in the Postgres/Java style
 *  of escaped-quote "\'".
 * Other embedded escaped characters are matched explicitly and the leading
 *  backslash is dropped from the string.
 * Note that xcstart must appear before operator, as explained above!
 *  Also whitespace (comment) must appear before operator.
 */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1135</cpp:number> <cpp:file>"sqlscan.c"</cpp:file></cpp:line>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xb</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xc</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xd</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xh</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xe</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xq</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdolq</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_NO_UNISTD_H</name></cpp:ifndef>
<comment type="block">/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_EXTRA_TYPE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_EXTRA_TYPE</name></cpp:macro> <cpp:value>void *</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>yy_init_globals</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<comment type="block">/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */</comment>

<function_decl><type><name>int</name></type> <name>yylex_destroy</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>yyget_debug</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>yyset_debug</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>debug_flag</name></decl></parameter>  )</parameter_list>;</function_decl>

<function_decl><type><name>YY_EXTRA_TYPE</name></type> <name>yyget_extra</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>yyset_extra</name> <parameter_list>( <parameter><decl><type><name>YY_EXTRA_TYPE</name></type> <name>user_defined</name></decl></parameter>  )</parameter_list>;</function_decl>

<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>yyget_in</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>yyset_in</name>  <parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>_in_str</name></decl></parameter>  )</parameter_list>;</function_decl>

<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>yyget_out</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>yyset_out</name>  <parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>_out_str</name></decl></parameter>  )</parameter_list>;</function_decl>

			<function_decl><type><name>int</name></type> <name>yyget_leng</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>yyget_text</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>yyget_lineno</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>yyset_lineno</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>_line_number</name></decl></parameter>  )</parameter_list>;</function_decl>

<comment type="block">/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_SKIP_YYWRAP</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>int</name></type> <name>yywrap</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl></extern>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>yywrap</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_NO_UNPUT</name></cpp:ifndef>
    
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>yytext_ptr</name></cpp:ifndef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>yy_flex_strncpy</name> <parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>YY_NEED_STRLEN</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>yy_flex_strlen</name> <parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_NO_INPUT</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>yyinput</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>input</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Amount of stuff to slurp up with each read. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_READ_BUF_SIZE</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__ia64__</name></cpp:ifdef>
<comment type="block">/* On IA-64, the buffer size is 16k, not 8k */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_READ_BUF_SIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_READ_BUF_SIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __ia64__ */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Copy whatever the last rule matched to the standard output. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ECHO</name></cpp:ifndef>
<comment type="block">/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECHO</name></cpp:macro> <cpp:value>do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_INPUT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_INPUT</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>result</name></type></parameter>,<parameter><type><name>max_size</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>if ( YY_CURRENT_BUFFER_LVALUE-&gt;yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n &lt; max_size &amp;&amp; \
			     (c = getc( yyin )) != EOF &amp;&amp; c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF &amp;&amp; ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 &amp;&amp; ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif</cpp:value></cpp:define>

<comment type="block">/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>yyterminate</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyterminate</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>return YY_NULL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Number of entries by which start-condition stack grows. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_START_STACK_INCR</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_START_STACK_INCR</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Report a fatal error. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_FATAL_ERROR</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_FATAL_ERROR</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>yy_fatal_error( msg )</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* end tables serialization structures and prototypes */</comment>

<comment type="block">/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_DECL</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_DECL_IS_OURS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>yylex</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_DECL</name></cpp:macro> <cpp:value>int yylex (void)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !YY_DECL */</comment>

<comment type="block">/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_USER_ACTION</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_USER_ACTION</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Code executed at the end of each rule. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_BREAK</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_BREAK</name></cpp:macro> <comment type="block">/*LINTED*/</comment><cpp:value>break;</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_RULE_SETUP</name></cpp:macro> \
	<cpp:value>YY_USER_ACTION</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** The main scanner function which does all the work.
 */</comment>
<macro><name>YY_DECL</name></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>yy_state_type</name></type> <name>yy_current_state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>yy_cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yy_bp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>yy_act</name></decl>;</decl_stmt>
    
	<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator><name>yy_init</name><operator>)</operator></expr> )</condition>
		<block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>yy_init</name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>YY_USER_INIT</name></cpp:ifdef>
		<expr_stmt><expr><name>YY_USER_INIT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<if_stmt><if>if <condition>( <expr><operator>!</operator> <operator>(</operator><name>yy_start</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>(</operator><name>yy_start</name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>	<comment type="block">/* first start state */</comment>

		<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>yyin</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>yyin</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>yyout</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>yyout</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>YY_CURRENT_BUFFER</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>yyensure_buffer_stack</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>YY_CURRENT_BUFFER_LVALUE</name> <operator>=</operator>
				<call><name>yy_create_buffer</name><argument_list>( <argument><expr><name>yyin</name></expr></argument>, <argument><expr><name>YY_BUF_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>yy_load_buffer_state</name><argument_list>(  )</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	<block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>308</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1360</cpp:number> <cpp:file>"sqlscan.c"</cpp:file></cpp:line>

	<while>while <condition>( <comment type="block">/*CONSTCOND*/</comment><expr><literal type="number">1</literal></expr> )</condition>		<comment type="block">/* loops until end-of-file is reached */</comment>
		<block>{<block_content>
		<expr_stmt><expr><name>yy_cp</name> <operator>=</operator> <operator>(</operator><name>yy_c_buf_p</name><operator>)</operator></expr>;</expr_stmt>

		<comment type="block">/* Support of yytext. */</comment>
		<expr_stmt><expr><operator>*</operator><name>yy_cp</name> <operator>=</operator> <operator>(</operator><name>yy_hold_char</name><operator>)</operator></expr>;</expr_stmt>

		<comment type="block">/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */</comment>
		<expr_stmt><expr><name>yy_bp</name> <operator>=</operator> <name>yy_cp</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>yy_current_state</name> <operator>=</operator> <operator>(</operator><name>yy_start</name><operator>)</operator></expr>;</expr_stmt>
<label><name>yy_match</name>:</label>
		<do>do
			<block>{<block_content>
			<decl_stmt><decl><type><name>YY_CHAR</name></type> <name>yy_c</name> <init>= <expr><name><name>yy_ec</name><index>[<expr><call><name>YY_SC_TO_UI</name><argument_list>(<argument><expr><operator>*</operator><name>yy_cp</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl> ;</decl_stmt>
			<if_stmt><if>if <condition>( <expr><name><name>yy_accept</name><index>[<expr><name>yy_current_state</name></expr>]</index></name></expr> )</condition>
				<block>{<block_content>
				<expr_stmt><expr><operator>(</operator><name>yy_last_accepting_state</name><operator>)</operator> <operator>=</operator> <name>yy_current_state</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>(</operator><name>yy_last_accepting_cpos</name><operator>)</operator> <operator>=</operator> <name>yy_cp</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			<while>while <condition>( <expr><name><name>yy_chk</name><index>[<expr><name><name>yy_base</name><index>[<expr><name>yy_current_state</name></expr>]</index></name> <operator>+</operator> <name>yy_c</name></expr>]</index></name> <operator>!=</operator> <name>yy_current_state</name></expr> )</condition>
				<block>{<block_content>
				<expr_stmt><expr><name>yy_current_state</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>yy_def</name><index>[<expr><name>yy_current_state</name></expr>]</index></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>( <expr><name>yy_current_state</name> <operator>&gt;=</operator> <literal type="number">155</literal></expr> )</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>yy_c</name> <operator>=</operator> <name><name>yy_meta</name><index>[<expr><name>yy_c</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></while>
			<expr_stmt><expr><name>yy_current_state</name> <operator>=</operator> <name><name>yy_nxt</name><index>[<expr><name><name>yy_base</name><index>[<expr><name>yy_current_state</name></expr>]</index></name> <operator>+</operator> <name>yy_c</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>yy_cp</name></expr>;</expr_stmt>
			</block_content>}</block>
		while <condition>( <expr><name>yy_current_state</name> <operator>!=</operator> <literal type="number">154</literal></expr> )</condition>;</do>
		<expr_stmt><expr><name>yy_cp</name> <operator>=</operator> <operator>(</operator><name>yy_last_accepting_cpos</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>yy_current_state</name> <operator>=</operator> <operator>(</operator><name>yy_last_accepting_state</name><operator>)</operator></expr>;</expr_stmt>

<label><name>yy_find_action</name>:</label>
		<expr_stmt><expr><name>yy_act</name> <operator>=</operator> <name><name>yy_accept</name><index>[<expr><name>yy_current_state</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>YY_DO_BEFORE_ACTION</name></expr>;</expr_stmt>

<label><name>do_action</name>:</label>	<comment type="block">/* This label is used only to access EOF actions. */</comment>

		<switch>switch <condition>( <expr><name>yy_act</name></expr> )</condition>
	<block>{<block_content> <comment type="block">/* beginning of action switch */</comment>
			<case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="block">/* must back up */</comment>
			<comment type="block">/* undo the effects of YY_DO_BEFORE_ACTION */</comment>
			<expr_stmt><expr><operator>*</operator><name>yy_cp</name> <operator>=</operator> <operator>(</operator><name>yy_hold_char</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>yy_cp</name> <operator>=</operator> <operator>(</operator><name>yy_last_accepting_cpos</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>yy_current_state</name> <operator>=</operator> <operator>(</operator><name>yy_last_accepting_state</name><operator>)</operator></expr>;</expr_stmt>
			<goto>goto <name>yy_find_action</name>;</goto>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<comment type="block">/* rule 1 can match eol */</comment>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>310</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>yytext</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_WHITESPACE</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>319</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>yytext</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"sc"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_COMMENT</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>329</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<comment type="block">/* Set location in case of syntax error in comment */</comment>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>xcdepth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>BEGIN</name><argument_list>(<argument><expr><name>xc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* Put back any characters past slash-star; see above */</comment>
					<expr_stmt><expr><call><name>startlit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
					<expr_stmt><expr><call><name>yyless</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>342</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><name>xcdepth</name><operator>++</operator></expr>;</expr_stmt>
					<comment type="block">/* Put back any characters past slash-star; see above */</comment>
					<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>yyless</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>351</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>xcdepth</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>BEGIN</name><argument_list>(<argument><expr><name>INITIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>litbufdup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"ec"</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
						<return>return <expr><name>X_COMMENT</name></expr>;</return>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><name>xcdepth</name><operator>--</operator></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>

				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<comment type="block">/* rule 6 can match eol */</comment>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>373</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>addlit</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><name>yyleng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>377</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>addlit</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><name>yyleng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>381</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>addlit</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><name>yyleng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><call><name>YY_STATE_EOF</name><argument_list>(<argument><expr><name>xc</name></expr></argument>)</argument_list></call></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>385</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content> 
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>litbufdup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"ecu"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_COMMENT</name></expr>;</return>

				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>394</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<comment type="block">/* Binary bit type.
					 * At some point we should simply pass the string
					 * forward to the parser and label it there.
					 * In the meantime, place a leading "b" on the string
					 * to mark it for the input routine as a binary string.
					 */</comment>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>BEGIN</name><argument_list>(<argument><expr><name>xb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>startlit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<comment type="block">/* rule 10 can match eol */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>407</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<comment type="block">/* rule 11 can match eol */</comment>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>407</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>yyless</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>BEGIN</name><argument_list>(<argument><expr><name>INITIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>litbufdup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"b"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_NCONST</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<comment type="block">/* rule 12 can match eol */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>417</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<case>case <expr><literal type="number">13</literal></expr>:</case>
<comment type="block">/* rule 13 can match eol */</comment>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>417</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>addlit</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><name>yyleng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<comment type="block">/* rule 14 can match eol */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>421</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<comment type="block">/* rule 15 can match eol */</comment>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>421</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<comment type="block">/* ignore */</comment>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><call><name>YY_STATE_EOF</name><argument_list>(<argument><expr><name>xb</name></expr></argument>)</argument_list></call></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>424</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content> 
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>litbufdup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"bu"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_NCONST</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>432</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<comment type="block">/* Hexadecimal bit type.
					 * At some point we should simply pass the string
					 * forward to the parser and label it there.
					 * In the meantime, place a leading "x" on the string
					 * to mark it for the input routine as a hex string.
					 */</comment>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>BEGIN</name><argument_list>(<argument><expr><name>xh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>startlit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">17</literal></expr>:</case>
<comment type="block">/* rule 17 can match eol */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>445</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<case>case <expr><literal type="number">18</literal></expr>:</case>
<comment type="block">/* rule 18 can match eol */</comment>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>445</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>yyless</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>BEGIN</name><argument_list>(<argument><expr><name>INITIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>litbufdup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_NCONST</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><call><name>YY_STATE_EOF</name><argument_list>(<argument><expr><name>xh</name></expr></argument>)</argument_list></call></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>454</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content> 
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>litbufdup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"xu"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_NCONST</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">19</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>462</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<comment type="block">/* National character.
					 * We will pass this along as a normal character string,
					 * but preceded with an internally-generated "NCHAR".
					 */</comment>
					<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyword</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>		<name>keycode</name></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>yyless</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block">/* eat only 'n' this time */</comment>
					<comment type="block">/* nchar had better be a keyword! */</comment>
					<expr_stmt><expr><name>keyword</name> <operator>=</operator> <call><name>orafce_scan_keyword</name><argument_list>(<argument><expr><literal type="string">"nchar"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>keycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>keyword</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>keyword</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name>keycode</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_KEYWORD</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">20</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>482</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>BEGIN</name><argument_list>(<argument><expr><name>xq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>extended_string</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>startlit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">21</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>488</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>BEGIN</name><argument_list>(<argument><expr><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>extended_string</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>startlit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">22</literal></expr>:</case>
<comment type="block">/* rule 22 can match eol */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>495</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<case>case <expr><literal type="number">23</literal></expr>:</case>
<comment type="block">/* rule 23 can match eol */</comment>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>495</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>yyless</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>BEGIN</name><argument_list>(<argument><expr><name>INITIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>litbufdup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <ternary><condition><expr><name>extended_string</name></expr> ?</condition><then> <expr><literal type="string">"es"</literal></expr> </then><else>: <expr><literal type="string">"qs"</literal></expr></else></ternary></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_SCONST</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>504</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">25</literal></expr>:</case>
<comment type="block">/* rule 25 can match eol */</comment>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>507</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>addlit</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><name>yyleng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">26</literal></expr>:</case>
<comment type="block">/* rule 26 can match eol */</comment>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>510</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>addlit</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><name>yyleng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">27</literal></expr>:</case>
<comment type="block">/* rule 27 can match eol */</comment>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>513</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><call><name>unescape_single_char</name><argument_list>(<argument><expr><name><name>yytext</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">28</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>516</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>yytext</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">29</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>521</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>yytext</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">30</literal></expr>:</case>
<comment type="block">/* rule 30 can match eol */</comment>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>526</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<comment type="block">/* ignore */</comment>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">31</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>529</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<comment type="block">/* This is only needed for \ just before EOF */</comment>
					<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><name><name>yytext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><call><name>YY_STATE_EOF</name><argument_list>(<argument><expr><name>xq</name></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>YY_STATE_EOF</name><argument_list>(<argument><expr><name>xe</name></expr></argument>)</argument_list></call></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>533</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content> 
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>litbufdup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <ternary><condition><expr><name>extended_string</name></expr> ?</condition><then> <expr><literal type="string">"esu"</literal></expr> </then><else>: <expr><literal type="string">"qsu"</literal></expr></else></ternary></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_SCONST</name></expr>;</return>
				</block_content>}</block>    
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">32</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>541</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>dolqstart</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>BEGIN</name><argument_list>(<argument><expr><name>xdolq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>startlit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">33</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>547</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<comment type="block">/* throw back all but the initial "$" */</comment>
					<expr_stmt><expr><call><name>yyless</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* and treat it as {other} */</comment>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>yytext</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"dolqf"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_OTHERS</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">34</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>557</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><name>dolqstart</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>dolqstart</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"dolq"</literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>BEGIN</name><argument_list>(<argument><expr><name>INITIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>litbufdup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
						<return>return <expr><name>X_SCONST</name></expr>;</return>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<comment type="block">/*
						 * When we fail to match $...$ to dolqstart, transfer
						 * the $... part to the output, but put back the final
						 * $ for rescanning.  Consider $delim$...$junk$delim$
						 */</comment>
						<expr_stmt><expr><call><name>addlit</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><name>yyleng</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>yyless</name><argument_list>(<argument><expr><name>yyleng</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">35</literal></expr>:</case>
<comment type="block">/* rule 35 can match eol */</comment>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>578</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>addlit</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><name>yyleng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">36</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>581</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>addlit</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><name>yyleng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">37</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>584</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<comment type="block">/* This is only needed for inside the quoted text */</comment>
					<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><name><name>yytext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><call><name>YY_STATE_EOF</name><argument_list>(<argument><expr><name>xdolq</name></expr></argument>)</argument_list></call></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>588</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content> 
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>dolqstart</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"dolqu"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>litbufdup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_SCONST</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">38</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>597</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>BEGIN</name><argument_list>(<argument><expr><name>xd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>startlit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">39</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>602</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>ident</name></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>BEGIN</name><argument_list>(<argument><expr><name>INITIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>literallen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>yyerror</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"zero-length delimited identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>ident</name> <operator>=</operator> <call><name>litbufdup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>literallen</name> <operator>&gt;=</operator> <name>NAMEDATALEN</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>truncate_identifier</name><argument_list>(<argument><expr><name>ident</name></expr></argument>, <argument><expr><name>literallen</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"dq"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>ident</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_IDENT</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">40</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>617</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>addlitchar</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">41</literal></expr>:</case>
<comment type="block">/* rule 41 can match eol */</comment>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>620</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>addlit</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><name>yyleng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><call><name>YY_STATE_EOF</name><argument_list>(<argument><expr><name>xd</name></expr></argument>)</argument_list></call></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>623</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content> 
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"dqu"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>litbufdup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_IDENT</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">42</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>630</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"typecast"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name>X_TYPECAST</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_OTHERS</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">43</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>638</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>yytext</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"self"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name><name>yytext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_OTHERS</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">44</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>647</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<comment type="block">/*
					 * Check for embedded slash-star or dash-dash; those
					 * are comment starts, so operator must stop there.
					 * Note that slash-star or dash-dash at the first
					 * character will match a prior rule, not this one.
					 */</comment>
					<decl_stmt><decl><type><name>int</name></type>		<name>nchars</name> <init>= <expr><name>yyleng</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>slashstar</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><literal type="string">"/*"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>dashdash</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name>slashstar</name> <operator>&amp;&amp;</operator> <name>dashdash</name></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* if both appear, take the first one */</comment>
						<if_stmt><if>if <condition>(<expr><name>slashstar</name> <operator>&gt;</operator> <name>dashdash</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>slashstar</name> <operator>=</operator> <name>dashdash</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><operator>!</operator><name>slashstar</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>slashstar</name> <operator>=</operator> <name>dashdash</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name>slashstar</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>nchars</name> <operator>=</operator> <name>slashstar</name> <operator>-</operator> <name>yytext</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<comment type="block">/*
					 * For SQL compatibility, '+' and '-' cannot be the
					 * last char of a multi-char operator unless the operator
					 * contains chars that are not in SQL operators.
					 * The idea is to lex '=-' as two operators, but not
					 * to forbid operator names like '?-' that could not be
					 * sequences of SQL operators.
					 */</comment>
					<while>while <condition>(<expr><name>nchars</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
						   <operator>(</operator><name><name>yytext</name><index>[<expr><name>nchars</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator>
							<name><name>yytext</name><index>[<expr><name>nchars</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int</name></type>		<name>ic</name></decl>;</decl_stmt>

						<for>for <control>(<init><expr><name>ic</name> <operator>=</operator> <name>nchars</name><operator>-</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>ic</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ic</name><operator>--</operator></expr></incr>)</control>
						<block>{<block_content>
							<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"~!@#^&amp;|`?%"</literal></expr></argument>, <argument><expr><name><name>yytext</name><index>[<expr><name>ic</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
								<break>break;</break></block_content></block></if></if_stmt>
						</block_content>}</block></for>
						<if_stmt><if>if <condition>(<expr><name>ic</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<break>break;</break></block_content></block></if></if_stmt> <comment type="block">/* found a char that makes it OK */</comment>
						<expr_stmt><expr><name>nchars</name><operator>--</operator></expr>;</expr_stmt> <comment type="block">/* else remove the +/-, and check again */</comment>
					</block_content>}</block></while>

					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>nchars</name> <operator>&lt;</operator> <name>yyleng</name></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* Strip the unwanted chars from the token */</comment>
						<expr_stmt><expr><call><name>yyless</name><argument_list>(<argument><expr><name>nchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<comment type="block">/*
						 * If what we have left is only one char, and it's
						 * one of the characters matching "self", then
						 * return it as a character token the same way
						 * that the "self" rule would have.
						 */</comment>
						<if_stmt><if>if <condition>(<expr><name>nchars</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
							<call><name>strchr</name><argument_list>(<argument><expr><literal type="string">",()[].;:+-*/%^&lt;&gt;="</literal></expr></argument>, <argument><expr><name><name>yytext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>yytext</name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name><name>yytext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
							<return>return <expr><name>X_OTHERS</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if></if_stmt>

					<comment type="block">/*
					 * Complain if operator is too long.  Unlike the case
					 * for identifiers, we make this an error not a notice-
					 * and-truncate, because the odds are we are looking at
					 * a syntactic mistake anyway.
					 */</comment>
					<if_stmt><if>if <condition>(<expr><name>nchars</name> <operator>&gt;=</operator> <name>NAMEDATALEN</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>yyerror</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"operator too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<comment type="block">/* Convert "!=" operator to "&lt;&gt;" for compatibility */</comment>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><literal type="string">"!="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"&lt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_OP</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">45</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>736</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>yytext</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_PARAM</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">46</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>745</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<decl_stmt><decl><type><name>long</name></type> <name>val</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>endptr</name></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_INT_64</name></cpp:ifdef>
						<comment type="block">/* if long &gt; 32 bits, check for overflow of int4 */</comment>
						<operator>||</operator> <name>val</name> <operator>!=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>int32</name><operator>)</operator> <name>val</name><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
						)</condition>
					<block>{<block_content>
						<comment type="block">/* integer too large, treat it as a float */</comment>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"f"</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
						<return>return <expr><name>X_NCONST</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>yytext</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"i"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_NCONST</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">47</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>772</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"f"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_NCONST</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">48</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>780</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"f"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_NCONST</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">49</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>788</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<comment type="block">/*
					 * throw back the [Ee], and treat as {decimal}.  Note
					 * that it is possible the input is actually {integer},
					 * but since this case will almost certainly lead to a
					 * syntax error anyway, we don't bother to distinguish.
					 */</comment>
					<expr_stmt><expr><call><name>yyless</name><argument_list>(<argument><expr><name>yyleng</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"f"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_NCONST</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">50</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>803</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<comment type="block">/* throw back the [Ee][+-], and proceed as above */</comment>
					<expr_stmt><expr><call><name>yyless</name><argument_list>(<argument><expr><name>yyleng</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <literal type="string">"f"</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_NCONST</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">51</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>815</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>ident</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyword</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>		<name>keycode</name></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* nchar had better be a keyword! */</comment>
					<expr_stmt><expr><name>keyword</name> <operator>=</operator> <call><name>orafce_scan_keyword</name><argument_list>(<argument><expr><literal type="string">"nchar"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>keycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* Is it a keyword? */</comment>
					<expr_stmt><expr><name>keyword</name> <operator>=</operator> <call><name>orafce_scan_keyword</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>keyword</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>keyword</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name>keycode</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
						<return>return <expr><name>X_KEYWORD</name></expr>;</return>
					</block_content>}</block></if></if_stmt>

					<comment type="block">/*
					 * No.  Convert the identifier to lower case, and truncate
					 * if necessary.
					 */</comment>
					<expr_stmt><expr><name>ident</name> <operator>=</operator> <call><name>downcase_truncate_identifier</name><argument_list>(<argument><expr><name>yytext</name></expr></argument>, <argument><expr><name>yyleng</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>ident</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_IDENT</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">52</literal></expr>:</case>
<macro><name>YY_RULE_SETUP</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>848</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>yytext</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>modificator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>keycode</name></name> <operator>=</operator> <name><name>yytext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>sep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<return>return <expr><name>X_OTHERS</name></expr>;</return>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><call><name>YY_STATE_EOF</name><argument_list>(<argument><expr><name>INITIAL</name></expr></argument>)</argument_list></call></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>857</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<block>{<block_content>
					<expr_stmt><expr><call><name>SET_YYLLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>yyterminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
	<macro><name>YY_BREAK</name></macro>
<case>case <expr><literal type="number">53</literal></expr>:</case>
<decl_stmt><decl><type><name>YY_RULE_SETUP</name></type>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>862</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>
<name>YY_FATAL_ERROR</name><argument_list>( <argument><expr><literal type="string">"flex scanner jammed"</literal></expr></argument> )</argument_list></decl>;</decl_stmt>
	<macro><name>YY_BREAK</name></macro>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2179</cpp:number> <cpp:file>"sqlscan.c"</cpp:file></cpp:line>

	<case>case <expr><name>YY_END_OF_BUFFER</name></expr>:</case>
		<block>{<block_content>
		<comment type="block">/* Amount of text matched not including the EOB char. */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>yy_amount_of_matched_text</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>yy_cp</name> <operator>-</operator> <operator>(</operator><name>yytext_ptr</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Undo the effects of YY_DO_BEFORE_ACTION. */</comment>
		<expr_stmt><expr><operator>*</operator><name>yy_cp</name> <operator>=</operator> <operator>(</operator><name>yy_hold_char</name><operator>)</operator></expr>;</expr_stmt>
		<macro><name>YY_RESTORE_YY_MORE_OFFSET</name></macro>

		<if_stmt><if>if <condition>( <expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_buffer_status</name></name> <operator>==</operator> <name>YY_BUFFER_NEW</name></expr> )</condition>
			<block>{<block_content>
			<comment type="block">/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */</comment>
			<expr_stmt><expr><operator>(</operator><name>yy_n_chars</name><operator>)</operator> <operator>=</operator> <name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_n_chars</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_input_file</name></name> <operator>=</operator> <name>yyin</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_buffer_status</name></name> <operator>=</operator> <name>YY_BUFFER_NORMAL</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

		<comment type="block">/* Note that here we test for yy_c_buf_p "&lt;=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */</comment>
		<if_stmt><if>if <condition>( <expr><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>&lt;=</operator> <operator>&amp;</operator><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_ch_buf</name><index>[<expr><operator>(</operator><name>yy_n_chars</name><operator>)</operator></expr>]</index></name></expr> )</condition>
			<block>{<block_content> <comment type="block">/* This was really a NUL. */</comment>
			<decl_stmt><decl><type><name>yy_state_type</name></type> <name>yy_next_state</name></decl>;</decl_stmt>

			<expr_stmt><expr><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>yytext_ptr</name><operator>)</operator> <operator>+</operator> <name>yy_amount_of_matched_text</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>yy_current_state</name> <operator>=</operator> <call><name>yy_get_previous_state</name><argument_list>(  )</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */</comment>

			<expr_stmt><expr><name>yy_next_state</name> <operator>=</operator> <call><name>yy_try_NUL_trans</name><argument_list>( <argument><expr><name>yy_current_state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>yy_bp</name> <operator>=</operator> <operator>(</operator><name>yytext_ptr</name><operator>)</operator> <operator>+</operator> <name>YY_MORE_ADJ</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>( <expr><name>yy_next_state</name></expr> )</condition>
				<block>{<block_content>
				<comment type="block">/* Consume the NUL. */</comment>
				<expr_stmt><expr><name>yy_cp</name> <operator>=</operator> <operator>++</operator><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>yy_current_state</name> <operator>=</operator> <name>yy_next_state</name></expr>;</expr_stmt>
				<goto>goto <name>yy_match</name>;</goto>
				</block_content>}</block></if>

			<else>else
				<block>{<block_content>
				<expr_stmt><expr><name>yy_cp</name> <operator>=</operator> <operator>(</operator><name>yy_last_accepting_cpos</name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>yy_current_state</name> <operator>=</operator> <operator>(</operator><name>yy_last_accepting_state</name><operator>)</operator></expr>;</expr_stmt>
				<goto>goto <name>yy_find_action</name>;</goto>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>

		<else>else<block type="pseudo"><block_content> <switch>switch <condition>( <expr><call><name>yy_get_next_buffer</name><argument_list>(  )</argument_list></call></expr> )</condition>
			<block>{<block_content>
			<case>case <expr><name>EOB_ACT_END_OF_FILE</name></expr>:</case>
				<block>{<block_content>
				<expr_stmt><expr><operator>(</operator><name>yy_did_buffer_switch_on_eof</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

				<if_stmt><if>if <condition>( <expr><call><name>yywrap</name><argument_list>(  )</argument_list></call></expr> )</condition>
					<block>{<block_content>
					<comment type="block">/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */</comment>
					<expr_stmt><expr><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>yytext_ptr</name><operator>)</operator> <operator>+</operator> <name>YY_MORE_ADJ</name></expr>;</expr_stmt>

					<expr_stmt><expr><name>yy_act</name> <operator>=</operator> <call><name>YY_STATE_EOF</name><argument_list>(<argument><expr><name>YY_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<goto>goto <name>do_action</name>;</goto>
					</block_content>}</block></if>

				<else>else
					<block>{<block_content>
					<if_stmt><if>if <condition>( <expr><operator>!</operator> <operator>(</operator><name>yy_did_buffer_switch_on_eof</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>YY_NEW_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></else></if_stmt>
				<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EOB_ACT_CONTINUE_SCAN</name></expr>:</case>
				<expr_stmt><expr><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>=</operator>
					<operator>(</operator><name>yytext_ptr</name><operator>)</operator> <operator>+</operator> <name>yy_amount_of_matched_text</name></expr>;</expr_stmt>

				<expr_stmt><expr><name>yy_current_state</name> <operator>=</operator> <call><name>yy_get_previous_state</name><argument_list>(  )</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>yy_cp</name> <operator>=</operator> <operator>(</operator><name>yy_c_buf_p</name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>yy_bp</name> <operator>=</operator> <operator>(</operator><name>yytext_ptr</name><operator>)</operator> <operator>+</operator> <name>YY_MORE_ADJ</name></expr>;</expr_stmt>
				<goto>goto <name>yy_match</name>;</goto>

			<case>case <expr><name>EOB_ACT_LAST_MATCH</name></expr>:</case>
				<expr_stmt><expr><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>=</operator>
				<operator>&amp;</operator><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_ch_buf</name><index>[<expr><operator>(</operator><name>yy_n_chars</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

				<expr_stmt><expr><name>yy_current_state</name> <operator>=</operator> <call><name>yy_get_previous_state</name><argument_list>(  )</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>yy_cp</name> <operator>=</operator> <operator>(</operator><name>yy_c_buf_p</name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>yy_bp</name> <operator>=</operator> <operator>(</operator><name>yytext_ptr</name><operator>)</operator> <operator>+</operator> <name>YY_MORE_ADJ</name></expr>;</expr_stmt>
				<goto>goto <name>yy_find_action</name>;</goto>
			</block_content>}</block></switch></block_content></block></else></if_stmt>
		<break>break;</break>
		</block_content>}</block>

	<default>default:</default>
		<expr_stmt><expr><call><name>YY_FATAL_ERROR</name><argument_list>(
			<argument><expr><literal type="string">"fatal flex scanner internal error--no action found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch> <comment type="block">/* end of action switch */</comment>
		</block_content>}</block></while> <comment type="block">/* end of scanning one token */</comment>
	</block_content>}</block> <comment type="block">/* end of user's declarations */</comment>
</block_content>}</block> <comment type="block">/* end of yylex */</comment>

<comment type="block">/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>yy_get_next_buffer</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_ch_buf</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><operator>(</operator><name>yytext_ptr</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>number_to_move</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret_val</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>( <expr><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>&gt;</operator> <operator>&amp;</operator><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_ch_buf</name><index>[<expr><operator>(</operator><name>yy_n_chars</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>YY_FATAL_ERROR</name><argument_list>(
		<argument><expr><literal type="string">"fatal flex scanner internal error--end of buffer missed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>( <expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_fill_buffer</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
		<block>{<block_content> <comment type="block">/* Don't try to fill the buffer, so this is an EOF. */</comment>
		<if_stmt><if>if <condition>( <expr><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>yytext_ptr</name><operator>)</operator> <operator>-</operator> <name>YY_MORE_ADJ</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
			<block>{<block_content>
			<comment type="block">/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */</comment>
			<return>return <expr><name>EOB_ACT_END_OF_FILE</name></expr>;</return>
			</block_content>}</block></if>

		<else>else
			<block>{<block_content>
			<comment type="block">/* We matched some text prior to the EOB, first
			 * process it.
			 */</comment>
			<return>return <expr><name>EOB_ACT_LAST_MATCH</name></expr>;</return>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

	<comment type="block">/* Try to read more data. */</comment>

	<comment type="block">/* First move last chars to start of buffer. */</comment>
	<expr_stmt><expr><name>number_to_move</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>yytext_ptr</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

	<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>number_to_move</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>source</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

	<if_stmt><if>if <condition>( <expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_buffer_status</name></name> <operator>==</operator> <name>YY_BUFFER_EOF_PENDING</name></expr> )</condition><block type="pseudo"><block_content>
		<comment type="block">/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */</comment>
		<expr_stmt><expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_n_chars</name></name> <operator>=</operator> <operator>(</operator><name>yy_n_chars</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

	<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>num_to_read</name> <init>=
			<expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_buf_size</name></name> <operator>-</operator> <name>number_to_move</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<while>while <condition>( <expr><name>num_to_read</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
			<block>{<block_content> <comment type="block">/* Not enough room in the buffer - grow it. */</comment>

			<comment type="block">/* just a shorter name for the current buffer */</comment>
			<decl_stmt><decl><type><name>YY_BUFFER_STATE</name></type> <name>b</name> <init>= <expr><name>YY_CURRENT_BUFFER_LVALUE</name></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name>yy_c_buf_p_offset</name> <init>=
				<expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>yy_ch_buf</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>( <expr><name><name>b</name><operator>-&gt;</operator><name>yy_is_our_buffer</name></name></expr> )</condition>
				<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>new_size</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>yy_buf_size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>( <expr><name>new_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_buf_size</name></name> <operator>+=</operator> <name><name>b</name><operator>-&gt;</operator><name>yy_buf_size</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_buf_size</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_ch_buf</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator>
					<comment type="block">/* Include room in for 2 EOB chars. */</comment>
					<call><name>yyrealloc</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>b</name><operator>-&gt;</operator><name>yy_ch_buf</name></name></expr></argument>,
							 <argument><expr><operator>(</operator><name>yy_size_t</name><operator>)</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>yy_buf_size</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<comment type="block">/* Can't grow it, we don't own it. */</comment>
				<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_ch_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>( <expr><operator>!</operator> <name><name>b</name><operator>-&gt;</operator><name>yy_ch_buf</name></name></expr> )</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>YY_FATAL_ERROR</name><argument_list>(
				<argument><expr><literal type="string">"fatal error - scanner input buffer overflow"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>=</operator> <operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>yy_ch_buf</name><index>[<expr><name>yy_c_buf_p_offset</name></expr>]</index></name></expr>;</expr_stmt>

			<expr_stmt><expr><name>num_to_read</name> <operator>=</operator> <name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_buf_size</name></name> <operator>-</operator>
						<name>number_to_move</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

			</block_content>}</block></while>

		<if_stmt><if>if <condition>( <expr><name>num_to_read</name> <operator>&gt;</operator> <name>YY_READ_BUF_SIZE</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>num_to_read</name> <operator>=</operator> <name>YY_READ_BUF_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Read in more data. */</comment>
		<expr_stmt><expr><call><name>YY_INPUT</name><argument_list>( <argument><expr><operator>(</operator><operator>&amp;</operator><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_ch_buf</name><index>[<expr><name>number_to_move</name></expr>]</index></name><operator>)</operator></expr></argument>,
			<argument><expr><operator>(</operator><name>yy_n_chars</name><operator>)</operator></expr></argument>, <argument><expr><name>num_to_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_n_chars</name></name> <operator>=</operator> <operator>(</operator><name>yy_n_chars</name><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>( <expr><operator>(</operator><name>yy_n_chars</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
		<block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>number_to_move</name> <operator>==</operator> <name>YY_MORE_ADJ</name></expr> )</condition>
			<block>{<block_content>
			<expr_stmt><expr><name>ret_val</name> <operator>=</operator> <name>EOB_ACT_END_OF_FILE</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>yyrestart</name><argument_list>( <argument><expr><name>yyin</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>

		<else>else
			<block>{<block_content>
			<expr_stmt><expr><name>ret_val</name> <operator>=</operator> <name>EOB_ACT_LAST_MATCH</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_buffer_status</name></name> <operator>=</operator>
				<name>YY_BUFFER_EOF_PENDING</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>

	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret_val</name> <operator>=</operator> <name>EOB_ACT_CONTINUE_SCAN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yy_n_chars</name><operator>)</operator> <operator>+</operator> <name>number_to_move</name><operator>)</operator> <operator>&gt;</operator> <name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_buf_size</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Extend the array by 50%, plus the number we really need. */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>new_size</name> <init>= <expr><operator>(</operator><name>yy_n_chars</name><operator>)</operator> <operator>+</operator> <name>number_to_move</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>yy_n_chars</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_ch_buf</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>yyrealloc</name><argument_list>(
			<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_ch_buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>yy_size_t</name><operator>)</operator> <name>new_size</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_ch_buf</name></name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>YY_FATAL_ERROR</name><argument_list>( <argument><expr><literal type="string">"out of dynamic memory in yy_get_next_buffer()"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<comment type="block">/* "- 2" to take care of EOB's */</comment>
		<expr_stmt><expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_buf_size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>new_size</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>(</operator><name>yy_n_chars</name><operator>)</operator> <operator>+=</operator> <name>number_to_move</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_ch_buf</name><index>[<expr><operator>(</operator><name>yy_n_chars</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <name>YY_END_OF_BUFFER_CHAR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_ch_buf</name><index>[<expr><operator>(</operator><name>yy_n_chars</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>YY_END_OF_BUFFER_CHAR</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>(</operator><name>yytext_ptr</name><operator>)</operator> <operator>=</operator> <operator>&amp;</operator><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_ch_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

	<return>return <expr><name>ret_val</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* yy_get_previous_state - get the state just before the EOB char was reached */</comment>

    <function><type><specifier>static</specifier> <name>yy_state_type</name></type> <name>yy_get_previous_state</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>yy_state_type</name></type> <name>yy_current_state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>yy_cp</name></decl>;</decl_stmt>
    
	<expr_stmt><expr><name>yy_current_state</name> <operator>=</operator> <operator>(</operator><name>yy_start</name><operator>)</operator></expr>;</expr_stmt>

	<for>for <control>( <init><expr><name>yy_cp</name> <operator>=</operator> <operator>(</operator><name>yytext_ptr</name><operator>)</operator> <operator>+</operator> <name>YY_MORE_ADJ</name></expr>;</init> <condition><expr><name>yy_cp</name> <operator>&lt;</operator> <operator>(</operator><name>yy_c_buf_p</name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>yy_cp</name></expr></incr> )</control>
		<block>{<block_content>
		<decl_stmt><decl><type><name>YY_CHAR</name></type> <name>yy_c</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>*</operator><name>yy_cp</name></expr> ?</condition><then> <expr><name><name>yy_ec</name><index>[<expr><call><name>YY_SC_TO_UI</name><argument_list>(<argument><expr><operator>*</operator><name>yy_cp</name></expr></argument>)</argument_list></call></expr>]</index></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name><name>yy_accept</name><index>[<expr><name>yy_current_state</name></expr>]</index></name></expr> )</condition>
			<block>{<block_content>
			<expr_stmt><expr><operator>(</operator><name>yy_last_accepting_state</name><operator>)</operator> <operator>=</operator> <name>yy_current_state</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><name>yy_last_accepting_cpos</name><operator>)</operator> <operator>=</operator> <name>yy_cp</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		<while>while <condition>( <expr><name><name>yy_chk</name><index>[<expr><name><name>yy_base</name><index>[<expr><name>yy_current_state</name></expr>]</index></name> <operator>+</operator> <name>yy_c</name></expr>]</index></name> <operator>!=</operator> <name>yy_current_state</name></expr> )</condition>
			<block>{<block_content>
			<expr_stmt><expr><name>yy_current_state</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>yy_def</name><index>[<expr><name>yy_current_state</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>( <expr><name>yy_current_state</name> <operator>&gt;=</operator> <literal type="number">155</literal></expr> )</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>yy_c</name> <operator>=</operator> <name><name>yy_meta</name><index>[<expr><name>yy_c</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></while>
		<expr_stmt><expr><name>yy_current_state</name> <operator>=</operator> <name><name>yy_nxt</name><index>[<expr><name><name>yy_base</name><index>[<expr><name>yy_current_state</name></expr>]</index></name> <operator>+</operator> <name>yy_c</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>

	<return>return <expr><name>yy_current_state</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */</comment>
    <function><type><specifier>static</specifier> <name>yy_state_type</name></type> <name>yy_try_NUL_trans</name>  <parameter_list>(<parameter><decl><type><name>yy_state_type</name></type> <name>yy_current_state</name></decl></parameter> )</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>yy_is_jam</name></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>yy_cp</name> <init>= <expr><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>YY_CHAR</name></type> <name>yy_c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>( <expr><name><name>yy_accept</name><index>[<expr><name>yy_current_state</name></expr>]</index></name></expr> )</condition>
		<block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>yy_last_accepting_state</name><operator>)</operator> <operator>=</operator> <name>yy_current_state</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>yy_last_accepting_cpos</name><operator>)</operator> <operator>=</operator> <name>yy_cp</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	<while>while <condition>( <expr><name><name>yy_chk</name><index>[<expr><name><name>yy_base</name><index>[<expr><name>yy_current_state</name></expr>]</index></name> <operator>+</operator> <name>yy_c</name></expr>]</index></name> <operator>!=</operator> <name>yy_current_state</name></expr> )</condition>
		<block>{<block_content>
		<expr_stmt><expr><name>yy_current_state</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>yy_def</name><index>[<expr><name>yy_current_state</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><name>yy_current_state</name> <operator>&gt;=</operator> <literal type="number">155</literal></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>yy_c</name> <operator>=</operator> <name><name>yy_meta</name><index>[<expr><name>yy_c</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></while>
	<expr_stmt><expr><name>yy_current_state</name> <operator>=</operator> <name><name>yy_nxt</name><index>[<expr><name><name>yy_base</name><index>[<expr><name>yy_current_state</name></expr>]</index></name> <operator>+</operator> <name>yy_c</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>yy_is_jam</name> <operator>=</operator> <operator>(</operator><name>yy_current_state</name> <operator>==</operator> <literal type="number">154</literal><operator>)</operator></expr>;</expr_stmt>

		<return>return <expr><ternary><condition><expr><name>yy_is_jam</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>yy_current_state</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_NO_UNPUT</name></cpp:ifndef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_NO_INPUT</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
    <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>yyinput</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    static <name>int</name> <name>input</name>  <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
    
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>yy_hold_char</name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>( <expr><operator>*</operator><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>==</operator> <name>YY_END_OF_BUFFER_CHAR</name></expr> )</condition>
		<block>{<block_content>
		<comment type="block">/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */</comment>
		<if_stmt><if>if <condition>( <expr><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>&lt;</operator> <operator>&amp;</operator><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_ch_buf</name><index>[<expr><operator>(</operator><name>yy_n_chars</name><operator>)</operator></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
			<comment type="block">/* This was really a NUL. */</comment>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>

		<else>else
			<block>{<block_content> <comment type="block">/* need more input */</comment>
			<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>yytext_ptr</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><operator>++</operator><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator></expr>;</expr_stmt>

			<switch>switch <condition>( <expr><call><name>yy_get_next_buffer</name><argument_list>(  )</argument_list></call></expr> )</condition>
				<block>{<block_content>
				<case>case <expr><name>EOB_ACT_LAST_MATCH</name></expr>:</case>
					<comment type="block">/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */</comment>

					<comment type="block">/* Reset buffer status. */</comment>
					<expr_stmt><expr><call><name>yyrestart</name><argument_list>( <argument><expr><name>yyin</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*FALLTHROUGH*/</comment>

				<case>case <expr><name>EOB_ACT_END_OF_FILE</name></expr>:</case>
					<block>{<block_content>
					<if_stmt><if>if <condition>( <expr><call><name>yywrap</name><argument_list>(  )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
						<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

					<if_stmt><if>if <condition>( <expr><operator>!</operator> <operator>(</operator><name>yy_did_buffer_switch_on_eof</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>YY_NEW_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
					<return>return <expr><call><name>yyinput</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
					<return>return <expr><call><name>input</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
					</block_content>}</block>

				<case>case <expr><name>EOB_ACT_CONTINUE_SCAN</name></expr>:</case>
					<expr_stmt><expr><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>yytext_ptr</name><operator>)</operator> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></switch>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>yy_c_buf_p</name><operator>)</operator></expr>;</expr_stmt>	<comment type="block">/* cast for 8-bit char's */</comment>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>	<comment type="block">/* preserve yytext */</comment>
	<expr_stmt><expr><operator>(</operator><name>yy_hold_char</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>++</operator><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator></expr>;</expr_stmt>

	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	<comment type="block">/* ifndef YY_NO_INPUT */</comment>

<comment type="block" format="doxygen">/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */</comment>
    <function><type><name>void</name></type> <name>yyrestart</name>  <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>input_file</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    
	<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>YY_CURRENT_BUFFER</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>yyensure_buffer_stack</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>YY_CURRENT_BUFFER_LVALUE</name> <operator>=</operator>
            <call><name>yy_create_buffer</name><argument_list>( <argument><expr><name>yyin</name></expr></argument>, <argument><expr><name>YY_BUF_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>yy_init_buffer</name><argument_list>( <argument><expr><name>YY_CURRENT_BUFFER</name></expr></argument>, <argument><expr><name>input_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>yy_load_buffer_state</name><argument_list>(  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */</comment>
    <function><type><name>void</name></type> <name>yy_switch_to_buffer</name>  <parameter_list>(<parameter><decl><type><name>YY_BUFFER_STATE</name></type>  <name>new_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    
	<comment type="block">/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */</comment>
	<expr_stmt><expr><call><name>yyensure_buffer_stack</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>( <expr><name>YY_CURRENT_BUFFER</name> <operator>==</operator> <name>new_buffer</name></expr> )</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>( <expr><name>YY_CURRENT_BUFFER</name></expr> )</condition>
		<block>{<block_content>
		<comment type="block">/* Flush out information for old buffer. */</comment>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>yy_hold_char</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_buf_pos</name></name> <operator>=</operator> <operator>(</operator><name>yy_c_buf_p</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_n_chars</name></name> <operator>=</operator> <operator>(</operator><name>yy_n_chars</name><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>YY_CURRENT_BUFFER_LVALUE</name> <operator>=</operator> <name>new_buffer</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>yy_load_buffer_state</name><argument_list>(  )</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */</comment>
	<expr_stmt><expr><operator>(</operator><name>yy_did_buffer_switch_on_eof</name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yy_load_buffer_state</name>  <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    	<expr_stmt><expr><operator>(</operator><name>yy_n_chars</name><operator>)</operator> <operator>=</operator> <name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_n_chars</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>yytext_ptr</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>=</operator> <name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_buf_pos</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>yyin</name> <operator>=</operator> <name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_input_file</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>yy_hold_char</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */</comment>
    <function><type><name>YY_BUFFER_STATE</name></type> <name>yy_create_buffer</name>  <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type>  <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>YY_BUFFER_STATE</name></type> <name>b</name></decl>;</decl_stmt>
    
	<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>YY_BUFFER_STATE</name><operator>)</operator> <call><name>yyalloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>yy_buffer_state</name></expr></argument> )</argument_list></sizeof></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>b</name></expr> )</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>YY_FATAL_ERROR</name><argument_list>( <argument><expr><literal type="string">"out of dynamic memory in yy_create_buffer()"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_buf_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

	<comment type="block">/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */</comment>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_ch_buf</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>yyalloc</name><argument_list>( <argument><expr><operator>(</operator><name>yy_size_t</name><operator>)</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>yy_buf_size</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>( <expr><operator>!</operator> <name><name>b</name><operator>-&gt;</operator><name>yy_ch_buf</name></name></expr> )</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>YY_FATAL_ERROR</name><argument_list>( <argument><expr><literal type="string">"out of dynamic memory in yy_create_buffer()"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_is_our_buffer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>yy_init_buffer</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><name>file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */</comment>
    <function><type><name>void</name></type> <name>yy_delete_buffer</name> <parameter_list>(<parameter><decl><type><name>YY_BUFFER_STATE</name></type>  <name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    
	<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>b</name></expr> )</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>( <expr><name>b</name> <operator>==</operator> <name>YY_CURRENT_BUFFER</name></expr> )</condition><block type="pseudo"><block_content> <comment type="block">/* Not sure if we should pop here. */</comment>
		<expr_stmt><expr><name>YY_CURRENT_BUFFER_LVALUE</name> <operator>=</operator> <operator>(</operator><name>YY_BUFFER_STATE</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>( <expr><name><name>b</name><operator>-&gt;</operator><name>yy_is_our_buffer</name></name></expr> )</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>yyfree</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>b</name><operator>-&gt;</operator><name>yy_ch_buf</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>yyfree</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */</comment>
    <function><type><specifier>static</specifier> <name>void</name></type> <name>yy_init_buffer</name>  <parameter_list>(<parameter><decl><type><name>YY_BUFFER_STATE</name></type>  <name>b</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>file</name></decl></parameter> )</parameter_list>

<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>oerrno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
    
	<expr_stmt><expr><call><name>yy_flush_buffer</name><argument_list>( <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_input_file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_fill_buffer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <name>YY_CURRENT_BUFFER</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_bs_lineno</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_bs_column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_is_interactive</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>oerrno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */</comment>
    <function><type><name>void</name></type> <name>yy_flush_buffer</name> <parameter_list>(<parameter><decl><type><name>YY_BUFFER_STATE</name></type>  <name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    	<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>b</name></expr> )</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_n_chars</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */</comment>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_ch_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>YY_END_OF_BUFFER_CHAR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_ch_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>YY_END_OF_BUFFER_CHAR</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_buf_pos</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>yy_ch_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_at_bol</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_buffer_status</name></name> <operator>=</operator> <name>YY_BUFFER_NEW</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>( <expr><name>b</name> <operator>==</operator> <name>YY_CURRENT_BUFFER</name></expr> )</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>yy_load_buffer_state</name><argument_list>(  )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */</comment>
<function><type><name>void</name></type> <name>yypush_buffer_state</name> <parameter_list>(<parameter><decl><type><name>YY_BUFFER_STATE</name></type> <name>new_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    	<if_stmt><if>if <condition>(<expr><name>new_buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>yyensure_buffer_stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* This block is copied from yy_switch_to_buffer. */</comment>
	<if_stmt><if>if <condition>( <expr><name>YY_CURRENT_BUFFER</name></expr> )</condition>
		<block>{<block_content>
		<comment type="block">/* Flush out information for old buffer. */</comment>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>yy_hold_char</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_buf_pos</name></name> <operator>=</operator> <operator>(</operator><name>yy_c_buf_p</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>YY_CURRENT_BUFFER_LVALUE</name><operator>-&gt;</operator><name>yy_n_chars</name></name> <operator>=</operator> <operator>(</operator><name>yy_n_chars</name><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	<comment type="block">/* Only push if top exists. Otherwise, replace top. */</comment>
	<if_stmt><if>if <condition>(<expr><name>YY_CURRENT_BUFFER</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name>yy_buffer_stack_top</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>YY_CURRENT_BUFFER_LVALUE</name> <operator>=</operator> <name>new_buffer</name></expr>;</expr_stmt>

	<comment type="block">/* copied from yy_switch_to_buffer. */</comment>
	<expr_stmt><expr><call><name>yy_load_buffer_state</name><argument_list>(  )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>yy_did_buffer_switch_on_eof</name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */</comment>
<function><type><name>void</name></type> <name>yypop_buffer_state</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>YY_CURRENT_BUFFER</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>yy_delete_buffer</name><argument_list>(<argument><expr><name>YY_CURRENT_BUFFER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>YY_CURRENT_BUFFER_LVALUE</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yy_buffer_stack_top</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>--</operator><operator>(</operator><name>yy_buffer_stack_top</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>YY_CURRENT_BUFFER</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>yy_load_buffer_state</name><argument_list>(  )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>yy_did_buffer_switch_on_eof</name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>yyensure_buffer_stack</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>yy_size_t</name></type> <name>num_to_alloc</name></decl>;</decl_stmt>
    
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>yy_buffer_stack</name><operator>)</operator></expr>)</condition> <block>{<block_content>

		<comment type="block">/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */</comment>
      <expr_stmt><expr><name>num_to_alloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* After all that talk, this was set to 1 anyways... */</comment>
		<expr_stmt><expr><operator>(</operator><name>yy_buffer_stack</name><operator>)</operator> <operator>=</operator> <operator>(</operator>struct <name>yy_buffer_state</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>yyalloc</name>
								<argument_list>(<argument><expr><name>num_to_alloc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>yy_buffer_state</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>
								)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <operator>(</operator><name>yy_buffer_stack</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>YY_FATAL_ERROR</name><argument_list>( <argument><expr><literal type="string">"out of dynamic memory in yyensure_buffer_stack()"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>yy_buffer_stack</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_to_alloc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>yy_buffer_state</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>(</operator><name>yy_buffer_stack_max</name><operator>)</operator> <operator>=</operator> <name>num_to_alloc</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>yy_buffer_stack_top</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yy_buffer_stack_top</name><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><name>yy_buffer_stack_max</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>

		<comment type="block">/* Increase the buffer to prepare for a possible push. */</comment>
		<decl_stmt><decl><type><name>yy_size_t</name></type> <name>grow_size</name> <init>= <expr><literal type="number">8</literal></expr></init></decl> <comment type="block">/* arbitrary grow size */</comment>;</decl_stmt>

		<expr_stmt><expr><name>num_to_alloc</name> <operator>=</operator> <operator>(</operator><name>yy_buffer_stack_max</name><operator>)</operator> <operator>+</operator> <name>grow_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>yy_buffer_stack</name><operator>)</operator> <operator>=</operator> <operator>(</operator>struct <name>yy_buffer_state</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>yyrealloc</name>
								<argument_list>(<argument><expr><operator>(</operator><name>yy_buffer_stack</name><operator>)</operator></expr></argument>,
								<argument><expr><name>num_to_alloc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>yy_buffer_state</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>
								)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <operator>(</operator><name>yy_buffer_stack</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>YY_FATAL_ERROR</name><argument_list>( <argument><expr><literal type="string">"out of dynamic memory in yyensure_buffer_stack()"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* zero only the new slots.*/</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>yy_buffer_stack</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>yy_buffer_stack_max</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>grow_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>yy_buffer_state</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>yy_buffer_stack_max</name><operator>)</operator> <operator>=</operator> <name>num_to_alloc</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */</comment>
<function><type><name>YY_BUFFER_STATE</name></type> <name>yy_scan_buffer</name>  <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>yy_size_t</name></type>  <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>YY_BUFFER_STATE</name></type> <name>b</name></decl>;</decl_stmt>
    
	<if_stmt><if>if <condition>( <expr><name>size</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator>
	     <name><name>base</name><index>[<expr><name>size</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>YY_END_OF_BUFFER_CHAR</name> <operator>||</operator>
	     <name><name>base</name><index>[<expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>YY_END_OF_BUFFER_CHAR</name></expr> )</condition><block type="pseudo"><block_content>
		<comment type="block">/* They forgot to leave room for the EOB's. */</comment>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>YY_BUFFER_STATE</name><operator>)</operator> <call><name>yyalloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>yy_buffer_state</name></expr></argument> )</argument_list></sizeof></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>b</name></expr> )</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>YY_FATAL_ERROR</name><argument_list>( <argument><expr><literal type="string">"out of dynamic memory in yy_scan_buffer()"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_buf_size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>	<comment type="block">/* "- 2" to take care of EOB's */</comment>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_buf_pos</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>yy_ch_buf</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_is_our_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_input_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_n_chars</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>yy_buf_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_is_interactive</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_at_bol</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_fill_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_buffer_status</name></name> <operator>=</operator> <name>YY_BUFFER_NEW</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>yy_switch_to_buffer</name><argument_list>( <argument><expr><name>b</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */</comment>
<function><type><name>YY_BUFFER_STATE</name></type> <name>yy_scan_string</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>yystr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    
	<return>return <expr><call><name>yy_scan_bytes</name><argument_list>( <argument><expr><name>yystr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>yystr</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */</comment>
<function><type><name>YY_BUFFER_STATE</name></type> <name>yy_scan_bytes</name>  <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>yybytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type>  <name>_yybytes_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>YY_BUFFER_STATE</name></type> <name>b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>yy_size_t</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    
	<comment type="block">/* Get memory for full buffer, including space for trailing EOB's. */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>yy_size_t</name><operator>)</operator> <operator>(</operator><name>_yybytes_len</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>yyalloc</name><argument_list>( <argument><expr><name>n</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>buf</name></expr> )</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>YY_FATAL_ERROR</name><argument_list>( <argument><expr><literal type="string">"out of dynamic memory in yy_scan_bytes()"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>_yybytes_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>yybytes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name><name>buf</name><index>[<expr><name>_yybytes_len</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>_yybytes_len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>YY_END_OF_BUFFER_CHAR</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>yy_scan_buffer</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>b</name></expr> )</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>YY_FATAL_ERROR</name><argument_list>( <argument><expr><literal type="string">"bad buffer in yy_scan_bytes()"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */</comment>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>yy_is_our_buffer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_EXIT_FAILURE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_EXIT_FAILURE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <name>yynoreturn</name></type> <name>yy_fatal_error</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr><name>YY_EXIT_FAILURE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Redefine yyless() so it works in section 3 code. */</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>yyless</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyless</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do \
		{ \
		<comment type="block">/* Undo effects of setting up yytext. */</comment> \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )</cpp:value></cpp:define>

<comment type="block">/* Accessor  methods (get/set functions) to struct members. */</comment>

<comment type="block" format="doxygen">/** Get the current line number.
 * 
 */</comment>
<function><type><name>int</name></type> <name>yyget_lineno</name>  <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    
    <return>return <expr><name>yylineno</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Get the input stream.
 * 
 */</comment>
<function><type><name>FILE</name> <modifier>*</modifier></type><name>yyget_in</name>  <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <return>return <expr><name>yyin</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Get the output stream.
 * 
 */</comment>
<function><type><name>FILE</name> <modifier>*</modifier></type><name>yyget_out</name>  <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <return>return <expr><name>yyout</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Get the length of the current token.
 * 
 */</comment>
<function><type><name>int</name></type> <name>yyget_leng</name>  <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <return>return <expr><name>yyleng</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Get the current token.
 * 
 */</comment>

<function><type><name>char</name> <modifier>*</modifier></type><name>yyget_text</name>  <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <return>return <expr><name>yytext</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Set the current line number.
 * @param _line_number line number
 * 
 */</comment>
<function><type><name>void</name></type> <name>yyset_lineno</name> <parameter_list>(<parameter><decl><type><name>int</name></type>  <name>_line_number</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    
    <expr_stmt><expr><name>yylineno</name> <operator>=</operator> <name>_line_number</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */</comment>
<function><type><name>void</name></type> <name>yyset_in</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type>  <name>_in_str</name></decl></parameter> )</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><name>yyin</name> <operator>=</operator> <name>_in_str</name></expr> ;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>yyset_out</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type>  <name>_out_str</name></decl></parameter> )</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><name>yyout</name> <operator>=</operator> <name>_out_str</name></expr> ;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>yyget_debug</name>  <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <return>return <expr><name>yy_flex_debug</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>yyset_debug</name> <parameter_list>(<parameter><decl><type><name>int</name></type>  <name>_bdebug</name></decl></parameter> )</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><name>yy_flex_debug</name> <operator>=</operator> <name>_bdebug</name></expr> ;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>yy_init_globals</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <comment type="block">/* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */</comment>

    <expr_stmt><expr><operator>(</operator><name>yy_buffer_stack</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>yy_buffer_stack_top</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>yy_buffer_stack_max</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>yy_c_buf_p</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>yy_init</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>yy_start</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<comment type="block">/* Defined in main.c */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>YY_STDINIT</name></cpp:ifdef>
    <expr_stmt><expr><name>yyin</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>yyout</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>yyin</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>yyout</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* yylex_destroy is for both reentrant and non-reentrant scanners. */</comment>
<function><type><name>int</name></type> <name>yylex_destroy</name>  <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    
    <comment type="block">/* Pop the buffer stack, destroying each element. */</comment>
	<while>while<condition>(<expr><name>YY_CURRENT_BUFFER</name></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>yy_delete_buffer</name><argument_list>( <argument><expr><name>YY_CURRENT_BUFFER</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>YY_CURRENT_BUFFER_LVALUE</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>yypop_buffer_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Destroy the stack itself. */</comment>
	<expr_stmt><expr><call><name>yyfree</name><argument_list>(<argument><expr><operator>(</operator><name>yy_buffer_stack</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>yy_buffer_stack</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */</comment>
    <expr_stmt><expr><call><name>yy_init_globals</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Internal utility routines.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>yytext_ptr</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>yy_flex_strncpy</name> <parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> )</parameter_list>
<block>{<block_content>
		
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>YY_NEED_STRLEN</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>yy_flex_strlen</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<for>for <control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>s</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block type="pseudo"><block_content>
		<empty_stmt>;</empty_stmt></block_content></block></for>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name> <modifier>*</modifier></type><name>yyalloc</name> <parameter_list>(<parameter><decl><type><name>yy_size_t</name></type>  <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
			<return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>yyrealloc</name>  <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>yy_size_t</name></type>  <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
		
	<comment type="block">/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */</comment>
	<return>return <expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>yyfree</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>ptr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* see yyrealloc() for (char *) cast */</comment>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYTABLES_NAME</name></cpp:macro> <cpp:value>"yytables"</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>862</cpp:number> <cpp:file>"sqlscan.l"</cpp:file></cpp:line>


<comment type="block">/*
 * lexer_errposition
 *		Report a lexical-analysis-time cursor position, if possible.
 *
 * This is expected to be used within an ereport() call.  The return value
 * is a dummy (always 0, in fact).
 *
 * Note that this can only be used for messages from the lexer itself,
 * since it depends on scanbuf to still be valid.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>lexer_errposition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>pos</name></decl>;</decl_stmt>

	<comment type="block">/* Convert byte offset to character number */</comment>
	<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>_pg_mbstrlen_with_len</name><argument_list>(<argument><expr><name>scanbuf</name></expr></argument>, <argument><expr><name><name>orafce_sql_yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>lloc</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<comment type="block">/* And pass it to the ereport mechanism */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">120000</literal></expr></cpp:if>

	<expr_stmt><expr><call><name>errposition</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>pos</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

	<return>return <expr><call><name>errposition</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<comment type="block">/*
 * yyerror
 *		Report a lexer or grammar error.
 *
 * The message's cursor position identifies the most recently lexed token.
 * This is OK for syntax error messages from the Bison parser, because Bison
 * parsers report error as soon as the first unparsable token is reached.
 * Beware of using yyerror for other purposes, as the cursor position might
 * be misleading!
 */</comment>
<function><type><name>void</name></type>
<name>orafce_sql_yyerror</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>loc</name> <init>= <expr><name>scanbuf</name> <operator>+</operator> <name><name>orafce_sql_yylval</name><operator>.</operator><name>val</name><operator>.</operator><name>lloc</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>loc</name> <operator>==</operator> <name>YY_END_OF_BUFFER_CHAR</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s at end of input"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>lexer_errposition</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s at or near \"%s\""</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>loc</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>lexer_errposition</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Called before any actual parsing is done
 */</comment>
<function><type><name>void</name></type>
<name>orafce_sql_scanner_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>	<name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Might be left over after ereport()
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>YY_CURRENT_BUFFER</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>yy_delete_buffer</name><argument_list>(<argument><expr><name>YY_CURRENT_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Make a scan buffer with special termination needed by flex.
	 */</comment>
	<expr_stmt><expr><name>scanbuflen</name> <operator>=</operator> <name>slen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>scanbuf</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>slen</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>scanbuf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scanbuf</name><index>[<expr><name>slen</name></expr>]</index></name> <operator>=</operator> <name><name>scanbuf</name><index>[<expr><name>slen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>YY_END_OF_BUFFER_CHAR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>scanbufhandle</name> <operator>=</operator> <call><name>yy_scan_buffer</name><argument_list>(<argument><expr><name>scanbuf</name></expr></argument>, <argument><expr><name>slen</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* initialize literal buffer to a reasonable but expansible size */</comment>
	<expr_stmt><expr><name>literalalloc</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>literalbuf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>literalalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>startlit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>BEGIN</name><argument_list>(<argument><expr><name>INITIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Called after parsing is done to clean up after fdate_scanner_init()
 */</comment>
<function><type><name>void</name></type>
<name>orafce_sql_scanner_finish</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>yy_delete_buffer</name><argument_list>(<argument><expr><name>scanbufhandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>scanbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>addlit</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ytext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yleng</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* enlarge buffer if needed */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>literallen</name><operator>+</operator><name>yleng</name><operator>)</operator> <operator>&gt;=</operator> <name>literalalloc</name></expr>)</condition>
	<block>{<block_content>
		<do>do <block>{<block_content>
			<expr_stmt><expr><name>literalalloc</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><operator>(</operator><name>literallen</name><operator>+</operator><name>yleng</name><operator>)</operator> <operator>&gt;=</operator> <name>literalalloc</name></expr>)</condition>;</do>
		<expr_stmt><expr><name>literalbuf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>literalbuf</name></expr></argument>, <argument><expr><name>literalalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* append new data, add trailing null */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>literalbuf</name><operator>+</operator><name>literallen</name></expr></argument>, <argument><expr><name>ytext</name></expr></argument>, <argument><expr><name>yleng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>literallen</name> <operator>+=</operator> <name>yleng</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>literalbuf</name><index>[<expr><name>literallen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>addlitchar</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>ychar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* enlarge buffer if needed */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>literallen</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <name>literalalloc</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>literalalloc</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>literalbuf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>literalbuf</name></expr></argument>, <argument><expr><name>literalalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* append new data, add trailing null */</comment>
	<expr_stmt><expr><name><name>literalbuf</name><index>[<expr><name>literallen</name></expr>]</index></name> <operator>=</operator> <name>ychar</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>literallen</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>literalbuf</name><index>[<expr><name>literallen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * One might be tempted to write pstrdup(literalbuf) instead of this,
 * but for long literals this is much faster because the length is
 * already known.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>litbufdup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>literallen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>literalbuf</name></expr></argument>, <argument><expr><name>literallen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type>
<name>unescape_single_char</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="char">'b'</literal></expr>:</case>
			<return>return <expr><literal type="char">'\b'</literal></expr>;</return>
		<case>case <expr><literal type="char">'f'</literal></expr>:</case>
			<return>return <expr><literal type="char">'\f'</literal></expr>;</return>
		<case>case <expr><literal type="char">'n'</literal></expr>:</case>
			<return>return <expr><literal type="char">'\n'</literal></expr>;</return>
		<case>case <expr><literal type="char">'r'</literal></expr>:</case>
			<return>return <expr><literal type="char">'\r'</literal></expr>;</return>
		<case>case <expr><literal type="char">'t'</literal></expr>:</case>
			<return>return <expr><literal type="char">'\t'</literal></expr>;</return>
		<default>default:</default>
			<return>return <expr><name>c</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>



</unit>
