<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/gpcontrib/orafce/charpad.c"><comment type="block">/*----------------------------------------------------------------------------
 *
 *  charpad.c
 *  LPAD and RPAD SQL functions for PostgreSQL.
 *
 *----------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/formatting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orafce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtins.h"</cpp:file></cpp:include>

<comment type="block">/* flags */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ON</name></cpp:macro>	<cpp:value>true</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name></cpp:macro>	<cpp:value>false</cpp:value></cpp:define>

<comment type="block">/* Upper limit on total width of the padded output of *pad functions */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAD_MAX</name></cpp:macro> <cpp:value>4000</cpp:value></cpp:define>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orafce_lpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orafce_rpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * orafce_lpad(string text, length int32 [, fill text])
 *
 * Fill up the string to length 'length' by prepending
 * the characters fill (a half-width space by default)
 */</comment>
<function><type><name>Datum</name></type>
<name>orafce_lpad</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	<modifier>*</modifier></type><name>string1</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>	<name>output_width</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	<modifier>*</modifier></type><name>string2</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	<modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	<modifier>*</modifier></type><name>ptr1</name></decl>,
			<decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name> <init>= <expr><name>NULL</name></expr></init></decl>,
			<decl><type ref="prev"><modifier>*</modifier></type><name>ptr2start</name> <init>= <expr><name>NULL</name></expr></init></decl>,
			<decl><type ref="prev"><modifier>*</modifier></type><name>ptr2end</name> <init>= <expr><name>NULL</name></expr></init></decl>,
			<decl><type ref="prev"><modifier>*</modifier></type><name>ptr_ret</name></decl>,
			<decl><type ref="prev"><modifier>*</modifier></type><name>spc</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>mlen</name></decl>,
			<decl><type ref="prev"/><name>dsplen</name></decl>,
			<decl><type ref="prev"/><name>s1blen</name></decl>,
			<decl><type ref="prev"/><name>s2blen</name></decl>,
			<decl><type ref="prev"/><name>hslen</name></decl>,
			<decl><type ref="prev"/><name>total_blen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
			<decl><type ref="prev"/><name>s1_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
			<decl><type ref="prev"/><name>s2_add_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
			<decl><type ref="prev"/><name>s1_add_blen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
			<decl><type ref="prev"/><name>s2_add_blen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>	<name>s2_operate</name> <init>= <expr><name>ON</name></expr></init></decl>,
			<decl><type ref="prev"/><name>half_space</name> <init>= <expr><name>OFF</name></expr></init></decl>,
			<decl><type ref="prev"/><name>init_ptr</name> <init>= <expr><name>ON</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* validate output width (the 2nd argument) */</comment>
	<if_stmt><if>if <condition>(<expr><name>output_width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>output_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>output_width</name> <operator>&gt;</operator> <name>PAD_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>output_width</name> <operator>=</operator> <name>PAD_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* get byte-length of the 1st and 3rd argument strings */</comment>
	<expr_stmt><expr><name>s1blen</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>string1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s2blen</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* validate the lengths */</comment>
	<if_stmt><if>if <condition>(<expr><name>s1blen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>s1blen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>s2blen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>s2blen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* if the filler length is zero disable filling */</comment>
	<if_stmt><if>if <condition>(<expr><name>s2blen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>s2_operate</name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>	<comment type="block">/* turn off string2 processing flag */</comment>
		<expr_stmt><expr><name>output_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>	<comment type="block">/* same behavior as Oracle database */</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* byte-length of half-width space */</comment>
	<expr_stmt><expr><name>hslen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>spc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Calculate the length of the portion of string1 to include in
	 * the final output
	 */</comment>
	<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>string1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>s1blen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* byte-length and display length per character of string1 */</comment>
		<expr_stmt><expr><name>mlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dsplen</name> <operator>=</operator> <call><name>pg_dsplen</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* accumulate display length of string1 */</comment>
		<expr_stmt><expr><name>s1_width</name> <operator>+=</operator> <name>dsplen</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * if string1 is longer/wider than the requested output_width,
		 * discard this character and prepend a half-width space instead
		 */</comment>
		<if_stmt><if>if<condition>(<expr><name>s1_width</name> <operator>&gt;=</operator> <name>output_width</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>s1_width</name> <operator>!=</operator> <name>output_width</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* secure bytes for a half-width space in the final output */</comment>
				<if_stmt><if>if <condition>(<expr><name>output_width</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>s1_add_blen</name> <operator>+=</operator> <name>hslen</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>half_space</name> <operator>=</operator> <name>ON</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else <comment type="block">/* exactly fits, so include this chracter */</comment>
			<block>{<block_content>
				<expr_stmt><expr><name>s1_add_blen</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<comment type="block">/*
			 * turn off string2 processing because string1 already
			 * consumed output_width
			 */</comment>
			<expr_stmt><expr><name>s2_operate</name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>

			<comment type="block">/* done with string1 */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* accumulate string1's portion of byte-length of the output */</comment>
		<expr_stmt><expr><name>s1_add_blen</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

		<comment type="block">/* advance one character within string1 */</comment>
		<expr_stmt><expr><name>ptr1</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

		<comment type="block">/* loop counter */</comment>
		<expr_stmt><expr><name>s1blen</name> <operator>-=</operator> <name>mlen</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Calculate the length of the portion composed of string2 to use for padding */</comment>
	<if_stmt><if>if <condition>(<expr><name>s2_operate</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* remaining part of output_width is composed of string2 */</comment>
		<expr_stmt><expr><name>s2_add_width</name> <operator>=</operator> <name>output_width</name> <operator>-</operator> <name>s1_width</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr2start</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr2end</name> <operator>=</operator> <name>ptr2</name> <operator>+</operator> <name>s2blen</name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>s2_add_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*  byte-length and display length per character of string2 */</comment>
			<expr_stmt><expr><name>mlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>dsplen</name> <operator>=</operator> <call><name>pg_dsplen</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * output_width can not fit this character of string2, so discard it and
			 * prepend a half-width space instead
			 */</comment>
			<if_stmt><if>if<condition>(<expr><name>dsplen</name> <operator>&gt;</operator> <name>s2_add_width</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>s2_add_blen</name> <operator>+=</operator> <name>hslen</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>half_space</name> <operator>=</operator> <name>ON</name></expr>;</expr_stmt>

				<comment type="block">/* done with string2 */</comment>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* accumulate string2's portion of byte-length of the output */</comment>
			<expr_stmt><expr><name>s2_add_blen</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

			<comment type="block">/* loop counter */</comment>
			<expr_stmt><expr><name>s2_add_width</name> <operator>-=</operator> <name>dsplen</name></expr>;</expr_stmt>

			<comment type="block">/* advance one character within string2 */</comment>
			<expr_stmt><expr><name>ptr2</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

			<comment type="block">/* when get to the end of string2, reset ptr2 to the start */</comment>
			<if_stmt><if>if <condition>(<expr><name>ptr2</name> <operator>==</operator> <name>ptr2end</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr2start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* allocate enough space to contain output_width worth of characters */</comment>
	<expr_stmt><expr><name>total_blen</name> <operator>=</operator> <name>s1_add_blen</name> <operator>+</operator> <name>s2_add_blen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>VARHDRSZ</name> <operator>+</operator> <name>total_blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr_ret</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * add a half-width space as a padding necessary to satisfy the required
	 * output_width
	 *
	 * (memory already allocated as reserved by either s1_add_blen
	 *  or s2_add_blen)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>half_space</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr_ret</name></expr></argument>, <argument><expr><name>spc</name></expr></argument>, <argument><expr><name>hslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr_ret</name> <operator>+=</operator> <name>hslen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* prepend string2 padding */</comment>
	<while>while<condition>(<expr><name>s2_add_blen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* reset ptr2 to the string2 start */</comment>
		<if_stmt><if>if<condition>(<expr><name>init_ptr</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>init_ptr</name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr2start</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>mlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><name>s2_add_blen</name> <operator>&lt;</operator> <name>mlen</name></expr> )</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr_ret</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr_ret</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr2</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

		<comment type="block">/* loop counter */</comment>
		<expr_stmt><expr><name>s2_add_blen</name> <operator>-=</operator> <name>mlen</name></expr>;</expr_stmt>

		<comment type="block">/* when get to the end of string2, reset ptr2 back to the start */</comment>
		<if_stmt><if>if <condition>(<expr><name>ptr2</name> <operator>==</operator> <name>ptr2end</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr2start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>init_ptr</name> <operator>=</operator> <name>ON</name></expr>;</expr_stmt>

	<comment type="block">/* string1 */</comment>
	<while>while<condition>(<expr><name>s1_add_blen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* reset ptr1 back to the start of string1 */</comment>
		<if_stmt><if>if<condition>(<expr><name>init_ptr</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>init_ptr</name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>string1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>mlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>( <expr><name>s1_add_blen</name> <operator>&lt;</operator> <name>mlen</name></expr> )</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr_ret</name></expr></argument>, <argument><expr><name>ptr1</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr_ret</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr1</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

		<comment type="block">/* loop counter */</comment>
		<expr_stmt><expr><name>s1_add_blen</name> <operator>-=</operator> <name>mlen</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr_ret</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * orafce_rpad(string text, length int32 [, fill text])
 *
 * Fill up the string to length 'length' by appending
 * the characters fill (a half-width space by default)
 */</comment>
<function><type><name>Datum</name></type>
<name>orafce_rpad</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	<modifier>*</modifier></type><name>string1</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>	<name>output_width</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	<modifier>*</modifier></type><name>string2</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	<modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	<modifier>*</modifier></type><name>ptr1</name></decl>,
			<decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name> <init>= <expr><name>NULL</name></expr></init></decl>,
			<decl><type ref="prev"><modifier>*</modifier></type><name>ptr2start</name> <init>= <expr><name>NULL</name></expr></init></decl>,
			<decl><type ref="prev"><modifier>*</modifier></type><name>ptr2end</name> <init>= <expr><name>NULL</name></expr></init></decl>,
			<decl><type ref="prev"><modifier>*</modifier></type><name>ptr_ret</name></decl>,
			<decl><type ref="prev"><modifier>*</modifier></type><name>spc</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>mlen</name></decl>,
			<decl><type ref="prev"/><name>dsplen</name></decl>,
			<decl><type ref="prev"/><name>s1blen</name></decl>,
			<decl><type ref="prev"/><name>s2blen</name></decl>,
			<decl><type ref="prev"/><name>hslen</name></decl>,
			<decl><type ref="prev"/><name>total_blen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
			<decl><type ref="prev"/><name>s1_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
			<decl><type ref="prev"/><name>s2_add_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
			<decl><type ref="prev"/><name>s1_add_blen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
			<decl><type ref="prev"/><name>s2_add_blen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>	<name>s2_operate</name> <init>= <expr><name>ON</name></expr></init></decl>,
			<decl><type ref="prev"/><name>half_space</name> <init>= <expr><name>OFF</name></expr></init></decl>,
			<decl><type ref="prev"/><name>init_ptr</name> <init>= <expr><name>ON</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* validate output width (the 2nd argument) */</comment>
	<if_stmt><if>if <condition>(<expr><name>output_width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>output_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>output_width</name> <operator>&gt;</operator> <name>PAD_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>output_width</name> <operator>=</operator> <name>PAD_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* get byte-length of the 1st and 3rd argument strings */</comment>
	<expr_stmt><expr><name>s1blen</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>string1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s2blen</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* validate the lengths */</comment>
	<if_stmt><if>if <condition>(<expr><name>s1blen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>s1blen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>s2blen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>s2blen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* if the filler length is zero disable filling */</comment>
	<if_stmt><if>if <condition>(<expr><name>s2blen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>s2_operate</name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>	<comment type="block">/* turn off string2 processing flag */</comment>
		<expr_stmt><expr><name>output_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>	<comment type="block">/* same behavior as Oracle database */</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* byte-length of half-width space */</comment>
	<expr_stmt><expr><name>hslen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>spc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Calculate the length of the portion of string1 to include in
	 * the final output
	 */</comment>
	<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>string1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>s1blen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* byte-length and display length per character of string1 */</comment>
		<expr_stmt><expr><name>mlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dsplen</name> <operator>=</operator> <call><name>pg_dsplen</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* accumulate display length of string1 */</comment>
		<expr_stmt><expr><name>s1_width</name> <operator>+=</operator> <name>dsplen</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * if string1 is longer/wider than the requested output_width,
		 * discard this character and prepend a half-width space instead
		 */</comment>
		<if_stmt><if>if<condition>(<expr><name>s1_width</name> <operator>&gt;=</operator> <name>output_width</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>s1_width</name> <operator>!=</operator> <name>output_width</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* secure bytes for a half-width space in the final output */</comment>
				<if_stmt><if>if <condition>(<expr><name>output_width</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>s1_add_blen</name> <operator>+=</operator> <name>hslen</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>half_space</name> <operator>=</operator> <name>ON</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else <comment type="block">/* exactly fits, so include this chracter */</comment>
			<block>{<block_content>
				<expr_stmt><expr><name>s1_add_blen</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<comment type="block">/*
			 * turn off string2 processing because string1 already
			 * consumed output_width
			 */</comment>
			<expr_stmt><expr><name>s2_operate</name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>

			<comment type="block">/* done with string1 */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* accumulate string1's portion of byte-length of the output */</comment>
		<expr_stmt><expr><name>s1_add_blen</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

		<comment type="block">/* advance one character within string1 */</comment>
		<expr_stmt><expr><name>ptr1</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

		<comment type="block">/* loop counter */</comment>
		<expr_stmt><expr><name>s1blen</name> <operator>-=</operator> <name>mlen</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Calculate the length of the portion composed of string2 to use for padding */</comment>
	<if_stmt><if>if <condition>(<expr><name>s2_operate</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* remaining part of output_width is composed of string2 */</comment>
		<expr_stmt><expr><name>s2_add_width</name> <operator>=</operator> <name>output_width</name> <operator>-</operator> <name>s1_width</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr2start</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr2end</name> <operator>=</operator> <name>ptr2</name> <operator>+</operator> <name>s2blen</name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>s2_add_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*  byte-length and display length per character of string2 */</comment>
			<expr_stmt><expr><name>mlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>dsplen</name> <operator>=</operator> <call><name>pg_dsplen</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * output_width can not fit this character of string2, so discard it and
			 * prepend a half-width space instead
			 */</comment>
			<if_stmt><if>if<condition>(<expr><name>dsplen</name> <operator>&gt;</operator> <name>s2_add_width</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>s2_add_blen</name> <operator>+=</operator> <name>hslen</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>half_space</name> <operator>=</operator> <name>ON</name></expr>;</expr_stmt>

				<comment type="block">/* done with string2 */</comment>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* accumulate string2's portion of byte-length of the output */</comment>
			<expr_stmt><expr><name>s2_add_blen</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

			<comment type="block">/* loop counter */</comment>
			<expr_stmt><expr><name>s2_add_width</name> <operator>-=</operator> <name>dsplen</name></expr>;</expr_stmt>

			<comment type="block">/* advance one character within string2 */</comment>
			<expr_stmt><expr><name>ptr2</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

			<comment type="block">/* when get to the end of string2, reset ptr2 to the start */</comment>
			<if_stmt><if>if <condition>(<expr><name>ptr2</name> <operator>==</operator> <name>ptr2end</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr2start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* allocate enough space to contain output_width worth of characters */</comment>
	<expr_stmt><expr><name>total_blen</name> <operator>=</operator> <name>s1_add_blen</name> <operator>+</operator> <name>s2_add_blen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>VARHDRSZ</name> <operator>+</operator> <name>total_blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr_ret</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* string1 */</comment>
	<while>while<condition>(<expr><name>s1_add_blen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* reset ptr1 back to the start of string1 */</comment>
		<if_stmt><if>if<condition>(<expr><name>init_ptr</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>init_ptr</name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>string1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>mlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>( <expr><name>s1_add_blen</name> <operator>&lt;</operator> <name>mlen</name></expr> )</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr_ret</name></expr></argument>, <argument><expr><name>ptr1</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr_ret</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr1</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

		<comment type="block">/* loop counter */</comment>
		<expr_stmt><expr><name>s1_add_blen</name> <operator>-=</operator> <name>mlen</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>init_ptr</name> <operator>=</operator> <name>ON</name></expr>;</expr_stmt>

	<comment type="block">/* append string2 padding */</comment>
	<while>while<condition>(<expr><name>s2_add_blen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* reset ptr2 to the string2 start */</comment>
		<if_stmt><if>if<condition>(<expr><name>init_ptr</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>init_ptr</name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr2start</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>mlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><name>s2_add_blen</name> <operator>&lt;</operator> <name>mlen</name></expr> )</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr_ret</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr_ret</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr2</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

		<comment type="block">/* loop counter */</comment>
		<expr_stmt><expr><name>s2_add_blen</name> <operator>-=</operator> <name>mlen</name></expr>;</expr_stmt>

		<comment type="block">/* when get to the end of string2, reset ptr2 back to the start */</comment>
		<if_stmt><if>if <condition>(<expr><name>ptr2</name> <operator>==</operator> <name>ptr2end</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr2start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * add a half-width space as a padding necessary to satisfy the required
	 * output_width
	 *
	 * (memory already allocated as reserved by either s1_add_blen
	 *  or s2_add_blen)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>half_space</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr_ret</name></expr></argument>, <argument><expr><name>spc</name></expr></argument>, <argument><expr><name>hslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr_ret</name> <operator>+=</operator> <name>hslen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr_ret</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
