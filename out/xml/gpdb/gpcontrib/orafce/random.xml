<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/gpcontrib/orafce/random.c"><comment type="block">/*
 * Note - I don't find any documentation about pseudo random
 * number generator used in Oracle. So the results of these
 * functions should be different then native Oracle functions!
 * This library is based on ANSI C implementation.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orafce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtins.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_random_initialize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_random_normal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_random_random</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_random_seed_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_random_seed_varchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_random_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_random_terminate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_random_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_random_value_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Coefficients in rational approximations. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>a</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><operator>-</operator><literal type="number">3.969683028665376e+01</literal></expr>,
	 <expr><literal type="number">2.209460984245205e+02</literal></expr>,
	<expr><operator>-</operator><literal type="number">2.759285104469687e+02</literal></expr>,
	 <expr><literal type="number">1.383577518672690e+02</literal></expr>,
	<expr><operator>-</operator><literal type="number">3.066479806614716e+01</literal></expr>,
	 <expr><literal type="number">2.506628277459239e+00</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>b</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><operator>-</operator><literal type="number">5.447609879822406e+01</literal></expr>,
	 <expr><literal type="number">1.615858368580409e+02</literal></expr>,
	<expr><operator>-</operator><literal type="number">1.556989798598866e+02</literal></expr>,
	 <expr><literal type="number">6.680131188771972e+01</literal></expr>,
	<expr><operator>-</operator><literal type="number">1.328068155288572e+01</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>c</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><operator>-</operator><literal type="number">7.784894002430293e-03</literal></expr>,
	<expr><operator>-</operator><literal type="number">3.223964580411365e-01</literal></expr>,
	<expr><operator>-</operator><literal type="number">2.400758277161838e+00</literal></expr>,
	<expr><operator>-</operator><literal type="number">2.549732539343734e+00</literal></expr>,
	 <expr><literal type="number">4.374664141464968e+00</literal></expr>,
	 <expr><literal type="number">2.938163982698783e+00</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>d</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><literal type="number">7.784695709041462e-03</literal></expr>,
	<expr><literal type="number">3.224671290700398e-01</literal></expr>,
	<expr><literal type="number">2.445134137142996e+00</literal></expr>,
	<expr><literal type="number">3.754408661907416e+00</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOW</name></cpp:macro> <cpp:value>0.02425</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIGH</name></cpp:macro> <cpp:value>0.97575</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>ltqnorm</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * dbms_random.initialize (seed IN BINARY_INTEGER)
 *
 *     Initialize package with a seed value
 */</comment>
<function><type><name>Datum</name></type>
<name>dbms_random_initialize</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>seed</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * dbms_random.normal() RETURN NUMBER;
 *
 *     Returns random numbers in a standard normal distribution
 */</comment>
<function><type><name>Datum</name></type>
<name>dbms_random_normal</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float8</name></type> <name>result</name></decl>;</decl_stmt>
	
	<comment type="block">/* need random value from (0..1) */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ltqnorm</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>RAND_MAX</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_FLOAT8</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * dbms_random.random() RETURN BINARY_INTEGER;
 *
 *     Generate Random Numeric Values
 */</comment>
<function><type><name>Datum</name></type>
<name>dbms_random_random</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
	<comment type="block">/*
	 * Oracle generator generates numebers from -2^31 and +2^31,
	 * ANSI C only from 0 .. RAND_MAX,
	 */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>-</operator> <name>RAND_MAX</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * dbms_random.seed(val IN BINARY_INTEGER);
 * dbms_random.seed(val IN VARCHAR2);
 *
 *     Reset the seed value
 */</comment>
<function><type><name>Datum</name></type>
<name>dbms_random_seed_int</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>seed</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Atention!
 *
 * Hash function should be changed between mayor pg versions,
 * don't use text based seed for regres tests!
 */</comment>
<function><type><name>Datum</name></type>
<name>dbms_random_seed_varchar</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>seed</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>seed</name> <operator>=</operator> <call><name>hash_any</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * dbms_random.string(opt IN CHAR, len IN NUMBER) RETURN VARCHAR2;
 *
 *     Create Random Strings
 * opt seed values:
 * 'a','A'  alpha characters only (mixed case)
 * 'l','L'  lower case alpha characters only
 * 'p','P'  any printable characters
 * 'u','U'  upper case alpha characters only
 * 'x','X'  any alpha-numeric characters (upper)
 */</comment>
<function><type><specifier>static</specifier> <name>text</name> <modifier>*</modifier></type>
<name>random_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chrset_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type>	<name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>i</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>RAND_MAX</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>chrset_size</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>charset</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	
	<return>return <expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>dbms_random_string</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>chrset_size</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alpha_mixed</name> <init>= <expr><literal type="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lower_only</name> <init>= <expr><literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>upper_only</name> <init>= <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>upper_alphanum</name> <init>= <expr><literal type="string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>printable</name> <init>= <expr><literal type="string">"`1234567890-=qwertyuiop[]asdfghjkl;'zxcvbnm,./!@#$%^&amp;*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVVBNM&lt;&gt;? "</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"an argument is NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>option</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<switch>switch <condition>(<expr><name><name>option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="char">'a'</literal></expr>:</case>
		<case>case <expr><literal type="char">'A'</literal></expr>:</case>
			<expr_stmt><expr><name>charset</name> <operator>=</operator> <name>alpha_mixed</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>chrset_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>alpha_mixed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'l'</literal></expr>:</case>
		<case>case <expr><literal type="char">'L'</literal></expr>:</case>
			<expr_stmt><expr><name>charset</name> <operator>=</operator> <name>lower_only</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>chrset_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>lower_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'u'</literal></expr>:</case>
		<case>case <expr><literal type="char">'U'</literal></expr>:</case>
			<expr_stmt><expr><name>charset</name> <operator>=</operator> <name>upper_only</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>chrset_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>upper_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'x'</literal></expr>:</case>
		<case>case <expr><literal type="char">'X'</literal></expr>:</case>
			<expr_stmt><expr><name>charset</name> <operator>=</operator> <name>upper_alphanum</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>chrset_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>upper_alphanum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'p'</literal></expr>:</case>
		<case>case <expr><literal type="char">'P'</literal></expr>:</case>
			<expr_stmt><expr><name>charset</name> <operator>=</operator> <name>printable</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>chrset_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>printable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
			
		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unknown option '%s'"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"available option \"aAlLuUxXpP\""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* be compiler a quiete */</comment>
			<expr_stmt><expr><name>charset</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>chrset_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></switch>
	
	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>random_string</name><argument_list>(<argument><expr><name>charset</name></expr></argument>, <argument><expr><name>chrset_size</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * dbms_random.terminate;
 *
 *     Terminate use of the Package
 */</comment>
<function><type><name>Datum</name></type>
<name>dbms_random_terminate</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* do nothing */</comment>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * dbms_random.value() RETURN NUMBER;
 *
 *     Gets a random number, greater than or equal to 0 and less than 1.
 */</comment>
<function><type><name>Datum</name></type>
<name>dbms_random_value</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float8</name></type> <name>result</name></decl>;</decl_stmt>
	
	<comment type="block">/* result [0.0 - 1.0) */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>RAND_MAX</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>PG_RETURN_FLOAT8</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * dbms_random.value(low  NUMBER, high NUMBER) RETURN NUMBER
 *
 *     Alternatively, you can get a random Oracle number x,
 *     where x is greater than or equal to low and less than high
 */</comment>
<function><type><name>Datum</name></type>
<name>dbms_random_value_range</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float8</name></type> <name>low</name> <init>= <expr><call><name>PG_GETARG_FLOAT8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>high</name> <init>= <expr><call><name>PG_GETARG_FLOAT8</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>low</name> <operator>&gt;</operator> <name>high</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>RAND_MAX</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>(</operator> <name>high</name> <operator>-</operator>  <name>low</name><operator>)</operator> <operator>+</operator> <name>low</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_FLOAT8</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Lower tail quantile for standard normal distribution function.
 *
 * This function returns an approximation of the inverse cumulative
 * standard normal distribution function.  I.e., given P, it returns
 * an approximation to the X satisfying P = Pr{Z &lt;= X} where Z is a
 * random variable from the standard normal distribution.
 *
 * The algorithm uses a minimax approximation by rational functions
 * and the result has a relative error whose absolute value is less
 * than 1.15e-9.
 *
 * Author:      Peter J. Acklam
 * Time-stamp:  2002-06-09 18:45:44 +0200
 * E-mail:      jacklam@math.uio.no
 * WWW URL:     http://www.math.uio.no/~jacklam
 *
 * C implementation adapted from Peter's Perl version
 */</comment>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>ltqnorm</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>p</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>p</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EDOM</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0.0</literal></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><name>HUGE_VAL</name></expr> <comment type="block">/* minus "infinity" */</comment>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
		<return>return <expr><name>HUGE_VAL</name></expr> <comment type="block">/* "infinity" */</comment>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>LOW</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Rational approximation for lower region */</comment>
		<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><call><name>log</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>q</name><operator>+</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>q</name><operator>+</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>q</name><operator>+</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>q</name><operator>+</operator><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>q</name><operator>+</operator><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>/</operator>
			<operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>q</name><operator>+</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>q</name><operator>+</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>q</name><operator>+</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>q</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>HIGH</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Rational approximation for upper region */</comment>
		<expr_stmt><expr><name>q</name>  <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><call><name>log</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>-</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>q</name><operator>+</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>q</name><operator>+</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>q</name><operator>+</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>q</name><operator>+</operator><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>q</name><operator>+</operator><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>/</operator>
			<operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>q</name><operator>+</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>q</name><operator>+</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>q</name><operator>+</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>q</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Rational approximation for central region */</comment>
		<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>-</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>q</name><operator>*</operator><name>q</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>r</name><operator>+</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>r</name><operator>+</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>r</name><operator>+</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>r</name><operator>+</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>r</name><operator>+</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>q</name> <operator>/</operator>
			<operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>r</name><operator>+</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>r</name><operator>+</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>r</name><operator>+</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>r</name><operator>+</operator><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
