<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/gpcontrib/orafce/shmmc.c"><comment type="block">/*
 *
 * Shared memory control - based on alocating chunks aligned on
 * asize array (fibonachi), and dividing free bigger block.
 *
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shmmc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orafce.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdint.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_ITEMS</name></cpp:macro>  <cpp:value>512</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>context</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>first_byte_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>dispossible</name></decl>;</decl_stmt>
<comment type="block">/*	int16 context; */</comment>
}</block></struct></type> <name>list_item</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>list_c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>max_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vardata</name></type> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>	 <comment type="block">/* flexible array member */</comment>
}</block></struct></type> <name>mem_desc</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SIZE</name></cpp:macro> <cpp:value>82688</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name><name>asize</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">32</literal></expr>,
	<expr><literal type="number">64</literal></expr>,       <expr><literal type="number">96</literal></expr>,   <expr><literal type="number">160</literal></expr>,  <expr><literal type="number">256</literal></expr>,
	<expr><literal type="number">416</literal></expr>,     <expr><literal type="number">672</literal></expr>,  <expr><literal type="number">1088</literal></expr>,  <expr><literal type="number">1760</literal></expr>,
	<expr><literal type="number">2848</literal></expr>,   <expr><literal type="number">4608</literal></expr>,  <expr><literal type="number">7456</literal></expr>, <expr><literal type="number">12064</literal></expr>,
	<expr><literal type="number">19520</literal></expr>, <expr><literal type="number">31584</literal></expr>, <expr><literal type="number">51104</literal></expr>, <expr><literal type="number">82688</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>list_c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_item</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>max_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<comment type="block">/* align requested size */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ptr_comp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>d</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>list_item</name> <modifier>*</modifier></type><name>_a</name> <init>= <expr><operator>(</operator><name>list_item</name><operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>list_item</name> <modifier>*</modifier></type><name>_b</name> <init>= <expr><operator>(</operator><name>list_item</name><operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>_a</name><operator>-&gt;</operator><name>first_byte_ptr</name></name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>_b</name><operator>-&gt;</operator><name>first_byte_ptr</name></name></expr>;</expr_stmt>

	<return>return <expr><ternary><condition><expr><name>d</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ora_sstrcpy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>result</name> <operator>=</operator> <call><name>ora_salloc</name><argument_list>(<argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed while allocation block %d bytes in shared memory."</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Increase SHMEMMSGSZ and recompile package."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ora_scstring</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>result</name> <operator>=</operator> <call><name>ora_salloc</name><argument_list>(<argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed while allocation block %d bytes in shared memory."</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Increase SHMEMMSGSZ and recompile package."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compact the list of slots, by merging adjacent unused slots into larger
 * slots.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>defragmentation</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>target</name></decl>;</decl_stmt>

	<comment type="block">/* Sort the array to pointer order */</comment>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>*</operator><name>list_c</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>list_item</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ptr_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Merge adjacent dispossible slots, and move up other slots */</comment>
	<expr_stmt><expr><name>target</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>src</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>src</name> <operator>&lt;</operator> <operator>*</operator><name>list_c</name></expr>;</condition> <incr><expr><name>src</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<name><name>list</name><index>[<expr><name>src</name></expr>]</index></name><operator>.</operator><name>dispossible</name> <operator>&amp;&amp;</operator>
			<name><name>list</name><index>[<expr><name>target</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dispossible</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>list</name><index>[<expr><name>target</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>+=</operator> <name><name>list</name><index>[<expr><name>src</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>src</name> <operator>!=</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>list</name><index>[<expr><name>target</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>list</name><index>[<expr><name>src</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>list_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>target</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><operator>*</operator><name>list_c</name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>align_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* default, we can allocate max MAX_SIZE memory block */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">17</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>asize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>asize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
		   <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
		    <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"too much large memory block request"</literal></expr></argument>)</argument_list></call><operator>,</operator>
		    <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed while allocation block %lu bytes in shared memory."</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call><operator>,</operator>
		    <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Increase MAX_SIZE constant, fill table a_size and recompile package."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
  initialize shared memory. It works in two modes, create and no create.
  No create is used for mounting shared memory buffer. Top of memory is
  used for list_item array.
*/</comment>

<function><type><name>void</name></type>
<name>ora_sinit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>create</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>mem_desc</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>(</operator><name>mem_desc</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>(</operator><name>list_item</name><operator>*</operator><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>list_c</name> <operator>=</operator> <operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>list_c</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>max_size</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>max_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>create</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>list_item</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>LIST_ITEMS</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mem_desc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first_byte_ptr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>list_item</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>LIST_ITEMS</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dispossible</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>list_c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name><modifier>*</modifier></type>
<name>ora_salloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>aligned_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>repeat_c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>aligned_size</name> <operator>=</operator> <call><name>align_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>repeat_c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>repeat_c</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>repeat_c</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type>	<name>max_min</name> <init>= <expr><name>max_size</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>		<name>select</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>		<name>i</name></decl>;</decl_stmt>

		<comment type="block">/* find first good free block */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>list_c</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dispossible</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* If this block is just the right size, return it */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>==</operator> <name>aligned_size</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dispossible</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first_byte_ptr</name></expr>;</expr_stmt>
					<comment type="block">/* list[i].context = context; */</comment>

					<return>return <expr><name>ptr</name></expr>;</return>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&gt;</operator> <name>aligned_size</name> <operator>&amp;&amp;</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&lt;</operator> <name>max_min</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>max_min</name> <operator>=</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>select</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="block">/* If no suitable free slot found, defragment and try again. */</comment>
		<if_stmt><if>if <condition>(<expr><name>select</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>list_c</name> <operator>==</operator> <name>LIST_ITEMS</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>defragmentation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * A slot larger than required was found. Divide it to avoid wasting
		 * space, and return the slot of the right size.
		 */</comment>
		<expr_stmt><expr><name><name>list</name><index>[<expr><operator>*</operator><name>list_c</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>list</name><index>[<expr><name>select</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>-</operator> <name>aligned_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>list</name><index>[<expr><operator>*</operator><name>list_c</name></expr>]</index></name><operator>.</operator><name>first_byte_ptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>list</name><index>[<expr><name>select</name></expr>]</index></name><operator>.</operator><name>first_byte_ptr</name> <operator>+</operator> <name>aligned_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>list</name><index>[<expr><operator>*</operator><name>list_c</name></expr>]</index></name><operator>.</operator><name>dispossible</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>list</name><index>[<expr><name>select</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>aligned_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>list</name><index>[<expr><name>select</name></expr>]</index></name><operator>.</operator><name>dispossible</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<comment type="block">/* list[select].context = context; */</comment>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>list</name><index>[<expr><name>select</name></expr>]</index></name><operator>.</operator><name>first_byte_ptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>list_c</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></for>

	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ora_sfree</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<comment type="block">/*
	if (cycle++ % 100 == 0)
	{
		size_t suma = 0;
		for (i = 0; i &lt; *list_c; i++)
			if (list[i].dispossible)
				suma += list[i].size;
		elog(NOTICE, "=============== FREE MEM REPORT === %10d ================", suma);
	}
*/</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>list_c</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first_byte_ptr</name> <operator>==</operator> <name>ptr</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dispossible</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<comment type="block">/* list[i].context = -1; */</comment>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first_byte_ptr</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>, <argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"corrupted pointer"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed while reallocating memory block in shared memory."</literal></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Report this bug to authors."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name><modifier>*</modifier></type>
<name>ora_srealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>aux_s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>list_c</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first_byte_ptr</name> <operator>==</operator> <name>ptr</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>align_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>ptr</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>aux_s</name> <operator>=</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt></block_content></block></for>

	<if_stmt><if>if <condition>(<expr><name>aux_s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"corrupted pointer"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed while reallocating memory block in shared memory."</literal></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Report this bug to authors."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>result</name> <operator>=</operator> <call><name>ora_salloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>aux_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *  alloc shared memory, raise exception if not
 */</comment>

<function><type><name>void</name><modifier>*</modifier></type>
<name>salloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>result</name> <operator>=</operator> <call><name>ora_salloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed while allocation block %lu bytes in shared memory."</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Increase SHMEMMSGSZ and recompile package."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type>
<name>srealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>result</name> <operator>=</operator> <call><name>ora_srealloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed while reallocation block %lu bytes in shared memory."</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Increase SHMEMMSGSZ and recompile package."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
