<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/gpcontrib/orafce/convert.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/pg_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/formatting.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orafce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtins.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orafce_to_char_int4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orafce_to_char_int8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orafce_to_char_float4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orafce_to_char_float8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orafce_to_char_numeric</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orafce_to_char_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orafce_to_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orafce_to_multi_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orafce_to_single_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getindex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbchar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mblen</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>Datum</name></type>
<name>orafce_to_char_int4</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>arg0</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfo</name></type>	<name>buf</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orafce_to_char_int8</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>arg0</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfo</name></type>	<name>buf</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>INT64_FORMAT</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orafce_to_char_float4</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>lconv</name></name> <modifier>*</modifier></type><name>lconv</name> <init>= <expr><call><name>PGLC_localeconv</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>float4out</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>result</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>lconv</name><operator>-&gt;</operator><name>decimal_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orafce_to_char_float8</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>lconv</name></name> <modifier>*</modifier></type><name>lconv</name> <init>= <expr><call><name>PGLC_localeconv</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>float8out</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>result</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>lconv</name><operator>-&gt;</operator><name>decimal_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orafce_to_char_numeric</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Numeric</name></type>		<name>arg0</name> <init>= <expr><call><name>PG_GETARG_NUMERIC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfo</name></type>	<name>buf</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>lconv</name></name> <modifier>*</modifier></type><name>lconv</name> <init>= <expr><call><name>PGLC_localeconv</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>decimal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_out</name></expr></argument>, <argument><expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>lconv</name><operator>-&gt;</operator><name>decimal_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>decimal</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> <comment type="block">/* save decimal point position for the next loop */</comment>
		</block_content>}</block></if></if_stmt></block_content></block></for>

	<comment type="block">/* Simulate the default Oracle to_char template (TM9 - Text Minimum)
	   by removing unneeded digits after the decimal point;
	   if no digits are left, then remove the decimal point too
	*/</comment>
	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>decimal</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&gt;=</operator> <name>decimal</name></expr>;</condition> <incr><expr><name>p</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name><name>lconv</name><operator>-&gt;</operator><name>decimal_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<break>break;</break></block_content></block></else></if_stmt> <comment type="block">/* non-zero digit found, exit the loop */</comment>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/********************************************************************
 *
 * orafec_to_char_timestamp
 *
 * Syntax:
 *
 * text to_date(timestamp date_txt)
 *
 * Purpose:
 *
 * Returns date and time format w.r.t NLS_DATE_FORMAT GUC
 *
 *********************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>orafce_to_char_timestamp</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Timestamp</name></type> <name>ts</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>nls_date_format</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>nls_date_format</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* it will return the DATE in nls_date_format*/</comment>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DatumGetTextP</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>timestamp_to_char</name></expr></argument>,
							<argument><expr><call><name>TimestampGetDatum</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>nls_date_format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>timestamp_out</name></expr></argument>,
									<argument><expr><call><name>TimestampGetDatum</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orafce_to_number</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>arg0</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>lconv</name></name> <modifier>*</modifier></type><name>lconv</name> <init>= <expr><call><name>PGLC_localeconv</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Numeric</name></type>		<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name><name>lconv</name><operator>-&gt;</operator><name>decimal_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>lconv</name><operator>-&gt;</operator><name>decimal_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name><name>lconv</name><operator>-&gt;</operator><name>thousands_sep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>lconv</name><operator>-&gt;</operator><name>thousands_sep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>DatumGetNumeric</name><argument_list>(<argument><expr><call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>numeric_in</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_NUMERIC</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* 3 is enough, but it is defined as 4 in backend code. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAX_CONVERSION_GROWTH</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CONVERSION_GROWTH</name></cpp:macro>  <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Convert a tilde (~) to ...
 *	1: a full width tilde. (same as JA16EUCTILDE in oracle)
 *	0: a full width overline. (same as JA16EUC in oracle)
 *
 * Note - there is a difference with Oracle - it returns \342\210\274
 * what is a tilde char. Orafce returns fullwidth tilde. If it is a
 * problem, fix it for sef in code.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JA_TO_FULL_WIDTH_TILDE</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name><name>TO_MULTI_BYTE_UTF8</name><index>[<expr><literal type="number">95</literal></expr>]</index></name> <init>=
<expr><block>{
	<expr><literal type="string">"\343\200\200"</literal></expr>,
	<expr><literal type="string">"\357\274\201"</literal></expr>,
	<expr><literal type="string">"\342\200\235"</literal></expr>,
	<expr><literal type="string">"\357\274\203"</literal></expr>,
	<expr><literal type="string">"\357\274\204"</literal></expr>,
	<expr><literal type="string">"\357\274\205"</literal></expr>,
	<expr><literal type="string">"\357\274\206"</literal></expr>,
	<expr><literal type="string">"\342\200\231"</literal></expr>,
	<expr><literal type="string">"\357\274\210"</literal></expr>,
	<expr><literal type="string">"\357\274\211"</literal></expr>,
	<expr><literal type="string">"\357\274\212"</literal></expr>,
	<expr><literal type="string">"\357\274\213"</literal></expr>,
	<expr><literal type="string">"\357\274\214"</literal></expr>,
	<expr><literal type="string">"\357\274\215"</literal></expr>,
	<expr><literal type="string">"\357\274\216"</literal></expr>,
	<expr><literal type="string">"\357\274\217"</literal></expr>,
	<expr><literal type="string">"\357\274\220"</literal></expr>,
	<expr><literal type="string">"\357\274\221"</literal></expr>,
	<expr><literal type="string">"\357\274\222"</literal></expr>,
	<expr><literal type="string">"\357\274\223"</literal></expr>,
	<expr><literal type="string">"\357\274\224"</literal></expr>,
	<expr><literal type="string">"\357\274\225"</literal></expr>,
	<expr><literal type="string">"\357\274\226"</literal></expr>,
	<expr><literal type="string">"\357\274\227"</literal></expr>,
	<expr><literal type="string">"\357\274\230"</literal></expr>,
	<expr><literal type="string">"\357\274\231"</literal></expr>,
	<expr><literal type="string">"\357\274\232"</literal></expr>,
	<expr><literal type="string">"\357\274\233"</literal></expr>,
	<expr><literal type="string">"\357\274\234"</literal></expr>,
	<expr><literal type="string">"\357\274\235"</literal></expr>,
	<expr><literal type="string">"\357\274\236"</literal></expr>,
	<expr><literal type="string">"\357\274\237"</literal></expr>,
	<expr><literal type="string">"\357\274\240"</literal></expr>,
	<expr><literal type="string">"\357\274\241"</literal></expr>,
	<expr><literal type="string">"\357\274\242"</literal></expr>,
	<expr><literal type="string">"\357\274\243"</literal></expr>,
	<expr><literal type="string">"\357\274\244"</literal></expr>,
	<expr><literal type="string">"\357\274\245"</literal></expr>,
	<expr><literal type="string">"\357\274\246"</literal></expr>,
	<expr><literal type="string">"\357\274\247"</literal></expr>,
	<expr><literal type="string">"\357\274\250"</literal></expr>,
	<expr><literal type="string">"\357\274\251"</literal></expr>,
	<expr><literal type="string">"\357\274\252"</literal></expr>,
	<expr><literal type="string">"\357\274\253"</literal></expr>,
	<expr><literal type="string">"\357\274\254"</literal></expr>,
	<expr><literal type="string">"\357\274\255"</literal></expr>,
	<expr><literal type="string">"\357\274\256"</literal></expr>,
	<expr><literal type="string">"\357\274\257"</literal></expr>,
	<expr><literal type="string">"\357\274\260"</literal></expr>,
	<expr><literal type="string">"\357\274\261"</literal></expr>,
	<expr><literal type="string">"\357\274\262"</literal></expr>,
	<expr><literal type="string">"\357\274\263"</literal></expr>,
	<expr><literal type="string">"\357\274\264"</literal></expr>,
	<expr><literal type="string">"\357\274\265"</literal></expr>,
	<expr><literal type="string">"\357\274\266"</literal></expr>,
	<expr><literal type="string">"\357\274\267"</literal></expr>,
	<expr><literal type="string">"\357\274\270"</literal></expr>,
	<expr><literal type="string">"\357\274\271"</literal></expr>,
	<expr><literal type="string">"\357\274\272"</literal></expr>,
	<expr><literal type="string">"\357\274\273"</literal></expr>,
	<expr><literal type="string">"\357\274\274"</literal></expr>,
	<expr><literal type="string">"\357\274\275"</literal></expr>,
	<expr><literal type="string">"\357\274\276"</literal></expr>,
	<expr><literal type="string">"\357\274\277"</literal></expr>,
	<expr><literal type="string">"\342\200\230"</literal></expr>,
	<expr><literal type="string">"\357\275\201"</literal></expr>,
	<expr><literal type="string">"\357\275\202"</literal></expr>,
	<expr><literal type="string">"\357\275\203"</literal></expr>,
	<expr><literal type="string">"\357\275\204"</literal></expr>,
	<expr><literal type="string">"\357\275\205"</literal></expr>,
	<expr><literal type="string">"\357\275\206"</literal></expr>,
	<expr><literal type="string">"\357\275\207"</literal></expr>,
	<expr><literal type="string">"\357\275\210"</literal></expr>,
	<expr><literal type="string">"\357\275\211"</literal></expr>,
	<expr><literal type="string">"\357\275\212"</literal></expr>,
	<expr><literal type="string">"\357\275\213"</literal></expr>,
	<expr><literal type="string">"\357\275\214"</literal></expr>,
	<expr><literal type="string">"\357\275\215"</literal></expr>,
	<expr><literal type="string">"\357\275\216"</literal></expr>,
	<expr><literal type="string">"\357\275\217"</literal></expr>,
	<expr><literal type="string">"\357\275\220"</literal></expr>,
	<expr><literal type="string">"\357\275\221"</literal></expr>,
	<expr><literal type="string">"\357\275\222"</literal></expr>,
	<expr><literal type="string">"\357\275\223"</literal></expr>,
	<expr><literal type="string">"\357\275\224"</literal></expr>,
	<expr><literal type="string">"\357\275\225"</literal></expr>,
	<expr><literal type="string">"\357\275\226"</literal></expr>,
	<expr><literal type="string">"\357\275\227"</literal></expr>,
	<expr><literal type="string">"\357\275\230"</literal></expr>,
	<expr><literal type="string">"\357\275\231"</literal></expr>,
	<expr><literal type="string">"\357\275\232"</literal></expr>,
	<expr><literal type="string">"\357\275\233"</literal></expr>,
	<expr><literal type="string">"\357\275\234"</literal></expr>,
	<expr><literal type="string">"\357\275\235"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JA_TO_FULL_WIDTH_TILDE</name></expr></cpp:if>
	<expr><literal type="string">"\357\275\236"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<literal type="string">"\357\277\243"</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name><name>TO_MULTI_BYTE_EUCJP</name><index>[<expr><literal type="number">95</literal></expr>]</index></name> <init>=
<expr><block>{
	<expr><literal type="string">"\241\241"</literal></expr>,
	<expr><literal type="string">"\241\252"</literal></expr>,
	<expr><literal type="string">"\241\311"</literal></expr>,
	<expr><literal type="string">"\241\364"</literal></expr>,
	<expr><literal type="string">"\241\360"</literal></expr>,
	<expr><literal type="string">"\241\363"</literal></expr>,
	<expr><literal type="string">"\241\365"</literal></expr>,
	<expr><literal type="string">"\241\307"</literal></expr>,
	<expr><literal type="string">"\241\312"</literal></expr>,
	<expr><literal type="string">"\241\313"</literal></expr>,
	<expr><literal type="string">"\241\366"</literal></expr>,
	<expr><literal type="string">"\241\334"</literal></expr>,
	<expr><literal type="string">"\241\244"</literal></expr>,
	<expr><literal type="string">"\241\335"</literal></expr>,
	<expr><literal type="string">"\241\245"</literal></expr>,
	<expr><literal type="string">"\241\277"</literal></expr>,
	<expr><literal type="string">"\243\260"</literal></expr>,
	<expr><literal type="string">"\243\261"</literal></expr>,
	<expr><literal type="string">"\243\262"</literal></expr>,
	<expr><literal type="string">"\243\263"</literal></expr>,
	<expr><literal type="string">"\243\264"</literal></expr>,
	<expr><literal type="string">"\243\265"</literal></expr>,
	<expr><literal type="string">"\243\266"</literal></expr>,
	<expr><literal type="string">"\243\267"</literal></expr>,
	<expr><literal type="string">"\243\270"</literal></expr>,
	<expr><literal type="string">"\243\271"</literal></expr>,
	<expr><literal type="string">"\241\247"</literal></expr>,
	<expr><literal type="string">"\241\250"</literal></expr>,
	<expr><literal type="string">"\241\343"</literal></expr>,
	<expr><literal type="string">"\241\341"</literal></expr>,
	<expr><literal type="string">"\241\344"</literal></expr>,
	<expr><literal type="string">"\241\251"</literal></expr>,
	<expr><literal type="string">"\241\367"</literal></expr>,
	<expr><literal type="string">"\243\301"</literal></expr>,
	<expr><literal type="string">"\243\302"</literal></expr>,
	<expr><literal type="string">"\243\303"</literal></expr>,
	<expr><literal type="string">"\243\304"</literal></expr>,
	<expr><literal type="string">"\243\305"</literal></expr>,
	<expr><literal type="string">"\243\306"</literal></expr>,
	<expr><literal type="string">"\243\307"</literal></expr>,
	<expr><literal type="string">"\243\310"</literal></expr>,
	<expr><literal type="string">"\243\311"</literal></expr>,
	<expr><literal type="string">"\243\312"</literal></expr>,
	<expr><literal type="string">"\243\313"</literal></expr>,
	<expr><literal type="string">"\243\314"</literal></expr>,
	<expr><literal type="string">"\243\315"</literal></expr>,
	<expr><literal type="string">"\243\316"</literal></expr>,
	<expr><literal type="string">"\243\317"</literal></expr>,
	<expr><literal type="string">"\243\320"</literal></expr>,
	<expr><literal type="string">"\243\321"</literal></expr>,
	<expr><literal type="string">"\243\322"</literal></expr>,
	<expr><literal type="string">"\243\323"</literal></expr>,
	<expr><literal type="string">"\243\324"</literal></expr>,
	<expr><literal type="string">"\243\325"</literal></expr>,
	<expr><literal type="string">"\243\326"</literal></expr>,
	<expr><literal type="string">"\243\327"</literal></expr>,
	<expr><literal type="string">"\243\330"</literal></expr>,
	<expr><literal type="string">"\243\331"</literal></expr>,
	<expr><literal type="string">"\243\332"</literal></expr>,
	<expr><literal type="string">"\241\316"</literal></expr>,
	<expr><literal type="string">"\241\357"</literal></expr>,
	<expr><literal type="string">"\241\317"</literal></expr>,
	<expr><literal type="string">"\241\260"</literal></expr>,
	<expr><literal type="string">"\241\262"</literal></expr>,
	<expr><literal type="string">"\241\306"</literal></expr>,		<comment type="block">/* Oracle returns different value \241\307 */</comment>
	<expr><literal type="string">"\243\341"</literal></expr>,
	<expr><literal type="string">"\243\342"</literal></expr>,
	<expr><literal type="string">"\243\343"</literal></expr>,
	<expr><literal type="string">"\243\344"</literal></expr>,
	<expr><literal type="string">"\243\345"</literal></expr>,
	<expr><literal type="string">"\243\346"</literal></expr>,
	<expr><literal type="string">"\243\347"</literal></expr>,
	<expr><literal type="string">"\243\350"</literal></expr>,
	<expr><literal type="string">"\243\351"</literal></expr>,
	<expr><literal type="string">"\243\352"</literal></expr>,
	<expr><literal type="string">"\243\353"</literal></expr>,
	<expr><literal type="string">"\243\354"</literal></expr>,
	<expr><literal type="string">"\243\355"</literal></expr>,
	<expr><literal type="string">"\243\356"</literal></expr>,
	<expr><literal type="string">"\243\357"</literal></expr>,
	<expr><literal type="string">"\243\360"</literal></expr>,
	<expr><literal type="string">"\243\361"</literal></expr>,
	<expr><literal type="string">"\243\362"</literal></expr>,
	<expr><literal type="string">"\243\363"</literal></expr>,
	<expr><literal type="string">"\243\364"</literal></expr>,
	<expr><literal type="string">"\243\365"</literal></expr>,
	<expr><literal type="string">"\243\366"</literal></expr>,
	<expr><literal type="string">"\243\367"</literal></expr>,
	<expr><literal type="string">"\243\370"</literal></expr>,
	<expr><literal type="string">"\243\371"</literal></expr>,
	<expr><literal type="string">"\243\372"</literal></expr>,
	<expr><literal type="string">"\241\320"</literal></expr>,
	<expr><literal type="string">"\241\303"</literal></expr>,
	<expr><literal type="string">"\241\321"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JA_TO_FULL_WIDTH_TILDE</name></expr></cpp:if>
	<expr><literal type="string">"\241\301"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<literal type="string">"\241\261"</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>Datum</name></type>
<name>orafce_to_multi_byte</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>srclen</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__amd64__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

	<decl_stmt><decl><type><name>__int64</name></type>			<name>dstlen</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

	<decl_stmt><decl><type><name>int</name></type>			<name>dstlen</name></decl>;</decl_stmt>

	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PG_UTF8</name></expr>:</case>
			<expr_stmt><expr><name>map</name> <operator>=</operator> <name>TO_MULTI_BYTE_UTF8</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PG_EUC_JP</name></expr>:</case>
		<case>case <expr><name>PG_EUC_JIS_2004</name></expr>:</case>
			<expr_stmt><expr><name>map</name> <operator>=</operator> <name>TO_MULTI_BYTE_EUCJP</name></expr>;</expr_stmt>
			<break>break;</break>
		<comment type="block">/*
		 * TODO: Add converter for encodings.
		 */</comment>
		<default>default:</default>	<comment type="block">/* no need to convert */</comment>
			<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>srclen</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>VARHDRSZ</name> <operator>+</operator> <name>srclen</name> <operator>*</operator> <name>MAX_CONVERSION_GROWTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>srclen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type>	<name>u</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><literal type="number">0x20</literal> <operator>&lt;=</operator> <name>u</name> <operator>&amp;&amp;</operator> <name>u</name> <operator>&lt;=</operator> <literal type="number">0x7e</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>map</name><index>[<expr><name>u</name> <operator>-</operator> <literal type="number">0x20</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><operator>*</operator><name>m</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>m</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>dstlen</name> <operator>=</operator> <name>d</name> <operator>-</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>VARHDRSZ</name> <operator>+</operator> <name>dstlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>getindex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbchar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mblen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">95</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>mbchar</name></expr></argument>, <argument><expr><name>mblen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orafce_to_single_byte</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>srclen</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__amd64__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

	<decl_stmt><decl><type><name>__int64</name></type>			<name>dstlen</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	
	<decl_stmt><decl><type><name>int</name></type>			<name>dstlen</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PG_UTF8</name></expr>:</case>
			<expr_stmt><expr><name>map</name> <operator>=</operator> <name>TO_MULTI_BYTE_UTF8</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PG_EUC_JP</name></expr>:</case>
		<case>case <expr><name>PG_EUC_JIS_2004</name></expr>:</case>
			<expr_stmt><expr><name>map</name> <operator>=</operator> <name>TO_MULTI_BYTE_EUCJP</name></expr>;</expr_stmt>
			<break>break;</break>
		<comment type="block">/*
		 * TODO: Add converter for encodings.
		 */</comment>
		<default>default:</default>	<comment type="block">/* no need to convert */</comment>
			<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>srclen</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* XXX - The output length should be &lt;= input length */</comment>
	<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>VARHDRSZ</name> <operator>+</operator> <name>srclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>-</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>srclen</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>u</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>		<name>clen</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>		<name>mapindex</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>u</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>(</operator><name>mapindex</name> <operator>=</operator> <call><name>getindex</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>m</name> <init>= <expr><literal type="number">0x20</literal> <operator>+</operator> <name>mapindex</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>d</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>dstlen</name> <operator>=</operator> <name>d</name> <operator>-</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>VARHDRSZ</name> <operator>+</operator> <name>dstlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
