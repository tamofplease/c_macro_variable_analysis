<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/gpcontrib/orafce/utility.c"><comment type="block">/*
  This code implements one part of functonality of
  free available library PL/Vision. Please look www.quest.com

  Original author: Steven Feuerstein, 1996 - 2002
  PostgreSQL implementation author: Pavel Stehule, 2006-2018

  This module is under BSD Licence

  History:
    1.0. first public version 22. September 2006

*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/pg_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tupmacs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orafce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtins.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/elog.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_utility_format_call_stack0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_utility_format_call_stack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type>
<name>dbms_utility_format_call_stack</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name> <init>= <expr><name>CurrentMemoryContext</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ErrorData</name> <modifier>*</modifier></type><name>edata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ErrorContextCallback</name> <modifier>*</modifier></type><name>econtext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfo</name></type>   <name>sinfo</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">120000</literal></expr></cpp:if>

	<expr_stmt><expr><call><name>errstart</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>TEXTDOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

	<expr_stmt><expr><call><name>errstart</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>PG_FUNCNAME_MACRO</name></expr></argument>, <argument><expr><name>TEXTDOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>econtext</name> <operator>=</operator> <name>error_context_stack</name></expr>;</init>
		 <condition><expr><name>econtext</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
		 <incr><expr><name>econtext</name> <operator>=</operator> <name><name>econtext</name><operator>-&gt;</operator><name>previous</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call>(<modifier>*</modifier><name><name>econtext</name><operator>-&gt;</operator><name>callback</name></name>) <argument_list>(<argument><expr><name><name>econtext</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>edata</name> <operator>=</operator> <call><name>CopyErrorData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FlushErrorState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Now I wont to parse edata-&gt;context to more traditional format */</comment>
	<comment type="block">/* I am not sure about order */</comment>

	<expr_stmt><expr><name>sinfo</name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>mode</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="char">'o'</literal></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>, <argument><expr><literal type="string">"----- PL/pgSQL Call Stack -----\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>, <argument><expr><literal type="string">"  object     line  object\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>, <argument><expr><literal type="string">"  handle   number  name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name><name>edata</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name><name>edata</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><operator>*</operator><name>start</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oname</name> <init>=  <expr><literal type="string">"anonymous object"</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name>  <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eol</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Oid</name></type> <name>fnoid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

			<comment type="block">/* first, solve multilines */</comment>
			<if_stmt><if>if <condition>(<expr><name>eol</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>eol</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* first know format */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="string">"PL/pgSQL function "</literal></expr></argument>,<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p1</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="string">"function \""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>p1</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"function \""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p2</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name>p2</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>oname</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>start</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><operator>(</operator><name>p1</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="string">"function "</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>p1</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"function "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p2</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>++</operator><name>p2</name></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

						<expr_stmt><expr><name>oname</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>fnoid</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>regprocedurein</name></expr></argument>,
							<argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>oname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>start</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>


				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p1</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="string">"line "</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>size_t</name></type> <name>p2i</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>p1</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"line "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>p2i</name> <operator>=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="string">"0123456789"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* safe separator */</comment>
					<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>p1</name><index>[<expr><name>p2i</name></expr>]</index></name></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>p1</name><index>[<expr><name>p2i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>p1</name><index>[<expr><name>p2i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<switch>switch <condition>(<expr><name>mode</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><literal type="char">'o'</literal></expr>:</case>
					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>, <argument><expr><literal type="string">"%8x    %5s  function %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>fnoid</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>oname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><literal type="char">'p'</literal></expr>:</case>
					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>, <argument><expr><literal type="string">"%8d    %5s  function %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>fnoid</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>oname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><literal type="char">'s'</literal></expr>:</case>
					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>, <argument><expr><literal type="string">"%d,%s,%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>fnoid</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>oname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>

			<if_stmt><if>if <condition>(<expr><name>eol</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>start</name> <operator>=</operator> <name>eol</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<break>break;</break></block_content></block></else></if_stmt>
		</block_content>}</block></while>

	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>sinfo</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>dbms_utility_format_call_stack0</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><call><name>dbms_utility_format_call_stack</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>dbms_utility_format_call_stack1</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>mode</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>!=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid parameter"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Allowed only chars [ops]."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>*</operator><call><name>VARDATA</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>mode</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="char">'o'</literal></expr>:</case>
		<case>case <expr><literal type="char">'p'</literal></expr>:</case>
		<case>case <expr><literal type="char">'s'</literal></expr>:</case>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid parameter"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Allowed only chars [ops]."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><call><name>dbms_utility_format_call_stack</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
