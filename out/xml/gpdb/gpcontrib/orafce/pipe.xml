<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/gpcontrib/orafce/pipe.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shmmc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pipe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orafce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtins.h"</cpp:file></cpp:include>

<comment type="block">/*
 * @ Pavel Stehule 2006-2018
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_GetCurrentTimestamp</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GetCurrentTimestamp</name><parameter_list>()</parameter_list></cpp:macro>	<cpp:value>GetCurrentTimestamp()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetNowFloat</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_INT64_TIMESTAMP</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetNowFloat</name><parameter_list>()</parameter_list></cpp:macro>   <cpp:value>((float8) _GetCurrentTimestamp() / 1000000.0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetNowFloat</name><parameter_list>()</parameter_list></cpp:macro>   <cpp:value>_GetCurrentTimestamp()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESULT_DATA</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESULT_WAIT</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_YEAR</name></cpp:macro> <cpp:value>(60*60*24*365)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_pack_message_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_unpack_message_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_send_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_receive_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_unique_session_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_list_pipes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_next_item_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_create_pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_create_pipe_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_create_pipe_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_reset_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_purge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_remove_pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_pack_message_date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_unpack_message_date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_pack_message_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_unpack_message_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_pack_message_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_unpack_message_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_pack_message_bytea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_unpack_message_bytea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_pack_message_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_unpack_message_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_pack_message_integer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_pipe_pack_message_bigint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><enum>enum <block>{
	<decl><name>IT_NO_MORE_ITEMS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>IT_NUMBER</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
	<decl><name>IT_VARCHAR</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
	<decl><name>IT_DATE</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
	<decl><name>IT_TIMESTAMPTZ</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
	<decl><name>IT_BYTEA</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,
	<decl><name>IT_RECORD</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>
}</block></enum></type> <name>message_data_type</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_queue_item</name> <block>{
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>_queue_item</name></name> <modifier>*</modifier></type><name>next_item</name></decl>;</decl_stmt>
}</block></struct></type> <name>queue_item</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>bool</name></type> <name>is_valid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>registered</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pipe_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>creator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>  <name>uid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>_queue_item</name></name> <modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type> <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type> <name>limit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>orafce_pipe</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>int32</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>message_data_type</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>tupType</name></decl>;</decl_stmt>
}</block></struct></type> <name>message_data_item</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>int32</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>items_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>message_data_item</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>message_buffer</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>message_buffer_size</name></cpp:macro>		<cpp:value>(MAXALIGN(sizeof(message_buffer)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>message_buffer_get_content</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((message_data_item *) (((char*)buf)+message_buffer_size))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>message_data_item_size</name></cpp:macro>	<cpp:value>(MAXALIGN(sizeof(message_data_item)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>message_data_get_content</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((char *)msg) + message_data_item_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>message_data_item_next</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((message_data_item *) (message_data_get_content(msg) + MAXALIGN(msg-&gt;size)))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>PipesFctx</name> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>pipe_nth</name></decl>;</decl_stmt>
}</block></struct></type> <name>PipesFctx</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">90600</literal></expr></cpp:if>

	<decl_stmt><decl><type><name>int</name></type> <name>tranche_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LWLock</name></type> <name>shmem_lock</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

	<decl_stmt><decl><type><name>LWLockId</name></type> <name>shmem_lockid</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<decl_stmt><decl><type><name>orafce_pipe</name> <modifier>*</modifier></type><name>pipes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>alert_event</name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>alert_lock</name> <modifier>*</modifier></type><name>locks</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>sid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vardata</name></type> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* flexible array member */</comment>
}</block></struct></type> <name>sh_memory</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sh_memory_size</name></cpp:macro>			<cpp:value>(offsetof(sh_memory, data))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>message_buffer</name> <modifier>*</modifier></type><name>output_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>message_buffer</name> <modifier>*</modifier></type><name>input_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>orafce_pipe</name><modifier>*</modifier></type> <name>pipes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT_INITIALIZED</name></cpp:macro>		<cpp:value>NULL</cpp:value></cpp:define>

<decl_stmt><decl><type><name>LWLockId</name></type> <name>shmem_lockid</name> <init>= <expr><name>NOT_INITIALIZED</name></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sid</name></decl>;</decl_stmt>                                 <comment type="block">/* session id */</comment>

<decl_stmt><decl><type><specifier>extern</specifier> <name>alert_event</name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>alert_lock</name>  <modifier>*</modifier></type><name>locks</name></decl>;</decl_stmt>

<comment type="block">/*
 * write on writer size bytes from ptr
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pack_field</name><parameter_list>(<parameter><decl><type><name>message_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>message_data_type</name></type> <name>type</name></decl></parameter>,
			<parameter><decl><type><name>int32</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>tupType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>message_data_item</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>message_data_item_size</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>LOCALMSGSZ</name> <operator>-</operator> <name>message_buffer_size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Packed message is bigger than local buffer."</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Increase LOCALMSGSZ in 'pipe.h' and recompile library."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator>  <call><name>message_buffer_get_content</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>message</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>message</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>message</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>message</name><operator>-&gt;</operator><name>tupType</name></name> <operator>=</operator> <name>tupType</name></expr>;</expr_stmt>

	<comment type="block">/* padding bytes have to be zeroed - buffer creator is responsible to clear memory */</comment>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>message_data_get_content</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>items_count</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>message_data_item_next</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type>
<name>unpack_field</name><parameter_list>(<parameter><decl><type><name>message_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>message_data_type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
				<parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>tupType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>message_data_item</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>items_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>message</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>message</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name><name>message</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>tupType</name> <operator>=</operator> <name><name>message</name><operator>-&gt;</operator><name>tupType</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>message_data_get_content</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <ternary><condition><expr><operator>--</operator><name><name>buffer</name><operator>-&gt;</operator><name>items_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>message_data_item_next</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Add ptr to queue. If pipe doesn't exist, register new pipe
 */</comment>

<function><type><name>bool</name></type>
<name>ora_lock_shmem</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_pipes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_events</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_locks</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>sh_memory</name> <modifier>*</modifier></type><name>sh_mem</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>pipes</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>sh_mem</name> <operator>=</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"dbms_pipe"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sh_mem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed while allocation block %lu bytes in shared memory."</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
		<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">90600</literal></expr></cpp:if>

			<expr_stmt><expr><name><name>sh_mem</name><operator>-&gt;</operator><name>tranche_id</name></name> <operator>=</operator> <call><name>LWLockNewTrancheId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sh_mem</name><operator>-&gt;</operator><name>shmem_lock</name></name></expr></argument>, <argument><expr><name><name>sh_mem</name><operator>-&gt;</operator><name>tranche_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">100000</literal></expr></cpp:if>

				<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name><name>sh_mem</name><operator>-&gt;</operator><name>tranche_id</name></name></expr></argument>, <argument><expr><literal type="string">"orafce"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

				<decl_stmt><decl><type><specifier>static</specifier> <name>LWLockTranche</name></type> <name>tranche</name></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>tranche</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"orafce"</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>tranche</name><operator>.</operator><name>array_base</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>sh_mem</name><operator>-&gt;</operator><name>shmem_lock</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>tranche</name><operator>.</operator><name>array_stride</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LWLock</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name><name>sh_mem</name><operator>-&gt;</operator><name>tranche_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tranche</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

				<expr_stmt><expr><name>shmem_lockid</name> <operator>=</operator> <operator>&amp;</operator><name><name>sh_mem</name><operator>-&gt;</operator><name>shmem_lock</name></name></expr>;</expr_stmt>
			</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

			<expr_stmt><expr><name>shmem_lockid</name> <operator>=</operator> <name><name>sh_mem</name><operator>-&gt;</operator><name>shmem_lockid</name></name> <operator>=</operator> <call><name>LWLockAssign</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>sh_mem</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>sh_memory_size</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ora_sinit</name><argument_list>(<argument><expr><name><name>sh_mem</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pipes</name> <operator>=</operator> <name><name>sh_mem</name><operator>-&gt;</operator><name>pipes</name></name> <operator>=</operator> <call><name>ora_salloc</name><argument_list>(<argument><expr><name>max_pipes</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>orafce_pipe</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sid</name> <operator>=</operator> <name><name>sh_mem</name><operator>-&gt;</operator><name>sid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_pipes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>pipes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_valid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></for>

			<expr_stmt><expr><name>events</name> <operator>=</operator> <name><name>sh_mem</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <call><name>ora_salloc</name><argument_list>(<argument><expr><name>max_events</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>alert_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>locks</name> <operator>=</operator> <name><name>sh_mem</name><operator>-&gt;</operator><name>locks</name></name> <operator>=</operator> <call><name>ora_salloc</name><argument_list>(<argument><expr><name>max_locks</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>alert_lock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_events</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>event_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_receivers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>receivers</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>messages</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></for>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_locks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name><name>locks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>locks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>echo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></for>

		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>pipes</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">90600</literal></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">100000</literal></expr></cpp:if>

			<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name><name>sh_mem</name><operator>-&gt;</operator><name>tranche_id</name></name></expr></argument>, <argument><expr><literal type="string">"orafce"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

			<decl_stmt><decl><type><specifier>static</specifier> <name>LWLockTranche</name></type> <name>tranche</name></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>tranche</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"orafce"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tranche</name><operator>.</operator><name>array_base</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>sh_mem</name><operator>-&gt;</operator><name>shmem_lock</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tranche</name><operator>.</operator><name>array_stride</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LWLock</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name><name>sh_mem</name><operator>-&gt;</operator><name>tranche_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tranche</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<expr_stmt><expr><name>shmem_lockid</name> <operator>=</operator> <operator>&amp;</operator><name><name>sh_mem</name><operator>-&gt;</operator><name>shmem_lock</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

			<expr_stmt><expr><name>shmem_lockid</name> <operator>=</operator> <name><name>sh_mem</name><operator>-&gt;</operator><name>shmem_lockid</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<expr_stmt><expr><name>pipes</name> <operator>=</operator> <name><name>sh_mem</name><operator>-&gt;</operator><name>pipes</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ora_sinit</name><argument_list>(<argument><expr><name><name>sh_mem</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sh_mem</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sid</name> <operator>=</operator> <operator>++</operator><operator>(</operator><name><name>sh_mem</name><operator>-&gt;</operator><name>sid</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>events</name> <operator>=</operator> <name><name>sh_mem</name><operator>-&gt;</operator><name>events</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>locks</name> <operator>=</operator> <name><name>sh_mem</name><operator>-&gt;</operator><name>locks</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>pipes</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * can be enhanced access/hash.h
 */</comment>

<function><type><specifier>static</specifier> <name>orafce_pipe</name><modifier>*</modifier></type>
<name>find_pipe</name><parameter_list>(<parameter><decl><type><name>text</name><modifier>*</modifier></type> <name>pipe_name</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>created</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>only_check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>orafce_pipe</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>created</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PIPES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pipes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_valid</name> <operator>&amp;&amp;</operator>
			<call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>VARDATA</name><argument_list>(<argument><expr><name>pipe_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pipes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pipe_name</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>pipe_name</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
			<operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>pipes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pipe_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><call><name>VARSIZE</name><argument_list>(<argument><expr><name>pipe_name</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* check owner if non public pipe */</comment>

			<if_stmt><if>if <condition>(<expr><name><name>pipes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>creator</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pipes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uid</name> <operator>!=</operator> <call><name>GetUserId</name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"insufficient privilege"</literal></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Insufficient privilege to access pipe"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<return>return <expr><operator>&amp;</operator><name><name>pipes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>only_check</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PIPES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pipes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_valid</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name><name>pipes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pipe_name</name> <operator>=</operator> <call><name>ora_scstring</name><argument_list>(<argument><expr><name>pipe_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>pipes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pipes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>registered</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pipes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>creator</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pipes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pipes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pipes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>limit</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

				<expr_stmt><expr><operator>*</operator><name>created</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>&amp;</operator><name><name>pipes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt></block_content></block></for>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>new_last</name><parameter_list>(<parameter><decl><type><name>orafce_pipe</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>queue_item</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>aux_q</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>limit</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>limit</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>items</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <call><name>ora_salloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>queue_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>items</name><operator>-&gt;</operator><name>next_item</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>items</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>items</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>next_item</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>next_item</name></name></expr>;</expr_stmt></block_content></block></while>


	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>aux_q</name> <operator>=</operator> <call><name>ora_salloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>queue_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>next_item</name></name> <operator>=</operator> <name>aux_q</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aux_q</name><operator>-&gt;</operator><name>next_item</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aux_q</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type>
<name>remove_first</name><parameter_list>(<parameter><decl><type><name>orafce_pipe</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>_queue_item</name></name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>q</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>items</name></name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>count</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>next_item</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>items</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>registered</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pipe_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>is_valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* copy message to local memory, if exists */</comment>

<function><type><specifier>static</specifier> <name>message_buffer</name><modifier>*</modifier></type>
<name>get_from_pipe</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>pipe_name</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>orafce_pipe</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>created</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>message_buffer</name> <modifier>*</modifier></type><name>shm_msg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>message_buffer</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ora_lock_shmem</name><argument_list>(<argument><expr><name>SHMEMMSGSZ</name></expr></argument>, <argument><expr><name>MAX_PIPES</name></expr></argument>, <argument><expr><name>MAX_EVENTS</name></expr></argument>, <argument><expr><name>MAX_LOCKS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>find_pipe</name><argument_list>(<argument><expr><name>pipe_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>created</name></expr></argument>,<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>created</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>shm_msg</name> <operator>=</operator> <call><name>remove_first</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name><name>shm_msg</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>message_buffer</name><operator>*</operator><operator>)</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><name><name>shm_msg</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>shm_msg</name></expr></argument>, <argument><expr><name><name>shm_msg</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name>shm_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * if ptr is null, then only register pipe
 */</comment>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>add_to_pipe</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>pipe_name</name></decl></parameter>, <parameter><decl><type><name>message_buffer</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>limit_is_valid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>orafce_pipe</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>created</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>message_buffer</name> <modifier>*</modifier></type><name>sh_ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ora_lock_shmem</name><argument_list>(<argument><expr><name>SHMEMMSGSZ</name></expr></argument>, <argument><expr><name>MAX_PIPES</name></expr></argument>, <argument><expr><name>MAX_EVENTS</name></expr></argument>, <argument><expr><name>MAX_LOCKS</name></expr></argument>,<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>find_pipe</name><argument_list>(<argument><expr><name>pipe_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>created</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>created</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>registered</name></name> <operator>=</operator> <name>ptr</name> <operator>==</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>limit_is_valid</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>created</name> <operator>||</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>limit</name></name> <operator>&lt;</operator> <name>limit</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>sh_ptr</name> <operator>=</operator> <call><name>ora_salloc</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sh_ptr</name></expr></argument>,<argument><expr><name>ptr</name></expr></argument>,<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><call><name>new_last</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sh_ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name>sh_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>created</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* I created new pipe, but haven't memory for new value */</comment>
					<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pipe_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>is_valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_pipe</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>pipe_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>purge</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>orafce_pipe</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>created</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>find_pipe</name><argument_list>(<argument><expr><name>pipe_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>created</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>queue_item</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>items</name></name></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>q</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>queue_item</name> <modifier>*</modifier></type><name>aux_q</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>aux_q</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>next_item</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>q</name> <operator>=</operator> <name>aux_q</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>purge</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>registered</name></name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pipe_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>is_valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>dbms_pipe_next_item_type</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><ternary><condition><expr><name>input_buffer</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>input_buffer</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name>IT_NO_MORE_ITEMS</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_buffer</name><parameter_list>(<parameter><decl><type><name>message_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>message_buffer_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>items_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>message_buffer_get_content</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>message_buffer</name><modifier>*</modifier></type>
<name>check_buffer</name><parameter_list>(<parameter><decl><type><name>message_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>(</operator><name>message_buffer</name><operator>*</operator><operator>)</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed while allocation block %d bytes in memory."</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>init_buffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>dbms_pipe_pack_message_text</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>output_buffer</name> <operator>=</operator> <call><name>check_buffer</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><name>LOCALMSGSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pack_field</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><name>IT_VARCHAR</name></expr></argument>,
		<argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>dbms_pipe_pack_message_date</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DateADT</name></type> <name>dt</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>output_buffer</name> <operator>=</operator> <call><name>check_buffer</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><name>LOCALMSGSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pack_field</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><name>IT_DATE</name></expr></argument>,
			   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>dt</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>dbms_pipe_pack_message_timestamp</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>dt</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMPTZ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>output_buffer</name> <operator>=</operator> <call><name>check_buffer</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><name>LOCALMSGSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pack_field</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><name>IT_TIMESTAMPTZ</name></expr></argument>,
			   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>dt</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>dbms_pipe_pack_message_number</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Numeric</name></type> <name>num</name> <init>= <expr><call><name>PG_GETARG_NUMERIC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>output_buffer</name> <operator>=</operator> <call><name>check_buffer</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><name>LOCALMSGSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pack_field</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><name>IT_NUMBER</name></expr></argument>,
			   <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></argument>, <argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>dbms_pipe_pack_message_bytea</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bytea</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>PG_GETARG_BYTEA_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>output_buffer</name> <operator>=</operator> <call><name>check_buffer</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><name>LOCALMSGSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pack_field</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><name>IT_BYTEA</name></expr></argument>,
		<argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_args_3</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg0</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">120000</literal></expr></cpp:if>

	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>arg0</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>arg1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>arg2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>arg0</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>arg1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>arg2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>argnull</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>argnull</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>argnull</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<comment type="block">/*
 *  We can serialize only typed record
 */</comment>

<function><type><name>Datum</name></type>
<name>dbms_pipe_pack_message_record</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTupleHeader</name></type> <name>rec</name> <init>= <expr><call><name>PG_GETARG_HEAPTUPLEHEADER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>tupType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bytea</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">120000</literal></expr></cpp:if>

	<expr_stmt><expr><call><name>LOCAL_FCINFO</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

	<decl_stmt><decl><type><name>FunctionCallInfoData</name></type> <name>info_data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type> <name>info</name> <init>= <expr><operator>&amp;</operator><name>info_data</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


	<expr_stmt><expr><name>tupType</name> <operator>=</operator> <call><name>HeapTupleHeaderGetTypeId</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Normally one would call record_send() using DirectFunctionCall3,
	 * but that does not work since record_send wants to cache some data
	 * using fcinfo-&gt;flinfo-&gt;fn_extra.  So we need to pass it our own
	 * flinfo parameter.
	 */</comment>
	<expr_stmt><expr><call><name>InitFunctionCallInfoData</name><argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>, <argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_args_3</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>tupType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>bytea</name><operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><call><name>record_send</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>output_buffer</name> <operator>=</operator> <call><name>check_buffer</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><name>LOCALMSGSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pack_field</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><name>IT_RECORD</name></expr></argument>,
			   <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tupType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>dbms_pipe_unpack_message</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>, <parameter><decl><type><name>message_data_type</name></type> <name>dtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>		<name>tupType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>message_data_type</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>message_data_type</name></type> <name>next_type</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>input_buffer</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
		<name><name>input_buffer</name><operator>-&gt;</operator><name>items_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
		<name><name>input_buffer</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
		<name><name>input_buffer</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>IT_NO_MORE_ITEMS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>next_type</name> <operator>=</operator> <name><name>input_buffer</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>next_type</name> <operator>!=</operator> <name>dtype</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"datatype mismatch"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"unpack unexpected type: %d"</literal></expr></argument>, <argument><expr><name>next_type</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>unpack_field</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>IT_TIMESTAMPTZ</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>TimestampTz</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>IT_DATE</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DateADTGetDatum</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>DateADT</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>IT_VARCHAR</name></expr>:</case>
		<case>case <expr><name>IT_NUMBER</name></expr>:</case>
		<case>case <expr><name>IT_BYTEA</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>IT_RECORD</name></expr>:</case>
		<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">120000</literal></expr></cpp:if>

			<expr_stmt><expr><call><name>LOCAL_FCINFO</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

			<decl_stmt><decl><type><name>FunctionCallInfoData</name></type> <name>info_data</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>FunctionCallInfo</name></type> <name>info</name> <init>= <expr><operator>&amp;</operator><name>info_data</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<decl_stmt><decl><type><name>StringInfoData</name></type>	<name>buf</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>text</name>		   <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>maxlen</name></name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

			<comment type="block">/*
			 * Normally one would call record_recv() using DirectFunctionCall3,
			 * but that does not work since record_recv wants to cache some data
			 * using fcinfo-&gt;flinfo-&gt;fn_extra.  So we need to pass it our own
			 * flinfo parameter.
			 */</comment>
			<expr_stmt><expr><call><name>InitFunctionCallInfoData</name><argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>, <argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>init_args_3</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>tupType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>record_recv</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected type: %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>	<comment type="block">/* keep compiler quiet */</comment>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name><name>input_buffer</name><operator>-&gt;</operator><name>items_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>input_buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>dbms_pipe_unpack_message_text</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>dbms_pipe_unpack_message</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>IT_VARCHAR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>dbms_pipe_unpack_message_date</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>dbms_pipe_unpack_message</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>IT_DATE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>dbms_pipe_unpack_message_timestamp</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>dbms_pipe_unpack_message</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>IT_TIMESTAMPTZ</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>dbms_pipe_unpack_message_number</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>dbms_pipe_unpack_message</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>IT_NUMBER</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>dbms_pipe_unpack_message_bytea</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>dbms_pipe_unpack_message</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>IT_BYTEA</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>dbms_pipe_unpack_message_record</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>dbms_pipe_unpack_message</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>IT_RECORD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WATCH_PRE</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>et</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>et = GetNowFloat() + (float8)t; c = 0; \
do \
{ \

#define WATCH_POST(t,et,c) \
if (GetNowFloat() &gt;= et) \
PG_RETURN_INT32(RESULT_WAIT); \
if (cycle++ % 100 == 0) \
CHECK_FOR_INTERRUPTS(); \
pg_usleep(10000L); \
} while(true &amp;&amp; t != 0);</cpp:value></cpp:define>


<function><type><name>Datum</name></type>
<name>dbms_pipe_receive_message</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>pipe_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><name>ONE_YEAR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>endtime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"pipe name is NULL"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Pipename may not be NULL."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>pipe_name</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>input_buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>input_buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>WATCH_PRE</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>input_buffer</name> <operator>=</operator> <call><name>get_from_pipe</name><argument_list>(<argument><expr><name>pipe_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>input_buffer</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>message_buffer_get_content</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></if></if_stmt>
<comment type="block">/* found empty message */</comment>
	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>WATCH_POST</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>RESULT_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>dbms_pipe_send_message</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>pipe_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><name>ONE_YEAR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>valid_limit</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>endtime</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"pipe name is NULL"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Pipename may not be NULL."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>pipe_name</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>output_buffer</name> <operator>=</operator> <call><name>check_buffer</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><name>LOCALMSGSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>valid_limit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>valid_limit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>input_buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <comment type="block">/* XXX Strange? */</comment>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>input_buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>WATCH_PRE</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>add_to_pipe</name><argument_list>(<argument><expr><name>pipe_name</name></expr></argument>, <argument><expr><name>output_buffer</name></expr></argument>,
					<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>valid_limit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>WATCH_POST</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>init_buffer</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><name>LOCALMSGSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>RESULT_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>dbms_pipe_unique_session_name</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>strbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>float8</name></type> <name>endtime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>WATCH_PRE</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ora_lock_shmem</name><argument_list>(<argument><expr><name>SHMEMMSGSZ</name></expr></argument>, <argument><expr><name>MAX_PIPES</name></expr></argument>,<argument><expr><name>MAX_EVENTS</name></expr></argument>,<argument><expr><name>MAX_LOCKS</name></expr></argument>,<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strbuf</name></expr></argument>,<argument><expr><literal type="string">"PG$PIPE$%d$%d"</literal></expr></argument>,<argument><expr><name>sid</name></expr></argument>, <argument><expr><name>MyProcPid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><name><name>strbuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>strbuf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>strbuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>WATCH_POST</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOCK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB_PIPES_COLS</name></cpp:macro>		<cpp:value>6</cpp:value></cpp:define>

<function><type><name>Datum</name></type>
<name>dbms_pipe_list_pipes</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>        <name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttInMetadata</name>   <modifier>*</modifier></type><name>attinmeta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PipesFctx</name>       <modifier>*</modifier></type><name>fctx</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>float8</name></type> <name>endtime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>		<name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type>  <name>oldcontext</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>has_lock</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>WATCH_PRE</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ora_lock_shmem</name><argument_list>(<argument><expr><name>SHMEMMSGSZ</name></expr></argument>, <argument><expr><name>MAX_PIPES</name></expr></argument>, <argument><expr><name>MAX_EVENTS</name></expr></argument>, <argument><expr><name>MAX_LOCKS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>has_lock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>WATCH_POST</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_lock</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>LOCK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PipesFctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <name>fctx</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>pipe_nth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">120000</literal></expr></cpp:if>

		<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>DB_PIPES_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

		<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>DB_PIPES_COLS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>++</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>,    <argument><expr><name>VARCHAROID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>++</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"items"</literal></expr></argument>,   <argument><expr><name>INT4OID</name></expr></argument>,    <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>++</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>,    <argument><expr><name>INT4OID</name></expr></argument>,    <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>++</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"limit"</literal></expr></argument>,   <argument><expr><name>INT4OID</name></expr></argument>,    <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>++</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"private"</literal></expr></argument>, <argument><expr><name>BOOLOID</name></expr></argument>,    <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>++</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"owner"</literal></expr></argument>,   <argument><expr><name>VARCHAROID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>DB_PIPES_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>attinmeta</name> <operator>=</operator> <call><name>TupleDescGetAttInMetadata</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>attinmeta</name></name> <operator>=</operator> <name>attinmeta</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fctx</name> <operator>=</operator> <operator>(</operator><name>PipesFctx</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name><name>fctx</name><operator>-&gt;</operator><name>pipe_nth</name></name> <operator>&lt;</operator> <name>MAX_PIPES</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pipes</name><index>[<expr><name><name>fctx</name><operator>-&gt;</operator><name>pipe_nth</name></name></expr>]</index></name><operator>.</operator><name>is_valid</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name><name>values</name><index>[<expr><name>DB_PIPES_COLS</name></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name></type>		<name><name>items</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name></type>		<name><name>size</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name></type>		<name><name>limit</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

			<comment type="block">/* name */</comment>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pipes</name><index>[<expr><name><name>fctx</name><operator>-&gt;</operator><name>pipe_nth</name></name></expr>]</index></name><operator>.</operator><name>pipe_name</name></expr>;</expr_stmt>
			<comment type="block">/* items */</comment>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>pipes</name><index>[<expr><name><name>fctx</name><operator>-&gt;</operator><name>pipe_nth</name></name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>items</name></expr>;</expr_stmt>
			<comment type="block">/* items */</comment>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>pipes</name><index>[<expr><name><name>fctx</name><operator>-&gt;</operator><name>pipe_nth</name></name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
			<comment type="block">/* limit */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>pipes</name><index>[<expr><name><name>fctx</name><operator>-&gt;</operator><name>pipe_nth</name></name></expr>]</index></name><operator>.</operator><name>limit</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>pipes</name><index>[<expr><name><name>fctx</name><operator>-&gt;</operator><name>pipe_nth</name></name></expr>]</index></name><operator>.</operator><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<comment type="block">/* private */</comment>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>pipes</name><index>[<expr><name><name>fctx</name><operator>-&gt;</operator><name>pipe_nth</name></name></expr>]</index></name><operator>.</operator><name>creator</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
			<comment type="block">/* owner */</comment>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>pipes</name><index>[<expr><name><name>fctx</name><operator>-&gt;</operator><name>pipe_nth</name></name></expr>]</index></name><operator>.</operator><name>creator</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>BuildTupleFromCStrings</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>attinmeta</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>pipe_nth</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>pipe_nth</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * secondary functions
 */</comment>

<comment type="block">/*
 * Registration explicit pipes
 *   dbms_pipe.create_pipe(pipe_name varchar, limit := -1 int, private := false bool);
 */</comment>

<function><type><name>Datum</name></type>
<name>dbms_pipe_create_pipe</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>pipe_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>limit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>  <name>is_private</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>  <name>limit_is_valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>  <name>created</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>endtime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"pipe name is NULL"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Pipename may not be NULL."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>pipe_name</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>limit_is_valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>is_private</name> <operator>=</operator> <ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WATCH_PRE</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ora_lock_shmem</name><argument_list>(<argument><expr><name>SHMEMMSGSZ</name></expr></argument>, <argument><expr><name>MAX_PIPES</name></expr></argument>,<argument><expr><name>MAX_EVENTS</name></expr></argument>,<argument><expr><name>MAX_LOCKS</name></expr></argument>,<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>orafce_pipe</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>find_pipe</name><argument_list>(<argument><expr><name>pipe_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>created</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>created</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DUPLICATE_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"pipe creation error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Pipe is registered."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>is_private</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>GetUserId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>user</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>namein</name></expr></argument>,
					    <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><call><name>GetUserNameFromId</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>creator</name></name> <operator>=</operator> <call><name>ora_sstrcpy</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <ternary><condition><expr><name>limit_is_valid</name></expr> ?</condition><then> <expr><name>limit</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>registered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>WATCH_POST</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOCK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Clean local input, output buffers
 */</comment>

<function><type><name>Datum</name></type>
<name>dbms_pipe_reset_buffer</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>output_buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>output_buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>input_buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>input_buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Remove all stored messages in pipe. Remove implicit created
 * pipe.
 */</comment>

<function><type><name>Datum</name></type>
<name>dbms_pipe_purge</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>pipe_name</name> <init>= <expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>float8</name></type> <name>endtime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>WATCH_PRE</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ora_lock_shmem</name><argument_list>(<argument><expr><name>SHMEMMSGSZ</name></expr></argument>, <argument><expr><name>MAX_PIPES</name></expr></argument>,<argument><expr><name>MAX_EVENTS</name></expr></argument>,<argument><expr><name>MAX_LOCKS</name></expr></argument>,<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>

		<expr_stmt><expr><call><name>remove_pipe</name><argument_list>(<argument><expr><name>pipe_name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>WATCH_POST</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOCK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Remove pipe if exists
 */</comment>

<function><type><name>Datum</name></type>
<name>dbms_pipe_remove_pipe</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>pipe_name</name> <init>= <expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>float8</name></type> <name>endtime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>WATCH_PRE</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ora_lock_shmem</name><argument_list>(<argument><expr><name>SHMEMMSGSZ</name></expr></argument>, <argument><expr><name>MAX_PIPES</name></expr></argument>,<argument><expr><name>MAX_EVENTS</name></expr></argument>,<argument><expr><name>MAX_LOCKS</name></expr></argument>,<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>

		<expr_stmt><expr><call><name>remove_pipe</name><argument_list>(<argument><expr><name>pipe_name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>WATCH_POST</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOCK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Some void udf which I can't wrap in sql
 */</comment>

<function><type><name>Datum</name></type>
<name>dbms_pipe_create_pipe_2</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>	<name>arg1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>limit</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"pipe name is NULL"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Pipename may not be NULL."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>arg1</name> <operator>=</operator> <call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>dbms_pipe_create_pipe</name></expr></argument>,
						<argument><expr><name>arg1</name></expr></argument>,
						<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>dbms_pipe_create_pipe_1</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>	<name>arg1</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"pipe name is NULL"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Pipename may not be NULL."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>arg1</name> <operator>=</operator> <call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>dbms_pipe_create_pipe</name></expr></argument>,
						<argument><expr><name>arg1</name></expr></argument>,
						<argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>,
						<argument><expr><call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>dbms_pipe_pack_message_integer</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Casting from int4 to numeric */</comment>
	<expr_stmt><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>dbms_pipe_pack_message_number</name></expr></argument>,
				<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int4_numeric</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>dbms_pipe_pack_message_bigint</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Casting from int8 to numeric */</comment>
	<expr_stmt><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>dbms_pipe_pack_message_number</name></expr></argument>,
				<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int8_numeric</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
