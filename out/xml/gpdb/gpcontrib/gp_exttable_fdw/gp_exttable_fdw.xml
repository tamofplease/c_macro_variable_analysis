<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/gpcontrib/gp_exttable_fdw/gp_exttable_fdw.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gp_exttable_fdw.c
 *	  Shim layer between legacy GPDB external table API and the Foreign
 *	  Data Wrapper API
 *
 * This implements the FDW routines expected by PostgreSQL backend code,
 * to plan and execute queries on external tables. The FDW routines
 * call into the corresponding legacy external table API functions to do
 * the real work, IterateForeignScan for example just calls
 * external_getnext().
 *
 * Portions Copyright (c) 2007-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    gpcontrib/gp_exttable_fdw/gp_exttable_fdw.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extaccess.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/plannodes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/external.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/reloptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/relscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_authid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_extprotocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_foreign_server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_foreign_table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbsreh.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"foreign/fdwapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/execnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pathnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/cost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/optimizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/pathnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/planmain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/restrictinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/partcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/uri.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GP_EXTTABLE_ATTRNUM</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>Datum</name></type> <name>gp_exttable_fdw_handler</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>Datum</name></type> <name>gp_exttable_permission_check</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>Datum</name></type> <name>pg_exttable</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gp_exttable_fdw_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gp_exttable_permission_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pg_exttable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * PGExtTableEntry is used in pg_exttable(). It reflects each external
 * table entry in the foreign table catalog.
 */</comment>
<typedef>typedef <type><struct>struct <name>PGExtTableEntry</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type>			<name>reloid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>serveroid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>ftoptions</name></decl>;</decl_stmt>
}</block></struct></type> <name>PGExtTableEntry</name>;</typedef>

<comment type="block">/*
 * PGExtTableEntriesContext is used in pg_exttable() as user_fctx.
 */</comment>
<typedef>typedef <type><struct>struct <name>PGExtTableEntriesContext</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>entryIdx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>ftentries</name></decl>;</decl_stmt>
}</block></struct></type> <name>PGExtTableEntriesContext</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>FileScanDescData</name> <modifier>*</modifier></type><name>ess_ScanDesc</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ExternalSelectDesc</name></type> <name>externalSelectDesc</name></decl>;</decl_stmt>

}</block></struct></type> <name>exttable_fdw_state</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cost_externalscan</name><parameter_list>(<parameter><decl><type><name>ForeignPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
							  <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>baserel</name></decl></parameter>, <parameter><decl><type><name>ParamPathInfo</name> <modifier>*</modifier></type><name>param_info</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * strListToArray - String Value to Text array datum
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>strListToArray</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>stringlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayBuildState</name> <modifier>*</modifier></type><name>astate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>stringlist</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Value</name>	   <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>astate</name> <operator>=</operator> <call><name>accumArrayResult</name><argument_list>(<argument><expr><name>astate</name></expr></argument>, <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><call><name>strVal</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
								  <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>,
								  <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>astate</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>makeArrayResult</name><argument_list>(<argument><expr><name>astate</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * formatOptionsToTextDatum
 * Convert format options to text datum. The text datum format is same with
 * the original pg_exttable catalog's fmtopt field.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>formatOptionsToTextDatum</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>formattype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>cfbuf</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>fmttype_is_text</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>fmttype_is_csv</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>isfirst</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * Note: the order of the options should be same with the original
		 * pg_exttable catalog's fmtopt field.
		 */</comment>
		<macro><name>foreach</name><argument_list>(<argument>option</argument>, <argument>options</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>defel</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>val</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>defGetString</name><argument_list>(<argument><expr><name>defel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>isfirst</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>isfirst</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfbuf</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"header"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfbuf</name></expr></argument>, <argument><expr><literal type="string">"header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"fill_missing_fields"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfbuf</name></expr></argument>, <argument><expr><literal type="string">"fill missing fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"force_not_null"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfbuf</name></expr></argument>, <argument><expr><literal type="string">"force not null %s"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"force_quote"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfbuf</name></expr></argument>, <argument><expr><literal type="string">"force quote %s"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfbuf</name></expr></argument>, <argument><expr><literal type="string">"%s '%s'"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<macro><name>foreach</name><argument_list>(<argument>option</argument>, <argument>options</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>defel</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>val</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>defGetString</name><argument_list>(<argument><expr><name>defel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfbuf</name></expr></argument>, <argument><expr><literal type="string">"%s '%s'"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name><name>cfbuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>cfbuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Use the pg_exttable UDF to extract pg_exttable catalog info for
 * extension compatibility.
 *
 * pg_exttable catalog was removed because we use the FDW to implement
 * external table now. But other extensions may still rely on the pg_exttable
 * catalog. So we create a view base on this UDF to extract pg_exttable catalog
 * info.
 */</comment>
<function><type><name>Datum</name></type> <name>pg_exttable</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncCallContext</name>			   <modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGExtTableEntriesContext</name>   <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>						<name><name>values</name><index>[<expr><name>GP_EXTTABLE_ATTRNUM</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>						<name><name>nulls</name><index>[<expr><name>GP_EXTTABLE_ATTRNUM</name></expr>]</index></name> <init>= <expr><block>{<expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * First call setup
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MemoryContext</name></type>	<name>oldcontext</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Relation</name></type>		<name>pg_foreign_table_rel</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ScanKeyData</name></type>		<name>ftkey</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SysScanDesc</name></type>		<name>ftscan</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type>		<name>fttuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_foreign_table</name></type> <name>fttableform</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name>		   <modifier>*</modifier></type><name>ftentries</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type>				<name>extserver</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Build tuple descriptor */</comment>
		<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name> <init>= <expr><call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>GP_EXTTABLE_ATTRNUM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"reloid"</literal></expr></argument>, <argument><expr><name>OIDOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"urilocation"</literal></expr></argument>, <argument><expr><name>TEXTARRAYOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"execlocation"</literal></expr></argument>, <argument><expr><name>TEXTARRAYOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"fmttype"</literal></expr></argument>, <argument><expr><name>CHAROID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"fmtopts"</literal></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"options"</literal></expr></argument>, <argument><expr><name>TEXTARRAYOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"command"</literal></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"rejectlimit"</literal></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"rejectlimittype"</literal></expr></argument>, <argument><expr><name>CHAROID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"logerrors"</literal></expr></argument>, <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"encoding"</literal></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"writable"</literal></expr></argument>, <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>extserver</name> <operator>=</operator> <call><name>get_foreign_server_oid</name><argument_list>(<argument><expr><name>GP_EXTTABLE_SERVER_NAME</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Retrieve external table in foreign table catalog */</comment>
		<expr_stmt><expr><name>pg_foreign_table_rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>ForeignTableRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ftkey</name></expr></argument>,
					<argument><expr><name>Anum_pg_foreign_table_ftserver</name></expr></argument>,
					<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
					<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>extserver</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ftscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>pg_foreign_table_rel</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>,
									<argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ftkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>fttuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>ftscan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Datum</name></type>	<name>ftoptions</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>	<name>isNull</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>PGExtTableEntry</name> <modifier>*</modifier></type><name>entry</name><init>= <expr><operator>(</operator><name>PGExtTableEntry</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGExtTableEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>fttableform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_foreign_table</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>fttuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>reloid</name></name> <operator>=</operator> <name><name>fttableform</name><operator>-&gt;</operator><name>ftrelid</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>serveroid</name></name> <operator>=</operator> <name><name>fttableform</name><operator>-&gt;</operator><name>ftserver</name></name></expr>;</expr_stmt>
			<comment type="block">/* get the foreign table options */</comment>
			<expr_stmt><expr><name>ftoptions</name> <operator>=</operator> <call><name>heap_getattr</name><argument_list>(<argument><expr><name>fttuple</name></expr></argument>,
									 <argument><expr><name>Anum_pg_foreign_table_ftoptions</name></expr></argument>,
									 <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_foreign_table_rel</name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isNull</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ftoptions</name></name> <operator>=</operator> <call><name>untransformRelOptions</name><argument_list>(<argument><expr><name>ftoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>ftentries</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>ftentries</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>ftscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>pg_foreign_table_rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>context</name> <operator>=</operator> <operator>(</operator><name>PGExtTableEntriesContext</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGExtTableEntriesContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>entryIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>ftentries</name></name> <operator>=</operator> <name>ftentries</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>context</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>context</name> <operator>=</operator> <operator>(</operator><name>PGExtTableEntriesContext</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>entryIdx</name></name> <operator>&lt;</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>ftentries</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGExtTableEntry</name>	   <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ExtTableEntry</name>	   <modifier>*</modifier></type><name>extentry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>				<name>datum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type>			<name>tuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>				<name>result</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>PGExtTableEntry</name> <operator>*</operator><operator>)</operator><call><name>list_nth</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>ftentries</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>entryIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>entryIdx</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>extentry</name> <operator>=</operator> <call><name>GetExtFromForeignTableOptions</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>ftoptions</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>reloid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* reloid */</comment>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>reloid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* urilocations */</comment>
		<expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>strListToArray</name><argument_list>(<argument><expr><name><name>extentry</name><operator>-&gt;</operator><name>urilocations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>datum</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* execlocations */</comment>
		<expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>strListToArray</name><argument_list>(<argument><expr><name><name>extentry</name><operator>-&gt;</operator><name>execlocations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>datum</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* fmtcode */</comment>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><name><name>extentry</name><operator>-&gt;</operator><name>fmtcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* fmtopts */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>extentry</name><operator>-&gt;</operator><name>options</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>formatOptionsToTextDatum</name><argument_list>(<argument><expr><name><name>extentry</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name><name>extentry</name><operator>-&gt;</operator><name>fmtcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/*
		 * options. Since our document not contains the OPTION caluse, so we
		 * assume no external table options in used for now.  Except
		 * gpextprotocol.c.
		 */</comment>
		<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<comment type="block">/* command */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>extentry</name><operator>-&gt;</operator><name>command</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name><name>extentry</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* rejectlimit */</comment>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>extentry</name><operator>-&gt;</operator><name>rejectlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>values</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* rejectlimittype */</comment>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><name><name>extentry</name><operator>-&gt;</operator><name>rejectlimittype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>values</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* logerrors */</comment>
		<if_stmt><if>if IS_LOG_TO_FILE<condition>(<expr><name><name>extentry</name><operator>-&gt;</operator><name>logerrors</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<comment type="block">/* encoding */</comment>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>extentry</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* iswritable */</comment>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name><name>extentry</name><operator>-&gt;</operator><name>iswritable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* FDW validator for external tables */</comment>
<function><type><name>Datum</name></type>
<name>gp_exttable_permission_check</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>options_list</name> <init>= <expr><call><name>untransformRelOptions</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>superuser</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_DISPATCH</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*----------
		 * check permissions to create this external table.
		 *
		 * - Always allow if superuser.
		 * - Never allow EXECUTE or 'file' exttables if not superuser.
		 * - Allow http, gpfdist or gpfdists tables if pg_auth has the right
		 *	 permissions for this role and for this type of table
		 *----------
		 */</comment>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>iswritable</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>options_list</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>def</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"command"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be superuser to create an EXECUTE external web table"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"is_writable"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>iswritable</name> <operator>=</operator> <call><name>defGetBoolean</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>

		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>options_list</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>def</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"location_uris"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>location_list</name> <init>= <expr><call><name>TokenizeLocationUris</name><argument_list>(<argument><expr><call><name>defGetString</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>first_uri</name> <init>= <expr><call><name>list_head</name><argument_list>(<argument><expr><name>location_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Value</name>	   <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>first_uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>uri_str</name> <init>= <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Uri</name>		   <modifier>*</modifier></type><name>uri</name> <init>= <expr><call><name>ParseExternalTableUri</name><argument_list>(<argument><expr><name>uri_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<comment type="block">/* Assert(exttypeDesc-&gt;exttabletype == EXTTBL_TYPE_LOCATION); */</comment>

				<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>URI_FILE</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be superuser to create an external table with a file protocol"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="block">/*
					 * Check if this role has the proper 'gpfdist', 'gpfdists' or
					 * 'http' permissions in pg_auth for creating this table.
					 */</comment>

					<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>AUTHOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"role \"%s\" does not exist (in DefineExternalRelation)"</literal></expr></argument>,
										<argument><expr><call><name>GetUserNameFromId</name><argument_list>(<argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>URI_GPFDIST</name> <operator>||</operator> <name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>URI_GPFDISTS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>iswritable</name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>Datum</name></type>	 	<name>d_wextgpfd</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>bool</name></type>		<name>createwextgpfd</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>d_wextgpfd</name> <operator>=</operator> <call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>AUTHOID</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>,
													 <argument><expr><name>Anum_pg_authid_rolcreatewextgpfd</name></expr></argument>,
													 <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>createwextgpfd</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>isnull</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>d_wextgpfd</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>createwextgpfd</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
									<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
									 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"permission denied: no privilege to create a writable gpfdist(s) external table"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>URI_GPFDIST</name> <operator>||</operator> <name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>URI_GPFDISTS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>iswritable</name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>Datum</name></type>		<name>d_rextgpfd</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>bool</name></type>		<name>createrextgpfd</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>d_rextgpfd</name> <operator>=</operator> <call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>AUTHOID</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>,
													 <argument><expr><name>Anum_pg_authid_rolcreaterextgpfd</name></expr></argument>,
													 <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>createrextgpfd</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>isnull</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>d_rextgpfd</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>createrextgpfd</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
									<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
									 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"permission denied: no privilege to create a readable gpfdist(s) external table"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>URI_HTTP</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>iswritable</name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>Datum</name></type>		<name>d_exthttp</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>bool</name></type>		<name>createrexthttp</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>d_exthttp</name> <operator>=</operator> <call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>AUTHOID</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>,
													<argument><expr><name>Anum_pg_authid_rolcreaterexthttp</name></expr></argument>,
													<argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>createrexthttp</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>isnull</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>d_exthttp</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>createrexthttp</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
									<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
									 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"permission denied: no privilege to create an http external table"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>URI_CUSTOM</name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>Oid</name></type>			<name>ownerId</name> <init>= <expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>protname</name> <init>= <expr><name><name>uri</name><operator>-&gt;</operator><name>customprotocol</name></name></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>Oid</name></type>			<name>ptcId</name> <init>= <expr><call><name>get_extprotocol_oid</name><argument_list>(<argument><expr><name>protname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>AclResult</name></type>	<name>aclresult</name></decl>;</decl_stmt>

						<comment type="block">/* Check we have the right permissions on this protocol */</comment>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_extprotocol_ownercheck</name><argument_list>(<argument><expr><name>ptcId</name></expr></argument>, <argument><expr><name>ownerId</name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<decl_stmt><decl><type><name>AclMode</name></type>		<name>mode</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>iswritable</name></expr> ?</condition><then> <expr><name>ACL_INSERT</name></expr> </then><else>: <expr><name>ACL_SELECT</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

							<expr_stmt><expr><name>aclresult</name> <operator>=</operator> <call><name>pg_extprotocol_aclcheck</name><argument_list>(<argument><expr><name>ptcId</name></expr></argument>, <argument><expr><name>ownerId</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

							<if_stmt><if>if <condition>(<expr><name>aclresult</name> <operator>!=</operator> <name>ACLCHECK_OK</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>aclresult</name></expr></argument>, <argument><expr><name>OBJECT_EXTPROTOCOL</name></expr></argument>, <argument><expr><name>protname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"internal error in DefineExternalRelation"</literal></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Protocol is %d, writable is %d."</literal></expr></argument>,
										   <argument><expr><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>, <argument><expr><name>iswritable</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<expr_stmt><expr><call><name>FreeExternalTableUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>uri_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>exttable_GetForeignRelSize</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
						   <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>baserel</name></decl></parameter>,
						   <parameter><decl><type><name>Oid</name></type> <name>foreigntableid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>set_baserel_size_estimates</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>baserel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>exttable_GetForeignPaths</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
						 <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>baserel</name></decl></parameter>,
						 <parameter><decl><type><name>Oid</name></type> <name>foreigntableid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ForeignPath</name>   <modifier>*</modifier></type><name>pathnode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExternalScanInfo</name> <modifier>*</modifier></type><name>externalscan_info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExtTableEntry</name> <modifier>*</modifier></type><name>extEntry</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>extEntry</name> <operator>=</operator> <call><name>GetExtTableEntry</name><argument_list>(<argument><expr><name>foreigntableid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* it should be an external rel... */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>baserel</name><operator>-&gt;</operator><name>rtekind</name></name> <operator>==</operator> <name>RTE_RELATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>extEntry</name><operator>-&gt;</operator><name>execlocations</name></name> <operator>!=</operator> <name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>externalscan_info</name> <operator>=</operator> <call><name>MakeExternalScanInfo</name><argument_list>(<argument><expr><name>extEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pathnode</name> <operator>=</operator> <call><name>create_foreignscan_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
									   <argument><expr><name>baserel</name></expr></argument>,
									   <argument><expr><name>NULL</name></expr></argument>, <comment type="block">/* default pathtarget */</comment>
									   <argument><expr><literal type="number">0</literal></expr></argument>, <comment type="block">/* rows, filled in later */</comment>
									   <argument><expr><literal type="number">0</literal></expr></argument>, <comment type="block">/* startup_cost, later */</comment>
									   <argument><expr><literal type="number">0</literal></expr></argument>, <comment type="block">/* total_cost, later */</comment>
									   <argument><expr><name>NIL</name></expr></argument>, <comment type="block">/* external scan has unordered result */</comment>
									   <argument><expr><name>NULL</name></expr></argument>,		<comment type="block">/* no outer rel either */</comment>
									   <argument><expr><name>NULL</name></expr></argument>,		<comment type="block">/* no extra plan */</comment>
									   <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><name>externalscan_info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pathnode</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>locus</name></name> <operator>=</operator> <call><name>cdbpathlocus_from_baserel</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>baserel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pathnode</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>motionHazard</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Mark external tables as non-rescannable. While rescan is possible,
	 * it can lead to surprising results if the external table produces
	 * different results when invoked twice.
	 */</comment>
	<expr_stmt><expr><name><name>pathnode</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>rescannable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pathnode</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>sameslice_relids</name></name> <operator>=</operator> <name><name>baserel</name><operator>-&gt;</operator><name>relids</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cost_externalscan</name><argument_list>(<argument><expr><name>pathnode</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>baserel</name></expr></argument>, <argument><expr><name><name>pathnode</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>param_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>add_path</name><argument_list>(<argument><expr><name>baserel</name></expr></argument>, <argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name>pathnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_cheapest</name><argument_list>(<argument><expr><name>baserel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * create_externalscan_plan
 *	 Returns an externalscan plan for the base relation scanned by 'best_path'
 *	 with restriction clauses 'scan_clauses' and targetlist 'tlist'.
 *
 *	 The external plan also includes the data format specification and file
 *	 location specification. Here is where we do the mapping of external file
 *	 to segment database and add it to the plan (or bail out of the mapping
 *	 rules are broken)
 *
 *	 Mapping rules
 *	 -------------
 *	 - 'file' protocol: each location (URI of local file) gets mapped to one
 *						and one only primary segdb.
 *	 - 'http' protocol: each location (URI of http server) gets mapped to one
 *						and one only primary segdb.
 *	 - 'gpfdist' and 'gpfdists' protocols: all locations (URI of gpfdist(s) client) are mapped
 *						to all primary segdbs. If there are less URIs than
 *						segdbs (usually the case) the URIs are duplicated
 *						so that there will be one for each segdb. However, if
 *						the GUC variable gp_external_max_segs is set to a num
 *						less than (total segdbs/total URIs) then we make sure
 *						that no URI gets mapped to more than this GUC number by
 *						skipping some segdbs randomly.
 *	 - 'exec' protocol: all segdbs get mapped to execute the command (this is
 *						soon to be changed though).
 */</comment>
<function><type><specifier>static</specifier> <name>ForeignScan</name> <modifier>*</modifier></type>
<name>exttable_GetForeignPlan</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
						<parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>baserel</name></decl></parameter>,
						<parameter><decl><type><name>Oid</name></type> <name>foreigntableid</name></decl></parameter>,
						<parameter><decl><type><name>ForeignPath</name> <modifier>*</modifier></type><name>best_path</name></decl></parameter>,
						<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tlist</name></decl></parameter>,
						<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>scan_clauses</name></decl></parameter>,
						<parameter><decl><type><name>Plan</name> <modifier>*</modifier></type><name>outer_plan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Index</name></type>		<name>scan_relid</name> <init>= <expr><name><name>best_path</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>parent</name><operator>-&gt;</operator><name>relid</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ForeignScan</name> <modifier>*</modifier></type><name>scan_plan</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>scan_relid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Reduce RestrictInfo list to bare expressions; ignore pseudoconstants */</comment>
	<expr_stmt><expr><name>scan_clauses</name> <operator>=</operator> <call><name>extract_actual_clauses</name><argument_list>(<argument><expr><name>scan_clauses</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>scan_plan</name> <operator>=</operator> <call><name>make_foreignscan</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>,
								 <argument><expr><name>scan_clauses</name></expr></argument>,
								 <argument><expr><name>scan_relid</name></expr></argument>,
								 <argument><expr><name>NIL</name></expr></argument>, <comment type="block">/* fdw_exprs */</comment>
								 <argument><expr><name><name>best_path</name><operator>-&gt;</operator><name>fdw_private</name></name></expr></argument>,
								 <argument><expr><name>NIL</name></expr></argument>, <comment type="block">/* fdw_scan_tlist */</comment>
								 <argument><expr><name>NIL</name></expr></argument>, <comment type="block">/* fdw_recheck_quals */</comment>
								 <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* outer_plan */</comment>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>scan_plan</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>exttable_BeginForeignScan</name><parameter_list>(<parameter><decl><type><name>ForeignScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
						  <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ForeignScan</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>currentRelation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FileScanDesc</name></type> <name>currentScanDesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExternalSelectDesc</name></type> <name>externalSelectDesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExternalScanInfo</name> <modifier>*</modifier></type><name>externalscan_info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>exttable_fdw_state</name> <modifier>*</modifier></type><name>fdw_state</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>scan</name> <operator>=</operator> <operator>(</operator><name>ForeignScan</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>externalscan_info</name> <operator>=</operator> <operator>(</operator><name>ExternalScanInfo</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>fdw_private</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsA</name><argument_list>(<argument><expr><name>externalscan_info</name></expr></argument>, <argument><expr><name>ExternalScanInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>currentRelation</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_currentRelation</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>currentRelation</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"external table scan without a current relation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>currentScanDesc</name> <operator>=</operator> <call><name>external_beginscan</name><argument_list>(<argument><expr><name>currentRelation</name></expr></argument>,
										 <argument><expr><name><name>externalscan_info</name><operator>-&gt;</operator><name>scancounter</name></name></expr></argument>,
										 <argument><expr><name><name>externalscan_info</name><operator>-&gt;</operator><name>uriList</name></name></expr></argument>,
										 <argument><expr><name><name>externalscan_info</name><operator>-&gt;</operator><name>fmtType</name></name></expr></argument>,
										 <argument><expr><name><name>externalscan_info</name><operator>-&gt;</operator><name>isMasterOnly</name></name></expr></argument>,
										 <argument><expr><name><name>externalscan_info</name><operator>-&gt;</operator><name>rejLimit</name></name></expr></argument>,
										 <argument><expr><name><name>externalscan_info</name><operator>-&gt;</operator><name>rejLimitInRows</name></name></expr></argument>,
										 <argument><expr><name><name>externalscan_info</name><operator>-&gt;</operator><name>logErrors</name></name></expr></argument>,
										 <argument><expr><name><name>externalscan_info</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>,
										 <argument><expr><name><name>externalscan_info</name><operator>-&gt;</operator><name>extOptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>externalSelectDesc</name> <operator>=</operator> <call><name>external_getnext_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>gp_external_enable_filter_pushdown</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>externalSelectDesc</name><operator>-&gt;</operator><name>filter_quals</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name><operator>-&gt;</operator><name>qual</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>fdw_state</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>exttable_fdw_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdw_state</name><operator>-&gt;</operator><name>ess_ScanDesc</name></name> <operator>=</operator> <name>currentScanDesc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdw_state</name><operator>-&gt;</operator><name>externalSelectDesc</name></name> <operator>=</operator> <name>externalSelectDesc</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>fdw_state</name></name> <operator>=</operator> <name>fdw_state</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ExternalConstraintCheck</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>FileScanDesc</name></type> <name>scandesc</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>		<name>rel</name> <init>= <expr><name><name>scandesc</name><operator>-&gt;</operator><name>fs_rd</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleConstr</name>		<modifier>*</modifier></type><name>constr</name> <init>= <expr><name><name>rel</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>constr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ConstrCheck</name>		<modifier>*</modifier></type><name>check</name> <init>= <expr><name><name>constr</name><operator>-&gt;</operator><name>check</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type>			<name>ncheck</name> <init>= <expr><name><name>constr</name><operator>-&gt;</operator><name>num_check</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExprContext</name>		<modifier>*</modifier></type><name>econtext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type>	<name>oldContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* No constraints */</comment>
	<if_stmt><if>if <condition>(<expr><name>ncheck</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Build expression nodetrees for rel's constraint expressions.
	 * Keep them in the per-query memory context so they'll survive throughout the query.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>scandesc</name><operator>-&gt;</operator><name>fs_constraintExprs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>estate</name><operator>-&gt;</operator><name>es_query_cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scandesc</name><operator>-&gt;</operator><name>fs_constraintExprs</name></name> <operator>=</operator>
			<operator>(</operator><name>ExprState</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>ncheck</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ExprState</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncheck</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<comment type="block">/* ExecQual wants implicit-AND form */</comment>
			<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>qual</name> <init>= <expr><call><name>make_ands_implicit</name><argument_list>(<argument><expr><call><name>stringToNode</name><argument_list>(<argument><expr><name><name>check</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ccbin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>scandesc</name><operator>-&gt;</operator><name>fs_constraintExprs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
				<call><name>ExecPrepareExpr</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>qual</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * We will use the EState's per-tuple context for evaluating constraint
	 * expressions (creating it if it's not already there).
	 */</comment>
	<expr_stmt><expr><name>econtext</name> <operator>=</operator> <call><name>GetPerTupleExprContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Arrange for econtext's scan tuple to be the tuple under test */</comment>
	<expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>

	<comment type="block">/* And evaluate the constraints */</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncheck</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ExprState</name> <modifier>*</modifier></type><name>qual</name> <init>= <expr><name><name>scandesc</name><operator>-&gt;</operator><name>fs_constraintExprs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ExecCheck</name><argument_list>(<argument><expr><name>qual</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check whether a row matches the partition constraint.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ExternalPartitionCheck</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>FileScanDesc</name></type> <name>scandesc</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name> <init>= <expr><name><name>scandesc</name><operator>-&gt;</operator><name>fs_rd</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Build expression nodetrees for rel's constraint expressions.
	 * Keep them in the per-query memory context so they'll survive throughout the query.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>scandesc</name><operator>-&gt;</operator><name>fs_partitionCheckExpr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>partition_check</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type>	<name>oldContext</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>estate</name><operator>-&gt;</operator><name>es_query_cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>partition_check</name> <operator>=</operator> <call><name>RelationGetPartitionQual</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>scandesc</name><operator>-&gt;</operator><name>fs_partitionCheckExpr</name></name> <operator>=</operator> <call><name>ExecPrepareCheck</name><argument_list>(<argument><expr><name>partition_check</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * We will use the EState's per-tuple context for evaluating constraint
	 * expressions (creating it if it's not already there).
	 */</comment>
	<expr_stmt><expr><name>econtext</name> <operator>=</operator> <call><name>GetPerTupleExprContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Arrange for econtext's scan tuple to be the tuple under test */</comment>
	<expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>

	<return>return <expr><call><name>ExecCheck</name><argument_list>(<argument><expr><name><name>scandesc</name><operator>-&gt;</operator><name>fs_partitionCheckExpr</name></name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>exttable_IterateForeignScan</name><parameter_list>(<parameter><decl><type><name>ForeignScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EState</name>	   <modifier>*</modifier></type><name>estate</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>exttable_fdw_state</name> <modifier>*</modifier></type><name>fdw_state</name> <init>= <expr><operator>(</operator><name>exttable_fdw_state</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>fdw_state</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_ScanTupleSlot</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * XXX: ForeignNext() calls us in a short-lived memory context, which
	 * seems like a good idea. However external_getnext() allocates some stuff
	 * that needs to live longer. At least on the first call. The old
	 * ExternalScan plan node used to run in a long-lived context, which seems
	 * a bit dangerous to me, but I guess that external_getnext() and all the
	 * external protocols are careful not to leak memory.
	 */</comment>
	<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>estate</name><operator>-&gt;</operator><name>es_query_cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>external_getnext</name><argument_list>(<argument><expr><name><name>fdw_state</name><operator>-&gt;</operator><name>ess_ScanDesc</name></name></expr></argument>,
								 <argument><expr><name>ForwardScanDirection</name></expr></argument>, <comment type="block">/* FIXME: foreign scans don't support backward scans, I think? */</comment>
								 <argument><expr><name><name>fdw_state</name><operator>-&gt;</operator><name>externalSelectDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tuple</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>ExecStoreHeapTuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If this is a partition in a partitioned table, check each row against
		 * the partition qual, and skip rows that don't belong in this partition.
		 * Foreign tables are not required to enforce that, but that has been
		 * the historical behavior for external tables.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>fdw_state</name><operator>-&gt;</operator><name>ess_ScanDesc</name><operator>-&gt;</operator><name>fs_isPartition</name></name> <operator>&amp;&amp;</operator>
			<operator>!</operator><call><name>ExternalPartitionCheck</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>fdw_state</name><operator>-&gt;</operator><name>ess_ScanDesc</name></name></expr></argument>, <argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Similarly, check CHECK constraints and skip rows that don't satisfy
		 * them. Foreign tables are not required required to enforce CHECK
		 * constraints either, they are merely hints to the optimizer, but it
		 * is allowed. (In GPDB 6 and below, partition quals were stored in the
		 * catalogs as CHECK constraints, so this was needed to check the
		 * partition quals.)
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>fdw_state</name><operator>-&gt;</operator><name>ess_ScanDesc</name><operator>-&gt;</operator><name>fs_hasConstraints</name></name> <operator>&amp;&amp;</operator>
			<operator>!</operator><call><name>ExternalConstraintCheck</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>fdw_state</name><operator>-&gt;</operator><name>ess_ScanDesc</name></name></expr></argument>, <argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<break>break;</break>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>slot</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>exttable_ReScanForeignScan</name><parameter_list>(<parameter><decl><type><name>ForeignScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>exttable_fdw_state</name> <modifier>*</modifier></type><name>fdw_state</name> <init>= <expr><operator>(</operator><name>exttable_fdw_state</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>fdw_state</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>external_rescan</name><argument_list>(<argument><expr><name><name>fdw_state</name><operator>-&gt;</operator><name>ess_ScanDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>exttable_EndForeignScan</name><parameter_list>(<parameter><decl><type><name>ForeignScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>exttable_fdw_state</name> <modifier>*</modifier></type><name>fdw_state</name> <init>= <expr><operator>(</operator><name>exttable_fdw_state</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>fdw_state</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>squelched</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>external_stopscan</name><argument_list>(<argument><expr><name><name>fdw_state</name><operator>-&gt;</operator><name>ess_ScanDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * report Sreh results if external web table execute on coordinator with reject limit.
	 * if external web table execute on segment, these messages are printed
	 * in cdbdisp_sumRejectedRows()
	*/</comment>
	<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_DISPATCH</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>CopyState</name></type> <name>cstate</name> <init>= <expr><name><name>fdw_state</name><operator>-&gt;</operator><name>ess_ScanDesc</name><operator>-&gt;</operator><name>fs_pstate</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>cstate</name> <operator>&amp;&amp;</operator> <name><name>cstate</name><operator>-&gt;</operator><name>cdbsreh</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>CdbSreh</name>	 <modifier>*</modifier></type><name>cdbsreh</name> <init>= <expr><name><name>cstate</name><operator>-&gt;</operator><name>cdbsreh</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint64</name></type>	<name>total_rejected_from_qd</name> <init>= <expr><name><name>cdbsreh</name><operator>-&gt;</operator><name>rejectcount</name></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>total_rejected_from_qd</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ReportSrehResults</name><argument_list>(<argument><expr><name>cdbsreh</name></expr></argument>, <argument><expr><name>total_rejected_from_qd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>external_endscan</name><argument_list>(<argument><expr><name><name>fdw_state</name><operator>-&gt;</operator><name>ess_ScanDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* ModifyTable support */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>exttable_IsForeignRelUpdatable</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtTableEntry</name> <modifier>*</modifier></type><name>extentry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>iswritable</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>extentry</name> <operator>=</operator> <call><name>GetExtTableEntry</name><argument_list>(<argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>iswritable</name> <operator>=</operator> <name><name>extentry</name><operator>-&gt;</operator><name>iswritable</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>extentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><ternary><condition><expr><name>iswritable</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CMD_INSERT</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>exttable_BeginForeignModify</name><parameter_list>(<parameter><decl><type><name>ModifyTableState</name> <modifier>*</modifier></type><name>mtstate</name></decl></parameter>,
							<parameter><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
							<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>fdw_private</name></decl></parameter>,
							<parameter><decl><type><name>int</name></type> <name>subplan_index</name></decl></parameter>,
							<parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Do nothing in EXPLAIN (no ANALYZE) case.  resultRelInfo-&gt;ri_FdwState
	 * stays NULL.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>eflags</name> <operator>&amp;</operator> <name>EXEC_FLAG_EXPLAIN_ONLY</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * This would be the natural place to call external_insert_init(), but we
	 * delay that until the first actual insert. That's because we don't want
	 * to open the external resource if we don't end up actually inserting any
	 * rows in this segment. In particular, we don't want to initialize the
	 * external resource in the QD node, when all the actual insertions happen
	 * in the segments.
	 */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>exttable_ExecForeignInsert</name><parameter_list>(<parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>,
						   <parameter><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>,
						   <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
						   <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>planSlot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExternalInsertDescData</name> <modifier>*</modifier></type><name>extInsertDesc</name></decl>;</decl_stmt>

	<comment type="block">/* Open the external resouce on first call. */</comment>
	<expr_stmt><expr><name>extInsertDesc</name> <operator>=</operator> <operator>(</operator><name>ExternalInsertDescData</name> <operator>*</operator><operator>)</operator> <name><name>rinfo</name><operator>-&gt;</operator><name>ri_FdwState</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>extInsertDesc</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>extInsertDesc</name> <operator>=</operator> <call><name>external_insert_init</name><argument_list>(<argument><expr><name><name>rinfo</name><operator>-&gt;</operator><name>ri_RelationDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>rinfo</name><operator>-&gt;</operator><name>ri_FdwState</name></name> <operator>=</operator> <name>extInsertDesc</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>external_insert</name><argument_list>(<argument><expr><name>extInsertDesc</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>slot</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>exttable_EndForeignModify</name><parameter_list>(<parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>rinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExternalInsertDescData</name> <modifier>*</modifier></type><name>extInsertDesc</name> <init>= <expr><operator>(</operator><name>ExternalInsertDescData</name> <operator>*</operator><operator>)</operator> <name><name>rinfo</name><operator>-&gt;</operator><name>ri_FdwState</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>extInsertDesc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>external_insert_finish</name><argument_list>(<argument><expr><name>extInsertDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>exttable_BeginForeignInsert</name><parameter_list>(<parameter><decl><type><name>ModifyTableState</name> <modifier>*</modifier></type><name>mtstate</name></decl></parameter>,
										<parameter><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>resultRelInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * This would be the natural place to call external_insert_init(), but we
	 * delay that until the first actual insert. That's because we don't want
	 * to open the external resource if we don't end up actually inserting any
	 * rows in this segment. In particular, we don't want to initialize the
	 * external resource in the QD node, when all the actual insertions happen
	 * in the segments.
	 */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>exttable_EndForeignInsert</name><parameter_list>(<parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>,
									  <parameter><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>resultRelInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExternalInsertDescData</name> <modifier>*</modifier></type><name>extInsertDesc</name> <init>= <expr><operator>(</operator><name>ExternalInsertDescData</name> <operator>*</operator><operator>)</operator> <name><name>resultRelInfo</name><operator>-&gt;</operator><name>ri_FdwState</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>extInsertDesc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>external_insert_finish</name><argument_list>(<argument><expr><name>extInsertDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>gp_exttable_fdw_handler</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FdwRoutine</name> <modifier>*</modifier></type><name>routine</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>FdwRoutine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>routine</name><operator>-&gt;</operator><name>GetForeignRelSize</name></name> <operator>=</operator> <name>exttable_GetForeignRelSize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>routine</name><operator>-&gt;</operator><name>GetForeignPaths</name></name> <operator>=</operator> <name>exttable_GetForeignPaths</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>routine</name><operator>-&gt;</operator><name>GetForeignPlan</name></name> <operator>=</operator> <name>exttable_GetForeignPlan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>routine</name><operator>-&gt;</operator><name>BeginForeignScan</name></name> <operator>=</operator> <name>exttable_BeginForeignScan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>routine</name><operator>-&gt;</operator><name>IterateForeignScan</name></name> <operator>=</operator> <name>exttable_IterateForeignScan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>routine</name><operator>-&gt;</operator><name>ReScanForeignScan</name></name> <operator>=</operator> <name>exttable_ReScanForeignScan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>routine</name><operator>-&gt;</operator><name>EndForeignScan</name></name> <operator>=</operator> <name>exttable_EndForeignScan</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>routine</name><operator>-&gt;</operator><name>IsForeignRelUpdatable</name></name> <operator>=</operator> <name>exttable_IsForeignRelUpdatable</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>routine</name><operator>-&gt;</operator><name>BeginForeignModify</name></name> <operator>=</operator> <name>exttable_BeginForeignModify</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>routine</name><operator>-&gt;</operator><name>ExecForeignInsert</name></name> <operator>=</operator> <name>exttable_ExecForeignInsert</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>routine</name><operator>-&gt;</operator><name>EndForeignModify</name></name> <operator>=</operator> <name>exttable_EndForeignModify</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>routine</name><operator>-&gt;</operator><name>BeginForeignInsert</name></name> <operator>=</operator> <name>exttable_BeginForeignInsert</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>routine</name><operator>-&gt;</operator><name>EndForeignInsert</name></name> <operator>=</operator> <name>exttable_EndForeignInsert</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>routine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<comment type="block">/*
 * cost_externalscan
 *	  Determines and returns the cost of scanning an external relation.
 *
 *	  Right now this is not very meaningful at all but we'll probably
 *	  want to make some good estimates in the future.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cost_externalscan</name><parameter_list>(<parameter><decl><type><name>ForeignPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
				  <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>baserel</name></decl></parameter>, <parameter><decl><type><name>ParamPathInfo</name> <modifier>*</modifier></type><name>param_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Cost</name></type>		<name>startup_cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cost</name></type>		<name>run_cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cost</name></type>		<name>cpu_per_tuple</name></decl>;</decl_stmt>

	<comment type="block">/* Should only be applied to external relations */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>baserel</name><operator>-&gt;</operator><name>relid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>baserel</name><operator>-&gt;</operator><name>rtekind</name></name> <operator>==</operator> <name>RTE_RELATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Mark the path with the correct row estimate */</comment>
	<if_stmt><if>if <condition>(<expr><name>param_info</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>param_info</name><operator>-&gt;</operator><name>ppi_rows</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>baserel</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * disk costs
	 */</comment>
	<expr_stmt><expr><name>run_cost</name> <operator>+=</operator> <name>seq_page_cost</name> <operator>*</operator> <name><name>baserel</name><operator>-&gt;</operator><name>pages</name></name></expr>;</expr_stmt>

	<comment type="block">/* CPU costs */</comment>
	<expr_stmt><expr><name>startup_cost</name> <operator>+=</operator> <name><name>baserel</name><operator>-&gt;</operator><name>baserestrictcost</name><operator>.</operator><name>startup</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cpu_per_tuple</name> <operator>=</operator> <name>cpu_tuple_cost</name> <operator>+</operator> <name><name>baserel</name><operator>-&gt;</operator><name>baserestrictcost</name><operator>.</operator><name>per_tuple</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>run_cost</name> <operator>+=</operator> <name>cpu_per_tuple</name> <operator>*</operator> <name><name>baserel</name><operator>-&gt;</operator><name>tuples</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>startup_cost</name></name> <operator>=</operator> <name>startup_cost</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>total_cost</name></name> <operator>=</operator> <name>startup_cost</name> <operator>+</operator> <name>run_cost</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
