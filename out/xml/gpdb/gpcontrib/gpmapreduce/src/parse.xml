<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/gpcontrib/gpmapreduce/src/parse.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;except.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mapred_errors.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;yaml_parse.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;yaml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>int</name></type> <name>mapred_parse_error</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
	__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>PG_PRINTF_ATTRIBUTE</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>
<function_decl><type><name>int</name></type> <name>mapred_verify_object</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>mapred_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* -------------------------------------------------------------------------- */</comment>
<function><type><name>int</name></type> <name>mapred_parse_error</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mapred_object_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>global_verbose_flag</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"    - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>mapred_document_error</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>global_verbose_flag</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"  - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s '%s': "</literal></expr></argument>, <argument><expr><name><name>mapred_kind_name</name><index>[<expr><name><name>obj</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name><name>mapred_kind_name</name><index>[<expr><name><name>obj</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>start_mark</name><operator>.</operator><name>line</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">", at line %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>parser</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>start_mark</name><operator>.</operator><name>line</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><name>MAPRED_PARSE_ERROR</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>copyscalar</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>							\
	<cpp:value>strcpy(malloc(strlen(s)+1), s)</cpp:value></cpp:define>

<function><type><name>mapred_olist_t</name><modifier>*</modifier></type> <name>mapred_parse_string</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>yaml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mapred_olist_t</name>  <modifier>*</modifier></type><name>documents</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>yaml_parser_t</name></type>    <name>parser</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>XRAISE</name><argument_list>(<argument><expr><name>MAPRED_PARSE_INTERNAL</name></expr></argument>,
			   <argument><expr><literal type="string">"YAML parser initialization failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>yaml_parser_set_input_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>, <argument><expr><name>yaml</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>yaml</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>documents</name> <operator>=</operator> <call><name>mapred_parse_yaml</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>yaml_parser_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>documents</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>mapred_olist_t</name><modifier>*</modifier></type> <name>mapred_parse_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mapred_olist_t</name>  <modifier>*</modifier></type><name>documents</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>yaml_parser_t</name></type> <name>parser</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>XRAISE</name><argument_list>(<argument><expr><name>MAPRED_PARSE_INTERNAL</name></expr></argument>,
			   <argument><expr><literal type="string">"YAML parser initialization failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>yaml_parser_set_input_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>documents</name> <operator>=</operator> <call><name>mapred_parse_yaml</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>yaml_parser_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>documents</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>mapred_olist_t</name><modifier>*</modifier></type> <name>mapred_parse_yaml</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>yparser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mapred_parser_t</name></type>		 <name>parser</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>					 <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>					 <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mapred_olist_t</name>		<modifier>*</modifier></type><name>doc_item</name></decl>;</decl_stmt>

	<comment type="block">/* Give us a clean slate */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize what must be initialized */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLEX_REENTRANT</name></expr></cpp:if>
	<expr_stmt><expr><call><name>yaml_scalar_yylex_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>.</operator><name>yscanner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>parser</name><operator>.</operator><name>yparser</name></name> <operator>=</operator> <name>yparser</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>.</operator><name>state</name></name>   <operator>=</operator> <name>STATE_YAML_PARSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>.</operator><name>frame</name></name>   <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_CONTEXT_DEPTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>parser</name><operator>.</operator><name>context</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>CONTEXT_NONE</name></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/* Call into the parser, detects grammar errors */</comment>
	<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>yaml_yyparse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* finalize final document */</comment>
	<expr_stmt><expr><call><name>parser_add_document</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Cleanup and return */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLEX_REENTRANT</name></expr></cpp:if>
	<expr_stmt><expr><call><name>yaml_scalar_yylex_destroy</name><argument_list>(<argument><expr><name><name>parser</name><operator>.</operator><name>yscanner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Check for errors within documents */</comment>
	<for>for <control>(<init><expr><name>doc_item</name> <operator>=</operator> <name><name>parser</name><operator>.</operator><name>doclist</name></name></expr>;</init>
		 <condition><expr><name>doc_item</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>error</name></expr>;</condition>
		 <incr><expr><name>doc_item</name> <operator>=</operator> <name><name>doc_item</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>doc_item</name><operator>-&gt;</operator><name>object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>mapred_document_error</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Cleanup and return */</comment>	
	<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_destroy_olist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>.</operator><name>doclist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XRAISE</name><argument_list>(<argument><expr><name>MAPRED_PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"parse failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<return>return <expr><name><name>parser</name><operator>.</operator><name>doclist</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>parser_add_document</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mapred_olist_t</name>     <modifier>*</modifier></type><name>newitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mapred_olist_t</name>     <modifier>*</modifier></type><name>doclist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>                 <name>error</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Add the last of the documents objects into the document */</comment>
	<expr_stmt><expr><call><name>parser_add_object</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>MAPRED_NO_KIND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Verify the completed document */</comment>
	<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_verify_object</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>NO_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>mapred_document_error</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Allocate the new list item */</comment>
	<expr_stmt><expr><name>newitem</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_olist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>object</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>next</name></name>   <operator>=</operator> <operator>(</operator><name>mapred_olist_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* Insert it into the last slot of the existing list */</comment>
	<expr_stmt><expr><name>doclist</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>doclist</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>doclist</name> <operator>&amp;&amp;</operator> <name><name>doclist</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>doclist</name> <operator>=</operator> <name><name>doclist</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
	<if_stmt><if>if <condition>(<expr><name>doclist</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>doclist</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>doclist</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_begin_document</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If there is a current document add it first */</comment>
	<expr_stmt><expr><call><name>parser_add_document</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Allocate an object for the new document and return */</comment>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_object_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_object_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>MAPRED_DOCUMENT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>id</name></name> <operator>=</operator> <operator>++</operator><name><name>parser</name><operator>-&gt;</operator><name>doc_number</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>parser</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>start_mark</name><operator>.</operator><name>line</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>global_verbose_flag</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"  - Parsing YAML Document %d:\n"</literal></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>doc_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_begin_define</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The only thing we have to do is ensure that this isn't a duplicate
	 * define list.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>mapred_document_defines</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate DEFINE list in DOCUMENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>mapred_document_defines</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_begin_execute</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The only thing we have to do is ensure that this isn't a duplicate
	 * execution list.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>mapred_document_executes</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate EXECUTE list in DOCUMENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>mapred_document_executes</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_version</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>version</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate Version: %s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * We have already assured that the value matches a good regex,
	 * but we must still validate that the version itself is supported.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"1.0.0.1"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"1.0.0.3"</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized VERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>version</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_database</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>database</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate Database: %s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>database</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_user</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>user</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate User: %s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>user</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_host</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>host</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate Host: %s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>host</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_port</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>port</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate Port: %s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * The parse has already assured that the value consists of a sequence
	 * of digits, so strtol should convert successfully.
	 */</comment>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>port</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * parser_add_object - Create a new empty object for the current document.
 */</comment>
<function><type><name>void</name></type> <name>parser_add_object</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>mapred_kind_t</name></type> <name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we have a current object then verify it and add it into the
	 * document's object list.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>mapred_olist_t</name> <modifier>*</modifier></type><name>newitem</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>mapred_olist_t</name> <modifier>*</modifier></type><name>objlist</name></decl>;</decl_stmt>

		<comment type="block">/* Validate the finished object */</comment>
		<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_verify_object</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>NO_ERROR</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>mapred_destroy_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>flags</name></name> <operator>|=</operator>
				<name>mapred_document_error</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>

			<comment type="block">/* Allocate the new list item */</comment>
			<expr_stmt><expr><name>newitem</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_olist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>object</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>next</name></name>   <operator>=</operator> <operator>(</operator><name>mapred_olist_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

			<comment type="block">/* Insert it into the last slot of the existing list */</comment>
			<expr_stmt><expr><name>objlist</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>objects</name></name></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>objlist</name> <operator>&amp;&amp;</operator> <name><name>objlist</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>objlist</name> <operator>=</operator> <name><name>objlist</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
			<if_stmt><if>if <condition>(<expr><name>objlist</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>objlist</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>objects</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>global_verbose_flag</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>XASSERT</name> <argument_list>(<argument><expr><name><name>newitem</name><operator>-&gt;</operator><name>object</name><operator>-&gt;</operator><name>kind</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
						 <name><name>newitem</name><operator>-&gt;</operator><name>object</name><operator>-&gt;</operator><name>kind</name></name> <operator>&lt;=</operator> <name>MAPRED_MAXKIND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


				<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>mapred_kind_name</name><index>[<expr><name><name>newitem</name><operator>-&gt;</operator><name>object</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>newitem</name><operator>-&gt;</operator><name>object</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"    - %s: %s\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"    - %s\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If 'kind' is 'NO_KIND' then we just add in the current object
	 * (above) and do not create a new one.  We call it this way once
	 * at the end to add the last object into the current document.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <name>MAPRED_NO_KIND</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name> <operator>=</operator> <operator>(</operator><name>mapred_object_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Allocate a new empyt object of the correct kind and return. */</comment>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_object_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_object_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>parser</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>start_mark</name><operator>.</operator><name>line</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>parser_add_run</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Execution objects just re-use the 'task' structure.  The only
	 * differences are that:
	 *    Execution objects get RUN
	 *    Execution objects do not require (or support) a NAME
	 */</comment>
	<expr_stmt><expr><call><name>parser_add_object</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>MAPRED_EXECUTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>execute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>parser_set_name</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_INPUT</name>      <operator>||</operator>
		   <name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_OUTPUT</name>     <operator>||</operator>
		   <name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_MAPPER</name>     <operator>||</operator>
		   <name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_TRANSITION</name> <operator>||</operator>
		   <name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_COMBINER</name>   <operator>||</operator>
		   <name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_FINALIZER</name>  <operator>||</operator>
		   <name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_REDUCER</name>    <operator>||</operator>
		   <name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_TASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If this is an invalid name =&gt; throw an error */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid NAME: %s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If the object already has a name =&gt; throw an error */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate NAME: %s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_table</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_INPUT</name> <operator>||</operator>
		   <name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_INPUT</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAPRED_INPUT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>MAPRED_INPUT_TABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>MAPRED_INPUT_NONE</name></expr>)</condition>
		<block>{<block_content>
			<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>MAPRED_INPUT_TABLE</name></expr>:</case>
					<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
									   <argument><expr><literal type="string">"Duplicate TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				<case>case <expr><name>MAPRED_INPUT_FILE</name></expr>:</case>
					<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
									   <argument><expr><literal type="string">"FILE is incompatible with TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				<case>case <expr><name>MAPRED_INPUT_GPFDIST</name></expr>:</case>
					<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
									   <argument><expr><literal type="string">"GPFDIST is incompatible with TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				<case>case <expr><name>MAPRED_INPUT_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
									   <argument><expr><literal type="string">"QUERY is incompatible with TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				<case>case <expr><name>MAPRED_INPUT_EXEC</name></expr>:</case>
					<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
									   <argument><expr><literal type="string">"GPFDIST is incompatible with TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				<default>default:</default>
					<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></switch>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>MAPRED_INPUT_TABLE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>desc</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAPRED_OUTPUT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>MAPRED_OUTPUT_TABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>MAPRED_OUTPUT_NONE</name></expr>)</condition>
		<block>{<block_content>
			<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>type</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>MAPRED_OUTPUT_TABLE</name></expr>:</case>
					<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
									   <argument><expr><literal type="string">"Duplicate TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				<case>case <expr><name>MAPRED_OUTPUT_FILE</name></expr>:</case>
					<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
									   <argument><expr><literal type="string">"FILE is incompatible with TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				<default>default:</default>
					<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></switch>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>MAPRED_OUTPUT_TABLE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>desc</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_query</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid QUERY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>MAPRED_INPUT_NONE</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAPRED_INPUT_QUERY</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate QUERY for INPUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"INPUT may only specify one of "</literal>
							   <literal type="string">"FILE, GPFDIST, TABLE, QUERY, EXEC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>MAPRED_INPUT_QUERY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>desc</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_exec</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid EXEC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>MAPRED_INPUT_NONE</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAPRED_INPUT_EXEC</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate EXEC for INPUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"INPUT may only specify one of "</literal>
							   <literal type="string">"FILE, GPFDIST, TABLE, QUERY, EXEC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>MAPRED_INPUT_EXEC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>desc</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_format</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mapred_format_t</name></type> <name>format</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>format</name> <operator>=</operator> <name>MAPRED_FORMAT_TEXT</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"csv"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>format</name> <operator>=</operator> <name>MAPRED_FORMAT_CSV</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>format</name> <operator>=</operator> <name>MAPRED_FORMAT_INVALID</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>MAPRED_INPUT</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>MAPRED_FORMAT_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate FORMAT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>MAPRED_FORMAT_NONE</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>format</name> <operator>=</operator> <name>MAPRED_FORMAT_INVALID</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate FORMAT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
			<return>return;</return>

		<case>case <expr><name>MAPRED_OUTPUT</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>MAPRED_FORMAT_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate FORMAT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>MAPRED_FORMAT_NONE</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>format</name> <operator>=</operator> <name>MAPRED_FORMAT_INVALID</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate FORMAT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
			<return>return;</return>

		<default>default:</default>
			<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_delimiter</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid DELIMITER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>MAPRED_INPUT</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>delimiter</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate DELIMITER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>delimiter</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>

		<case>case <expr><name>MAPRED_OUTPUT</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>delimiter</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate DELIMITER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>delimiter</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
			
		<default>default:</default>
			<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_escape</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid ESCAPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>escape</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate ESCAPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>escape</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>parser_set_null</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>null</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>null</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>null</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_quote</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>quote</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid QUOTE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>quote</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate QUOTE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>quote</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>parser_set_encoding</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>encoding</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid ENCODING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>encoding</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate ENCODING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>encoding</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_error_limit</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>error_limit</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid ERROR_LIMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>error_limit</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate ERROR_LIMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * The parse has already assured that the value consists of a sequence
	 * of digits, so strtol should convert successfully.
	 */</comment>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>error_limit</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>parser_set_mode</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>MAPRED_MAPPER</name></expr>:</case>
		<case>case <expr><name>MAPRED_TRANSITION</name></expr>:</case>
		<case>case <expr><name>MAPRED_COMBINER</name></expr>:</case>
		<case>case <expr><name>MAPRED_FINALIZER</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>mapred_mode_t</name></type> <name>mode</name></decl>;</decl_stmt>

			<comment type="block">/* Convert input string into a valid mode */</comment>
			<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"single"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MAPRED_MODE_SINGLE</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"multi"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MAPRED_MODE_MULTI</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MAPRED_MODE_INVALID</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<comment type="block">/* Only MAP and FINALIZE support MULTI mode */</comment>
			<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MAPRED_MODE_MULTI</name> <operator>&amp;&amp;</operator>
				<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>!=</operator> <name>MAPRED_MAPPER</name> <operator>&amp;&amp;</operator>
				<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>!=</operator> <name>MAPRED_FINALIZER</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MAPRED_MODE_INVALID</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Error for invalid or duplicate modes */</comment>
			<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MAPRED_MODE_INVALID</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid MODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>mode</name></name> <operator>!=</operator> <name>MAPRED_MODE_NONE</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MAPRED_MODE_INVALID</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate MODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Set mode and return */</comment>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block>

		<case>case <expr><name>MAPRED_OUTPUT</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>mapred_output_mode_t</name></type> <name>mode</name></decl>;</decl_stmt>

			<comment type="block">/* Convert input string into a valid mode */</comment>
			<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"replace"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MAPRED_OUTPUT_MODE_REPLACE</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"append"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MAPRED_OUTPUT_MODE_APPEND</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MAPRED_OUTPUT_MODE_INVALID</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<comment type="block">/* Error for invalid or duplicate modes */</comment>
			<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MAPRED_OUTPUT_MODE_INVALID</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid MODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>mode</name></name> <operator>!=</operator> <name>MAPRED_OUTPUT_MODE_NONE</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MAPRED_OUTPUT_MODE_INVALID</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate MODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Set mode and return */</comment>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block>

		<default>default:</default>
			<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ONLY functions and OUTPUTS have modes */</comment>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_file</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Only applies to OUTPUTS which have a single file.
	 * INPUTS use parser_begin_files, parser_add_file ...
	 */</comment>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>MAPRED_OUTPUT_NONE</name></expr>:</case>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>MAPRED_OUTPUT_FILE</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid FILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>desc</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_OUTPUT_FILE</name></expr>:</case>
		<block>{<block_content>
			<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate FILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block>

		<case>case <expr><name>MAPRED_OUTPUT_TABLE</name></expr>:</case>
		<block>{<block_content>
			<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"TABLE is incompatible with FILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block>
			
		<default>default:</default>
			<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_transition</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_REDUCER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>transition</name><operator>.</operator><name>name</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate TRANSITION for REDUCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>transition</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_combiner</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_REDUCER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>combiner</name><operator>.</operator><name>name</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate CONSOLIDATE for REDUCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>combiner</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_finalizer</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_REDUCER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>finalizer</name><operator>.</operator><name>name</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate FINALIZE for REDUCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>finalizer</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_initialize</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_REDUCER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>initialize</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate INITIALIZE for REDUCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>initialize</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>parser_set_language</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_MAPPER</name>     <operator>||</operator>
			<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_TRANSITION</name> <operator>||</operator>
			<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_COMBINER</name>   <operator>||</operator>
			<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_FINALIZER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid LANGUAGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>language</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate LANGUAGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>language</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_function</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_MAPPER</name>     <operator>||</operator>
			<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_TRANSITION</name> <operator>||</operator>
			<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_COMBINER</name>   <operator>||</operator>
			<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_FINALIZER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid FUNCTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>body</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate FUNCTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>body</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="block">/*
	 * The "start_mark" of function body has a line number, but what that line
	 * number refers to is a bit finicky depending on the nature of the YAML.
	 * So we take it and adjust it accordingly.
	 */</comment>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>lineno</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>start_mark</name><operator>.</operator><name>line</name></name></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>style</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>YAML_LITERAL_SCALAR_STYLE</name></expr>:</case>
		<case>case <expr><name>YAML_FOLDED_SCALAR_STYLE</name></expr>:</case>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>lineno</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>YAML_PLAIN_SCALAR_STYLE</name></expr>:</case>
		<case>case <expr><name>YAML_SINGLE_QUOTED_SCALAR_STYLE</name></expr>:</case>
		<case>case <expr><name>YAML_DOUBLE_QUOTED_SCALAR_STYLE</name></expr>:</case>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>lineno</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>			
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * parser_set_library was added to support the "LIBRARY" option in mapreduce
 * yaml schema version 1.0.0.2.  This is used by C language functions to
 * specify which code library the C function is defined in.
 *
 * - MAP:
 *     ...
 *     LIBRARY:  $libdir/libfoo
 *     FUNCTION: myFunc
 */</comment>
<function><type><name>void</name></type> <name>parser_set_library</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_MAPPER</name>     <operator>||</operator>
			<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_TRANSITION</name> <operator>||</operator>
			<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_COMBINER</name>   <operator>||</operator>
			<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_FINALIZER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid LIBRARY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>library</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate LIBRARY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>library</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We will validate that the document version is &gt;= 1.0.0.2
	 * durring object verification.
	 */</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_optimize</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
   <comment type="block">/* FIXME */</comment>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>parser_set_source</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>MAPRED_TASK</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>input</name><operator>.</operator><name>name</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate SOURCE for TASK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>input</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_EXECUTION</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>input</name><operator>.</operator><name>name</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate SOURCE for RUN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>input</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_target</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_EXECUTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>output</name><operator>.</operator><name>name</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate TARGET for RUN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>output</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_mapper</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>MAPRED_TASK</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>mapper</name><operator>.</operator><name>name</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate MAP for TASK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>mapper</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_EXECUTION</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>mapper</name><operator>.</operator><name>name</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate MAP for RUN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>mapper</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_set_reducer</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>MAPRED_TASK</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>reducer</name><operator>.</operator><name>name</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate REDUCE for TASK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>reducer</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_EXECUTION</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>reducer</name><operator>.</operator><name>name</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate REDUCE for RUN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>reducer</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_begin_ordering</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_REDUCER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We will validate that the document version is &gt;= 1.0.0.3
	 * durring object verification.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>ordering</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate ORDERING for REDUCER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_add_ordering</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mapred_clist_t</name> <modifier>*</modifier></type><name>newitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mapred_clist_t</name> <modifier>*</modifier></type><name>clist</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_REDUCER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Validate ordering:
	 *   In general ordering can be an arbitrary expression so it is
	 *   difficult to verify easily.  If we need more verification it
	 *   makes sense to push that verification into the grammar.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid ORDERING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Allocate the new list item */</comment>
	<expr_stmt><expr><name>newitem</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_clist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>(</operator><name>mapred_clist_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* Add the new item into the last slot of the list */</comment>
	<expr_stmt><expr><name>clist</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>ordering</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>clist</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>ordering</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<while>while <condition>(<expr><name>clist</name> <operator>&amp;&amp;</operator> <name><name>clist</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>clist</name> <operator>=</operator> <name><name>clist</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
		<expr_stmt><expr><name><name>clist</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/* List functions */</comment>
<function><type><name>void</name></type> <name>parser_begin_files</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>MAPRED_INPUT_NONE</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAPRED_INPUT_FILE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate FILE for INPUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"INPUT may only specify one of "</literal>
							   <literal type="string">"FILE, GPFDIST, TABLE, QUERY, EXEC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* files will be added individually */</comment>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>MAPRED_INPUT_FILE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_begin_gpfdist</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>MAPRED_INPUT_NONE</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAPRED_INPUT_GPFDIST</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate GPFDIST for INPUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"INPUT may only specify one of "</literal>
							   <literal type="string">"FILE, GPFDIST, TABLE, QUERY, EXEC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>MAPRED_INPUT_GPFDIST</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_begin_columns</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>columns</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate COLUMNS for INPUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_begin_parameters</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>MAPRED_MAPPER</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate PARAMETERS for MAP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_TRANSITION</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate PARAMETERS for TRANSITION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_COMBINER</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate PARAMETERS for CONSOLIDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_FINALIZER</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate PARAMETERS for FINALIZE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_begin_returns</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>MAPRED_MAPPER</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate RETURNS for MAP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_TRANSITION</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate RETURNS for TRANSITION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_COMBINER</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate RETURNS for CONSOLIDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_FINALIZER</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate RETURNS for FINALIZE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_begin_keys</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_REDUCER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>keys</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Duplicate KEYS for REDUCER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_add_file</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mapred_clist_t</name> <modifier>*</modifier></type><name>newitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mapred_clist_t</name> <modifier>*</modifier></type><name>clist</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAPRED_INPUT_FILE</name> <operator>||</operator>
			<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAPRED_INPUT_GPFDIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Verify the new file */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>MAPRED_INPUT_FILE</name></expr>:</case>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid FILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			<case>case <expr><name>MAPRED_INPUT_GPFDIST</name></expr>:</case>
				<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid GPFDIST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			<default>default:</default>
				<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Todo: improved regex checking on files */</comment>

	<comment type="block">/* Allocate the new list item */</comment>
	<expr_stmt><expr><name>newitem</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_clist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>next</name></name>  <operator>=</operator> <operator>(</operator><name>mapred_clist_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* Add the new item into the last slot of the list */</comment>
	<expr_stmt><expr><name>clist</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>files</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>clist</name> <operator>&amp;&amp;</operator> <name><name>clist</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>clist</name> <operator>=</operator> <name><name>clist</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
	<if_stmt><if>if <condition>(<expr><name>clist</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>clist</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>files</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_add_column</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mapred_plist_t</name> <modifier>*</modifier></type><name>newitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mapred_plist_t</name> <modifier>*</modifier></type><name>plist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>           <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tokenizer</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Verify the new column
	 * It should be in one of two forms:
	 *    1)   &lt;name&gt;
	 *    2)   &lt;name&gt; &lt;datatype&gt;
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid COLUMNS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">" \t\r"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokenizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" \t\r"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokenizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>type</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"text"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* type defaults to 'text' */</comment>
	
    <comment type="block">/* double check that there's nothing else */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" \t\r"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokenizer</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid COLUMNS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Allocate the new list item */</comment>
	<expr_stmt><expr><name>newitem</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_plist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>next</name></name>  <operator>=</operator> <operator>(</operator><name>mapred_plist_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* Add the new item into the last slot of the list */</comment>
	<expr_stmt><expr><name>plist</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>columns</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>plist</name> <operator>&amp;&amp;</operator> <name><name>plist</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>plist</name> <operator>=</operator> <name><name>plist</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
	<if_stmt><if>if <condition>(<expr><name>plist</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>plist</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_add_parameter</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mapred_plist_t</name> <modifier>*</modifier></type><name>newitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mapred_plist_t</name> <modifier>*</modifier></type><name>plist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>           <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tokenizer</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_MAPPER</name>     <operator>||</operator>
			<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_TRANSITION</name> <operator>||</operator>
			<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_COMBINER</name>   <operator>||</operator>
			<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_FINALIZER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Verify the new parameter
	 * It should be in one of two forms:
	 *    1)   &lt;name&gt;
	 *    2)   &lt;name&gt; &lt;datatype&gt;
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid PARAMETERS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">" \t\r"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokenizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" \t\r"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokenizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>type</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"text"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* type defaults to 'text' */</comment>
	
    <comment type="block">/* double check that there's nothing else */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" \t\r"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokenizer</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid PARAMETERS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Allocate the new list item */</comment>
	<expr_stmt><expr><name>newitem</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_plist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>next</name></name>  <operator>=</operator> <operator>(</operator><name>mapred_plist_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* Add the new item into the last slot of the list */</comment>
	<expr_stmt><expr><name>plist</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>plist</name> <operator>&amp;&amp;</operator> <name><name>plist</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>plist</name> <operator>=</operator> <name><name>plist</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
	<if_stmt><if>if <condition>(<expr><name>plist</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>plist</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parser_add_return</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mapred_plist_t</name> <modifier>*</modifier></type><name>newitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mapred_plist_t</name> <modifier>*</modifier></type><name>plist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>           <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tokenizer</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_MAPPER</name>     <operator>||</operator>
			<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_TRANSITION</name> <operator>||</operator>
			<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_COMBINER</name>   <operator>||</operator>
			<name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_FINALIZER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Verify the new return
	 * It should be in one of two forms:
	 *    1)   &lt;name&gt;
	 *    2)   &lt;name&gt; &lt;datatype&gt;
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid RETURNS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">" \t\r"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokenizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" \t\r"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokenizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>type</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"text"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* type defaults to 'text' */</comment>
	
    <comment type="block">/* double check that there's nothing else */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" \t\r"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokenizer</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid RETURNS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Allocate the new list item */</comment>
	<expr_stmt><expr><name>newitem</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_plist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>next</name></name>  <operator>=</operator> <operator>(</operator><name>mapred_plist_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* Add the new item into the last slot of the list */</comment>
	<expr_stmt><expr><name>plist</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>plist</name> <operator>&amp;&amp;</operator> <name><name>plist</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>plist</name> <operator>=</operator> <name><name>plist</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
	<if_stmt><if>if <condition>(<expr><name>plist</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>plist</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>parser_add_key</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mapred_clist_t</name> <modifier>*</modifier></type><name>newitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mapred_clist_t</name> <modifier>*</modifier></type><name>clist</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_REDUCER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Validate key */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mapred_parse_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"Invalid KEYS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Allocate the new list item */</comment>
	<expr_stmt><expr><name>newitem</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_clist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>next</name></name>  <operator>=</operator> <operator>(</operator><name>mapred_clist_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* Add the new item into the last slot of the list */</comment>
	<expr_stmt><expr><name>clist</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>keys</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>clist</name> <operator>&amp;&amp;</operator> <name><name>clist</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>clist</name> <operator>=</operator> <name><name>clist</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
	<if_stmt><if>if <condition>(<expr><name>clist</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>clist</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>current_obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>keys</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>



<comment type="block">/*
 * mapred_dump_yaml - Given an object, dump it's YAML representation.
 *   This is the inverse of parsing
 *
 *   (*) Could be re-written to avoid code duplication issues.
 */</comment>
<function><type><name>void</name></type> <name>mapred_dump_yaml</name><parameter_list>(<parameter><decl><type><name>mapred_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ckind</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>MAPRED_DOCUMENT</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"---\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Dumping the current version */</comment>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"VERSION:          1.0.0.3\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>database</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DATABASE:         %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>database</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>user</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"USER:             %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>host</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"HOST:             %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>port</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"PORT:             %d\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>mapred_document_defines</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>mapred_olist_t</name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DEFINE:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>sub</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>objects</name></name></expr>;</init> <condition><expr><name>sub</name></expr>;</condition> <incr><expr><name>sub</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
					<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>object</name><operator>-&gt;</operator><name>kind</name></name> <operator>!=</operator> <name>MAPRED_EXECUTION</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>mapred_dump_yaml</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>mapred_document_executes</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>mapred_olist_t</name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"EXECUTE:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>sub</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>objects</name></name></expr>;</init> <condition><expr><name>sub</name></expr>;</condition> <incr><expr><name>sub</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
					<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>object</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_EXECUTION</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>mapred_dump_yaml</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_INPUT</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  - INPUT:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      NAME:       %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>columns</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>mapred_plist_t</name> <modifier>*</modifier></type><name>plist</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      COLUMNS:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>plist</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>columns</name></name></expr>;</init> <condition><expr><name>plist</name></expr>;</condition> <incr><expr><name>plist</name> <operator>=</operator> <name><name>plist</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"        - %s %s\n"</literal></expr></argument>, <argument><expr><name><name>plist</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>plist</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>delimiter</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      DELIMITER:  %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>delimiter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>encoding</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      ENCODING:   %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>format</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>MAPRED_FORMAT_NONE</name></expr>:</case>
					<break>break;</break>
				<case>case <expr><name>MAPRED_FORMAT_TEXT</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      FORMAT:     TEXT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>MAPRED_FORMAT_CSV</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      FORMAT:     CSV\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></switch>
			<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>MAPRED_INPUT_NONE</name></expr>:</case>
					<break>break;</break>
				<case>case <expr><name>MAPRED_INPUT_FILE</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>mapred_clist_t</name> <modifier>*</modifier></type><name>clist</name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      FILE:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>clist</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>files</name></name></expr>;</init> <condition><expr><name>clist</name></expr>;</condition> <incr><expr><name>clist</name> <operator>=</operator> <name><name>clist</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"        - %s\n"</literal></expr></argument>, <argument><expr><name><name>clist</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
					<break>break;</break>
				</block_content>}</block>
				<case>case <expr><name>MAPRED_INPUT_GPFDIST</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      GPFDIST:    %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>MAPRED_INPUT_TABLE</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      TABLE:      %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>MAPRED_INPUT_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      QUERY: |\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"         %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>MAPRED_INPUT_EXEC</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      EXEC:       %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></switch>
			<break>break;</break>

		<case>case <expr><name>MAPRED_OUTPUT</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  - OUTPUT:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      NAME:       %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>mode</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>MAPRED_OUTPUT_MODE_NONE</name></expr>:</case>
					<break>break;</break>
				<case>case <expr><name>MAPRED_OUTPUT_MODE_REPLACE</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      MODE:       REPLACE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>MAPRED_OUTPUT_MODE_APPEND</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      MODE:       APPEND\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			
			</block_content>}</block></switch>
			<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>type</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>MAPRED_OUTPUT_NONE</name></expr>:</case>
					<break>break;</break>
				<case>case <expr><name>MAPRED_OUTPUT_FILE</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      FILE:       %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>MAPRED_OUTPUT_TABLE</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      TABLE:      %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></switch>
			<break>break;</break>

		<case>case <expr><name>MAPRED_MAPPER</name></expr>:</case>
			<expr_stmt><expr><name>ckind</name> <operator>=</operator> <literal type="string">"MAP"</literal></expr>;</expr_stmt>
			<comment type="block">/* fallthrough */</comment>

		<case>case <expr><name>MAPRED_TRANSITION</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ckind</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ckind</name> <operator>=</operator> <literal type="string">"TRANSITION"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<comment type="block">/* fallthrough */</comment>

		<case>case <expr><name>MAPRED_COMBINER</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ckind</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ckind</name> <operator>=</operator> <literal type="string">"CONSOLIDATE"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<comment type="block">/* fallthrough */</comment>

		<case>case <expr><name>MAPRED_FINALIZER</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ckind</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ckind</name> <operator>=</operator> <literal type="string">"FINALIZE"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  - %s:\n"</literal></expr></argument>, <argument><expr><name>ckind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      NAME:       %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>mapred_plist_t</name> <modifier>*</modifier></type><name>plist</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      PARAMETERS:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>plist</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name></name></expr>;</init> <condition><expr><name>plist</name></expr>;</condition>
					 <incr><expr><name>plist</name> <operator>=</operator> <name><name>plist</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"        - %s %s\n"</literal></expr></argument>, <argument><expr><name><name>plist</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>plist</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>mapred_plist_t</name> <modifier>*</modifier></type><name>plist</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      RETURNS:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>plist</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name></name></expr>;</init> <condition><expr><name>plist</name></expr>;</condition>
					 <incr><expr><name>plist</name> <operator>=</operator> <name><name>plist</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"        - %s %s\n"</literal></expr></argument>, <argument><expr><name><name>plist</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>plist</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
			</block_content>}</block></if></if_stmt>
			<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>mode</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>MAPRED_MODE_NONE</name></expr>:</case>
					<break>break;</break>
				<case>case <expr><name>MAPRED_MODE_SINGLE</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      MODE:       SINGLE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>MAPRED_MODE_MULTI</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      MODE:       MULTI\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>MAPRED_MODE_ACCUMULATED</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      MODE:       ACCUMULATED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>MAPRED_MODE_WINDOWED</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      MODE:       WINDOWED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      MODE:       UNKNOWN\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>flags</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      OPTIMIZE:   "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>mapred_function_strict</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"STRICT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>mapred_function_immutable</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"IMMUTABLE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>mapred_function_unordered</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"UNORDERED "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>language</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      LANGUAGE:   %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>body</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      FUNCTION: |\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"         %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_REDUCER</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  - REDUCE:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      NAME:       %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>transition</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      TRANSITION: %s\n"</literal></expr></argument>,
					   <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>transition</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>combiner</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      CONSOLIDATE:   %s\n"</literal></expr></argument>,
					   <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>combiner</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>finalizer</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      FINALIZE:  %s\n"</literal></expr></argument>,
					   <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>finalizer</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>initialize</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      INITIALIZE: %s\n"</literal></expr></argument>,
					   <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>initialize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>keys</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>mapred_clist_t</name> <modifier>*</modifier></type><name>clist</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      KEYS: |\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>clist</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>keys</name></name></expr>;</init> <condition><expr><name>clist</name></expr>;</condition> <incr><expr><name>clist</name> <operator>=</operator> <name><name>clist</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"        - %s\n"</literal></expr></argument>, <argument><expr><name><name>clist</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>ordering</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>mapred_clist_t</name> <modifier>*</modifier></type><name>clist</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      ORDERING: |\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>clist</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>ordering</name></name></expr>;</init> <condition><expr><name>clist</name></expr>;</condition> <incr><expr><name>clist</name> <operator>=</operator> <name><name>clist</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"        - %s\n"</literal></expr></argument>, <argument><expr><name><name>clist</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_TASK</name></expr>:</case>
		<case>case <expr><name>MAPRED_EXECUTION</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>execute</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  - RUN:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  - TASK:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      NAME:       %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>input</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      SOURCE:     %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>input</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>mapper</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      MAP:     %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>mapper</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>reducer</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      REDUCE:    %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>reducer</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>output</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      TARGET:     %s\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>output</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_NO_KIND</name></expr>:</case>
		<default>default:</default>
			<expr_stmt><expr><call><name>XRAISE</name><argument_list>(<argument><expr><name>MAPRED_PARSE_INTERNAL</name></expr></argument>,
				   <argument><expr><literal type="string">"Unknown object type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>


	
<function><type><name>int</name></type> <name>mapred_verify_object</name><parameter_list>(<parameter><decl><type><name>mapred_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>mapred_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>NO_ERROR</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Verify that all required fields are present and valid */</comment>
	<expr_stmt><expr><name>name</name> <operator>=</operator> <ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr> ?</condition><then> <expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">"unnamed"</literal></expr></else></ternary></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>MAPRED_DOCUMENT</name></expr>:</case>
			
			<comment type="block">/*
			 * If there is a version on the document then it should have
			 * been validated by parser_set_version()
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name><operator>.</operator><name>version</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Missing VERSION"</literal></expr></argument>,
										 <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>doc_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<break>break;</break>

		<case>case <expr><name>MAPRED_INPUT</name></expr>:</case>

			<comment type="block">/* Validate required fields */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Missing NAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAPRED_INPUT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(<argument><expr><name>obj</name></expr></argument>,
						  <argument><expr><literal type="string">"Missing FILE, GPFDIST, TABLE, QUERY, or EXEC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* set default values */</comment>
			<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>NO_ERROR</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>columns</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_plist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>columns</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>columns</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>columns</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>columns</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator>
					<operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>delimiter</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input</name><operator>.</operator><name>delimiter</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_OUTPUT</name></expr>:</case>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Missing NAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>output</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>MAPRED_OUTPUT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Missing FILE or TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_MAPPER</name></expr>:</case>
		<case>case <expr><name>MAPRED_TRANSITION</name></expr>:</case>
		<case>case <expr><name>MAPRED_COMBINER</name></expr>:</case>
		<case>case <expr><name>MAPRED_FINALIZER</name></expr>:</case>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Missing NAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * We now support "builtin" functions, which are specified by a lack
			 * of an implementation language.  If a language is specified then
			 * a function body is still required.  If a language is not specified
			 * then the function body just defaults to the name of the function.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>language</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>body</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>body</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>language</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>body</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Missing FUNCTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * LIBRARY is required for "C" language functions.
			 * LIBRARY is invalid for any other language.
			 *
			 * It would be good to verify that LIBRARY is not used in
			 * older YAML formats, but that is difficult given the current
			 * structure of the code.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>language</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>library</name></name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"LIBRARY is invalid for "</literal>
												 <literal type="string">"%s LANGUAGE functions"</literal></expr></argument>,
												 <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Missing LIBRARY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/*
				 * Don't bother filling in default arguments if we already have
				 * an error.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>

				<comment type="block">/*
				 * Set default values.
				 *   For builtin functions we delay this so that we can lookup the
				 *   function in the catalog to determine the defaults.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name></name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>default_parameter_names</name><index>[<expr><name><name>obj</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>default_parameter_names</name><index>[<expr><name><name>obj</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_plist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

					<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>default_parameter_names</name><index>[<expr><name><name>obj</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_plist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>						
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition>
					<block>{<block_content>
						<case>case <expr><name>MAPRED_TRANSITION</name></expr>:</case>
							<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(
									<argument><expr><name>obj</name></expr></argument>,
									<argument><expr><literal type="string">"requires at least 2 input parameters [state, arg1, ...]"</literal></expr></argument>
									)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></if></if_stmt>
							<break>break;</break>

						<case>case <expr><name>MAPRED_COMBINER</name></expr>:</case>
							<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name><operator>-&gt;</operator><name>next</name></name> <operator>||</operator>
								<name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(
									<argument><expr><name>obj</name></expr></argument>,
									<argument><expr><literal type="string">"requires exactly 2 input parameters [state1, state2]"</literal></expr></argument>
									)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></if></if_stmt>
							<break>break;</break>

						<case>case <expr><name>MAPRED_FINALIZER</name></expr>:</case>
							<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>parameters</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(
									<argument><expr><name>obj</name></expr></argument>,
									<argument><expr><literal type="string">"requires exactly 1 input parameter [state]"</literal></expr></argument>
									)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></if></if_stmt>
							<break>break;</break>

						<case>case <expr><name>MAPRED_MAPPER</name></expr>:</case>
						<default>default:</default>
							<break>break;</break>
					</block_content>}</block></switch>
				</block_content>}</block></else></if_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name></name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>default_return_names</name><index>[<expr><name><name>obj</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_plist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

					<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>default_return_names</name><index>[<expr><name><name>obj</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_plist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>						
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_TRANSITION</name> <operator>||</operator>
						 <name><name>obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_COMBINER</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>returns</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(
							<argument><expr><name>obj</name></expr></argument>,
							<argument><expr><literal type="string">"requires exactly one output parameter [state]"</literal></expr></argument>
							)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* Set default mode: depends on type of function */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>MAPRED_MODE_NONE</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_TRANSITION</name> <operator>||</operator>
						<name><name>obj</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MAPRED_COMBINER</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>MAPRED_MODE_SINGLE</name></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>function</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>MAPRED_MODE_MULTI</name></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_REDUCER</name></expr>:</case>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Missing NAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>transition</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Missing TRANSITION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<comment type="block">/*
			 * Will verify that functions are valid for reducer input after we
			 * have resolved the pointers.
			 */</comment>

			<comment type="block">/*
			 * It would be good to verify that ORDERING is not used in
			 * older YAML formats, but that is difficult given the current
			 * structure of the code.
			 */</comment>

			<comment type="block">/*
			 * ORDERING and COMBINER are incompatible
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>ordering</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
				<name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>combiner</name><operator>.</operator><name>name</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(<argument><expr><name>obj</name></expr></argument>,
										 <argument><expr><literal type="string">"REDUCERS cannot specify both a COMBINER "</literal>
										 <literal type="string">"function and an ORDERING specification"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Setup default "keys" */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>keys</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>keys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_clist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>keys</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>keys</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_clist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>				
				<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>keys</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>reducer</name><operator>.</operator><name>keys</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>copyscalar</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<break>break;</break>

		<case>case <expr><name>MAPRED_TASK</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Missing NAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* Fallthrough */</comment>

		<case>case <expr><name>MAPRED_EXECUTION</name></expr>:</case>
			
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>input</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mapred_obj_error</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Missing SOURCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			
			<comment type="block">/* IDENTITY Mappers and Reducers */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>mapper</name><operator>.</operator><name>name</name></name> <operator>&amp;&amp;</operator>
				<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"IDENTITY"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>mapper</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>mapper</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>mapper</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>reducer</name><operator>.</operator><name>name</name></name> <operator>&amp;&amp;</operator>
				<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"IDENTITY"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>reducer</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>reducer</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>reducer</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* STDOUT Output */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>output</name><operator>.</operator><name>name</name></name> <operator>&amp;&amp;</operator>
				<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"STDOUT"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>output</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>output</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>task</name><operator>.</operator><name>output</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>MAPRED_NO_KIND</name></expr>:</case>
		<default>default:</default>
			<expr_stmt><expr><call><name>XASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>



</unit>
