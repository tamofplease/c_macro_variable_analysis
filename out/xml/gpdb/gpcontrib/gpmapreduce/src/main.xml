<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/gpcontrib/gpmapreduce/src/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres_fe.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libpq-fe.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mapred.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mapred_errors.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;except.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt_long.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><name>ALLOW_EXCEPTIONS</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>  <name><name>VERSION</name><index>[]</index></name> <init>=
	<expr><literal type="string">"Greenplum Map/Reduce Driver 1.00b2"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>wordchars</name> <init>=
	<expr><literal type="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_"</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Initialize global variables */</comment>
<decl_stmt><decl><type><name>int</name></type>             <name>global_print_flag</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>             <name>global_debug_flag</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>             <name>global_verbose_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>             <name>global_explain_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapred_plist_t</name> <modifier>*</modifier></type><name>global_plist</name>        <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* libPQ cancel context */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PGcancel</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>cancelConn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>full</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>showVersion</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>  <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>read_password</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>check_version</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sigint_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* usage() - print usage information */</comment>
<function><type><name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>full</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>full</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>showVersion</name><argument_list>(<argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nUsage:\n  "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s [options] -f file.yml [dbname [username]]\n"</literal></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>full</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(
			<argument><expr><literal type="string">"\n"</literal>
			<literal type="string">"General options:\n"</literal>
			<literal type="string">"  -? | --help                   show this help, then exit\n"</literal>
			<literal type="string">"  -V | --version                show version information, then exit\n"</literal>
			<literal type="string">"  -v | --verbose                verbose output\n"</literal>
			<literal type="string">"  -x | --explain                do not run jobs, but produce explain plans\n"</literal>
			<literal type="string">"  -X | --explain-analyze        run jobs and produce explain-analyze plans\n"</literal>
			<literal type="string">"  -k | --key &lt;name&gt;=&lt;value&gt;     sets a yaml variable\n"</literal>
			<literal type="string">"\n"</literal>
			<literal type="string">"Connection options:\n"</literal>
			<literal type="string">"  -h | --host &lt;hostname&gt;        database server host or socket directory\n"</literal>
			<literal type="string">"  -p | --port &lt;port&gt;            database server port\n"</literal>
			<literal type="string">"  -U | --username &lt;username&gt;    database user name\n"</literal>
			<literal type="string">"  -W | --password               prompt for password\n"</literal>
			<literal type="string">"\n"</literal>
			<literal type="string">"Debug options:\n"</literal>
			<literal type="string">"  -D | --debug                  enable some debugging output\n"</literal>
			<literal type="string">"  -P | --print                  print-only mode, do not run jobs\n"</literal></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>showVersion</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s - %s\n"</literal></expr></argument>, <argument><expr><name>procname</name></expr></argument>, <argument><expr><name>VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type>       <name>errcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>                <name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>              <modifier>*</modifier></type><name>procname</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>                <name>forceprompt</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>                <name>needpass</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>              <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>              <modifier>*</modifier></type><name>username</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>              <modifier>*</modifier></type><name>database</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>              <modifier>*</modifier></type><name>hostname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>              <modifier>*</modifier></type><name>port</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mapred_olist_t</name>    <modifier>*</modifier></type><name>documents</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mapred_olist_t</name>    <modifier>*</modifier></type><name>doc_item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>              <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

	<comment type="block">/* The long_options structure */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_options</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{<expr><literal type="string">"help"</literal></expr>,     <expr><name>no_argument</name></expr>,       <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'?'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"version"</literal></expr>,  <expr><name>no_argument</name></expr>,       <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'V'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"verbose"</literal></expr>,  <expr><name>no_argument</name></expr>,       <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'v'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"password"</literal></expr>, <expr><name>no_argument</name></expr>,       <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'W'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"explain"</literal></expr>,  <expr><name>no_argument</name></expr>,       <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'x'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"explain-analyze"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'X'</literal></expr>}</block></expr>,

		<expr><block>{<expr><literal type="string">"username"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'U'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"host"</literal></expr>,     <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'h'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"port"</literal></expr>,     <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'p'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"file"</literal></expr>,     <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'f'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"key"</literal></expr>,      <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'k'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"print"</literal></expr>,    <expr><name>no_argument</name></expr>,       <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'P'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"debug"</literal></expr>,    <expr><name>no_argument</name></expr>,       <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>short_options</name> <init>= <expr><literal type="string">"VvWxXU:h:p:f:k:?PD"</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>option_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>short_options</name></expr></argument>, <argument><expr><name>long_options</name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>option_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt> <comment type="block">/* done processing options */</comment>
		<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="char">'?'</literal></expr>:</case>  <comment type="block">/* --help */</comment>
				
				<comment type="block">/* Actual help option given */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>optind</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-?"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
					<call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>optind</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>procname</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				
				<comment type="block">/* unknown option reported by getopt */</comment>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Try \"%s --help\" for usage information.\n"</literal></expr></argument>,
						<argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			<case>case <expr><literal type="char">'V'</literal></expr>:</case>  <comment type="block">/* --version */</comment>
				<expr_stmt><expr><call><name>showVersion</name><argument_list>(<argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<case>case <expr><literal type="char">'v'</literal></expr>:</case>  <comment type="block">/* --verbose */</comment>
				<expr_stmt><expr><name>global_verbose_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'x'</literal></expr>:</case> <comment type="block">/* --explain */</comment>
				<expr_stmt><expr><name>global_explain_flag</name> <operator>|=</operator> <name>global_explain</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'X'</literal></expr>:</case> <comment type="block">/* --explain-analyze */</comment>
				<expr_stmt><expr><name>global_explain_flag</name> <operator>|=</operator> <name>global_explain</name> <operator>|</operator> <name>global_analyze</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'P'</literal></expr>:</case>  <comment type="block">/* --print */</comment>
				<expr_stmt><expr><name>global_print_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'D'</literal></expr>:</case>  <comment type="block">/* --debug */</comment>
				<expr_stmt><expr><name>global_debug_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'W'</literal></expr>:</case>  <comment type="block">/* --password */</comment>
				<expr_stmt><expr><name>forceprompt</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'U'</literal></expr>:</case>  <comment type="block">/* --username */</comment>
				<expr_stmt><expr><name>username</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'h'</literal></expr>:</case>  <comment type="block">/* --host */</comment>
				<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'p'</literal></expr>:</case>  <comment type="block">/* --port */</comment>
				<expr_stmt><expr><name>port</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'f'</literal></expr>:</case>  <comment type="block">/* --file */</comment>
				<expr_stmt><expr><name>filename</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'k'</literal></expr>:</case>  <comment type="block">/* --key */</comment>
			<block>{<block_content>
				<decl_stmt><decl><type><name>mapred_plist_t</name> <modifier>*</modifier></type><name>newitem</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>optarg</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eq</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<comment type="block">/*
				 * either --key value      : sets parameter named "key"
				 * or     --key name=value : sets parameter named "name"
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>eq</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>eq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>value</name> <operator>=</operator> <name>eq</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
					
					<comment type="block">/* make sure parameter is a valid name */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>strspn</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>wordchars</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bad parameter --key %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name>value</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"key"</literal></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>

				<comment type="block">/* Add the parameter to the global parameter list */</comment>
				<expr_stmt><expr><name>newitem</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapred_plist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>name</name></name>  <operator>=</operator> <name>name</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>type</name></name>  <operator>=</operator> <name>value</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>next</name></name>  <operator>=</operator> <name>global_plist</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>global_plist</name>   <operator>=</operator> <name>newitem</name></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>

			<default>default:</default>  <comment type="block">/* not feasible */</comment>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error processing options\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<comment type="block">/* open the file */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filename</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>procname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: Could not open file '%s'\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Handle additional arguments as would psql:
	 *   - First argument is database
	 *   - Second argument is username, if not specified via -U
	 *   - All other arguments generate warnings
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>&lt;</operator> <name>argc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>database</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>database</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>&lt;</operator> <name>argc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>username</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>username</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<while>while <condition>(<expr><name>optind</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: warning: extra command-line argument \"%s\" ignored\n"</literal></expr></argument>,
				<argument><expr><name>procname</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>optind</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>global_verbose_flag</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>mapred_plist_t</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>global_plist</name></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>param</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"- Parameter: %s=%s\n"</literal></expr></argument>,
					<argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>param</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"- Parsing '%s':\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>documents</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<macro><name>XTRY</name></macro>
	<block>{<block_content>
		<expr_stmt><expr><name>documents</name> <operator>=</operator> <call><name>mapred_parse_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<macro><name>XCATCH</name><argument_list>(<argument>ASSERTION_FAILURE</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Assertion failure at %s:%d\n"</literal></expr></argument>,
				<argument><expr><name><name>xframe</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>xframe</name><operator>.</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<macro><name>XCATCH_ANY</name></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>global_verbose_flag</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"  - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>xframe</name><operator>.</operator><name>exception</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>xframe</name><operator>.</operator><name>exception</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown Error (%d) at %s:%d\n"</literal></expr></argument>,
					<argument><expr><name><name>xframe</name><operator>.</operator><name>errcode</name></name></expr></argument>, <argument><expr><name><name>xframe</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>xframe</name><operator>.</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><name>XTRY_END</name></expr>;</expr_stmt>

	<comment type="block">/* Do something interesting with documents */</comment>
	<for>for <control>(<init><expr><name>doc_item</name> <operator>=</operator> <name>documents</name></expr>;</init> <condition><expr><name>doc_item</name></expr>;</condition> <incr><expr><name>doc_item</name> <operator>=</operator> <name><name>doc_item</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGconn</name>   <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>      <name><name>pwdbuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>      <name><name>portbuf</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* max int size should be 10 digits */</comment>
		<decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>user</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>db</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>host</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pwd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pqport</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>options</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tty</name></decl>;</decl_stmt>

		<macro><name>XTRY</name></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>mapred_document_t</name> <modifier>*</modifier></type><name>doc</name> <init>= <expr><operator>&amp;</operator><name><name>doc_item</name><operator>-&gt;</operator><name>object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>document</name></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>global_verbose_flag</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"- Executing Document %d:\n"</literal></expr></argument>, <argument><expr><name><name>doc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>pqport</name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>doc</name><operator>-&gt;</operator><name>port</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>portbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>doc</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>pqport</name> <operator>=</operator> <name>portbuf</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>pqport</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>database</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>db</name> <operator>=</operator> <name>database</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>db</name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>database</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>username</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>user</name> <operator>=</operator> <name>username</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>user</name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>user</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>hostname</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>host</name> <operator>=</operator> <name>hostname</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>host</name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>host</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><name>options</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>tty</name>     <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pwd</name>     <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>forceprompt</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>read_password</name><argument_list>(<argument><expr><name>pwdbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pwdbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>pwd</name> <operator>=</operator> <name>pwdbuf</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<do>do <block>{<block_content>
				<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>PQsetdbLogin</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>pqport</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>tty</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>needpass</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONNECTION_BAD</name> <operator>&amp;&amp;</operator>
					<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PQnoPasswordSupplied</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>read_password</name><argument_list>(<argument><expr><name>pwdbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pwdbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>pwd</name> <operator>=</operator> <name>pwdbuf</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>needpass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block> while <condition>(<expr><name>needpass</name></expr>)</condition>;</do>

			<if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONNECTION_BAD</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>XRAISE</name><argument_list>(<argument><expr><name>CONNECTION_ERROR</name></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>global_verbose_flag</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"  - Connected Established:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"    HOST: %s\n"</literal></expr></argument>,
							<argument><expr><ternary><condition><expr><call><name>PQhost</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>PQhost</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"localhost"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"    PORT: %s\n"</literal></expr></argument>, <argument><expr><call><name>PQport</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"    USER: %s/%s\n"</literal></expr></argument>, <argument><expr><call><name>PQuser</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PQdb</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>check_version</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<comment type="block">/* Prepare to receive interrupts */</comment>
				<expr_stmt><expr><name>cancelConn</name> <operator>=</operator> <call><name>PQgetCancel</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>sigint_handler</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIG_IGN</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>sigint_handler</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIG_IGN</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>sigint_handler</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIG_IGN</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>mapred_run_document</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block>
		<macro><name>XCATCH</name><argument_list>(<argument>ASSERTION_FAILURE</argument>)</argument_list></macro>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Assertion failure at %s:%d\n"</literal></expr></argument>,
					<argument><expr><name><name>xframe</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>xframe</name><operator>.</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
			<expr_stmt><expr><name>errcode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block>
		<macro><name>XCATCH</name><argument_list>(<argument>USER_INTERUPT</argument>)</argument_list></macro>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>global_verbose_flag</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"  - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>			
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Job Cancelled: User Interrupt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* exit immediately */</comment>
		</block_content>}</block>
		<macro><name>XCATCH_ANY</name></macro>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>global_verbose_flag</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"  - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>xframe</name><operator>.</operator><name>exception</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>xframe</name><operator>.</operator><name>exception</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown Error (%d) at %s:%d\n"</literal></expr></argument>,
						<argument><expr><name><name>xframe</name><operator>.</operator><name>errcode</name></name></expr></argument>, <argument><expr><name><name>xframe</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>xframe</name><operator>.</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>errcode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block>
		<macro><name>XFINALLY</name></macro>
		<block>{<block_content>
			<comment type="block">/* Ignore signals until we exit */</comment>
			<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>PQfreeCancel</name><argument_list>(<argument><expr><name>cancelConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cancelConn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><name>XTRY_END</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	
	<comment type="block">/* Cleanup */</comment>
	<expr_stmt><expr><call><name>mapred_destroy_olist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>documents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>errcode</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>read_password</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>t_orig</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>termin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>termout</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>termin</name>  <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/dev/tty"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>termout</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/dev/tty"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>termin</name> <operator>||</operator> <operator>!</operator><name>termout</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>termin</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>termin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>termout</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>termout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>termin</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>termout</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tcgetattr</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>termin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t_orig</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ECHO</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tcsetattr</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>termin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCSAFLUSH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
    <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"Password&gt; "</literal></expr></argument>, <argument><expr><name>termout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>termout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>termin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* If that didn't get the whole input, drain the rest */</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name><name>c</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>termin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>;</do>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tcsetattr</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>termin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCSAFLUSH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>termout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>termout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>termin</name> <operator>!=</operator> <name>stdin</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>termin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>termout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>check_version</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"select (regexp_matches(version(), "</literal>
					<literal type="string">"E'\\\\(Greenplum Database ([^)]+)\\\\)'))[1]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PGRES_TUPLES_OK</name> <operator>&amp;&amp;</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>version</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>global_verbose_flag</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"    VERSION: %s\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Determine if this version is approved for mapreduce usage */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Get major and minor release, patch level is ignored */</comment>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dot</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>   <name>major</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dot</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>   <name>minor</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>dot</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>major</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
						 <argument><expr><literal type="string">"Unsupported backend version: %s"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>XRAISE</name><argument_list>(<argument><expr><name>VERSION_ERROR</name></expr></argument>, <argument><expr><call><name>strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XRAISE</name><argument_list>(<argument><expr><name>MAPRED_SQL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to determine Greenplum version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * sigint_handler() -  Interrupt handler to cancel active queries
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sigint_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* Once we accept an interrupt it's best to simply disable the handler */</comment>
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>cancelConn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>PQcancel</name><argument_list>(<argument><expr><name>cancelConn</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cancel request sent\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not send cancel request: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>XRAISE</name><argument_list>(<argument><expr><name>USER_INTERUPT</name></expr></argument>, <argument><expr><literal type="string">"SIGINT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
