<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/gpMgmt/bin/stream/stream.c"><comment type="block">/*-----------------------------------------------------------------------*/</comment>
<comment type="block">/* Program: STREAM                                                       */</comment>
<comment type="block">/* Revision: $Id: stream.c,v 5.10 2013/01/17 16:01:06 mccalpin Exp mccalpin $ */</comment>
<comment type="block">/* Original code developed by John D. McCalpin                           */</comment>
<comment type="block">/* Programmers: John D. McCalpin                                         */</comment>
<comment type="block">/*              Joe R. Zagar                                             */</comment>
<comment type="block">/*                                                                       */</comment>
<comment type="block">/* This program measures memory transfer rates in MB/s for simple        */</comment>
<comment type="block">/* computational kernels coded in C.                                     */</comment>
<comment type="block">/*-----------------------------------------------------------------------*/</comment>
<comment type="block">/* Copyright 1991-2013: John D. McCalpin                                 */</comment>
<comment type="block">/*-----------------------------------------------------------------------*/</comment>
<comment type="block">/* License:                                                              */</comment>
<comment type="block">/*  1. You are free to use this program and/or to redistribute           */</comment>
<comment type="block">/*     this program.                                                     */</comment>
<comment type="block">/*  2. You are free to modify this program for your own use,             */</comment>
<comment type="block">/*     including commercial use, subject to the publication              */</comment>
<comment type="block">/*     restrictions in item 3.                                           */</comment>
<comment type="block">/*  3. You are free to publish results obtained from running this        */</comment>
<comment type="block">/*     program, or from works that you derive from this program,         */</comment>
<comment type="block">/*     with the following limitations:                                   */</comment>
<comment type="block">/*     3a. In order to be referred to as "STREAM benchmark results",     */</comment>
<comment type="block">/*         published results must be in conformance to the STREAM        */</comment>
<comment type="block">/*         Run Rules, (briefly reviewed below) published at              */</comment>
<comment type="block">/*         http://www.cs.virginia.edu/stream/ref.html                    */</comment>
<comment type="block">/*         and incorporated herein by reference.                         */</comment>
<comment type="block">/*         As the copyright holder, John McCalpin retains the            */</comment>
<comment type="block">/*         right to determine conformity with the Run Rules.             */</comment>
<comment type="block">/*     3b. Results based on modified source code or on runs not in       */</comment>
<comment type="block">/*         accordance with the STREAM Run Rules must be clearly          */</comment>
<comment type="block">/*         labelled whenever they are published.  Examples of            */</comment>
<comment type="block">/*         proper labelling include:                                     */</comment>
<comment type="block">/*           "tuned STREAM benchmark results"                            */</comment>
<comment type="block">/*           "based on a variant of the STREAM benchmark code"           */</comment>
<comment type="block">/*         Other comparable, clear, and reasonable labelling is          */</comment>
<comment type="block">/*         acceptable.                                                   */</comment>
<comment type="block">/*     3c. Submission of results to the STREAM benchmark web site        */</comment>
<comment type="block">/*         is encouraged, but not required.                              */</comment>
<comment type="block">/*  4. Use of this program or creation of derived works based on this    */</comment>
<comment type="block">/*     program constitutes acceptance of these licensing restrictions.   */</comment>
<comment type="block">/*  5. Absolutely no warranty is expressed or implied.                   */</comment>
<comment type="block">/*-----------------------------------------------------------------------*/</comment>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<comment type="block">/*-----------------------------------------------------------------------
 * INSTRUCTIONS:
 *
 *	1) STREAM requires different amounts of memory to run on different
 *           systems, depending on both the system cache size(s) and the
 *           granularity of the system timer.
 *     You should adjust the value of 'STREAM_ARRAY_SIZE' (below)
 *           to meet *both* of the following criteria:
 *       (a) Each array must be at least 4 times the size of the
 *           available cache memory. I don't worry about the difference
 *           between 10^6 and 2^20, so in practice the minimum array size
 *           is about 3.8 times the cache size.
 *           Example 1: One Xeon E3 with 8 MB L3 cache
 *               STREAM_ARRAY_SIZE should be &gt;= 4 million, giving
 *               an array size of 30.5 MB and a total memory requirement
 *               of 91.5 MB.  
 *           Example 2: Two Xeon E5's with 20 MB L3 cache each (using OpenMP)
 *               STREAM_ARRAY_SIZE should be &gt;= 20 million, giving
 *               an array size of 153 MB and a total memory requirement
 *               of 458 MB.  
 *       (b) The size should be large enough so that the 'timing calibration'
 *           output by the program is at least 20 clock-ticks.  
 *           Example: most versions of Windows have a 10 millisecond timer
 *               granularity.  20 "ticks" at 10 ms/tic is 200 milliseconds.
 *               If the chip is capable of 10 GB/s, it moves 2 GB in 200 msec.
 *               This means the each array must be at least 1 GB, or 128M elements.
 *
 *      Version 5.10 increases the default array size from 2 million
 *          elements to 10 million elements in response to the increasing
 *          size of L3 caches.  The new default size is large enough for caches
 *          up to 20 MB. 
 *      Version 5.10 changes the loop index variables from "register int"
 *          to "ssize_t", which allows array indices &gt;2^32 (4 billion)
 *          on properly configured 64-bit systems.  Additional compiler options
 *          (such as "-mcmodel=medium") may be required for large memory runs.
 *
 *      Array size can be set at compile time without modifying the source
 *          code for the (many) compilers that support preprocessor definitions
 *          on the compile line.  E.g.,
 *                gcc -O -DSTREAM_ARRAY_SIZE=100000000 stream.c -o stream.100M
 *          will override the default size of 10M with a new size of 100M elements
 *          per array.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STREAM_ARRAY_SIZE</name></cpp:ifndef>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_ARRAY_SIZE</name></cpp:macro>	<cpp:value>10000000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*  2) STREAM runs each kernel "NTIMES" times and reports the *best* result
 *         for any iteration after the first, therefore the minimum value
 *         for NTIMES is 2.
 *      There are no rules on maximum allowable values for NTIMES, but
 *         values larger than the default are unlikely to noticeably
 *         increase the reported performance.
 *      NTIMES can also be set on the compile line without changing the source
 *         code using, for example, "-DNTIMES=7".
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NTIMES</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NTIMES</name><operator>&lt;=</operator><literal type="number">1</literal></expr></cpp:if>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>NTIMES</name></cpp:macro>	<cpp:value>10</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NTIMES</name></cpp:ifndef>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>NTIMES</name></cpp:macro>	<cpp:value>10</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*  Users are allowed to modify the "OFFSET" variable, which *may* change the
 *         relative alignment of the arrays (though compilers may change the 
 *         effective offset by making the arrays non-contiguous on some systems). 
 *      Use of non-zero values for OFFSET can be especially helpful if the
 *         STREAM_ARRAY_SIZE is set to a value close to a large power of 2.
 *      OFFSET can also be set on the compile line without changing the source
 *         code using, for example, "-DOFFSET=56".
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OFFSET</name></cpp:ifndef>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 *	3) Compile the code with optimization.  Many compilers generate
 *       unreasonably bad code before the optimizer tightens things up.  
 *     If the results are unreasonably good, on the other hand, the
 *       optimizer might be too smart for me!
 *
 *     For a simple single-core version, try compiling with:
 *            cc -O stream.c -o stream
 *     This is known to work on many, many systems....
 *
 *     To use multiple cores, you need to tell the compiler to obey the OpenMP
 *       directives in the code.  This varies by compiler, but a common example is
 *            gcc -O -fopenmp stream.c -o stream_omp
 *       The environment variable OMP_NUM_THREADS allows runtime control of the 
 *         number of threads/cores used when the resulting "stream_omp" program
 *         is executed.
 *
 *     To run with single-precision variables and arithmetic, simply add
 *         -DSTREAM_TYPE=float
 *     to the compile line.
 *     Note that this changes the minimum array sizes required --- see (1) above.
 *
 *     The preprocessor directive "TUNED" does not do much -- it simply causes the 
 *       code to call separate functions to execute each kernel.  Trivial versions
 *       of these functions are provided, but they are *not* tuned -- they just 
 *       provide predefined interfaces to be replaced with tuned code.
 *
 *
 *	4) Optional: Mail the results to mccalpin@cs.virginia.edu
 *	   Be sure to include info that will help me understand:
 *		a) the computer hardware configuration (e.g., processor model, memory type)
 *		b) the compiler name/version and compilation flags
 *      c) any run-time information (such as OMP_NUM_THREADS)
 *		d) all of the output from the test case.
 *
 * Thanks!
 *
 *-----------------------------------------------------------------------*/</comment>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>HLINE</name></cpp:macro> <cpp:value>"-------------------------------------------------------------\n"</cpp:value></cpp:define>

<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>MIN</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&lt;(y)?(x):(y))</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>MAX</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&gt;(y)?(x):(y))</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STREAM_TYPE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>STREAM_TYPE</name></type>	<name><name>a</name><index>[<expr><name>STREAM_ARRAY_SIZE</name><operator>+</operator><name>OFFSET</name></expr>]</index></name></decl>,
			<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>STREAM_ARRAY_SIZE</name><operator>+</operator><name>OFFSET</name></expr>]</index></name></decl>,
			<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>STREAM_ARRAY_SIZE</name><operator>+</operator><name>OFFSET</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type>	<name><name>avgtime</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>maxtime</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,
		<decl><type ref="prev"/><name><name>mintime</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>FLT_MAX</name></expr>,<expr><name>FLT_MAX</name></expr>,<expr><name>FLT_MAX</name></expr>,<expr><name>FLT_MAX</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name>	<modifier>*</modifier></type><name><name>label</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"Copy:      "</literal></expr>, <expr><literal type="string">"Scale:     "</literal></expr>,
    <expr><literal type="string">"Add:       "</literal></expr>, <expr><literal type="string">"Triad:     "</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type>	<name><name>bytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STREAM_TYPE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>STREAM_ARRAY_SIZE</name></expr>,
    <expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STREAM_TYPE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>STREAM_ARRAY_SIZE</name></expr>,
    <expr><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STREAM_TYPE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>STREAM_ARRAY_SIZE</name></expr>,
    <expr><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STREAM_TYPE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>STREAM_ARRAY_SIZE</name></expr>
    }</block></expr></init></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>checktick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>double</name></type> <name>mysecond</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>checkSTREAMresults</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TUNED</name></cpp:ifdef>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>tuned_STREAM_Copy</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>tuned_STREAM_Scale</name><parameter_list>(<parameter><decl><type><name>STREAM_TYPE</name></type> <name>scalar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>tuned_STREAM_Add</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>tuned_STREAM_Triad</name><parameter_list>(<parameter><decl><type><name>STREAM_TYPE</name></type> <name>scalar</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_OPENMP</name></cpp:ifdef>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>omp_get_num_threads</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type>
<name>main</name><parameter_list>()</parameter_list>
    <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>			<name>quantum</name></decl>, <decl><type ref="prev"/><name>checktick</name><argument_list>()</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>			<name>BytesPerWord</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>			<name>k</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type>		<name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STREAM_TYPE</name></type>		<name>scalar</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>		<name>t</name></decl>, <decl><type ref="prev"/><name><name>times</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>NTIMES</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* --- SETUP --- determine precision and check timing --- */</comment>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>HLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"STREAM version $Revision: 5.10 $\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>HLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>BytesPerWord</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STREAM_TYPE</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"This system uses %d bytes per array element.\n"</literal></expr></argument>,
	<argument><expr><name>BytesPerWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>HLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>N</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*****  WARNING: ******\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      It appears that you set the preprocessor variable N when compiling this code.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      This version of the code uses the preprocesor variable STREAM_ARRAY_SIZE to control the array size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      Reverting to default value of STREAM_ARRAY_SIZE=%llu\n"</literal></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>STREAM_ARRAY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*****  WARNING: ******\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Array size = %llu (elements), Offset = %d (elements)\n"</literal></expr></argument> , <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>STREAM_ARRAY_SIZE</name></expr></argument>, <argument><expr><name>OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Memory per array = %.1f MiB (= %.1f GiB).\n"</literal></expr></argument>, 
	<argument><expr><name>BytesPerWord</name> <operator>*</operator> <operator>(</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>STREAM_ARRAY_SIZE</name> <operator>/</operator> <literal type="number">1024.0</literal><operator>/</operator><literal type="number">1024.0</literal><operator>)</operator></expr></argument>,
	<argument><expr><name>BytesPerWord</name> <operator>*</operator> <operator>(</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>STREAM_ARRAY_SIZE</name> <operator>/</operator> <literal type="number">1024.0</literal><operator>/</operator><literal type="number">1024.0</literal><operator>/</operator><literal type="number">1024.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Total memory required = %.1f MiB (= %.1f GiB).\n"</literal></expr></argument>,
	<argument><expr><operator>(</operator><literal type="number">3.0</literal> <operator>*</operator> <name>BytesPerWord</name><operator>)</operator> <operator>*</operator> <operator>(</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>STREAM_ARRAY_SIZE</name> <operator>/</operator> <literal type="number">1024.0</literal><operator>/</operator><literal type="number">1024.</literal><operator>)</operator></expr></argument>,
	<argument><expr><operator>(</operator><literal type="number">3.0</literal> <operator>*</operator> <name>BytesPerWord</name><operator>)</operator> <operator>*</operator> <operator>(</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>STREAM_ARRAY_SIZE</name> <operator>/</operator> <literal type="number">1024.0</literal><operator>/</operator><literal type="number">1024.</literal><operator>/</operator><literal type="number">1024.</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Each kernel will be executed %d times.\n"</literal></expr></argument>, <argument><expr><name>NTIMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" The *best* time for each kernel (excluding the first iteration)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" will be used to compute the reported bandwidth.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_OPENMP</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>HLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name></omp:directive></cpp:pragma> 
    <block>{<block_content>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>master</omp:name></omp:directive></cpp:pragma>
	<block>{<block_content>
	    <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>omp_get_num_threads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Number of Threads requested = %i\n"</literal></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_OPENMP</name></cpp:ifdef>
	<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name></omp:directive></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>atomic</omp:name></omp:directive></cpp:pragma> 
		<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Number of Threads counted = %i\n"</literal></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Get initial value for system clock. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_OPENMP</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>STREAM_ARRAY_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	    <expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>HLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if  <condition>( <expr><operator>(</operator><name>quantum</name> <operator>=</operator> <call><name>checktick</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Your clock granularity/precision appears to be "</literal>
	    <literal type="string">"%d microseconds.\n"</literal></expr></argument>, <argument><expr><name>quantum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else <block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Your clock granularity appears to be "</literal>
	    <literal type="string">"less than one microsecond.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>quantum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>mysecond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_OPENMP</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>STREAM_ARRAY_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">2.0E0</literal> <operator>*</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1.0E6</literal> <operator>*</operator> <operator>(</operator><call><name>mysecond</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Each test below will take on the order"</literal>
	<literal type="string">" of %d microseconds.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>t</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   (= %d clock ticks)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>t</name><operator>/</operator><name>quantum</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Increase the size of the arrays if this shows that\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"you are not getting at least 20 clock ticks per test.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>HLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"WARNING -- The above is only a rough guideline.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"For best results, please be sure you know the\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"precision of your system timer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>HLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/*	--- MAIN LOOP --- repeat test cases NTIMES times --- */</comment>

    <expr_stmt><expr><name>scalar</name> <operator>=</operator> <literal type="number">3.0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>NTIMES</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
	<expr_stmt><expr><name><name>times</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>mysecond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TUNED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>tuned_STREAM_Copy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_OPENMP</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>STREAM_ARRAY_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>times</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>mysecond</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>times</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
	
	<expr_stmt><expr><name><name>times</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>mysecond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TUNED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>tuned_STREAM_Scale</name><argument_list>(<argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_OPENMP</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>STREAM_ARRAY_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>scalar</name><operator>*</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>times</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>mysecond</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>times</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
	
	<expr_stmt><expr><name><name>times</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>mysecond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TUNED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>tuned_STREAM_Add</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_OPENMP</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>STREAM_ARRAY_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>times</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>mysecond</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>times</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
	
	<expr_stmt><expr><name><name>times</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>mysecond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TUNED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>tuned_STREAM_Triad</name><argument_list>(<argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_OPENMP</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>STREAM_ARRAY_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><name>scalar</name><operator>*</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>times</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>mysecond</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>times</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

    <comment type="block">/*	--- SUMMARY --- */</comment>

    <for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>NTIMES</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <comment type="block">/* note -- skip first iteration */</comment>
	<block>{<block_content>
	<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	    <block>{<block_content>
	    <expr_stmt><expr><name><name>avgtime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>avgtime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>times</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>mintime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>mintime</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>times</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>maxtime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>maxtime</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>times</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></for>
	</block_content>}</block></for>
    
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Function    Best Rate MB/s  Avg time     Min time     Max time\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>avgtime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>avgtime</name><index>[<expr><name>j</name></expr>]</index></name><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>NTIMES</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%12.1f  %11.6f  %11.6f  %11.6f\n"</literal></expr></argument>, <argument><expr><name><name>label</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
	       <argument><expr><literal type="number">1.0E</literal><operator>-</operator><literal type="number">06</literal> <operator>*</operator> <name><name>bytes</name><index>[<expr><name>j</name></expr>]</index></name><operator>/</operator><name><name>mintime</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
	       <argument><expr><name><name>avgtime</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
	       <argument><expr><name><name>mintime</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
	       <argument><expr><name><name>maxtime</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>HLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* --- Check Results --- */</comment>
    <expr_stmt><expr><call><name>checkSTREAMresults</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>HLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define># <cpp:directive>define</cpp:directive>	<cpp:macro><name>M</name></cpp:macro>	<cpp:value>20</cpp:value></cpp:define>

<function><type><name>int</name></type>
<name>checktick</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
    <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>		<name>i</name></decl>, <decl><type ref="prev"/><name>minDelta</name></decl>, <decl><type ref="prev"/><name>Delta</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>	<name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name><name>timesfound</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/*  Collect a sequence of M unique time values from the system. */</comment>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>M</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>mysecond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>( <expr><operator>(</operator><operator>(</operator><name>t2</name><operator>=</operator><call><name>mysecond</name><argument_list>()</argument_list></call><operator>)</operator> <operator>-</operator> <name>t1</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">1.0E</literal><operator>-</operator><literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content>
	    <empty_stmt>;</empty_stmt></block_content></block></while>
	<expr_stmt><expr><name><name>timesfound</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>
	</block_content>}</block></for>

<comment type="block">/*
 * Determine the minimum difference between these M values.
 * This result will be our estimate (in microseconds) for the
 * clock granularity.
 */</comment>

    <expr_stmt><expr><name>minDelta</name> <operator>=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>M</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><name>Delta</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <literal type="number">1.0E6</literal> <operator>*</operator> <operator>(</operator><name><name>timesfound</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>timesfound</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>minDelta</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>minDelta</name></expr></argument>, <argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name>Delta</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

   <return>return<expr><operator>(</operator><name>minDelta</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>



<comment type="block">/* A gettimeofday routine to give access to the wall
   clock timer on most UNIX-like systems.  */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<function><type><name>double</name></type> <name>mysecond</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tp</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timezone</name></name></type> <name>tzp</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>tzp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>tp</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>tp</name><operator>.</operator><name>tv_usec</name></name> <operator>*</operator> <literal type="number">1.e-6</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>abs</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>abs</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt;= 0 ? (a) : -(a))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name></type> <name>checkSTREAMresults</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>STREAM_TYPE</name></type> <name>aj</name></decl>,<decl><type ref="prev"/><name>bj</name></decl>,<decl><type ref="prev"/><name>cj</name></decl>,<decl><type ref="prev"/><name>scalar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>STREAM_TYPE</name></type> <name>aSumErr</name></decl>,<decl><type ref="prev"/><name>bSumErr</name></decl>,<decl><type ref="prev"/><name>cSumErr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>STREAM_TYPE</name></type> <name>aAvgErr</name></decl>,<decl><type ref="prev"/><name>bAvgErr</name></decl>,<decl><type ref="prev"/><name>cAvgErr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>epsilon</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>	<name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>k</name></decl>,<decl><type ref="prev"/><name>ierr</name></decl>,<decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

    <comment type="block">/* reproduce initialization */</comment>
	<expr_stmt><expr><name>aj</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>bj</name> <operator>=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cj</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
    <comment type="block">/* a[] is modified during timing check */</comment>
	<expr_stmt><expr><name>aj</name> <operator>=</operator> <literal type="number">2.0E0</literal> <operator>*</operator> <name>aj</name></expr>;</expr_stmt>
    <comment type="block">/* now execute timing loop */</comment>
	<expr_stmt><expr><name>scalar</name> <operator>=</operator> <literal type="number">3.0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>NTIMES</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>cj</name> <operator>=</operator> <name>aj</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bj</name> <operator>=</operator> <name>scalar</name><operator>*</operator><name>cj</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cj</name> <operator>=</operator> <name>aj</name><operator>+</operator><name>bj</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>aj</name> <operator>=</operator> <name>bj</name><operator>+</operator><name>scalar</name><operator>*</operator><name>cj</name></expr>;</expr_stmt>
        </block_content>}</block></for>

    <comment type="block">/* accumulate deltas between observed and expected results */</comment>
	<expr_stmt><expr><name>aSumErr</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>bSumErr</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cSumErr</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>STREAM_ARRAY_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>aSumErr</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name>aj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>bSumErr</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name>bj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cSumErr</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name>cj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// if (j == 417) printf("Index 417: c[j]: %f, cj: %f\n",c[j],cj);	// MCCALPIN</comment>
	</block_content>}</block></for>
	<expr_stmt><expr><name>aAvgErr</name> <operator>=</operator> <name>aSumErr</name> <operator>/</operator> <operator>(</operator><name>STREAM_TYPE</name><operator>)</operator> <name>STREAM_ARRAY_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>bAvgErr</name> <operator>=</operator> <name>bSumErr</name> <operator>/</operator> <operator>(</operator><name>STREAM_TYPE</name><operator>)</operator> <name>STREAM_ARRAY_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cAvgErr</name> <operator>=</operator> <name>cSumErr</name> <operator>/</operator> <operator>(</operator><name>STREAM_TYPE</name><operator>)</operator> <name>STREAM_ARRAY_SIZE</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>STREAM_TYPE</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>epsilon</name> <operator>=</operator> <literal type="number">1.e-6</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>STREAM_TYPE</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>epsilon</name> <operator>=</operator> <literal type="number">1.e-13</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"WEIRD: sizeof(STREAM_TYPE) = %lu\n"</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STREAM_TYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>epsilon</name> <operator>=</operator> <literal type="number">1.e-6</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>aAvgErr</name><operator>/</operator><name>aj</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>epsilon</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>err</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Failed Validation on array a[], AvgRelAbsErr &gt; epsilon (%e)\n"</literal></expr></argument>,<argument><expr><name>epsilon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"     Expected Value: %e, AvgAbsErr: %e, AvgRelAbsErr: %e\n"</literal></expr></argument>,<argument><expr><name>aj</name></expr></argument>,<argument><expr><name>aAvgErr</name></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>aAvgErr</name></expr></argument>)</argument_list></call><operator>/</operator><name>aj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ierr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>STREAM_ARRAY_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>/</operator><name>aj</name><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>epsilon</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>ierr</name><operator>++</operator></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERBOSE</name></cpp:ifdef>
				<if_stmt><if>if <condition>(<expr><name>ierr</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"         array a: index: %ld, expected: %e, observed: %e, relative error: %e\n"</literal></expr></argument>,
						<argument><expr><name>j</name></expr></argument>,<argument><expr><name>aj</name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>aj</name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>/</operator><name>aAvgErr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"     For array a[], %d errors were found.\n"</literal></expr></argument>,<argument><expr><name>ierr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>bAvgErr</name><operator>/</operator><name>bj</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>epsilon</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>err</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Failed Validation on array b[], AvgRelAbsErr &gt; epsilon (%e)\n"</literal></expr></argument>,<argument><expr><name>epsilon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"     Expected Value: %e, AvgAbsErr: %e, AvgRelAbsErr: %e\n"</literal></expr></argument>,<argument><expr><name>bj</name></expr></argument>,<argument><expr><name>bAvgErr</name></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>bAvgErr</name></expr></argument>)</argument_list></call><operator>/</operator><name>bj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"     AvgRelAbsErr &gt; Epsilon (%e)\n"</literal></expr></argument>,<argument><expr><name>epsilon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ierr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>STREAM_ARRAY_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name><operator>/</operator><name>bj</name><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>epsilon</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>ierr</name><operator>++</operator></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERBOSE</name></cpp:ifdef>
				<if_stmt><if>if <condition>(<expr><name>ierr</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"         array b: index: %ld, expected: %e, observed: %e, relative error: %e\n"</literal></expr></argument>,
						<argument><expr><name>j</name></expr></argument>,<argument><expr><name>bj</name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>bj</name><operator>-</operator><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>/</operator><name>bAvgErr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"     For array b[], %d errors were found.\n"</literal></expr></argument>,<argument><expr><name>ierr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>cAvgErr</name><operator>/</operator><name>cj</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>epsilon</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>err</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Failed Validation on array c[], AvgRelAbsErr &gt; epsilon (%e)\n"</literal></expr></argument>,<argument><expr><name>epsilon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"     Expected Value: %e, AvgAbsErr: %e, AvgRelAbsErr: %e\n"</literal></expr></argument>,<argument><expr><name>cj</name></expr></argument>,<argument><expr><name>cAvgErr</name></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>cAvgErr</name></expr></argument>)</argument_list></call><operator>/</operator><name>cj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"     AvgRelAbsErr &gt; Epsilon (%e)\n"</literal></expr></argument>,<argument><expr><name>epsilon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ierr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>STREAM_ARRAY_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name><operator>/</operator><name>cj</name><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>epsilon</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>ierr</name><operator>++</operator></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERBOSE</name></cpp:ifdef>
				<if_stmt><if>if <condition>(<expr><name>ierr</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"         array c: index: %ld, expected: %e, observed: %e, relative error: %e\n"</literal></expr></argument>,
						<argument><expr><name>j</name></expr></argument>,<argument><expr><name>cj</name></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>cj</name><operator>-</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>/</operator><name>cAvgErr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"     For array c[], %d errors were found.\n"</literal></expr></argument>,<argument><expr><name>ierr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Solution Validates: avg error less than %e on all three arrays\n"</literal></expr></argument>,<argument><expr><name>epsilon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERBOSE</name></cpp:ifdef>
	<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Results Validation Verbose Results: \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"    Expected a(1), b(1), c(1): %f %f %f \n"</literal></expr></argument>,<argument><expr><name>aj</name></expr></argument>,<argument><expr><name>bj</name></expr></argument>,<argument><expr><name>cj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"    Observed a(1), b(1), c(1): %f %f %f \n"</literal></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"    Rel Errors on a, b, c:     %e %e %e \n"</literal></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>aAvgErr</name><operator>/</operator><name>aj</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>bAvgErr</name><operator>/</operator><name>bj</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>cAvgErr</name><operator>/</operator><name>cj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TUNED</name></cpp:ifdef>
<comment type="block">/* stubs for "tuned" versions of the kernels */</comment>
<function><type><name>void</name></type> <name>tuned_STREAM_Copy</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>j</name></decl>;</decl_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>STREAM_ARRAY_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tuned_STREAM_Scale</name><parameter_list>(<parameter><decl><type><name>STREAM_TYPE</name></type> <name>scalar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>j</name></decl>;</decl_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name></omp:directive></cpp:pragma>
	<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>STREAM_ARRAY_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>scalar</name><operator>*</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tuned_STREAM_Add</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>j</name></decl>;</decl_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name></omp:directive></cpp:pragma>
	<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>STREAM_ARRAY_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tuned_STREAM_Triad</name><parameter_list>(<parameter><decl><type><name>STREAM_TYPE</name></type> <name>scalar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>j</name></decl>;</decl_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name></omp:directive></cpp:pragma>
	<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>STREAM_ARRAY_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><name>scalar</name><operator>*</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
<comment type="block">/* end of stubs for the "tuned" versions of the kernels */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
