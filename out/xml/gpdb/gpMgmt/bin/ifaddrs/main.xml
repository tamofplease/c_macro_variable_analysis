<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/gpMgmt/bin/ifaddrs/main.c"><comment type="block">/*
 * ifaddrs - prints the routable IP addresses for all interfaces on the local
 *           system. Link-local addresses are never printed.
 *
 * Options:
 *     --no-loopback: suppresses output for loopback interfaces
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ifaddrs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>c</name></decl>;</decl_stmt>

	<comment type="block">/* Options */</comment>
	<decl_stmt><decl><type><name>int</name></type>		<name>no_loopback</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>opts</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{<expr><literal type="string">"no-loopback"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><operator>&amp;</operator><name>no_loopback</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
		<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">0</literal></expr>:</case>
				<comment type="block">/* flag assignment already handled */</comment>
				<break>break;</break>

			<default>default:</default>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: %s [--no-loopback]\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>getifaddrs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"getifaddrs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>list</name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>ifa_next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>netaddr</name></decl>;</decl_stmt> <comment type="block">/* the address to be converted to a string */</comment>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>addrbuf</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addrstr</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name>	   <modifier>*</modifier></type><name>addr4</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name>	   <modifier>*</modifier></type><name>addr6</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name>		   <modifier>*</modifier></type><name>addr</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>exclude_loopback</name> <init>= <expr><operator>(</operator><name>no_loopback</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>ifa_flags</name></name> <operator>&amp;</operator> <name>IFF_LOOPBACK</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<switch>switch <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>AF_INET</name></expr>:</case>
				<expr_stmt><expr><name>addr4</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name>addr</name></expr>;</expr_stmt>

				<comment type="block">/* Exclude 127.0.0.0/8 ip range */</comment>
				<if_stmt><if>if <condition>(<expr><name>exclude_loopback</name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>uint32_t</name></type> <name>saddr</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>addr4</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>uint8_t</name></type> <name>b1</name></decl>;</decl_stmt>
					<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>saddr</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>b1</name> <operator>==</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>
						<continue>continue;</continue></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name>netaddr</name> <operator>=</operator> <operator>&amp;</operator><name><name>addr4</name><operator>-&gt;</operator><name>sin_addr</name></name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>AF_INET6</name></expr>:</case>
				<expr_stmt><expr><name>addr6</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name>addr</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>addr6</name><operator>-&gt;</operator><name>sin6_scope_id</name></name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* Don't print out link-local addresses. */</comment>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* Exclude ::1 */</comment>
				<if_stmt><if>if <condition>(<expr><name>exclude_loopback</name> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_LOOPBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>netaddr</name> <operator>=</operator> <operator>&amp;</operator><name><name>addr6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr>;</expr_stmt>
				<break>break;</break>

			<default>default:</default>
				<comment type="block">/* we only care about IPv4/6 */</comment>
				<continue>continue;</continue>
		</block_content>}</block></switch>

		<comment type="block">/* Convert the address to a human-readable string */</comment>
		<expr_stmt><expr><name>addrstr</name> <operator>=</operator> <call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>, <argument><expr><name>netaddr</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>addrstr</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"inet_ntop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>addrstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
