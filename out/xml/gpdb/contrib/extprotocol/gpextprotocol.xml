<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/contrib/extprotocol/gpextprotocol.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/external.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/extprotocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>



<typedef>typedef <type><struct>struct <name>DemoUri</name>
<block>{
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>protocol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
	
}</block></struct></type>	<name>DemoUri</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>DemoUri</name> <modifier>*</modifier></type><name>ParseDemoUri</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri_str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FreeDemoUri</name><parameter_list>(<parameter><decl><type><name>DemoUri</name><modifier>*</modifier></type> <name>uri</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* Do the module magic dance */</comment>
<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>demoprot_export</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>demoprot_import</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>demoprot_validate_urls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>Datum</name></type> <name>demoprot_export</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>demoprot_import</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>demoprot_validate_urls</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>


<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	  <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
}</block></struct></type> <name>extprotocol_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_ext_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Relation</name></type> <name>rel</name> <init>= <expr><call><name>EXTPROTOCOL_GET_RELATION</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ExtTableEntry</name> <modifier>*</modifier></type><name>exttbl</name> <init>= <expr><call><name>GetExtTableEntry</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>exttbl</name><operator>-&gt;</operator><name>options</name></name></expr></init></decl>;</decl_stmt>

        <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>options</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>def</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>defGetString</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&amp;&amp;</operator> <call><name>strcasestr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"database"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasestr</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"greenplum"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"This is greenplum."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
        </block_content>}</block>
</block_content>}</block></function>

<comment type="block">/*
 * Import data into GPDB.
 */</comment>
<function><type><name>Datum</name></type> 
<name>demoprot_import</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>extprotocol_t</name>   <modifier>*</modifier></type><name>myData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>			<modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				 <name>datlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>			 <name>nread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Must be called via the external table format manager */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CALLED_AS_EXTPROTOCOL</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"extprotocol_import: not called by external protocol manager"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Get our internal description of the protocol */</comment>
	<expr_stmt><expr><name>myData</name> <operator>=</operator> <operator>(</operator><name>extprotocol_t</name> <operator>*</operator><operator>)</operator> <call><name>EXTPROTOCOL_GET_USER_CTX</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>EXTPROTOCOL_IS_LAST_CALL</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* we're done receiving data. close our connection */</comment>
		<if_stmt><if>if<condition>(<expr><name>myData</name> <operator>&amp;&amp;</operator> <name><name>myData</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition><block type="pseudo"><block_content>
			<if_stmt><if>if<condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>myData</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not close file \"%s\": %m"</literal></expr></argument>,
								 <argument><expr><name><name>myData</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>	

	<if_stmt><if>if <condition>(<expr><name>myData</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* first call. do any desired init */</comment>
		
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	<modifier>*</modifier></type><name>p_name</name> <init>= <expr><literal type="string">"demoprot"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DemoUri</name>		<modifier>*</modifier></type><name>parsed_url</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>url</name> <init>= <expr><call><name>EXTPROTOCOL_GET_URL</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
		<expr_stmt><expr><name>myData</name> 			 <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extprotocol_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
		<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>url</name></name> 	 <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>parsed_url</name> 		 <operator>=</operator> <call><name>ParseDemoUri</name><argument_list>(<argument><expr><name><name>myData</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>, <argument><expr><name>p_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error: demoprot called with a different protocol (%s)"</literal></expr></argument>,
						<argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* An example of checking options */</comment>
		<expr_stmt><expr><call><name>check_ext_options</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>FreeDemoUri</name><argument_list>(<argument><expr><name>parsed_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="block">/* open the destination file (or connect to remote server in other cases) */</comment>
		<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>myData</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><name><name>myData</name><operator>-&gt;</operator><name>file</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"demoprot_import: could not open file \"%s\" for reading: %m"</literal></expr></argument>,
							<argument><expr><name><name>myData</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><call><name>EXTPROTOCOL_SET_USER_CTX</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>myData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* =======================================================================
	 *                            DO THE IMPORT
	 * ======================================================================= */</comment>
	
	<expr_stmt><expr><name>data</name> 	<operator>=</operator> <call><name>EXTPROTOCOL_GET_DATABUF</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>datlen</name> 	<operator>=</operator> <call><name>EXTPROTOCOL_GET_DATALEN</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>datlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>datlen</name></expr></argument>, <argument><expr><name><name>myData</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name><name>myData</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"demoprot_import: could not write to file \"%s\": %m"</literal></expr></argument>,
							 <argument><expr><name><name>myData</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>		
	</block_content>}</block></if></if_stmt>

	
	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Export data out of GPDB.
 */</comment>
<function><type><name>Datum</name></type> 
<name>demoprot_export</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>extprotocol_t</name>   <modifier>*</modifier></type><name>myData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>			<modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				 <name>datlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>			 <name>wrote</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Must be called via the external table format manager */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CALLED_AS_EXTPROTOCOL</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"extprotocol_export: not called by external protocol manager"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Get our internal description of the protocol */</comment>
	<expr_stmt><expr><name>myData</name> <operator>=</operator> <operator>(</operator><name>extprotocol_t</name> <operator>*</operator><operator>)</operator> <call><name>EXTPROTOCOL_GET_USER_CTX</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>EXTPROTOCOL_IS_LAST_CALL</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* we're done sending data. close our connection */</comment>
		<if_stmt><if>if<condition>(<expr><name>myData</name> <operator>&amp;&amp;</operator> <name><name>myData</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition><block type="pseudo"><block_content>
			<if_stmt><if>if<condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>myData</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not close file \"%s\": %m"</literal></expr></argument>,
								 <argument><expr><name><name>myData</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>	

	<if_stmt><if>if <condition>(<expr><name>myData</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* first call. do any desired init */</comment>
		
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	<modifier>*</modifier></type><name>p_name</name> <init>= <expr><literal type="string">"demoprot"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DemoUri</name>		<modifier>*</modifier></type><name>parsed_url</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>url</name> <init>= <expr><call><name>EXTPROTOCOL_GET_URL</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
		<expr_stmt><expr><name>myData</name> 			 <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extprotocol_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
		<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>url</name></name> 	 <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>parsed_url</name> 		 <operator>=</operator> <call><name>ParseDemoUri</name><argument_list>(<argument><expr><name><name>myData</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>, <argument><expr><name>p_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error: demoprot called with a different protocol (%s)"</literal></expr></argument>,
						<argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>FreeDemoUri</name><argument_list>(<argument><expr><name>parsed_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="block">/* open the destination file (or connect to remote server in other cases) */</comment>
		<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>myData</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><name><name>myData</name><operator>-&gt;</operator><name>file</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"demoprot_export: could not open file \"%s\" for writing: %m"</literal></expr></argument>,
							<argument><expr><name><name>myData</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><call><name>EXTPROTOCOL_SET_USER_CTX</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>myData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* =======================================================================
	 *                            DO THE EXPORT
	 * ======================================================================= */</comment>
	
	<expr_stmt><expr><name>data</name> 	<operator>=</operator> <call><name>EXTPROTOCOL_GET_DATABUF</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>datlen</name> 	<operator>=</operator> <call><name>EXTPROTOCOL_GET_DATALEN</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>datlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>wrote</name> <operator>=</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>datlen</name></expr></argument>, <argument><expr><name><name>myData</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name><name>myData</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"demoprot_import: could not read from file \"%s\": %m"</literal></expr></argument>,
							 <argument><expr><name><name>myData</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>		
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>wrote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> 
<name>demoprot_validate_urls</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>					<name>nurls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>					<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ValidatorDirection</name></type>	<name>direction</name></decl>;</decl_stmt>
	
	<comment type="block">/* Must be called via the external table format manager */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CALLED_AS_EXTPROTOCOL_VALIDATOR</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"demoprot_validate_urls: not called by external protocol manager"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>nurls</name> 		<operator>=</operator> <call><name>EXTPROTOCOL_VALIDATOR_GET_NUM_URLS</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>direction</name> 	<operator>=</operator> <call><name>EXTPROTOCOL_VALIDATOR_GET_DIRECTION</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/*
	 * Dumb example 1: search each url for a substring 
	 * we don't want to be used in a url. in this example
	 * it's 'secured_directory'.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nurls</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><call><name>EXTPROTOCOL_VALIDATOR_GET_NTH_URL</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"secured_directory"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"using 'secured_directory' in a url isn't allowed "</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	
	<comment type="block">/*
	 * Dumb example 2: set a limit on the number of urls 
	 * used. In this example we limit readable external
	 * tables that use our protocol to 2 urls max.
	 */</comment>
	<if_stmt><if>if<condition>(<expr><name>direction</name> <operator>==</operator> <name>EXT_VALIDATE_READ</name> <operator>&amp;&amp;</operator> <name>nurls</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"more than 2 urls aren't allowed in this protocol "</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* --- utility functions --- */</comment>

<function><type><specifier>static</specifier> 
<name>DemoUri</name> <modifier>*</modifier></type><name>ParseDemoUri</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DemoUri</name>	   <modifier>*</modifier></type><name>uri</name> <init>= <expr><operator>(</operator><name>DemoUri</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DemoUri</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>protocol_len</name></decl>;</decl_stmt>

 	<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
 	<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
 	
	<comment type="block">/*
	 * parse protocol
	 */</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>post_protocol</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>uri_str</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>post_protocol</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid demo prot URI \'%s\'"</literal></expr></argument>, <argument><expr><name>uri_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>protocol_len</name> <operator>=</operator> <name>post_protocol</name> <operator>-</operator> <name>uri_str</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name> <argument_list>(<argument><expr><name>protocol_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>, <argument><expr><name>uri_str</name></expr></argument>, <argument><expr><name>protocol_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>				

	<comment type="block">/* make sure there is more to the uri string */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>uri_str</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>protocol_len</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
		<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid demo prot URI \'%s\' : missing path"</literal></expr></argument>, <argument><expr><name>uri_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * parse path
	 */</comment>
	<expr_stmt><expr><name><name>uri</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>uri_str</name> <operator>+</operator> <name>protocol_len</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><name>uri</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>FreeDemoUri</name><parameter_list>(<parameter><decl><type><name>DemoUri</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>uri</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>uri</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
