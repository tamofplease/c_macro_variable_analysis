<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/contrib/postgres_fdw/option.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * option.c
 *		  FDW option handling for postgres_fdw
 *
 * Portions Copyright (c) 2012-2019, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *		  contrib/postgres_fdw/option.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fdw.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/reloptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_foreign_server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_foreign_table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_user_mapping.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/varlena.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Describes the valid options for objects that this wrapper uses.
 */</comment>
<typedef>typedef <type><struct>struct <name>PgFdwOption</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyword</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>optcontext</name></decl>;</decl_stmt>		<comment type="block">/* OID of catalog in which option may appear */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_libpq_opt</name></decl>;</decl_stmt>	<comment type="block">/* true if it's used in libpq */</comment>
}</block></struct></type> <name>PgFdwOption</name>;</typedef>

<comment type="block">/*
 * Valid options for postgres_fdw.
 * Allocated and filled in InitPgFdwOptions.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PgFdwOption</name> <modifier>*</modifier></type><name>postgres_fdw_options</name></decl>;</decl_stmt>

<comment type="block">/*
 * Valid options for libpq.
 * Allocated and filled in InitPgFdwOptions.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PQconninfoOption</name> <modifier>*</modifier></type><name>libpq_options</name></decl>;</decl_stmt>

<comment type="block">/*
 * Helper functions
 */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitPgFdwOptions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>is_valid_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyword</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>is_libpq_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyword</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Validate the generic options given to a FOREIGN DATA WRAPPER, SERVER,
 * USER MAPPING or FOREIGN TABLE that uses postgres_fdw.
 *
 * Raise an ERROR if the option or its value is considered invalid.
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>postgres_fdw_validator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>postgres_fdw_validator</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>options_list</name> <init>= <expr><call><name>untransformRelOptions</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>catalog</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>

	<comment type="block">/* Build our options lists if we didn't yet. */</comment>
	<expr_stmt><expr><call><name>InitPgFdwOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check that only options supported by postgres_fdw, and allowed for the
	 * current object type, are given.
	 */</comment>
	<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>options_list</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>def</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_valid_option</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Unknown option specified, complain about it. Provide a hint
			 * with list of valid options for the object.
			 */</comment>
			<decl_stmt><decl><type><name>PgFdwOption</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name>postgres_fdw_options</name></expr>;</init> <condition><expr><name><name>opt</name><operator>-&gt;</operator><name>keyword</name></name></expr>;</condition> <incr><expr><name>opt</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>catalog</name> <operator>==</operator> <name><name>opt</name><operator>-&gt;</operator><name>optcontext</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>buf</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
									 <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FDW_INVALID_OPTION_NAME</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid option \"%s\""</literal></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Valid options in this context are: %s"</literal></expr></argument>,
							 <argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Validate option value, when we can do so without any context.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"use_remote_estimate"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			<call><name>strcmp</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"updatable"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* these accept only boolean values */</comment>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>defGetBoolean</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"fdw_startup_cost"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
				 <call><name>strcmp</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"fdw_tuple_cost"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* these must have a non-negative numeric value */</comment>
			<decl_stmt><decl><type><name>double</name></type>		<name>val</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><call><name>defGetString</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>endp</name> <operator>||</operator> <name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s requires a non-negative numeric value"</literal></expr></argument>,
								<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"extensions"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* check list syntax, warn about uninstalled extensions */</comment>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ExtractExtensionList</name><argument_list>(<argument><expr><call><name>defGetString</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"fetch_size"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>fetch_size</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>fetch_size</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><call><name>defGetString</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>fetch_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s requires a non-negative integer value"</literal></expr></argument>,
								<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize option lists.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>InitPgFdwOptions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>num_libpq_opts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PQconninfoOption</name> <modifier>*</modifier></type><name>lopt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PgFdwOption</name> <modifier>*</modifier></type><name>popt</name></decl>;</decl_stmt>

	<comment type="block">/* non-libpq FDW-specific FDW options */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PgFdwOption</name></type> <name><name>non_libpq_options</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{<expr><literal type="string">"schema_name"</literal></expr>, <expr><name>ForeignTableRelationId</name></expr>, <expr><name>false</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"table_name"</literal></expr>, <expr><name>ForeignTableRelationId</name></expr>, <expr><name>false</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"column_name"</literal></expr>, <expr><name>AttributeRelationId</name></expr>, <expr><name>false</name></expr>}</block></expr>,
		<comment type="block">/* use_remote_estimate is available on both server and table */</comment>
		<expr><block>{<expr><literal type="string">"use_remote_estimate"</literal></expr>, <expr><name>ForeignServerRelationId</name></expr>, <expr><name>false</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"use_remote_estimate"</literal></expr>, <expr><name>ForeignTableRelationId</name></expr>, <expr><name>false</name></expr>}</block></expr>,
		<comment type="block">/* cost factors */</comment>
		<expr><block>{<expr><literal type="string">"fdw_startup_cost"</literal></expr>, <expr><name>ForeignServerRelationId</name></expr>, <expr><name>false</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"fdw_tuple_cost"</literal></expr>, <expr><name>ForeignServerRelationId</name></expr>, <expr><name>false</name></expr>}</block></expr>,
		<comment type="block">/* shippable extensions */</comment>
		<expr><block>{<expr><literal type="string">"extensions"</literal></expr>, <expr><name>ForeignServerRelationId</name></expr>, <expr><name>false</name></expr>}</block></expr>,
		<comment type="block">/* updatable is available on both server and table */</comment>
		<expr><block>{<expr><literal type="string">"updatable"</literal></expr>, <expr><name>ForeignServerRelationId</name></expr>, <expr><name>false</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"updatable"</literal></expr>, <expr><name>ForeignTableRelationId</name></expr>, <expr><name>false</name></expr>}</block></expr>,
		<comment type="block">/* fetch_size is available on both server and table */</comment>
		<expr><block>{<expr><literal type="string">"fetch_size"</literal></expr>, <expr><name>ForeignServerRelationId</name></expr>, <expr><name>false</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"fetch_size"</literal></expr>, <expr><name>ForeignTableRelationId</name></expr>, <expr><name>false</name></expr>}</block></expr>,
		<expr><block>{<expr><name>NULL</name></expr>, <expr><name>InvalidOid</name></expr>, <expr><name>false</name></expr>}</block></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Prevent redundant initialization. */</comment>
	<if_stmt><if>if <condition>(<expr><name>postgres_fdw_options</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Get list of valid libpq options.
	 *
	 * To avoid unnecessary work, we get the list once and use it throughout
	 * the lifetime of this backend process.  We don't need to care about
	 * memory context issues, because PQconndefaults allocates with malloc.
	 */</comment>
	<expr_stmt><expr><name>libpq_options</name> <operator>=</operator> <call><name>PQconndefaults</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>libpq_options</name></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* assume reason for failure is OOM */</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FDW_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Could not get libpq's default connection options."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Count how many libpq options are available. */</comment>
	<expr_stmt><expr><name>num_libpq_opts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>lopt</name> <operator>=</operator> <name>libpq_options</name></expr>;</init> <condition><expr><name><name>lopt</name><operator>-&gt;</operator><name>keyword</name></name></expr>;</condition> <incr><expr><name>lopt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>num_libpq_opts</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/*
	 * Construct an array which consists of all valid options for
	 * postgres_fdw, by appending FDW-specific options to libpq options.
	 *
	 * We use plain malloc here to allocate postgres_fdw_options because it
	 * lives as long as the backend process does.  Besides, keeping
	 * libpq_options in memory allows us to avoid copying every keyword
	 * string.
	 */</comment>
	<expr_stmt><expr><name>postgres_fdw_options</name> <operator>=</operator> <operator>(</operator><name>PgFdwOption</name> <operator>*</operator><operator>)</operator>
		<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PgFdwOption</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_libpq_opts</name> <operator>+</operator>
			   <sizeof>sizeof<argument_list>(<argument><expr><name>non_libpq_options</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>postgres_fdw_options</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FDW_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>popt</name> <operator>=</operator> <name>postgres_fdw_options</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>lopt</name> <operator>=</operator> <name>libpq_options</name></expr>;</init> <condition><expr><name><name>lopt</name><operator>-&gt;</operator><name>keyword</name></name></expr>;</condition> <incr><expr><name>lopt</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* Hide debug options, as well as settings we override internally. */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>lopt</name><operator>-&gt;</operator><name>dispchar</name></name></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			<call><name>strcmp</name><argument_list>(<argument><expr><name><name>lopt</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"fallback_application_name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			<call><name>strcmp</name><argument_list>(<argument><expr><name><name>lopt</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"client_encoding"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* We don't have to copy keyword string, as described above. */</comment>
		<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>keyword</name></name> <operator>=</operator> <name><name>lopt</name><operator>-&gt;</operator><name>keyword</name></name></expr>;</expr_stmt>

		<comment type="block">/*
		 * "user" and any secret options are allowed only on user mappings.
		 * Everything else is a server option.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>lopt</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>lopt</name><operator>-&gt;</operator><name>dispchar</name></name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>optcontext</name></name> <operator>=</operator> <name>UserMappingRelationId</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>optcontext</name></name> <operator>=</operator> <name>ForeignServerRelationId</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>is_libpq_opt</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>popt</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Append FDW-specific options and dummy terminator. */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>popt</name></expr></argument>, <argument><expr><name>non_libpq_options</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>non_libpq_options</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check whether the given option is one of the valid postgres_fdw options.
 * context is the Oid of the catalog holding the object the option is for.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_valid_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyword</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PgFdwOption</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>postgres_fdw_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* must be initialized already */</comment>

	<for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name>postgres_fdw_options</name></expr>;</init> <condition><expr><name><name>opt</name><operator>-&gt;</operator><name>keyword</name></name></expr>;</condition> <incr><expr><name>opt</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>context</name> <operator>==</operator> <name><name>opt</name><operator>-&gt;</operator><name>optcontext</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check whether the given option is one of the valid libpq options.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_libpq_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyword</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PgFdwOption</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>postgres_fdw_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* must be initialized already */</comment>

	<for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name>postgres_fdw_options</name></expr>;</init> <condition><expr><name><name>opt</name><operator>-&gt;</operator><name>keyword</name></name></expr>;</condition> <incr><expr><name>opt</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>is_libpq_opt</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Generate key-value arrays which include only libpq options from the
 * given list (which can contain any kind of options).  Caller must have
 * allocated large-enough arrays.  Returns number of options found.
 */</comment>
<function><type><name>int</name></type>
<name>ExtractConnectionOptions</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>defelems</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keywords</name></decl></parameter>,
						 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* Build our options lists if we didn't yet. */</comment>
	<expr_stmt><expr><call><name>InitPgFdwOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>defelems</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>is_libpq_option</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>defname</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>defGetString</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Parse a comma-separated string and return a List of the OIDs of the
 * extensions named in the string.  If any names in the list cannot be
 * found, report a warning if warnOnMissing is true, else just silently
 * ignore them.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>ExtractExtensionList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extensionsString</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>warnOnMissing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>extensionOids</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>extlist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<comment type="block">/* SplitIdentifierString scribbles on its input, so pstrdup first */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SplitIdentifierString</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>extensionsString</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>extlist</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* syntax error in name list */</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"parameter \"%s\" must be a list of extension names"</literal></expr></argument>,
						<argument><expr><literal type="string">"extensions"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>extlist</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extension_name</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>extension_oid</name> <init>= <expr><call><name>get_extension_oid</name><argument_list>(<argument><expr><name>extension_name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>extension_oid</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>extensionOids</name> <operator>=</operator> <call><name>lappend_oid</name><argument_list>(<argument><expr><name>extensionOids</name></expr></argument>, <argument><expr><name>extension_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>warnOnMissing</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"extension \"%s\" is not installed"</literal></expr></argument>,
							<argument><expr><name>extension_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>extlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>extensionOids</name></expr>;</return>
</block_content>}</block></function>
</unit>
