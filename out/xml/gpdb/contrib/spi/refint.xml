<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/contrib/spi/refint.c"><comment type="block">/*
 * contrib/spi/refint.c
 *
 *
 * refint.c --	set of functions to define referential integrity
 *		constraints using general triggers.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/spi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ident</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nplans</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SPIPlanPtr</name> <modifier>*</modifier></type><name>splan</name></decl>;</decl_stmt>
}</block></struct></type> <name>EPlan</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>EPlan</name> <modifier>*</modifier></type><name>FPlans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>nFPlans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>EPlan</name> <modifier>*</modifier></type><name>PPlans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>nPPlans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>EPlan</name> <modifier>*</modifier></type><name>find_plan</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ident</name></decl></parameter>, <parameter><decl><type><name>EPlan</name> <modifier>*</modifier><modifier>*</modifier></type><name>eplan</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nplans</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * check_primary_key () -- check that key in tuple being inserted/updated
 *			 references existing tuple in "primary" table.
 * Though it's called without args You have to specify referenced
 * table/keys while creating trigger:  key field names in triggered table,
 * referenced table name, referenced key field names:
 * EXECUTE PROCEDURE
 * check_primary_key ('Fkey1', 'Fkey2', 'Ptable', 'Pkey1', 'Pkey2').
 */</comment>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>check_primary_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>check_primary_key</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TriggerData</name> <modifier>*</modifier></type><name>trigdata</name> <init>= <expr><operator>(</operator><name>TriggerData</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Trigger</name>    <modifier>*</modifier></type><name>trigger</name></decl>;</decl_stmt>		<comment type="block">/* to get trigger name */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>nargs</name></decl>;</decl_stmt>			<comment type="block">/* # of args specified in CREATE TRIGGER */</comment>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>			<comment type="block">/* arguments: column names and table name */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>nkeys</name></decl>;</decl_stmt>			<comment type="block">/* # of key columns (= nargs / 2) */</comment>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>kvals</name></decl>;</decl_stmt>			<comment type="block">/* key values */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>relname</name></decl>;</decl_stmt>		<comment type="block">/* referenced relation name */</comment>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name></decl>;</decl_stmt>			<comment type="block">/* triggered relation */</comment>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* tuple to return */</comment>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>		<comment type="block">/* tuple description */</comment>
	<decl_stmt><decl><type><name>EPlan</name>	   <modifier>*</modifier></type><name>plan</name></decl>;</decl_stmt>			<comment type="block">/* prepared plan */</comment>
	<decl_stmt><decl><type><name>Oid</name>		   <modifier>*</modifier></type><name>argtypes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* key types to prepare execution plan */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>			<comment type="block">/* to know is some column NULL or not */</comment>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>ident</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>NAMEDATALEN</name></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* to identify myself */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DEBUG_QUERY</name></cpp:ifdef>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>, <argument><expr><literal type="string">"check_primary_key: Enter Function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Some checks first...
	 */</comment>

	<comment type="block">/* Called by trigger manager ? */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CALLED_AS_TRIGGER</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* internal error */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_primary_key: not fired by trigger manager"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Should be called for ROW trigger */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TRIGGER_FIRED_FOR_ROW</name><argument_list>(<argument><expr><name><name>trigdata</name><operator>-&gt;</operator><name>tg_event</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* internal error */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_primary_key: must be fired for row"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* If INSERTion then must check Tuple to being inserted */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>TRIGGER_FIRED_BY_INSERT</name><argument_list>(<argument><expr><name><name>trigdata</name><operator>-&gt;</operator><name>tg_event</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <name><name>trigdata</name><operator>-&gt;</operator><name>tg_trigtuple</name></name></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* Not should be called for DELETE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TRIGGER_FIRED_BY_DELETE</name><argument_list>(<argument><expr><name><name>trigdata</name><operator>-&gt;</operator><name>tg_event</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* internal error */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_primary_key: cannot process DELETE events"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* If UPDATE, then must check new Tuple, not old one */</comment>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <name><name>trigdata</name><operator>-&gt;</operator><name>tg_newtuple</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>trigger</name> <operator>=</operator> <name><name>trigdata</name><operator>-&gt;</operator><name>tg_trigger</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nargs</name> <operator>=</operator> <name><name>trigger</name><operator>-&gt;</operator><name>tgnargs</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>args</name> <operator>=</operator> <name><name>trigger</name><operator>-&gt;</operator><name>tgargs</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>nargs</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* odd number of arguments! */</comment>
		<comment type="block">/* internal error */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_primary_key: odd number of arguments should be specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>nkeys</name> <operator>=</operator> <name>nargs</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>relname</name> <operator>=</operator> <name><name>args</name><index>[<expr><name>nkeys</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rel</name> <operator>=</operator> <name><name>trigdata</name><operator>-&gt;</operator><name>tg_relation</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_att</name></name></expr>;</expr_stmt>

	<comment type="block">/* Connect to SPI manager */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>SPI_connect</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* internal error */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_primary_key: SPI_connect returned %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We use SPI plan preparation feature, so allocate space to place key
	 * values.
	 */</comment>
	<expr_stmt><expr><name>kvals</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>nkeys</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Construct ident string as TriggerName $ TriggeredRelationId and try to
	 * find prepared execution plan.
	 */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ident</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s$%u"</literal></expr></argument>, <argument><expr><name><name>trigger</name><operator>-&gt;</operator><name>tgname</name></name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>plan</name> <operator>=</operator> <call><name>find_plan</name><argument_list>(<argument><expr><name>ident</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PPlans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPPlans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if there is no plan then allocate argtypes for preparation */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>nplans</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>argtypes</name> <operator>=</operator> <operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>nkeys</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* For each column in key ... */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* get index of column in tuple */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>fnumber</name> <init>= <expr><call><name>SPI_fnumber</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Bad guys may give us un-existing column in CREATE TRIGGER */</comment>
		<if_stmt><if>if <condition>(<expr><name>fnumber</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_COLUMN</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"there is no attribute \"%s\" in relation \"%s\""</literal></expr></argument>,
							<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>SPI_getrelname</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Well, get binary (in internal format) value of column */</comment>
		<expr_stmt><expr><name><name>kvals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>fnumber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If it's NULL then nothing to do! DON'T FORGET call SPI_finish ()!
		 * DON'T FORGET return tuple! Executor inserts tuple you're returning!
		 * If you return NULL then nothing will be inserted!
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>nplans</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* Get typeId of column */</comment>
			<expr_stmt><expr><name><name>argtypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>SPI_gettypeid</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>fnumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * If we have to prepare plan ...
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>nplans</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SPIPlanPtr</name></type>	<name>pplan</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>sql</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Construct query: SELECT 1 FROM _referenced_relation_ WHERE Pkey1 =
		 * $1 [AND Pkey2 = $2 [...]]
		 */</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"select 1 from %s where "</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s = $%d %s"</literal></expr></argument>,
					 <argument><expr><name><name>args</name><index>[<expr><name>i</name> <operator>+</operator> <name>nkeys</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>nkeys</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"and "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/* Prepare plan for query */</comment>
		<expr_stmt><expr><name>pplan</name> <operator>=</operator> <call><name>SPI_prepare</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>nkeys</name></expr></argument>, <argument><expr><name>argtypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pplan</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/* internal error */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_primary_key: SPI_prepare returned %s"</literal></expr></argument>, <argument><expr><call><name>SPI_result_code_string</name><argument_list>(<argument><expr><name>SPI_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Remember that SPI_prepare places plan in current memory context -
		 * so, we have to save plan in Top memory context for later use.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>SPI_keepplan</name><argument_list>(<argument><expr><name>pplan</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/* internal error */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_primary_key: SPI_keepplan failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>splan</name></name> <operator>=</operator> <operator>(</operator><name>SPIPlanPtr</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPIPlanPtr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>plan</name><operator>-&gt;</operator><name>splan</name></name><operator>)</operator> <operator>=</operator> <name>pplan</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>nplans</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Ok, execute prepared plan.
	 */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SPI_execp</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>plan</name><operator>-&gt;</operator><name>splan</name></name><operator>)</operator></expr></argument>, <argument><expr><name>kvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* we have no NULLs - so we pass   ^^^^   here */</comment>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* internal error */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_primary_key: SPI_execp returned %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If there are no tuples returned by SELECT then ...
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>SPI_processed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TRIGGERED_ACTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"tuple references non-existent key"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Trigger \"%s\" found tuple referencing non-existent key in \"%s\"."</literal></expr></argument>, <argument><expr><name><name>trigger</name><operator>-&gt;</operator><name>tgname</name></name></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * check_foreign_key () -- check that key in tuple being deleted/updated
 *			 is not referenced by tuples in "foreign" table(s).
 * Though it's called without args You have to specify (while creating trigger):
 * number of references, action to do if key referenced
 * ('restrict' | 'setnull' | 'cascade'), key field names in triggered
 * ("primary") table and referencing table(s)/keys:
 * EXECUTE PROCEDURE
 * check_foreign_key (2, 'restrict', 'Pkey1', 'Pkey2',
 * 'Ftable1', 'Fkey11', 'Fkey12', 'Ftable2', 'Fkey21', 'Fkey22').
 */</comment>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>check_foreign_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>check_foreign_key</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TriggerData</name> <modifier>*</modifier></type><name>trigdata</name> <init>= <expr><operator>(</operator><name>TriggerData</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Trigger</name>    <modifier>*</modifier></type><name>trigger</name></decl>;</decl_stmt>		<comment type="block">/* to get trigger name */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>nargs</name></decl>;</decl_stmt>			<comment type="block">/* # of args specified in CREATE TRIGGER */</comment>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>			<comment type="block">/* arguments: as described above */</comment>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>args_temp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nrefs</name></decl>;</decl_stmt>			<comment type="block">/* number of references (== # of plans) */</comment>
	<decl_stmt><decl><type><name>char</name></type>		<name>action</name></decl>;</decl_stmt>			<comment type="block">/* 'R'estrict | 'S'etnull | 'C'ascade */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>nkeys</name></decl>;</decl_stmt>			<comment type="block">/* # of key columns */</comment>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>kvals</name></decl>;</decl_stmt>			<comment type="block">/* key values */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>relname</name></decl>;</decl_stmt>		<comment type="block">/* referencing relation name */</comment>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name></decl>;</decl_stmt>			<comment type="block">/* triggered relation */</comment>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>trigtuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* tuple to being changed */</comment>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>newtuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* tuple to return */</comment>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>		<comment type="block">/* tuple description */</comment>
	<decl_stmt><decl><type><name>EPlan</name>	   <modifier>*</modifier></type><name>plan</name></decl>;</decl_stmt>			<comment type="block">/* prepared plan(s) */</comment>
	<decl_stmt><decl><type><name>Oid</name>		   <modifier>*</modifier></type><name>argtypes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* key types to prepare execution plan */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>			<comment type="block">/* to know is some column NULL or not */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isequal</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt> <comment type="block">/* are keys in both tuples equal (in UPDATE) */</comment>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>ident</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>NAMEDATALEN</name></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* to identify myself */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>is_update</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_QUERY</name></cpp:ifdef>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>, <argument><expr><literal type="string">"check_foreign_key: Enter Function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Some checks first...
	 */</comment>

	<comment type="block">/* Called by trigger manager ? */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CALLED_AS_TRIGGER</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* internal error */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_foreign_key: not fired by trigger manager"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Should be called for ROW trigger */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TRIGGER_FIRED_FOR_ROW</name><argument_list>(<argument><expr><name><name>trigdata</name><operator>-&gt;</operator><name>tg_event</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* internal error */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_foreign_key: must be fired for row"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Not should be called for INSERT */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>TRIGGER_FIRED_BY_INSERT</name><argument_list>(<argument><expr><name><name>trigdata</name><operator>-&gt;</operator><name>tg_event</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* internal error */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_foreign_key: cannot process INSERT events"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Have to check tg_trigtuple - tuple being deleted */</comment>
	<expr_stmt><expr><name>trigtuple</name> <operator>=</operator> <name><name>trigdata</name><operator>-&gt;</operator><name>tg_trigtuple</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * But if this is UPDATE then we have to return tg_newtuple. Also, if key
	 * in tg_newtuple is the same as in tg_trigtuple then nothing to do.
	 */</comment>
	<expr_stmt><expr><name>is_update</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>TRIGGER_FIRED_BY_UPDATE</name><argument_list>(<argument><expr><name><name>trigdata</name><operator>-&gt;</operator><name>tg_event</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>newtuple</name> <operator>=</operator> <name><name>trigdata</name><operator>-&gt;</operator><name>tg_newtuple</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>is_update</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>trigger</name> <operator>=</operator> <name><name>trigdata</name><operator>-&gt;</operator><name>tg_trigger</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nargs</name> <operator>=</operator> <name><name>trigger</name><operator>-&gt;</operator><name>tgnargs</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>args</name> <operator>=</operator> <name><name>trigger</name><operator>-&gt;</operator><name>tgargs</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>nargs</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>				<comment type="block">/* nrefs, action, key, Relation, key - at
								 * least */</comment>
		<comment type="block">/* internal error */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_foreign_key: too short %d (&lt; 5) list of arguments"</literal></expr></argument>, <argument><expr><name>nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>nrefs</name> <operator>=</operator> <call><name>pg_strtoint32</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>nrefs</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* internal error */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_foreign_key: %d (&lt; 1) number of references specified"</literal></expr></argument>, <argument><expr><name>nrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>action</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <literal type="char">'r'</literal> <operator>&amp;&amp;</operator> <name>action</name> <operator>!=</operator> <literal type="char">'c'</literal> <operator>&amp;&amp;</operator> <name>action</name> <operator>!=</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* internal error */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_foreign_key: invalid action %s"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>nargs</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>args</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>nkeys</name> <operator>=</operator> <operator>(</operator><name>nargs</name> <operator>-</operator> <name>nrefs</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>nrefs</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>nkeys</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>nargs</name> <operator>!=</operator> <operator>(</operator><name>nrefs</name> <operator>+</operator> <name>nkeys</name> <operator>*</operator> <operator>(</operator><name>nrefs</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* internal error */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_foreign_key: invalid number of arguments %d for %d references"</literal></expr></argument>,
			 <argument><expr><name>nargs</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>nrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>rel</name> <operator>=</operator> <name><name>trigdata</name><operator>-&gt;</operator><name>tg_relation</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_att</name></name></expr>;</expr_stmt>

	<comment type="block">/* Connect to SPI manager */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>SPI_connect</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* internal error */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_foreign_key: SPI_connect returned %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We use SPI plan preparation feature, so allocate space to place key
	 * values.
	 */</comment>
	<expr_stmt><expr><name>kvals</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>nkeys</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Construct ident string as TriggerName $ TriggeredRelationId and try to
	 * find prepared execution plan(s).
	 */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ident</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s$%u"</literal></expr></argument>, <argument><expr><name><name>trigger</name><operator>-&gt;</operator><name>tgname</name></name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>plan</name> <operator>=</operator> <call><name>find_plan</name><argument_list>(<argument><expr><name>ident</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>FPlans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nFPlans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if there is no plan(s) then allocate argtypes for preparation */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>nplans</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>argtypes</name> <operator>=</operator> <operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>nkeys</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * else - check that we have exactly nrefs plan(s) ready
	 */</comment>
	<if type="elseif">else if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>nplans</name></name> <operator>!=</operator> <name>nrefs</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* internal error */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s: check_foreign_key: # of plans changed in meantime"</literal></expr></argument>,
			 <argument><expr><name><name>trigger</name><operator>-&gt;</operator><name>tgname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* For each column in key ... */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* get index of column in tuple */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>fnumber</name> <init>= <expr><call><name>SPI_fnumber</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Bad guys may give us un-existing column in CREATE TRIGGER */</comment>
		<if_stmt><if>if <condition>(<expr><name>fnumber</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_COLUMN</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"there is no attribute \"%s\" in relation \"%s\""</literal></expr></argument>,
							<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>SPI_getrelname</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Well, get binary (in internal format) value of column */</comment>
		<expr_stmt><expr><name><name>kvals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name>trigtuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>fnumber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If it's NULL then nothing to do! DON'T FORGET call SPI_finish ()!
		 * DON'T FORGET return tuple! Executor inserts tuple you're returning!
		 * If you return NULL then nothing will be inserted!
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>newtuple</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>trigtuple</name></expr> </then><else>: <expr><name>newtuple</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * If UPDATE then get column value from new tuple being inserted and
		 * compare is this the same as old one. For the moment we use string
		 * presentation of values...
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>newtuple</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>oldval</name> <init>= <expr><call><name>SPI_getvalue</name><argument_list>(<argument><expr><name>trigtuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>fnumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>newval</name></decl>;</decl_stmt>

			<comment type="block">/* this shouldn't happen! SPI_ERROR_NOOUTFUNC ? */</comment>
			<if_stmt><if>if <condition>(<expr><name>oldval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<comment type="block">/* internal error */</comment>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_foreign_key: SPI_getvalue returned %s"</literal></expr></argument>, <argument><expr><call><name>SPI_result_code_string</name><argument_list>(<argument><expr><name>SPI_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>SPI_getvalue</name><argument_list>(<argument><expr><name>newtuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>fnumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>newval</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>isequal</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>nplans</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* Get typeId of column */</comment>
			<expr_stmt><expr><name><name>argtypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>SPI_gettypeid</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>fnumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>args_temp</name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nargs</name> <operator>-=</operator> <name>nkeys</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>args</name> <operator>+=</operator> <name>nkeys</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we have to prepare plans ...
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>nplans</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SPIPlanPtr</name></type>	<name>pplan</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>sql</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>args2</name> <init>= <expr><name>args</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>splan</name></name> <operator>=</operator> <operator>(</operator><name>SPIPlanPtr</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>nrefs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPIPlanPtr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>nrefs</name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>relname</name> <operator>=</operator> <name><name>args2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

			<comment type="block">/*---------
			 * For 'R'estrict action we construct SELECT query:
			 *
			 *	SELECT 1
			 *	FROM _referencing_relation_
			 *	WHERE Fkey1 = $1 [AND Fkey2 = $2 [...]]
			 *
			 *	to check is tuple referenced or not.
			 *---------
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>

				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"select 1 from %s where "</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

			<comment type="block">/*---------
			 * For 'C'ascade action we construct DELETE query
			 *
			 *	DELETE
			 *	FROM _referencing_relation_
			 *	WHERE Fkey1 = $1 [AND Fkey2 = $2 [...]]
			 *
			 * to delete all referencing tuples.
			 *---------
			 */</comment>

			<comment type="block">/*
			 * Max : Cascade with UPDATE query i create update query that
			 * updates new key values in referenced tables
			 */</comment>


			<if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>is_update</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type>			<name>fn</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nv</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>k</name></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"update %s set "</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>nkeys</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int</name></type>			<name>is_char_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>fn</name> <operator>=</operator> <call><name>SPI_fnumber</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name><name>args_temp</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>fn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* already checked above */</comment>
						<expr_stmt><expr><name>nv</name> <operator>=</operator> <call><name>SPI_getvalue</name><argument_list>(<argument><expr><name>newtuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>SPI_gettype</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
							<call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"varchar"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
							<call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
							<call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"bpchar"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
							<call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"date"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
							<call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"timestamp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>is_char_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DEBUG_QUERY</name></cpp:ifdef>
						<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>, <argument><expr><literal type="string">"check_foreign_key Debug value %s type %s %d"</literal></expr></argument>,
							 <argument><expr><name>nv</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>is_char_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

						<comment type="block">/*
						 * is_char_type =1 i set ' ' for define a new value
						 */</comment>
						<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><literal type="string">" %s = %s%s%s %s "</literal></expr></argument>,
								 <argument><expr><name><name>args2</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>is_char_type</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"'"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
								 <argument><expr><name>nv</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>is_char_type</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"'"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>k</name> <operator>&lt;</operator> <name>nkeys</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></for>
					<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">" where "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<comment type="block">/* DELETE */</comment>
					<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"delete from %s where "</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			</block_content>}</block></if>

			<comment type="block">/*
			 * For 'S'etnull action we construct UPDATE query - UPDATE
			 * _referencing_relation_ SET Fkey1 null [, Fkey2 null [...]]
			 * WHERE Fkey1 = $1 [AND Fkey2 = $2 [...]] - to set key columns in
			 * all referencing tuples to NULL.
			 */</comment>
			<if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"update %s set "</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><literal type="string">"%s = null%s"</literal></expr></argument>,
							 <argument><expr><name><name>args2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>nkeys</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
				<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">" where "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Construct WHERE qual */</comment>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s = $%d %s"</literal></expr></argument>,
						 <argument><expr><name><name>args2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>nkeys</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"and "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<comment type="block">/* Prepare plan for query */</comment>
			<expr_stmt><expr><name>pplan</name> <operator>=</operator> <call><name>SPI_prepare</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>nkeys</name></expr></argument>, <argument><expr><name>argtypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>pplan</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<comment type="block">/* internal error */</comment>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_foreign_key: SPI_prepare returned %s"</literal></expr></argument>, <argument><expr><call><name>SPI_result_code_string</name><argument_list>(<argument><expr><name>SPI_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * Remember that SPI_prepare places plan in current memory context
			 * - so, we have to save plan in Top memory context for later use.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>SPI_keepplan</name><argument_list>(<argument><expr><name>pplan</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<comment type="block">/* internal error */</comment>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check_foreign_key: SPI_keepplan failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>splan</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>pplan</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>args2</name> <operator>+=</operator> <name>nkeys</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* to the next relation */</comment>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>nplans</name></name> <operator>=</operator> <name>nrefs</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DEBUG_QUERY</name></cpp:ifdef>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>, <argument><expr><literal type="string">"check_foreign_key Debug Query is :  %s "</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If UPDATE and key is not changed ...
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>newtuple</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>isequal</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>newtuple</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Ok, execute prepared plan(s).
	 */</comment>
	<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>nrefs</name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/*
		 * For 'R'estrict we may to execute plan for one tuple only, for other
		 * actions - for all tuples.
		 */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>tcount</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>action</name> <operator>==</operator> <literal type="char">'r'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>relname</name> <operator>=</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ident</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s$%u"</literal></expr></argument>, <argument><expr><name><name>trigger</name><operator>-&gt;</operator><name>tgname</name></name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>plan</name> <operator>=</operator> <call><name>find_plan</name><argument_list>(<argument><expr><name>ident</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>FPlans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nFPlans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SPI_execp</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>splan</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>, <argument><expr><name>kvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <name>tcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* we have no NULLs - so we pass   ^^^^  here */</comment>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TRIGGERED_ACTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SPI_execp returned %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* If action is 'R'estrict ... */</comment>
		<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* If there is tuple returned by SELECT then ... */</comment>
			<if_stmt><if>if <condition>(<expr><name>SPI_processed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TRIGGERED_ACTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\": tuple is referenced in \"%s\""</literal></expr></argument>,
								<argument><expr><name><name>trigger</name><operator>-&gt;</operator><name>tgname</name></name></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>REFINT_VERBOSE</name></cpp:ifdef>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal> <name>UINT64_FORMAT</name> <literal type="string">" tuple(s) of %s are %s"</literal></expr></argument>,
				 <argument><expr><name><name>trigger</name><operator>-&gt;</operator><name>tgname</name></name></expr></argument>, <argument><expr><name>SPI_processed</name></expr></argument>, <argument><expr><name>relname</name></expr></argument>,
				 <argument><expr><ternary><condition><expr><operator>(</operator><name>action</name> <operator>==</operator> <literal type="char">'c'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"deleted"</literal></expr> </then><else>: <expr><literal type="string">"set to null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>args</name> <operator>+=</operator> <name>nkeys</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>		<comment type="block">/* to the next relation */</comment>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>newtuple</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>trigtuple</name></expr> </then><else>: <expr><name>newtuple</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EPlan</name> <modifier>*</modifier></type>
<name>find_plan</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ident</name></decl></parameter>, <parameter><decl><type><name>EPlan</name> <modifier>*</modifier><modifier>*</modifier></type><name>eplan</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nplans</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EPlan</name>	   <modifier>*</modifier></type><name>newp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nplans</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>nplans</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>eplan</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>ident</name></expr></argument>, <argument><expr><name>ident</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <operator>*</operator><name>nplans</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><operator>*</operator><name>eplan</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>eplan</name> <operator>=</operator> <operator>(</operator><name>EPlan</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><operator>*</operator><name>eplan</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>EPlan</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>newp</name> <operator>=</operator> <operator>*</operator><name>eplan</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>newp</name> <operator>=</operator> <operator>*</operator><name>eplan</name> <operator>=</operator> <operator>(</operator><name>EPlan</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EPlan</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>nplans</name><operator>)</operator> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>ident</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>nplans</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>splan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>nplans</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>newp</name></expr>;</return>
</block_content>}</block></function>
</unit>
