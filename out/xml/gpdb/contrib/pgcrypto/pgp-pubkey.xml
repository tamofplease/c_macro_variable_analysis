<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/contrib/pgcrypto/pgp-pubkey.c"><comment type="block">/*
 * pgp-pubkey.c
 *	  Read public or secret key.
 *
 * Copyright (c) 2005 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/pgp-pubkey.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgp.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>pgp_key_alloc</name><parameter_list>(<parameter><decl><type><name>PGP_PubKey</name> <modifier>*</modifier><modifier>*</modifier></type><name>pk_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pk</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>pk_p</name> <operator>=</operator> <name>pk</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pgp_key_free</name><parameter_list>(<parameter><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>pk</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>algo</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGP_PUB_ELG_ENCRYPT</name></expr>:</case>
			<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>elg</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGP_PUB_RSA_SIGN</name></expr>:</case>
		<case>case <expr><name>PGP_PUB_RSA_ENCRYPT</name></expr>:</case>
		<case>case <expr><name>PGP_PUB_RSA_ENCRYPT_SIGN</name></expr>:</case>
			<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGP_PUB_DSA_SIGN</name></expr>:</case>
			<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dsa</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dsa</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dsa</name><operator>.</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dsa</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>dsa</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>pk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>calc_key_id</name><parameter_list>(<parameter><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PX_MD</name>	   <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>hdr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>hash</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_load_digest</name><argument_list>(<argument><expr><name>PGP_DIGEST_SHA1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>algo</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGP_PUB_ELG_ENCRYPT</name></expr>:</case>
			<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>g</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>y</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGP_PUB_RSA_SIGN</name></expr>:</case>
		<case>case <expr><name>PGP_PUB_RSA_ENCRYPT</name></expr>:</case>
		<case>case <expr><name>PGP_PUB_RSA_ENCRYPT_SIGN</name></expr>:</case>
			<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGP_PUB_DSA_SIGN</name></expr>:</case>
			<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dsa</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dsa</name><operator>.</operator><name>q</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dsa</name><operator>.</operator><name>g</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dsa</name><operator>.</operator><name>y</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><name><name>hdr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x99</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>ver</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>time</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>algo</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>algo</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGP_PUB_ELG_ENCRYPT</name></expr>:</case>
			<expr_stmt><expr><call><name>pgp_mpi_hash</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_hash</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_hash</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGP_PUB_RSA_SIGN</name></expr>:</case>
		<case>case <expr><name>PGP_PUB_RSA_ENCRYPT</name></expr>:</case>
		<case>case <expr><name>PGP_PUB_RSA_ENCRYPT_SIGN</name></expr>:</case>
			<expr_stmt><expr><call><name>pgp_mpi_hash</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_hash</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGP_PUB_DSA_SIGN</name></expr>:</case>
			<expr_stmt><expr><call><name>pgp_mpi_hash</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dsa</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_hash</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dsa</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_hash</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dsa</name><operator>.</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_hash</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dsa</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>px_md_finish</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_md_free</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key_id</name></name></expr></argument>, <argument><expr><name>hash</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_pgp_read_public_key</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>PGP_PubKey</name> <modifier>*</modifier><modifier>*</modifier></type><name>pk_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_key_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* get version */</comment>
	<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>ver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>ver</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_NOT_V4_KEYPKT</name></expr>;</expr_stmt>
		<goto>goto <name>out</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* read time */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read_fixed</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* pubkey algorithm */</comment>
	<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>algo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>algo</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGP_PUB_DSA_SIGN</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_read</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dsa</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_read</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dsa</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_read</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dsa</name><operator>.</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_read</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dsa</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calc_key_id</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>PGP_PUB_RSA_SIGN</name></expr>:</case>
		<case>case <expr><name>PGP_PUB_RSA_ENCRYPT</name></expr>:</case>
		<case>case <expr><name>PGP_PUB_RSA_ENCRYPT_SIGN</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_read</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_read</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calc_key_id</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>algo</name></name> <operator>!=</operator> <name>PGP_PUB_RSA_SIGN</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>can_encrypt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>PGP_PUB_ELG_ENCRYPT</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_read</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_read</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_read</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calc_key_id</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>can_encrypt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"unknown public algo: %d"</literal></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>algo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_UNKNOWN_PUBALGO</name></expr>;</expr_stmt>
	</block_content>}</block></switch>

<label><name>out</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pgp_key_free</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>pk_p</name> <operator>=</operator> <name>pk</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIDE_CLEAR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIDE_CKSUM</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIDE_SHA1</name></cpp:macro> <cpp:value>254</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_key_sha1</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>got_sha1</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>my_sha1</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PX_MD</name>	   <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read_fixed</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>got_sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_load_digest</name><argument_list>(<argument><expr><name>PGP_DIGEST_SHA1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
	<switch>switch <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>algo</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGP_PUB_ELG_ENCRYPT</name></expr>:</case>
			<expr_stmt><expr><call><name>pgp_mpi_hash</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>elg</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGP_PUB_RSA_SIGN</name></expr>:</case>
		<case>case <expr><name>PGP_PUB_RSA_ENCRYPT</name></expr>:</case>
		<case>case <expr><name>PGP_PUB_RSA_ENCRYPT_SIGN</name></expr>:</case>
			<expr_stmt><expr><call><name>pgp_mpi_hash</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_hash</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_hash</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pgp_mpi_hash</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGP_PUB_DSA_SIGN</name></expr>:</case>
			<expr_stmt><expr><call><name>pgp_mpi_hash</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>dsa</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>px_md_finish</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>my_sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_md_free</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>my_sha1</name></expr></argument>, <argument><expr><name>got_sha1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"key sha1 check failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_KEYPKT_CORRUPT</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>err</name>:</label>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>got_sha1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>my_sha1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_key_cksum</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>got_cksum</name></decl>,
				<decl><type ref="prev"/><name>my_cksum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read_fixed</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>got_cksum</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>algo</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGP_PUB_ELG_ENCRYPT</name></expr>:</case>
			<expr_stmt><expr><name>my_cksum</name> <operator>=</operator> <call><name>pgp_mpi_cksum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>elg</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGP_PUB_RSA_SIGN</name></expr>:</case>
		<case>case <expr><name>PGP_PUB_RSA_ENCRYPT</name></expr>:</case>
		<case>case <expr><name>PGP_PUB_RSA_ENCRYPT_SIGN</name></expr>:</case>
			<expr_stmt><expr><name>my_cksum</name> <operator>=</operator> <call><name>pgp_mpi_cksum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>my_cksum</name> <operator>=</operator> <call><name>pgp_mpi_cksum</name><argument_list>(<argument><expr><name>my_cksum</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>my_cksum</name> <operator>=</operator> <call><name>pgp_mpi_cksum</name><argument_list>(<argument><expr><name>my_cksum</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>my_cksum</name> <operator>=</operator> <call><name>pgp_mpi_cksum</name><argument_list>(<argument><expr><name>my_cksum</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGP_PUB_DSA_SIGN</name></expr>:</case>
			<expr_stmt><expr><name>my_cksum</name> <operator>=</operator> <call><name>pgp_mpi_cksum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>dsa</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<if_stmt><if>if <condition>(<expr><name>my_cksum</name> <operator>!=</operator> <name>got_cksum</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"key cksum check failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_KEYPKT_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_secret_key</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>PGP_PubKey</name> <modifier>*</modifier><modifier>*</modifier></type><name>pk_p</name></decl></parameter>,
				   <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>hide_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cipher_algo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>iv</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pf_decrypt</name> <init>= <expr><name>NULL</name></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pf_key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_CFB</name>    <modifier>*</modifier></type><name>cfb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_S2K</name></type>		<name>s2k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>

	<comment type="block">/* first read public key part */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_pgp_read_public_key</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * is secret key encrypted?
	 */</comment>
	<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>hide_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>hide_type</name> <operator>==</operator> <name>HIDE_SHA1</name> <operator>||</operator> <name>hide_type</name> <operator>==</operator> <name>HIDE_CKSUM</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>PXE_PGP_NEED_SECRET_PSW</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>cipher_algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_s2k_read</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_s2k_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s2k</name></expr></argument>, <argument><expr><name>cipher_algo</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>pgp_get_cipher_block_size</name><argument_list>(<argument><expr><name>cipher_algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>bs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"unknown cipher algo=%d"</literal></expr></argument>, <argument><expr><name>cipher_algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>PXE_PGP_UNSUPPORTED_CIPHER</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read_fixed</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * create decrypt filter
		 */</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_cfb_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfb</name></expr></argument>, <argument><expr><name>cipher_algo</name></expr></argument>, <argument><expr><name><name>s2k</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>s2k</name><operator>.</operator><name>key_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pf_decrypt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgp_decrypt_filter</name></expr></argument>, <argument><expr><name>cfb</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>pf_key</name> <operator>=</operator> <name>pf_decrypt</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>hide_type</name> <operator>==</operator> <name>HIDE_CLEAR</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>pf_key</name> <operator>=</operator> <name>pkt</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"unknown hide type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_KEYPKT_CORRUPT</name></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* read secret key */</comment>
	<switch>switch <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>algo</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGP_PUB_RSA_SIGN</name></expr>:</case>
		<case>case <expr><name>PGP_PUB_RSA_ENCRYPT</name></expr>:</case>
		<case>case <expr><name>PGP_PUB_RSA_ENCRYPT_SIGN</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_read</name><argument_list>(<argument><expr><name>pf_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_read</name><argument_list>(<argument><expr><name>pf_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_read</name><argument_list>(<argument><expr><name>pf_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_read</name><argument_list>(<argument><expr><name>pf_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>PGP_PUB_ELG_ENCRYPT</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_read</name><argument_list>(<argument><expr><name>pf_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>elg</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGP_PUB_DSA_SIGN</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_read</name><argument_list>(<argument><expr><name>pf_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>dsa</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"unknown public algo: %d"</literal></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>algo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_KEYPKT_CORRUPT</name></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<comment type="block">/* read checksum / sha1 */</comment>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>hide_type</name> <operator>==</operator> <name>HIDE_SHA1</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>check_key_sha1</name><argument_list>(<argument><expr><name>pf_key</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>check_key_cksum</name><argument_list>(<argument><expr><name>pf_key</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_expect_packet_end</name><argument_list>(<argument><expr><name>pf_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>pf_decrypt</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pullf_free</name><argument_list>(<argument><expr><name>pf_decrypt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>cfb</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pgp_cfb_free</name><argument_list>(<argument><expr><name>cfb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pgp_key_free</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>pk_p</name> <operator>=</operator> <name>pk</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>internal_read_key</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>PGP_PubKey</name> <modifier>*</modifier><modifier>*</modifier></type><name>pk_p</name></decl></parameter>,
				  <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>psw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>psw_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pubtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>enc_key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>got_main_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Search for encryption key.
	 *
	 * Error out on anything fancy.
	 */</comment>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_parse_pkt_hdr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_create_pkt_reader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<switch>switch <condition>(<expr><name>tag</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>PGP_PKT_PUBLIC_KEY</name></expr>:</case>
			<case>case <expr><name>PGP_PKT_SECRET_KEY</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>got_main_key</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_MULTIPLE_KEYS</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>got_main_key</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_skip_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>PGP_PKT_PUBLIC_SUBKEY</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>pubtype</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_EXPECT_SECRET_KEY</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_pgp_read_public_key</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>

			<case>case <expr><name>PGP_PKT_SECRET_SUBKEY</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>pubtype</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_EXPECT_PUBLIC_KEY</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>process_secret_key</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>, <argument><expr><name>psw</name></expr></argument>, <argument><expr><name>psw_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>

			<case>case <expr><name>PGP_PKT_SIGNATURE</name></expr>:</case>
			<case>case <expr><name>PGP_PKT_MARKER</name></expr>:</case>
			<case>case <expr><name>PGP_PKT_TRUST</name></expr>:</case>
			<case>case <expr><name>PGP_PKT_USER_ID</name></expr>:</case>
			<case>case <expr><name>PGP_PKT_USER_ATTR</name></expr>:</case>
			<case>case <expr><name>PGP_PKT_PRIV_61</name></expr>:</case>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_skip_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"unknown/unexpected packet: %d"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_UNEXPECTED_PKT</name></expr>;</expr_stmt>
		</block_content>}</block></switch>
		<expr_stmt><expr><call><name>pullf_free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pkt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>pk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pk</name><operator>-&gt;</operator><name>can_encrypt</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>enc_key</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>enc_key</name> <operator>=</operator> <name>pk</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>pk</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_MULTIPLE_SUBKEYS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>pk</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pgp_key_free</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>pk</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>pkt</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pullf_free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>enc_key</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pgp_key_free</name><argument_list>(<argument><expr><name>enc_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>res</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc_key</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_NO_USABLE_KEY</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>pk_p</name> <operator>=</operator> <name>enc_key</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_set_pubkey</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>keypkt</name></decl></parameter>,
			   <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pubtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_create_mbuf_reader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><name>keypkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>internal_read_key</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>pubtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pullf_free</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pub_key</name></name> <operator>=</operator> <name>pk</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>res</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
