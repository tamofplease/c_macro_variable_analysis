<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/contrib/pgcrypto/pgp-cfb.c"><comment type="block">/*
 * pgp-cfb.c
 *	  Implements both normal and PGP-specific CFB mode.
 *
 * Copyright (c) 2005 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/pgp-cfb.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgp.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mix_data_t</name>) <parameter_list>(<parameter><decl><type><name>PGP_CFB</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>PGP_CFB</name>
<block>{
	<decl_stmt><decl><type><name>PX_Cipher</name>  <modifier>*</modifier></type><name>ciph</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>block_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>block_no</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>resync</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>fr</name><index>[<expr><name>PGP_MAX_BLOCK</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>fre</name><index>[<expr><name>PGP_MAX_BLOCK</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>encbuf</name><index>[<expr><name>PGP_MAX_BLOCK</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type>
<name>pgp_cfb_create</name><parameter_list>(<parameter><decl><type><name>PGP_CFB</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx_p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>,
			   <parameter><decl><type><name>int</name></type> <name>resync</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PX_Cipher</name>  <modifier>*</modifier></type><name>ciph</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_CFB</name>    <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_load_cipher</name><argument_list>(<argument><expr><name>algo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ciph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_cipher_init</name><argument_list>(<argument><expr><name>ciph</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_cipher_free</name><argument_list>(<argument><expr><name>ciph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>res</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ciph</name></name> <operator>=</operator> <name>ciph</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <call><name>px_cipher_block_size</name><argument_list>(<argument><expr><name>ciph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>resync</name></name> <operator>=</operator> <name>resync</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fr</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>ctx_p</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pgp_cfb_free</name><parameter_list>(<parameter><decl><type><name>PGP_CFB</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>px_cipher_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ciph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Data processing for normal CFB.  (PGP_PKT_SYMENCRYPTED_DATA_MDC)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>mix_encrypt_normal</name><parameter_list>(<parameter><decl><type><name>PGP_CFB</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>*</operator><name>data</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mix_decrypt_normal</name><parameter_list>(<parameter><decl><type><name>PGP_CFB</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Data processing for old PGP CFB mode. (PGP_PKT_SYMENCRYPTED_DATA)
 *
 * The goal is to hide the horror from the rest of the code,
 * thus its all concentrated here.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>mix_encrypt_resync</name><parameter_list>(<parameter><decl><type><name>PGP_CFB</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<comment type="block">/* block #2 is 2 bytes long */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>block_no</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>*</operator><name>data</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encbuf</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fr</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>block_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encbuf</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return <expr><name>n</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>*</operator><name>data</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mix_decrypt_resync</name><parameter_list>(<parameter><decl><type><name>PGP_CFB</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<comment type="block">/* block #2 is 2 bytes long */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>block_no</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encbuf</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fr</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>block_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encbuf</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return <expr><name>n</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * common code for both encrypt and decrypt.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cfb_process</name><parameter_list>(<parameter><decl><type><name>PGP_CFB</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
			<parameter><decl><type><name>mix_data_t</name></type> <name>mix_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>block_size</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>mix_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>block_size</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encbuf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_cipher_encrypt</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ciph</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fre</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>block_no</name></name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>block_no</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mix_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>block_size</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encbuf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * public interface
 */</comment>

<function><type><name>int</name></type>
<name>pgp_cfb_encrypt</name><parameter_list>(<parameter><decl><type><name>PGP_CFB</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mix_data_t</name></type>	<name>mix</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>resync</name></name></expr> ?</condition><then> <expr><name>mix_encrypt_resync</name></expr> </then><else>: <expr><name>mix_encrypt_normal</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>cfb_process</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_cfb_decrypt</name><parameter_list>(<parameter><decl><type><name>PGP_CFB</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mix_data_t</name></type>	<name>mix</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>resync</name></name></expr> ?</condition><then> <expr><name>mix_decrypt_resync</name></expr> </then><else>: <expr><name>mix_decrypt_normal</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>cfb_process</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>mix</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
