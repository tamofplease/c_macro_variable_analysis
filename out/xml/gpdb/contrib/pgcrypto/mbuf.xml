<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/contrib/pgcrypto/mbuf.c"><comment type="block">/*
 * mbuf.c
 *		Memory buffer operations.
 *
 * Copyright (c) 2005 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/mbuf.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mbuf.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STEP</name></cpp:macro>  <cpp:value>(16*1024)</cpp:value></cpp:define>

<struct>struct <name>MBuf</name>
<block>{
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>data_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>read_pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>buf_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>no_write</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>own_data</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type>
<name>mbuf_avail</name><parameter_list>(<parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>mbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>mbuf</name><operator>-&gt;</operator><name>data_end</name></name> <operator>-</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>read_pos</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mbuf_size</name><parameter_list>(<parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>mbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>mbuf</name><operator>-&gt;</operator><name>data_end</name></name> <operator>-</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mbuf_tell</name><parameter_list>(<parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>mbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>mbuf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>-</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mbuf_free</name><parameter_list>(<parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>mbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>mbuf</name><operator>-&gt;</operator><name>own_data</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>mbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>prepare_room</name><parameter_list>(<parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>mbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>newbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>newlen</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>mbuf</name><operator>-&gt;</operator><name>data_end</name></name> <operator>+</operator> <name>block_len</name> <operator>&lt;=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>buf_end</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>newlen</name> <operator>=</operator> <operator>(</operator><name><name>mbuf</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator>
		<operator>+</operator> <operator>(</operator><operator>(</operator><name>block_len</name> <operator>+</operator> <name>STEP</name> <operator>+</operator> <name>STEP</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>STEP</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>newbuf</name> <operator>=</operator> <call><name>px_realloc</name><argument_list>(<argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name>newbuf</name> <operator>+</operator> <name>newlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>data_end</name></name> <operator>=</operator> <name>newbuf</name> <operator>+</operator> <operator>(</operator><name><name>mbuf</name><operator>-&gt;</operator><name>data_end</name></name> <operator>-</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>=</operator> <name>newbuf</name> <operator>+</operator> <operator>(</operator><name><name>mbuf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>-</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>newbuf</name></expr>;</expr_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mbuf_append</name><parameter_list>(<parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>no_write</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"mbuf_append: no_write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_BUG</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>prepare_room</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data_end</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data_end</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>MBuf</name> <modifier>*</modifier></type>
<name>mbuf_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MBuf</name>	   <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">8192</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>mbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>data_end</name></name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>no_write</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>own_data</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<return>return <expr><name>mbuf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MBuf</name> <modifier>*</modifier></type>
<name>mbuf_create_from_data</name><parameter_list>(<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MBuf</name>	   <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>mbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>data_end</name></name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>no_write</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>own_data</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<return>return <expr><name>mbuf</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>mbuf_grab</name><parameter_list>(<parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>mbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>data_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <call><name>mbuf_avail</name><argument_list>(<argument><expr><name>mbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mbuf_avail</name><argument_list>(<argument><expr><name>mbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>no_write</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>data_p</name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>read_pos</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mbuf_rewind</name><parameter_list>(<parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>mbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mbuf_steal_data</name><parameter_list>(<parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>mbuf</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>data_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><call><name>mbuf_size</name><argument_list>(<argument><expr><name>mbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>no_write</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>own_data</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>data_p</name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>data_end</name></name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PullFilter
 */</comment>

<struct>struct <name>PullFilter</name>
<block>{
	<decl_stmt><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>PullFilterOps</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>buflen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type>
<name>pullf_create</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>pf_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PullFilterOps</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>init_arg</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>init</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>op</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>priv</name></expr></argument>, <argument><expr><name>init_arg</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>priv</name> <operator>=</operator> <name>init_arg</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>buflen</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>pf</name><operator>-&gt;</operator><name>buflen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><name><name>pf</name><operator>-&gt;</operator><name>buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>pf_p</name> <operator>=</operator> <name>pf</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pullf_free</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>pf</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>free</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>pf</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name><name>pf</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pf</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name><name>pf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pf</name><operator>-&gt;</operator><name>buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name><name>pf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* may return less data than asked, 0 means eof */</comment>
<function><type><name>int</name></type>
<name>pullf_read</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>data_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pf</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>pull</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pf</name><operator>-&gt;</operator><name>buflen</name></name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <name><name>pf</name><operator>-&gt;</operator><name>buflen</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>pf</name><operator>-&gt;</operator><name>buflen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>pf</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>pull</name></name><argument_list>(<argument><expr><name><name>pf</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><name><name>pf</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>data_p</name></expr></argument>,
						   <argument><expr><name><name>pf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pf</name><operator>-&gt;</operator><name>buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read</name><argument_list>(<argument><expr><name><name>pf</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>data_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pullf_read_max</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>data_p</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>tmpbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>,
				<decl><type ref="prev"/><name>total</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>data_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>res</name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* read was shorter, use tmpbuf */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><operator>*</operator><name>data_p</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>data_p</name> <operator>=</operator> <name>tmpbuf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>total</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* so the caller must clear only on success */</comment>
			<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>res</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmpbuf</name> <operator>+</operator> <name>total</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>total</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * caller wants exactly len bytes and don't bother with references
 */</comment>
<function><type><name>int</name></type>
<name>pullf_read_fixed</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read_max</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>len</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"pullf_read_fixed: need=%d got=%d"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>dst</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * read from MBuf
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pull_from_mbuf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
			   <parameter><decl><type><name>uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>data_p</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MBuf</name>	   <modifier>*</modifier></type><name>mbuf</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>mbuf_grab</name><argument_list>(<argument><expr><name>mbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>data_p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>PullFilterOps</name></name></type> <name>mbuf_reader</name> <init>= <expr><block>{
	<expr><name>NULL</name></expr>, <expr><name>pull_from_mbuf</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>pullf_create_mbuf_reader</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>mp_p</name></decl></parameter>, <parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>pullf_create</name><argument_list>(<argument><expr><name>mp_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbuf_reader</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * PushFilter
 */</comment>

<struct>struct <name>PushFilter</name>
<block>{
	<decl_stmt><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>PushFilterOps</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>block_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type>
<name>pushf_create</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>mp_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PushFilterOps</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>init_arg</name></decl></parameter>, <parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>init</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>op</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>init_arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>priv</name> <operator>=</operator> <name>init_arg</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>mp</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>block_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>mp_p</name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pushf_free</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>free</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>mp</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pushf_free_all</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>mp</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pushf_free</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>wrap_process</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>push</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>mp</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>push</name></name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_BUG</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* consumes all data, returns len on success */</comment>
<function><type><name>int</name></type>
<name>pushf_write</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>need</name></decl>,
				<decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * no buffering
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>block_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>wrap_process</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * try to empty buffer
	 */</comment>
	<expr_stmt><expr><name>need</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>block_size</name></name> <operator>-</operator> <name><name>mp</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>need</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>need</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>mp</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>mp</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>need</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>need</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>need</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * buffer full, process
	 */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>wrap_process</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * now process directly from data
	 */</comment>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>mp</name><operator>-&gt;</operator><name>block_size</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>wrap_process</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>mp</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <name><name>mp</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pushf_flush</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>mp</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>block_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>wrap_process</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>flush</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>mp</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>flush</name></name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * write to MBuf
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>push_into_mbuf</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBuf</name>	   <modifier>*</modifier></type><name>mbuf</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mbuf_append</name><argument_list>(<argument><expr><name>mbuf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>res</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>PushFilterOps</name></name></type> <name>mbuf_filter</name> <init>= <expr><block>{
	<expr><name>NULL</name></expr>, <expr><name>push_into_mbuf</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>pushf_create_mbuf_writer</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>pushf_create</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbuf_filter</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
