<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/contrib/pgcrypto/internal-sha2.c"><comment type="block">/*
 * internal.c
 *		Wrapper for builtin functions
 *
 * Copyright (c) 2001 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/internal-sha2.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/sha2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type>		<name>init_sha224</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>init_sha256</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>init_sha384</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>init_sha512</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* SHA224 */</comment>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>int_sha224_len</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>PG_SHA224_DIGEST_LENGTH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>int_sha224_block_len</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>PG_SHA224_BLOCK_LENGTH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha224_update</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha224_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>pg_sha224_ctx</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_sha224_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha224_reset</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha224_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>pg_sha224_ctx</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_sha224_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha224_finish</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha224_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>pg_sha224_ctx</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_sha224_final</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha224_free</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha224_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>pg_sha224_ctx</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* SHA256 */</comment>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>int_sha256_len</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>PG_SHA256_DIGEST_LENGTH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>int_sha256_block_len</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>PG_SHA256_BLOCK_LENGTH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha256_update</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha256_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>pg_sha256_ctx</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_sha256_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha256_reset</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha256_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>pg_sha256_ctx</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_sha256_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha256_finish</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha256_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>pg_sha256_ctx</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_sha256_final</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha256_free</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha256_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>pg_sha256_ctx</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* SHA384 */</comment>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>int_sha384_len</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>PG_SHA384_DIGEST_LENGTH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>int_sha384_block_len</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>PG_SHA384_BLOCK_LENGTH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha384_update</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha384_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>pg_sha384_ctx</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_sha384_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha384_reset</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha384_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>pg_sha384_ctx</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_sha384_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha384_finish</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha384_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>pg_sha384_ctx</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_sha384_final</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha384_free</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha384_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>pg_sha384_ctx</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* SHA512 */</comment>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>int_sha512_len</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>PG_SHA512_DIGEST_LENGTH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>int_sha512_block_len</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>PG_SHA512_BLOCK_LENGTH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha512_update</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha512_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>pg_sha512_ctx</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_sha512_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha512_reset</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha512_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>pg_sha512_ctx</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_sha512_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha512_finish</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha512_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>pg_sha512_ctx</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_sha512_final</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha512_free</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha512_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>pg_sha512_ctx</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* init functions */</comment>

<function><type><name>void</name></type>
<name>init_sha224</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha224_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>result_size</name></name> <operator>=</operator> <name>int_sha224_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name>int_sha224_block_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <name>int_sha224_reset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>int_sha224_update</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <name>int_sha224_finish</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>int_sha224_free</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>md</name><operator>-&gt;</operator><name>reset</name></name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>init_sha256</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha256_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>result_size</name></name> <operator>=</operator> <name>int_sha256_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name>int_sha256_block_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <name>int_sha256_reset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>int_sha256_update</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <name>int_sha256_finish</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>int_sha256_free</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>md</name><operator>-&gt;</operator><name>reset</name></name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>init_sha384</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha384_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>result_size</name></name> <operator>=</operator> <name>int_sha384_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name>int_sha384_block_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <name>int_sha384_reset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>int_sha384_update</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <name>int_sha384_finish</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>int_sha384_free</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>md</name><operator>-&gt;</operator><name>reset</name></name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>init_sha512</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_sha512_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>result_size</name></name> <operator>=</operator> <name>int_sha512_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name>int_sha512_block_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <name>int_sha512_reset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>int_sha512_update</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <name>int_sha512_finish</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>int_sha512_free</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>md</name><operator>-&gt;</operator><name>reset</name></name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
