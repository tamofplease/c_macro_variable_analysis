<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/contrib/hstore_plpython/hstore_plpython.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpython.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_typeio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hstore/hstore.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Linkage to functions in plpython module */</comment>
<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>PLyObject_AsString_t</name>) <parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PLyObject_AsString_t</name></type> <name>PLyObject_AsString_p</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>
<typedef>typedef <function_decl><type><name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>PLyUnicode_FromStringAndSize_t</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PLyUnicode_FromStringAndSize_t</name></type> <name>PLyUnicode_FromStringAndSize_p</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Linkage to functions in hstore module */</comment>
<typedef>typedef <function_decl><type><name>HStore</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>hstoreUpgrade_t</name>) <parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>orig</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>hstoreUpgrade_t</name></type> <name>hstoreUpgrade_p</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hstoreUniquePairs_t</name>) <parameter_list>(<parameter><decl><type><name>Pairs</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>buflen</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>hstoreUniquePairs_t</name></type> <name>hstoreUniquePairs_p</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>HStore</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>hstorePairs_t</name>) <parameter_list>(<parameter><decl><type><name>Pairs</name> <modifier>*</modifier></type><name>pairs</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>pcount</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>buflen</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>hstorePairs_t</name></type> <name>hstorePairs_p</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>hstoreCheckKeyLen_t</name>) <parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>hstoreCheckKeyLen_t</name></type> <name>hstoreCheckKeyLen_p</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>hstoreCheckValLen_t</name>) <parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>hstoreCheckValLen_t</name></type> <name>hstoreCheckValLen_p</name></decl>;</decl_stmt>


<comment type="block">/*
 * Module initialize function: fetch function pointers for cross-module calls.
 */</comment>
<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Asserts verify that typedefs above match original declarations */</comment>
	<expr_stmt><expr><call><name>AssertVariableIsOfType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PLyObject_AsString</name></expr></argument>, <argument><expr><name>PLyObject_AsString_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>PLyObject_AsString_p</name> <operator>=</operator> <operator>(</operator><name>PLyObject_AsString_t</name><operator>)</operator>
		<call><name>load_external_function</name><argument_list>(<argument><expr><literal type="string">"$libdir/"</literal> <name>PLPYTHON_LIBNAME</name></expr></argument>, <argument><expr><literal type="string">"PLyObject_AsString"</literal></expr></argument>,
							   <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>
	<expr_stmt><expr><call><name>AssertVariableIsOfType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PLyUnicode_FromStringAndSize</name></expr></argument>, <argument><expr><name>PLyUnicode_FromStringAndSize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>PLyUnicode_FromStringAndSize_p</name> <operator>=</operator> <operator>(</operator><name>PLyUnicode_FromStringAndSize_t</name><operator>)</operator>
		<call><name>load_external_function</name><argument_list>(<argument><expr><literal type="string">"$libdir/"</literal> <name>PLPYTHON_LIBNAME</name></expr></argument>, <argument><expr><literal type="string">"PLyUnicode_FromStringAndSize"</literal></expr></argument>,
							   <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>AssertVariableIsOfType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hstoreUpgrade</name></expr></argument>, <argument><expr><name>hstoreUpgrade_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hstoreUpgrade_p</name> <operator>=</operator> <operator>(</operator><name>hstoreUpgrade_t</name><operator>)</operator>
		<call><name>load_external_function</name><argument_list>(<argument><expr><literal type="string">"$libdir/hstore"</literal></expr></argument>, <argument><expr><literal type="string">"hstoreUpgrade"</literal></expr></argument>,
							   <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertVariableIsOfType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hstoreUniquePairs</name></expr></argument>, <argument><expr><name>hstoreUniquePairs_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hstoreUniquePairs_p</name> <operator>=</operator> <operator>(</operator><name>hstoreUniquePairs_t</name><operator>)</operator>
		<call><name>load_external_function</name><argument_list>(<argument><expr><literal type="string">"$libdir/hstore"</literal></expr></argument>, <argument><expr><literal type="string">"hstoreUniquePairs"</literal></expr></argument>,
							   <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertVariableIsOfType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hstorePairs</name></expr></argument>, <argument><expr><name>hstorePairs_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hstorePairs_p</name> <operator>=</operator> <operator>(</operator><name>hstorePairs_t</name><operator>)</operator>
		<call><name>load_external_function</name><argument_list>(<argument><expr><literal type="string">"$libdir/hstore"</literal></expr></argument>, <argument><expr><literal type="string">"hstorePairs"</literal></expr></argument>,
							   <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertVariableIsOfType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hstoreCheckKeyLen</name></expr></argument>, <argument><expr><name>hstoreCheckKeyLen_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hstoreCheckKeyLen_p</name> <operator>=</operator> <operator>(</operator><name>hstoreCheckKeyLen_t</name><operator>)</operator>
		<call><name>load_external_function</name><argument_list>(<argument><expr><literal type="string">"$libdir/hstore"</literal></expr></argument>, <argument><expr><literal type="string">"hstoreCheckKeyLen"</literal></expr></argument>,
							   <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertVariableIsOfType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hstoreCheckValLen</name></expr></argument>, <argument><expr><name>hstoreCheckValLen_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hstoreCheckValLen_p</name> <operator>=</operator> <operator>(</operator><name>hstoreCheckValLen_t</name><operator>)</operator>
		<call><name>load_external_function</name><argument_list>(<argument><expr><literal type="string">"$libdir/hstore"</literal></expr></argument>, <argument><expr><literal type="string">"hstoreCheckValLen"</literal></expr></argument>,
							   <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* These defines must be after the module init function */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLyObject_AsString</name></cpp:macro> <cpp:value>PLyObject_AsString_p</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLyUnicode_FromStringAndSize</name></cpp:macro> <cpp:value>PLyUnicode_FromStringAndSize_p</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hstoreUpgrade</name></cpp:macro> <cpp:value>hstoreUpgrade_p</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hstoreUniquePairs</name></cpp:macro> <cpp:value>hstoreUniquePairs_p</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hstorePairs</name></cpp:macro> <cpp:value>hstorePairs_p</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hstoreCheckKeyLen</name></cpp:macro> <cpp:value>hstoreCheckKeyLen_p</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hstoreCheckValLen</name></cpp:macro> <cpp:value>hstoreCheckValLen_p</cpp:value></cpp:define>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_to_plpython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>hstore_to_plpython</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>count</name> <init>= <expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dict</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
										 <argument><expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><call><name>HSTORE_VAL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
											   <argument><expr><call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plpython_to_hstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>plpython_to_hstore</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier><specifier>volatile</specifier></type> <name>items</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Py_ssize_t</name></type>	<name>pcount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier><specifier>volatile</specifier></type> <name>out</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dict</name> <operator>=</operator> <operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyMapping_Check</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"not a Python mapping"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>pcount</name> <operator>=</operator> <call><name>PyMapping_Size</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>items</name> <operator>=</operator> <call><name>PyMapping_Items</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>buflen</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Py_ssize_t</name></type>	<name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Pairs</name>	   <modifier>*</modifier></type><name>pairs</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>pairs</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>pcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pairs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pcount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>tuple</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <call><name>PLyObject_AsString</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keylen</name> <operator>=</operator> <call><name>hstoreCheckKeyLen</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>needfree</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>Py_None</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vallen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <call><name>PLyObject_AsString</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vallen</name> <operator>=</operator> <call><name>hstoreCheckValLen</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>pcount</name> <operator>=</operator> <call><name>hstoreUniquePairs</name><argument_list>(<argument><expr><name>pairs</name></expr></argument>, <argument><expr><name>pcount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>hstorePairs</name><argument_list>(<argument><expr><name>pairs</name></expr></argument>, <argument><expr><name>pcount</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
