<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/contrib/btree_gist/btree_utils_var.c"><comment type="block">/*
 * contrib/btree_gist/btree_utils_var.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree_gist.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree_utils_var.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/pg_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>

<comment type="block">/* used for key sorting */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
}</block></struct></type> <name>Vsrt</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>gbtree_vinfo</name> <modifier>*</modifier></type><name>tinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>collation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>flinfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>gbt_vsrt_arg</name>;</typedef>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gbt_var_decompress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gbt_var_fetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function><type><name>Datum</name></type>
<name>gbt_var_decompress</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>retval</name> <init>= <expr><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GISTENTRY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>gistentryinit</name><argument_list>(<argument><expr><operator>*</operator><name>retval</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>page</name></name></expr></argument>,
					  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Returns a better readable representation of variable key ( sets pointer ) */</comment>
<function><type><name>GBT_VARKEY_R</name></type>
<name>gbt_var_key_readable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GBT_VARKEY</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GBT_VARKEY_R</name></type> <name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>r</name><operator>.</operator><name>lower</name></name> <operator>=</operator> <operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>k</name><operator>)</operator><index>[<expr><name>VARHDRSZ</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><name>VARHDRSZ</name> <operator>+</operator> <operator>(</operator><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>lower</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>r</name><operator>.</operator><name>upper</name></name> <operator>=</operator> <operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>k</name><operator>)</operator><index>[<expr><name>VARHDRSZ</name> <operator>+</operator> <call><name>INTALIGN</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>lower</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</index><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>r</name><operator>.</operator><name>upper</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>lower</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Create a leaf-entry to store in the index, from a single Datum.
 */</comment>
<function><type><specifier>static</specifier> <name>GBT_VARKEY</name> <modifier>*</modifier></type>
<name>gbt_var_key_from_datum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>lowersize</name> <init>= <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>lowersize</name> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>lowersize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>lowersize</name> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create an entry to store in the index, from lower and upper bound.
 */</comment>
<function><type><name>GBT_VARKEY</name> <modifier>*</modifier></type>
<name>gbt_var_key_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GBT_VARKEY_R</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>lowersize</name> <init>= <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>uppersize</name> <init>= <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><call><name>INTALIGN</name><argument_list>(<argument><expr><name>lowersize</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>uppersize</name> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>lowersize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>INTALIGN</name><argument_list>(<argument><expr><name>lowersize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>uppersize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>INTALIGN</name><argument_list>(<argument><expr><name>lowersize</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>uppersize</name> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>GBT_VARKEY</name> <modifier>*</modifier></type>
<name>gbt_var_leaf2node</name><parameter_list>(<parameter><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>leaf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gbtree_vinfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>, <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>flinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>leaf</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tinfo</name><operator>-&gt;</operator><name>f_l2n</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name><name>tinfo</name><operator>-&gt;</operator><name>f_l2n</name></name><argument_list>(<argument><expr><name>leaf</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * returns the common prefix length of a node key
*/</comment>
<function><type><specifier>static</specifier> <name>int32</name></type>
<name>gbt_var_node_cp_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GBT_VARKEY</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gbtree_vinfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GBT_VARKEY_R</name></type> <name>r</name> <init>= <expr><call><name>gbt_var_key_readable</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>t1len</name> <init>= <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>lower</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>t2len</name> <init>= <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>upper</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>ml</name> <init>= <expr><call><name>Min</name><argument_list>(<argument><expr><name>t1len</name></expr></argument>, <argument><expr><name>t2len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p1</name> <init>= <expr><call><name>VARDATA</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>lower</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p2</name> <init>= <expr><call><name>VARDATA</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>upper</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ml</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ml</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>tinfo</name><operator>-&gt;</operator><name>eml</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>i</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p1</name> <operator>!=</operator> <operator>*</operator><name>p2</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>tinfo</name><operator>-&gt;</operator><name>eml</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><operator>(</operator><name>i</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<return>return <expr><name>i</name></expr>;</return>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>l</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>ml</name></expr>;</return>					<comment type="block">/* lower == upper */</comment>
</block_content>}</block></function>


<comment type="block">/*
 * returns true, if query matches prefix ( common prefix )
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>gbt_bytea_pf_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bytea</name> <modifier>*</modifier></type><name>pf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bytea</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gbtree_vinfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>out</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>qlen</name> <init>= <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>nlen</name> <init>= <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>pf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>&lt;=</operator> <name>qlen</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * returns true, if query matches node using common prefix
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>gbt_var_node_pf_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GBT_VARKEY_R</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bytea</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gbtree_vinfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>tinfo</name><operator>-&gt;</operator><name>trnc</name></name> <operator>&amp;&amp;</operator> <operator>(</operator>
							<call><name>gbt_bytea_pf_match</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call> <operator>||</operator>
							<call><name>gbt_bytea_pf_match</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call>
							<operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
*  truncates / compresses the node key
*  cpf_length .. common prefix length
*/</comment>
<function><type><specifier>static</specifier> <name>GBT_VARKEY</name> <modifier>*</modifier></type>
<name>gbt_var_node_truncate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GBT_VARKEY</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>cpf_length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gbtree_vinfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GBT_VARKEY_R</name></type> <name>r</name> <init>= <expr><call><name>gbt_var_key_readable</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>len1</name> <init>= <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>lower</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>len2</name> <init>= <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>upper</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>si</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>out2</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len1</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>len1</name></expr></argument>, <argument><expr><operator>(</operator><name>cpf_length</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len2</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>len2</name></expr></argument>, <argument><expr><operator>(</operator><name>cpf_length</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>si</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>VARHDRSZ</name> <operator>+</operator> <call><name>INTALIGN</name><argument_list>(<argument><expr><name>len1</name> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name>len1</name> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len1</name> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>INTALIGN</name><argument_list>(<argument><expr><name>len1</name> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name>len2</name> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>len2</name> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>gbt_var_bin_union</name><parameter_list>(<parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>collation</name></decl></parameter>,
				  <parameter><decl><type><specifier>const</specifier> <name>gbtree_vinfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>, <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>flinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GBT_VARKEY_R</name></type> <name>eo</name> <init>= <expr><call><name>gbt_var_key_readable</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GBT_VARKEY_R</name></type> <name>nr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eo</name><operator>.</operator><name>lower</name></name> <operator>==</operator> <name><name>eo</name><operator>.</operator><name>upper</name></name></expr>)</condition>	<comment type="block">/* leaf */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>gbt_var_leaf2node</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>eo</name> <operator>=</operator> <call><name>gbt_var_key_readable</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><operator>*</operator><name>u</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>GBT_VARKEY_R</name></type> <name>ro</name> <init>= <expr><call><name>gbt_var_key_readable</name><argument_list>(<argument><expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><operator>*</operator><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>nr</name><operator>.</operator><name>lower</name></name> <operator>=</operator> <name><name>ro</name><operator>.</operator><name>lower</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nr</name><operator>.</operator><name>upper</name></name> <operator>=</operator> <name><name>ro</name><operator>.</operator><name>upper</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><name>tinfo</name><operator>-&gt;</operator><name>f_cmp</name></name><argument_list>(<argument><expr><name><name>ro</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>eo</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>nr</name><operator>.</operator><name>lower</name></name> <operator>=</operator> <name><name>eo</name><operator>.</operator><name>lower</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><name>tinfo</name><operator>-&gt;</operator><name>f_cmp</name></name><argument_list>(<argument><expr><name><name>ro</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name><name>eo</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>nr</name><operator>.</operator><name>upper</name></name> <operator>=</operator> <name><name>eo</name><operator>.</operator><name>upper</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>update</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>u</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>gbt_var_key_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>nr</name><operator>.</operator><name>lower</name></name> <operator>=</operator> <name><name>eo</name><operator>.</operator><name>lower</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nr</name><operator>.</operator><name>upper</name></name> <operator>=</operator> <name><name>eo</name><operator>.</operator><name>upper</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>u</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>gbt_var_key_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>GISTENTRY</name> <modifier>*</modifier></type>
<name>gbt_var_compress</name><parameter_list>(<parameter><decl><type><name>GISTENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gbtree_vinfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>leafkey</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>leaf</name> <init>= <expr><call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>gbt_var_key_from_datum</name><argument_list>(<argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GISTENTRY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gistentryinit</name><argument_list>(<argument><expr><operator>*</operator><name>retval</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>page</name></name></expr></argument>,
					  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>gbt_var_fetch</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GBT_VARKEY_R</name></type> <name>r</name> <init>= <expr><call><name>gbt_var_key_readable</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GISTENTRY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>gistentryinit</name><argument_list>(<argument><expr><operator>*</operator><name>retval</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>lower</name></name></expr></argument>)</argument_list></call></expr></argument>,
				  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>page</name></name></expr></argument>,
				  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>GBT_VARKEY</name> <modifier>*</modifier></type>
<name>gbt_var_union</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GistEntryVector</name> <modifier>*</modifier></type><name>entryvec</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>collation</name></decl></parameter>,
			  <parameter><decl><type><specifier>const</specifier> <name>gbtree_vinfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>, <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>flinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>numranges</name> <init>= <expr><name><name>entryvec</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>out</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GBT_VARKEY_R</name></type> <name>rk</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GBT_VARKEY</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>entryvec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rk</name> <operator>=</operator> <call><name>gbt_var_key_readable</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>gbt_var_key_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numranges</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>entryvec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gbt_var_bin_union</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>


	<comment type="block">/* Truncate (=compress) key */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>tinfo</name><operator>-&gt;</operator><name>trnc</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>plen</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>trc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>gbt_var_node_cp_len</name><argument_list>(<argument><expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>trc</name> <operator>=</operator> <call><name>gbt_var_node_truncate</name><argument_list>(<argument><expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>plen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>trc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type>
<name>gbt_var_same</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>d1</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d2</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>collation</name></decl></parameter>,
			 <parameter><decl><type><specifier>const</specifier> <name>gbtree_vinfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>, <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>flinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>t1</name> <init>= <expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>t2</name> <init>= <expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GBT_VARKEY_R</name></type> <name>r1</name></decl>,
				<decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>gbt_var_key_readable</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>gbt_var_key_readable</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><call><name><name>tinfo</name><operator>-&gt;</operator><name>f_cmp</name></name><argument_list>(<argument><expr><name><name>r1</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>r2</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<call><name><name>tinfo</name><operator>-&gt;</operator><name>f_cmp</name></name><argument_list>(<argument><expr><name><name>r1</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name><name>r2</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>float</name> <modifier>*</modifier></type>
<name>gbt_var_penalty</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GISTENTRY</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GISTENTRY</name> <modifier>*</modifier></type><name>n</name></decl></parameter>,
				<parameter><decl><type><name>Oid</name></type> <name>collation</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gbtree_vinfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>, <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>flinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>orge</name> <init>= <expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>newe</name> <init>= <expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GBT_VARKEY_R</name></type> <name>ok</name></decl>,
				<decl><type ref="prev"/><name>nk</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>nk</name> <operator>=</operator> <call><name>gbt_var_key_readable</name><argument_list>(<argument><expr><name>newe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>nk</name><operator>.</operator><name>lower</name></name> <operator>==</operator> <name><name>nk</name><operator>.</operator><name>upper</name></name></expr>)</condition>	<comment type="block">/* leaf */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>gbt_var_leaf2node</name><argument_list>(<argument><expr><name>newe</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>newe</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>nk</name> <operator>=</operator> <call><name>gbt_var_key_readable</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>gbt_var_key_readable</name><argument_list>(<argument><expr><name>orge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>ok</name><operator>.</operator><name>lower</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>ok</name><operator>.</operator><name>upper</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><call><name><name>tinfo</name><operator>-&gt;</operator><name>f_cmp</name></name><argument_list>(<argument><expr><name><name>nk</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>ok</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>
				<call><name>gbt_bytea_pf_match</name><argument_list>(<argument><expr><name><name>ok</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>nk</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
			   <operator>(</operator><call><name><name>tinfo</name><operator>-&gt;</operator><name>f_cmp</name></name><argument_list>(<argument><expr><name><name>nk</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name><name>ok</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
				<call><name>gbt_bytea_pf_match</name><argument_list>(<argument><expr><name><name>ok</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name><name>nk</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>d</name> <init>= <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type>		<name>dres</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>ol</name></decl>,
					<decl><type ref="prev"/><name>ul</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>gbt_var_bin_union</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>orge</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ol</name> <operator>=</operator> <call><name>gbt_var_node_cp_len</name><argument_list>(<argument><expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gbt_var_bin_union</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>newe</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ul</name> <operator>=</operator> <call><name>gbt_var_node_cp_len</name><argument_list>(<argument><expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>ul</name> <operator>&lt;</operator> <name>ol</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>dres</name> <operator>=</operator> <operator>(</operator><name>ol</name> <operator>-</operator> <name>ul</name><operator>)</operator></expr>;</expr_stmt>	<comment type="block">/* reduction of common prefix len */</comment>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>GBT_VARKEY_R</name></type> <name>uk</name> <init>= <expr><call><name>gbt_var_key_readable</name><argument_list>(<argument><expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>ok</name><operator>.</operator><name>lower</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name><operator>)</operator> <operator>&lt;=</operator> <name>ul</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><call><name>VARDATA</name><argument_list>(<argument><expr><name><name>ok</name><operator>.</operator><name>lower</name></name></expr></argument>)</argument_list></call><index>[<expr><name>ul</name></expr>]</index><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>uk</name><operator>.</operator><name>lower</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name><operator>)</operator> <operator>&lt;=</operator> <name>ul</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><call><name>VARDATA</name><argument_list>(<argument><expr><name><name>uk</name><operator>.</operator><name>lower</name></name></expr></argument>)</argument_list></call><index>[<expr><name>ul</name></expr>]</index><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>ok</name><operator>.</operator><name>upper</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name><operator>)</operator> <operator>&lt;=</operator> <name>ul</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><call><name>VARDATA</name><argument_list>(<argument><expr><name><name>ok</name><operator>.</operator><name>upper</name></name></expr></argument>)</argument_list></call><index>[<expr><name>ul</name></expr>]</index><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>uk</name><operator>.</operator><name>upper</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name><operator>)</operator> <operator>&lt;=</operator> <name>ul</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><call><name>VARDATA</name><argument_list>(<argument><expr><name><name>uk</name><operator>.</operator><name>upper</name></name></expr></argument>)</argument_list></call><index>[<expr><name>ul</name></expr>]</index><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>dres</name> <operator>=</operator> <call><name>Abs</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Abs</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>dres</name> <operator>/=</operator> <literal type="number">256.0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>res</name> <operator>+=</operator> <name>FLT_MIN</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>res</name> <operator>+=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>dres</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>ol</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>res</name> <operator>*=</operator> <operator>(</operator><name>FLT_MAX</name> <operator>/</operator> <operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>natts</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>gbt_vsrt_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GBT_VARKEY_R</name></type> <name>ar</name> <init>= <expr><call><name>gbt_var_key_readable</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>Vsrt</name> <operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator><operator>-&gt;</operator><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GBT_VARKEY_R</name></type> <name>br</name> <init>= <expr><call><name>gbt_var_key_readable</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>Vsrt</name> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator><operator>-&gt;</operator><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>gbt_vsrt_arg</name> <modifier>*</modifier></type><name>varg</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>gbt_vsrt_arg</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>varg</name><operator>-&gt;</operator><name>tinfo</name><operator>-&gt;</operator><name>f_cmp</name></name><argument_list>(<argument><expr><name><name>ar</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>br</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>varg</name><operator>-&gt;</operator><name>collation</name></name></expr></argument>, <argument><expr><name><name>varg</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name><name>varg</name><operator>-&gt;</operator><name>tinfo</name><operator>-&gt;</operator><name>f_cmp</name></name><argument_list>(<argument><expr><name><name>ar</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name><name>br</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name><name>varg</name><operator>-&gt;</operator><name>collation</name></name></expr></argument>, <argument><expr><name><name>varg</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GIST_SPLITVEC</name> <modifier>*</modifier></type>
<name>gbt_var_picksplit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GistEntryVector</name> <modifier>*</modifier></type><name>entryvec</name></decl></parameter>, <parameter><decl><type><name>GIST_SPLITVEC</name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
				  <parameter><decl><type><name>Oid</name></type> <name>collation</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gbtree_vinfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>, <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>flinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>i</name></decl>,
				<decl><type ref="prev"/><name>maxoff</name> <init>= <expr><name><name>entryvec</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Vsrt</name>	   <modifier>*</modifier></type><name>arr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>svcntr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>nbytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier><modifier>*</modifier></type><name>sv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>gbt_vsrt_arg</name></type> <name>varg</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name>Vsrt</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><name>maxoff</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Vsrt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <operator>(</operator><name>maxoff</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OffsetNumber</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_left</name></name> <operator>=</operator> <operator>(</operator><name>OffsetNumber</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_right</name></name> <operator>=</operator> <operator>(</operator><name>OffsetNumber</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_ldatum</name></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_rdatum</name></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nleft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nright</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>sv</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bytea</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>maxoff</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Sort entries */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>FirstOffsetNumber</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxoff</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <call><name>OffsetNumberNext</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>GBT_VARKEY_R</name></type> <name>ro</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>entryvec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ro</name> <operator>=</operator> <call><name>gbt_var_key_readable</name><argument_list>(<argument><expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ro</name><operator>.</operator><name>lower</name></name> <operator>==</operator> <name><name>ro</name><operator>.</operator><name>upper</name></name></expr>)</condition>	<comment type="block">/* leaf */</comment>
		<block>{<block_content>
			<expr_stmt><expr><name><name>sv</name><index>[<expr><name>svcntr</name></expr>]</index></name> <operator>=</operator> <call><name>gbt_var_leaf2node</name><argument_list>(<argument><expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <name>cur</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name> <operator>=</operator> <name><name>sv</name><index>[<expr><name>svcntr</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>sv</name><index>[<expr><name>svcntr</name></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <name>cur</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>svcntr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name> <operator>=</operator> <operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <name>cur</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* sort */</comment>
	<expr_stmt><expr><name><name>varg</name><operator>.</operator><name>tinfo</name></name> <operator>=</operator> <name>tinfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>varg</name><operator>.</operator><name>collation</name></name> <operator>=</operator> <name>collation</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>varg</name><operator>.</operator><name>flinfo</name></name> <operator>=</operator> <name>flinfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>qsort_arg</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>arr</name><index>[<expr><name>FirstOffsetNumber</name></expr>]</index></name></expr></argument>,
			  <argument><expr><name>maxoff</name> <operator>-</operator> <name>FirstOffsetNumber</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
			  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Vsrt</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			  <argument><expr><name>gbt_vsrt_cmp</name></expr></argument>,
			  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>varg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We do simply create two parts */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>FirstOffsetNumber</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxoff</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <call><name>OffsetNumberNext</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>maxoff</name> <operator>-</operator> <name>FirstOffsetNumber</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gbt_var_bin_union</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>spl_ldatum</name></name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_left</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>spl_nleft</name></name></expr>]</index></name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nleft</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>gbt_var_bin_union</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>spl_rdatum</name></name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_right</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>spl_nright</name></name></expr>]</index></name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nright</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Truncate (=compress) key */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>tinfo</name><operator>-&gt;</operator><name>trnc</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>ll</name> <init>= <expr><call><name>gbt_var_node_cp_len</name><argument_list>(<argument><expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>spl_ldatum</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>lr</name> <init>= <expr><call><name>gbt_var_node_cp_len</name><argument_list>(<argument><expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>spl_rdatum</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>dl</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GBT_VARKEY</name> <modifier>*</modifier></type><name>dr</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>ll</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ll</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>dl</name> <operator>=</operator> <call><name>gbt_var_node_truncate</name><argument_list>(<argument><expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>spl_ldatum</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ll</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dr</name> <operator>=</operator> <call><name>gbt_var_node_truncate</name><argument_list>(<argument><expr><operator>(</operator><name>GBT_VARKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>spl_rdatum</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ll</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_ldatum</name></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>dl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_rdatum</name></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>dr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * The GiST consistent method
 */</comment>
<function><type><name>bool</name></type>
<name>gbt_var_consistent</name><parameter_list>(<parameter><decl><type><name>GBT_VARKEY_R</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
				   <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,
				   <parameter><decl><type><name>StrategyNumber</name></type> <name>strategy</name></decl></parameter>,
				   <parameter><decl><type><name>Oid</name></type> <name>collation</name></decl></parameter>,
				   <parameter><decl><type><name>bool</name></type> <name>is_leaf</name></decl></parameter>,
				   <parameter><decl><type><specifier>const</specifier> <name>gbtree_vinfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>,
				   <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>flinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>retval</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>strategy</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BTLessEqualStrategyNumber</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>is_leaf</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>tinfo</name><operator>-&gt;</operator><name>f_ge</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>tinfo</name><operator>-&gt;</operator><name>f_cmp</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal>
					<operator>||</operator> <call><name>gbt_var_node_pf_match</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>BTLessStrategyNumber</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>is_leaf</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>tinfo</name><operator>-&gt;</operator><name>f_gt</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>tinfo</name><operator>-&gt;</operator><name>f_cmp</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal>
					<operator>||</operator> <call><name>gbt_var_node_pf_match</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>BTEqualStrategyNumber</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>is_leaf</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>tinfo</name><operator>-&gt;</operator><name>f_eq</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator>
					<operator>(</operator><call><name><name>tinfo</name><operator>-&gt;</operator><name>f_cmp</name></name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
					 <call><name><name>tinfo</name><operator>-&gt;</operator><name>f_cmp</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
					<call><name>gbt_var_node_pf_match</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>BTGreaterStrategyNumber</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>is_leaf</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>tinfo</name><operator>-&gt;</operator><name>f_lt</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>tinfo</name><operator>-&gt;</operator><name>f_cmp</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal>
					<operator>||</operator> <call><name>gbt_var_node_pf_match</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>BTGreaterEqualStrategyNumber</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>is_leaf</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>tinfo</name><operator>-&gt;</operator><name>f_le</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>tinfo</name><operator>-&gt;</operator><name>f_cmp</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal>
					<operator>||</operator> <call><name>gbt_var_node_pf_match</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>BtreeGistNotEqualStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>!</operator><operator>(</operator><call><name><name>tinfo</name><operator>-&gt;</operator><name>f_eq</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					   <call><name><name>tinfo</name><operator>-&gt;</operator><name>f_eq</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
