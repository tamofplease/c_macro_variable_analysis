<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/contrib/oid2name/oid2name.c"><comment type="block">/*
 * oid2name, a PostgreSQL app to map OIDs on the filesystem
 * to table and database names.
 *
 * Originally by
 * B. Palmer, bpalmer@crimelabs.net 1-17-2001
 *
 * contrib/oid2name/oid2name.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class_d.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fe_utils/connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_getopt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getopt_long.h"</cpp:file></cpp:include>


<comment type="block">/* an extensible array to keep track of elements to show */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>alloc</name></decl>;</decl_stmt>
}</block></struct></type> <name>eary</name>;</typedef>

<comment type="block">/* these are the opts structures for command line params */</comment>
<struct>struct <name>options</name>
<block>{
	<decl_stmt><decl><type><name>eary</name>	   <modifier>*</modifier></type><name>tables</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>eary</name>	   <modifier>*</modifier></type><name>oids</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>eary</name>	   <modifier>*</modifier></type><name>filenodes</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type>		<name>quiet</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>systables</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>indexes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>nodb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>extended</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>tablespaces</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dbname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>hostname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>username</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* function prototypes */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>help</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>get_opts</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>options</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>add_one_elt</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>eltname</name></decl></parameter>, <parameter><decl><type><name>eary</name> <modifier>*</modifier></type><name>eary</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name>	   <modifier>*</modifier></type><name>get_comma_elts</name><parameter_list>(<parameter><decl><type><name>eary</name> <modifier>*</modifier></type><name>eary</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>sql_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>options</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>			<name>sql_exec</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>quiet</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>sql_exec_dumpalldbs</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>options</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>sql_exec_dumpalltables</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>options</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>sql_exec_searchtables</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>options</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>sql_exec_dumpalltbspc</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>options</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* function to parse command line options and check for some usage errors. */</comment>
<function><type><name>void</name></type>
<name>get_opts</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>options</name></name> <modifier>*</modifier></type><name>my_opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_options</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{<expr><literal type="string">"dbname"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'d'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"host"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'h'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"host"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'H'</literal></expr>}</block></expr>, <comment type="block">/* deprecated */</comment>
		<expr><block>{<expr><literal type="string">"filenode"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'f'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"indexes"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'i'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"oid"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'o'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"port"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'p'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"quiet"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'q'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"tablespaces"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'s'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"system-objects"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'S'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"table"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'t'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"username"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'U'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"version"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'V'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"extended"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'x'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"help"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'?'</literal></expr>}</block></expr>,
		<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type>			<name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>optindex</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>progname</name> <operator>=</operator> <call><name>get_progname</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set the defaults */</comment>
	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>quiet</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>systables</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>indexes</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>nodb</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>extended</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>tablespaces</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>dbname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>username</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>progname</name></name> <operator>=</operator> <name>progname</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-?"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>help</name><argument_list>(<argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--version"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-V"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"oid2name (PostgreSQL) "</literal> <name>PG_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* get opts */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"d:f:h:H:io:p:qsSt:U:x"</literal></expr></argument>, <argument><expr><name>long_options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optindex</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
		<block>{<block_content>
				<comment type="block">/* specify the database */</comment>
			<case>case <expr><literal type="char">'d'</literal></expr>:</case>
				<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>dbname</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

				<comment type="block">/* specify one filenode to show */</comment>
			<case>case <expr><literal type="char">'f'</literal></expr>:</case>
				<expr_stmt><expr><call><name>add_one_elt</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><name><name>my_opts</name><operator>-&gt;</operator><name>filenodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

				<comment type="block">/* host to connect to */</comment>
			<case>case <expr><literal type="char">'H'</literal></expr>:</case>			<comment type="block">/* deprecated */</comment>
			<case>case <expr><literal type="char">'h'</literal></expr>:</case>
				<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

				<comment type="block">/* also display indexes */</comment>
			<case>case <expr><literal type="char">'i'</literal></expr>:</case>
				<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>indexes</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>

				<comment type="block">/* specify one Oid to show */</comment>
			<case>case <expr><literal type="char">'o'</literal></expr>:</case>
				<expr_stmt><expr><call><name>add_one_elt</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><name><name>my_opts</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

				<comment type="block">/* port to connect to on remote host */</comment>
			<case>case <expr><literal type="char">'p'</literal></expr>:</case>
				<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

				<comment type="block">/* don't show headers */</comment>
			<case>case <expr><literal type="char">'q'</literal></expr>:</case>
				<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>quiet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>

				<comment type="block">/* dump tablespaces only */</comment>
			<case>case <expr><literal type="char">'s'</literal></expr>:</case>
				<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>tablespaces</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>

				<comment type="block">/* display system tables */</comment>
			<case>case <expr><literal type="char">'S'</literal></expr>:</case>
				<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>systables</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>

				<comment type="block">/* specify one tablename to show */</comment>
			<case>case <expr><literal type="char">'t'</literal></expr>:</case>
				<expr_stmt><expr><call><name>add_one_elt</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><name><name>my_opts</name><operator>-&gt;</operator><name>tables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

				<comment type="block">/* username */</comment>
			<case>case <expr><literal type="char">'U'</literal></expr>:</case>
				<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>username</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

				<comment type="block">/* display extra columns */</comment>
			<case>case <expr><literal type="char">'x'</literal></expr>:</case>
				<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>extended</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>

			<default>default:</default>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>help</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s helps examining the file structure used by PostgreSQL.\n\n"</literal>
		   <literal type="string">"Usage:\n"</literal>
		   <literal type="string">"  %s [OPTION]...\n"</literal>
		   <literal type="string">"\nOptions:\n"</literal>
		   <literal type="string">"  -f, --filenode=FILENODE    show info for table with given file node\n"</literal>
		   <literal type="string">"  -i, --indexes              show indexes and sequences too\n"</literal>
		   <literal type="string">"  -o, --oid=OID              show info for table with given OID\n"</literal>
		   <literal type="string">"  -q, --quiet                quiet (don't show headers)\n"</literal>
		   <literal type="string">"  -s, --tablespaces          show all tablespaces\n"</literal>
		   <literal type="string">"  -S, --system-objects       show system objects too\n"</literal>
		   <literal type="string">"  -t, --table=TABLE          show info for named table\n"</literal>
		   <literal type="string">"  -V, --version              output version information, then exit\n"</literal>
		   <literal type="string">"  -x, --extended             extended (show additional columns)\n"</literal>
		   <literal type="string">"  -?, --help                 show this help, then exit\n"</literal>
		   <literal type="string">"\nConnection options:\n"</literal>
		   <literal type="string">"  -d, --dbname=DBNAME        database to connect to\n"</literal>
		   <literal type="string">"  -h, --host=HOSTNAME        database server host or socket directory\n"</literal>
		   <literal type="string">"  -H                         same as -h, deprecated option\n"</literal>
		   <literal type="string">"  -p, --port=PORT            database server port number\n"</literal>
		   <literal type="string">"  -U, --username=USERNAME    connect as specified database user\n"</literal>
		   <literal type="string">"\nThe default action is to show all database OIDs.\n\n"</literal>
		   <literal type="string">"Report bugs to &lt;pgsql-bugs@lists.postgresql.org&gt;.\n"</literal></expr></argument>,
		   <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * add_one_elt
 *
 * Add one element to a (possibly empty) eary struct.
 */</comment>
<function><type><name>void</name></type>
<name>add_one_elt</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>eltname</name></decl></parameter>, <parameter><decl><type><name>eary</name> <modifier>*</modifier></type><name>eary</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>eary</name><operator>-&gt;</operator><name>alloc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>eary</name>	  <operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>eary</name>	  <operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>eary</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;=</operator> <name><name>eary</name><operator>-&gt;</operator><name>alloc</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>eary</name>	  <operator>-&gt;</operator><name>alloc</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>eary</name>	  <operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>pg_realloc</name><argument_list>(<argument><expr><name><name>eary</name><operator>-&gt;</operator><name>array</name></name></expr></argument>,
												 <argument><expr><name><name>eary</name><operator>-&gt;</operator><name>alloc</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>eary</name>	  <operator>-&gt;</operator><name>array</name><index>[<expr><name><name>eary</name><operator>-&gt;</operator><name>num</name></name></expr>]</index></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eary</name>	  <operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * get_comma_elts
 *
 * Return the elements of an eary as a (freshly allocated) single string, in
 * single quotes, separated by commas and properly escaped for insertion in an
 * SQL statement.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>get_comma_elts</name><parameter_list>(<parameter><decl><type><name>eary</name> <modifier>*</modifier></type><name>eary</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ret</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eary</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pg_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * PQescapeString wants 2 * length + 1 bytes of breath space.  Add two
	 * chars per element for the single quotes and one for the comma.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>eary</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>length</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>eary</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>length</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>eary</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>eary</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>PQescapeString</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>eary</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>eary</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* establish connection with database. */</comment>
<function><type><name>PGconn</name> <modifier>*</modifier></type>
<name>sql_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>options</name></name> <modifier>*</modifier></type><name>my_opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>have_password</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>password</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>new_pass</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Start the connection.  Loop until we have a password if requested by
	 * backend.
	 */</comment>
	<do>do
	<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAMS_ARRAY_SIZE</name></cpp:macro>	<cpp:value>7</cpp:value></cpp:define>

		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>keywords</name><index>[<expr><name>PARAMS_ARRAY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>values</name><index>[<expr><name>PARAMS_ARRAY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>keywords</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"host"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>my_opts</name><operator>-&gt;</operator><name>hostname</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>keywords</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"port"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>my_opts</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>keywords</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"user"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>my_opts</name><operator>-&gt;</operator><name>username</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>keywords</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"password"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>have_password</name></expr> ?</condition><then> <expr><name>password</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>keywords</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"dbname"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>my_opts</name><operator>-&gt;</operator><name>dbname</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>keywords</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"fallback_application_name"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>my_opts</name><operator>-&gt;</operator><name>progname</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>keywords</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>new_pass</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>PQconnectdbParams</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: could not connect to database %s\n"</literal></expr></argument>,
					<argument><expr><literal type="string">"oid2name"</literal></expr></argument>, <argument><expr><name><name>my_opts</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONNECTION_BAD</name> <operator>&amp;&amp;</operator>
			<call><name>PQconnectionNeedsPassword</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<operator>!</operator><name>have_password</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>simple_prompt</name><argument_list>(<argument><expr><literal type="string">"Password: "</literal></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>have_password</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>new_pass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block> while <condition>(<expr><name>new_pass</name></expr>)</condition>;</do>

	<comment type="block">/* check to see that the backend connection was successfully made */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONNECTION_BAD</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: could not connect to database %s: %s"</literal></expr></argument>,
				<argument><expr><literal type="string">"oid2name"</literal></expr></argument>, <argument><expr><name><name>my_opts</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ALWAYS_SECURE_SEARCH_PATH_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"oid2name: could not clear search_path: %s\n"</literal></expr></argument>,
				<argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* return the conn if good */</comment>
	<return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Actual code to make call to the database and print the output data.
 */</comment>
<function><type><name>int</name></type>
<name>sql_exec</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>todo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>quiet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type>			<name>nfields</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nrows</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>,
				<decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pad</name></decl>;</decl_stmt>

	<comment type="block">/* make the call */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>todo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* check and deal with errors */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>||</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"oid2name: query failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"oid2name: query was: %s\n"</literal></expr></argument>, <argument><expr><name>todo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* get the number of fields */</comment>
	<expr_stmt><expr><name>nrows</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nfields</name> <operator>=</operator> <call><name>PQnfields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* for each field, get the needed width */</comment>
	<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nfields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nfields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>length</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>PQfname</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nfields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name><name>length</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>length</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>

	<comment type="block">/* print a header */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nfields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%*s"</literal></expr></argument>, <argument><expr><name><name>length</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>PQfname</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>l</name> <operator>+=</operator> <name><name>length</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pad</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pad</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* for each row, dump the information */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nfields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%*s"</literal></expr></argument>, <argument><expr><name><name>length</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* cleanup */</comment>
	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Dump all databases.  There are no system objects to worry about.
 */</comment>
<function><type><name>void</name></type>
<name>sql_exec_dumpalldbs</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>todo</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* get the oid and database name from the system pg_database table */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>todo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>todo</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"SELECT d.oid AS \"Oid\", datname AS \"Database Name\", "</literal>
			 <literal type="string">"spcname AS \"Tablespace\" FROM pg_catalog.pg_database d JOIN pg_catalog.pg_tablespace t ON "</literal>
			 <literal type="string">"(dattablespace = t.oid) ORDER BY 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>sql_exec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>todo</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>quiet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Dump all tables, indexes and sequences in the current database.
 */</comment>
<function><type><name>void</name></type>
<name>sql_exec_dumpalltables</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>todo</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>addfields</name> <init>= <expr><literal type="string">",c.oid AS \"Oid\", nspname AS \"Schema\", spcname as \"Tablespace\" "</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>todo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>todo</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"SELECT pg_catalog.pg_relation_filenode(c.oid) as \"Filenode\", relname as \"Table Name\" %s "</literal>
			 <literal type="string">"FROM pg_catalog.pg_class c "</literal>
			 <literal type="string">"	LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace "</literal>
			 <literal type="string">"	LEFT JOIN pg_catalog.pg_database d ON d.datname = pg_catalog.current_database(),"</literal>
			 <literal type="string">"	pg_catalog.pg_tablespace t "</literal>
			 <literal type="string">"WHERE relkind IN ("</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_RELATION</name></expr></argument>)</argument_list></call> <literal type="string">","</literal>
			 <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_MATVIEW</name></expr></argument>)</argument_list></call> <literal type="string">"%s%s) AND "</literal>
			 <literal type="string">"	%s"</literal>
			 <literal type="string">"		t.oid = CASE"</literal>
			 <literal type="string">"			WHEN reltablespace &lt;&gt; 0 THEN reltablespace"</literal>
			 <literal type="string">"			ELSE dattablespace"</literal>
			 <literal type="string">"		END "</literal>
			 <literal type="string">"ORDER BY relname"</literal></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>extended</name></name></expr> ?</condition><then> <expr><name>addfields</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>indexes</name></name></expr> ?</condition><then> <expr><literal type="string">","</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_INDEX</name></expr></argument>)</argument_list></call> <literal type="string">","</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_SEQUENCE</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>systables</name></name></expr> ?</condition><then> <expr><literal type="string">","</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_TOASTVALUE</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>systables</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"n.nspname NOT IN ('pg_catalog', 'information_schema') AND n.nspname !~ '^pg_toast' AND"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>sql_exec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>todo</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>quiet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Show oid, filenode, name, schema and tablespace for each of the
 * given objects in the current database.
 */</comment>
<function><type><name>void</name></type>
<name>sql_exec_searchtables</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>todo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>qualifiers</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>comma_oids</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>comma_filenodes</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>comma_tables</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>written</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>addfields</name> <init>= <expr><literal type="string">",c.oid AS \"Oid\", nspname AS \"Schema\", spcname as \"Tablespace\" "</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* get tables qualifiers, whether names, filenodes, or OIDs */</comment>
	<expr_stmt><expr><name>comma_oids</name> <operator>=</operator> <call><name>get_comma_elts</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>comma_tables</name> <operator>=</operator> <call><name>get_comma_elts</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>tables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>comma_filenodes</name> <operator>=</operator> <call><name>get_comma_elts</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>filenodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 80 extra chars for SQL expression */</comment>
	<expr_stmt><expr><name>qualifiers</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>comma_oids</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>comma_tables</name></expr></argument>)</argument_list></call> <operator>+</operator>
									<call><name>strlen</name><argument_list>(<argument><expr><name>comma_filenodes</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>qualifiers</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>oids</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"c.oid IN (%s)"</literal></expr></argument>, <argument><expr><name>comma_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>written</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>filenodes</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>written</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">" OR "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"pg_catalog.pg_relation_filenode(c.oid) IN (%s)"</literal></expr></argument>, <argument><expr><name>comma_filenodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>written</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>tables</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>written</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">" OR "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"c.relname ~~ ANY (ARRAY[%s])"</literal></expr></argument>, <argument><expr><name>comma_tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>comma_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>comma_tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>comma_filenodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* now build the query */</comment>
	<expr_stmt><expr><name>todo</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(
					<argument><expr><literal type="string">"SELECT pg_catalog.pg_relation_filenode(c.oid) as \"Filenode\", relname as \"Table Name\" %s\n"</literal>
					<literal type="string">"FROM pg_catalog.pg_class c\n"</literal>
					<literal type="string">"	LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace\n"</literal>
					<literal type="string">"	LEFT JOIN pg_catalog.pg_database d ON d.datname = pg_catalog.current_database(),\n"</literal>
					<literal type="string">"	pg_catalog.pg_tablespace t\n"</literal>
					<literal type="string">"WHERE relkind IN ("</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_RELATION</name></expr></argument>)</argument_list></call> <literal type="string">","</literal>
					<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_MATVIEW</name></expr></argument>)</argument_list></call> <literal type="string">","</literal>
					<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_INDEX</name></expr></argument>)</argument_list></call> <literal type="string">","</literal>
					<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_SEQUENCE</name></expr></argument>)</argument_list></call> <literal type="string">","</literal>
					<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_TOASTVALUE</name></expr></argument>)</argument_list></call> <literal type="string">") AND\n"</literal>
					<literal type="string">"		t.oid = CASE\n"</literal>
					<literal type="string">"			WHEN reltablespace &lt;&gt; 0 THEN reltablespace\n"</literal>
					<literal type="string">"			ELSE dattablespace\n"</literal>
					<literal type="string">"		END AND\n"</literal>
					<literal type="string">"  (%s)\n"</literal>
					<literal type="string">"ORDER BY relname\n"</literal></expr></argument>,
					<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>extended</name></name></expr> ?</condition><then> <expr><name>addfields</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
					<argument><expr><name>qualifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qualifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>sql_exec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>todo</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>quiet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sql_exec_dumpalltbspc</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>todo</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>todo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>todo</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"SELECT oid AS \"Oid\", spcname as \"Tablespace Name\"\n"</literal>
			 <literal type="string">"FROM pg_catalog.pg_tablespace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>sql_exec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>todo</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>quiet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>options</name></name> <modifier>*</modifier></type><name>my_opts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>pgconn</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>my_opts</name> <operator>=</operator> <operator>(</operator>struct <name>options</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>options</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>oids</name></name> <operator>=</operator> <operator>(</operator><name>eary</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>eary</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>tables</name></name> <operator>=</operator> <operator>(</operator><name>eary</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>eary</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>filenodes</name></name> <operator>=</operator> <operator>(</operator><name>eary</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>eary</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>oids</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name><name>my_opts</name><operator>-&gt;</operator><name>oids</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>tables</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name><name>my_opts</name><operator>-&gt;</operator><name>tables</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>filenodes</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name><name>my_opts</name><operator>-&gt;</operator><name>filenodes</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* parse the opts */</comment>
	<expr_stmt><expr><call><name>get_opts</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>my_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>my_opts</name><operator>-&gt;</operator><name>dbname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>dbname</name></name> <operator>=</operator> <literal type="string">"postgres"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>my_opts</name><operator>-&gt;</operator><name>nodb</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pgconn</name> <operator>=</operator> <call><name>sql_conn</name><argument_list>(<argument><expr><name>my_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* display only tablespaces */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>my_opts</name><operator>-&gt;</operator><name>tablespaces</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>my_opts</name><operator>-&gt;</operator><name>quiet</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"All tablespaces:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>sql_exec_dumpalltbspc</name><argument_list>(<argument><expr><name>pgconn</name></expr></argument>, <argument><expr><name>my_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>pgconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* display the given elements in the database */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>my_opts</name><operator>-&gt;</operator><name>oids</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
		<name><name>my_opts</name><operator>-&gt;</operator><name>tables</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
		<name><name>my_opts</name><operator>-&gt;</operator><name>filenodes</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>my_opts</name><operator>-&gt;</operator><name>quiet</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"From database \"%s\":\n"</literal></expr></argument>, <argument><expr><name><name>my_opts</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>sql_exec_searchtables</name><argument_list>(<argument><expr><name>pgconn</name></expr></argument>, <argument><expr><name>my_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>pgconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* no elements given; dump the given database */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>my_opts</name><operator>-&gt;</operator><name>dbname</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>my_opts</name><operator>-&gt;</operator><name>nodb</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>my_opts</name><operator>-&gt;</operator><name>quiet</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"From database \"%s\":\n"</literal></expr></argument>, <argument><expr><name><name>my_opts</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>sql_exec_dumpalltables</name><argument_list>(<argument><expr><name>pgconn</name></expr></argument>, <argument><expr><name>my_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>pgconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* no database either; dump all databases */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>my_opts</name><operator>-&gt;</operator><name>quiet</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"All databases:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>sql_exec_dumpalldbs</name><argument_list>(<argument><expr><name>pgconn</name></expr></argument>, <argument><expr><name>my_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>pgconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
