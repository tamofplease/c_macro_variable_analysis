<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/contrib/sasdemo/formatter/gpformatter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/formatter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/typcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<comment type="block">/* Do the module magic dance */</comment>
<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>formatter_export</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>formatter_import</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>Datum</name></type> <name>formatter_export</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>formatter_import</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>


<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>int</name></type>        <name>ncols</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>     <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>      <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>        <name>buflen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bytea</name>     <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
}</block></struct></type> <name>format_t</name>;</typedef>


<comment type="block">/* 
 * Maximum size string to support, affects allocation size of the tuple buffer.
 * Only used for variable length strings.  For strings with a declared typmod
 * we allow that size even if it is larger than this.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FORMAT_STRING</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<comment type="block">/*
 * Our format converts all NULLs to real values, for floats that value is NaN
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL_FLOAT8_VALUE</name></cpp:macro> <cpp:value>get_float8_nan()</cpp:value></cpp:define>


<function><type><name>Datum</name></type> 
<name>formatter_export</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTupleHeader</name></type>		<name>rec</name>	<init>= <expr><call><name>PG_GETARG_HEAPTUPLEHEADER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>           <name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTupleData</name></type>		<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>                 <name>ncolumns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>format_t</name>           <modifier>*</modifier></type><name>myData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>               <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>                 <name>datlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>                 <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* Must be called via the external table format manager */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CALLED_AS_FORMATTER</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"formatter_export: not called by format manager"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>FORMATTER_GET_TUPDESC</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Get our internal description of the formatter */</comment>
	<expr_stmt><expr><name>ncolumns</name> <operator>=</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>myData</name> <operator>=</operator> <operator>(</operator><name>format_t</name> <operator>*</operator><operator>)</operator> <call><name>FORMATTER_GET_USER_CTX</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>myData</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>myData</name>          <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>format_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>ncols</name></name>   <operator>=</operator> <name>ncolumns</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>values</name></name>  <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ncolumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>nulls</name></name>   <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ncolumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="block">/* Determine required buffer size */</comment>
		<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>buflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncolumns</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Oid</name></type>   <name>type</name>   <init>= <expr><name><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>atttypid</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int32</name></type> <name>typmod</name> <init>= <expr><name><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>atttypmod</name></expr></init></decl>;</decl_stmt>

			<comment type="block">/* Don't know how to format dropped columns, error for now */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attisdropped</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"formatter_export: dropped columns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>FLOAT8OID</name></expr>:</case>
				<block>{<block_content>
					<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>buflen</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>
	
				<case>case <expr><name>VARCHAROID</name></expr>:</case>
				<case>case <expr><name>BPCHAROID</name></expr>:</case>
				<case>case <expr><name>TEXTOID</name></expr>:</case>
				<block>{<block_content>
					<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>buflen</name></name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>typmod</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>typmod</name></expr> </then><else>: <expr><name>MAX_FORMAT_STRING</name></expr></else></ternary></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>
					
				<default>default:</default>
				<block>{<block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"formatter_export error: unsupported data type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>
			</block_content>}</block></switch>
		</block_content>}</block></for>

		<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>buflen</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>myData</name><operator>-&gt;</operator><name>buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* allocate at least 128 bytes */</comment>
		<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>myData</name><operator>-&gt;</operator><name>buflen</name></name> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>FORMATTER_SET_USER_CTX</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>myData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>myData</name><operator>-&gt;</operator><name>ncols</name></name> <operator>!=</operator> <name>ncolumns</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"formatter_export: unexpected change of output record type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* break the input tuple into fields */</comment>
	<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>t_len</name></name> <operator>=</operator> <call><name>HeapTupleHeaderGetDatumLength</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ItemPointerSetInvalid</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tuple</name><operator>.</operator><name>t_self</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>t_data</name></name> <operator>=</operator> <name>rec</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_deform_tuple</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name><name>myData</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name><name>myData</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>datlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name><name>myData</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	
	<comment type="block">/* =======================================================================
	 *                            MAIN FORMATTING CODE
	 *
	 * Currently this code assumes:
	 *  - Homogoneos hardware =&gt; No need to convert data to network byte order
	 *  - Support for TEXT/VARCHAR/BPCHAR/FLOAT8 only
	 *  - Length Prefixed strings
	 *  - No end of record tags, checksums, or optimizations for alignment.
	 *  - NULL values are cast to some sensible default value (NaN, "")
	 *
	 * ======================================================================= */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncolumns</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type>	  <name>type</name>    <init>= <expr><name><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>atttypid</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>   <name>typmod</name>  <init>= <expr><name><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>atttypmod</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name>val</name>     <init>= <expr><name><name>myData</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>  <name>nul</name>     <init>= <expr><name><name>myData</name><operator>-&gt;</operator><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		
		<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>FLOAT8OID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>float8</name></type> <name>value</name></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>datlen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <name><name>myData</name><operator>-&gt;</operator><name>buflen</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"formatter_export: buffer too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				
				<if_stmt><if>if <condition>(<expr><name>nul</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL_FLOAT8_VALUE</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>DatumGetFloat8</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>datlen</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>datlen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

			<case>case <expr><name>TEXTOID</name></expr>:</case>
			<case>case <expr><name>VARCHAROID</name></expr>:</case>
			<case>case <expr><name>BPCHAROID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>text</name>  <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int32</name></type>  <name>len</name></decl>;</decl_stmt>
			   
				<if_stmt><if>if <condition>(<expr><name>nul</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>DatumGetTextP</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>typmod</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>len</name>  <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>MAX_FORMAT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></else></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>datlen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name> <operator>&gt;=</operator> <name><name>myData</name><operator>-&gt;</operator><name>buflen</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"formatter_export: buffer too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>datlen</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>datlen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>datlen</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>datlen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block>

			<default>default:</default>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"formatter_export: unsupported datatype"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>	
	</block_content>}</block></for>
	<comment type="block">/* ======================================================================= */</comment>
	
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name><name>myData</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>datlen</name> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_BYTEA_P</name><argument_list>(<argument><expr><name><name>myData</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> 
<name>formatter_import</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>			<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>           <name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> 		<name>m</name></decl>, <decl><type ref="prev"/><name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>format_t</name>           <modifier>*</modifier></type><name>myData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>               <modifier>*</modifier></type><name>data_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>                 <name>ncolumns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			  		<name>data_cur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>                 <name>data_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>                 <name>i</name></decl>;</decl_stmt>
	
	<comment type="block">/* Must be called via the external table format manager */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CALLED_AS_FORMATTER</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"formatter_import: not called by format manager"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>FORMATTER_GET_TUPDESC</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Get our internal description of the formatter */</comment>
	<expr_stmt><expr><name>ncolumns</name> <operator>=</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>myData</name> <operator>=</operator> <operator>(</operator><name>format_t</name> <operator>*</operator><operator>)</operator> <call><name>FORMATTER_GET_USER_CTX</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>myData</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>

		<expr_stmt><expr><name>myData</name>          <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>format_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>ncols</name></name>   <operator>=</operator> <name>ncolumns</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>values</name></name>  <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ncolumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>nulls</name></name>   <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ncolumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="block">/* misc verification */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncolumns</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Oid</name></type>   <name>type</name>   <init>= <expr><name><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>atttypid</name></expr></init></decl>;</decl_stmt>
			<comment type="line">//int32 typmod = tupdesc-&gt;attrs[i]-&gt;atttypmod;</comment>

			<comment type="block">/* Don't know how to format dropped columns, error for now */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attisdropped</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"formatter_import: dropped columns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>FLOAT8OID</name></expr>:</case>
				<case>case <expr><name>VARCHAROID</name></expr>:</case>
				<case>case <expr><name>BPCHAROID</name></expr>:</case>
				<case>case <expr><name>TEXTOID</name></expr>:</case>
					<break>break;</break>
					
				<default>default:</default>
				<block>{<block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"formatter_import error: unsupported data type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>
			</block_content>}</block></switch>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>FORMATTER_SET_USER_CTX</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>myData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>myData</name><operator>-&gt;</operator><name>ncols</name></name> <operator>!=</operator> <name>ncolumns</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"formatter_import: unexpected change of output record type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* get our input data buf and number of valid bytes in it */</comment>
	<expr_stmt><expr><name>data_buf</name> <operator>=</operator> <call><name>FORMATTER_GET_DATABUF</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>data_len</name> <operator>=</operator> <call><name>FORMATTER_GET_DATALEN</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<expr_stmt><expr><name>data_cur</name> <operator>=</operator> <call><name>FORMATTER_GET_DATACURSOR</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* start clean */</comment>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name><name>myData</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ncolumns</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name><name>myData</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>ncolumns</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* =======================================================================
	 *                            MAIN FORMATTING CODE
	 *
	 * Currently this code assumes:
	 *  - Homogoneos hardware =&gt; No need to convert data to network byte order
	 *  - Support for TEXT/VARCHAR/BPCHAR/FLOAT8 only
	 *  - Length Prefixed strings
	 *  - No end of record tags, checksums, or optimizations for alignment.
	 *  - NULL values are cast to some sensible default value (NaN, "")
	 *
	 * ======================================================================= */</comment>
	<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>FORMATTER_GET_PER_ROW_MEM_CTX</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncolumns</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type>		<name>type</name>    	<init>= <expr><name><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>atttypid</name></expr></init></decl>;</decl_stmt>
		<comment type="line">//int	typmod		= tupdesc-&gt;attrs[i]-&gt;atttypmod;</comment>
		<decl_stmt><decl><type><name>int</name></type>		<name>remaining</name>	<init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>		<name>attr_len</name> 	<init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>data_len</name> <operator>-</operator> <name>data_cur</name></expr>;</expr_stmt>
		
		<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>FLOAT8OID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>float8</name></type> <name>value</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>attr_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				
				<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&lt;</operator> <name>attr_len</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>FORMATTER_RETURN_NOTIFICATION</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>FMT_NEED_MORE_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>data_buf</name> <operator>+</operator> <name>data_cur</name></expr></argument>, <argument><expr><name>attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<if_stmt><if>if<condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL_FLOAT8_VALUE</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				
				<comment type="block">/* TODO: check for nan? */</comment>
				
				<break>break;</break>
			</block_content>}</block>

			<case>case <expr><name>TEXTOID</name></expr>:</case>
			<case>case <expr><name>VARCHAROID</name></expr>:</case>
			<case>case <expr><name>BPCHAROID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>text</name><modifier>*</modifier></type>	<name>value</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int32</name></type>	<name>len</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type>	<name>nextlen</name> <init>= <expr><name>remaining</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
				
				<if_stmt><if>if <condition>(<expr><name>nextlen</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>data_buf</name> <operator>+</operator> <name>data_cur</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<comment type="block">/* if len or data bytes don't exist in this buffer, return */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nextlen</name> <operator>||</operator> <operator>(</operator><name>nextlen</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>remaining</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>len</name><operator>)</operator><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>FORMATTER_RETURN_NOTIFICATION</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>FMT_NEED_MORE_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				
				<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data_buf</name> <operator>+</operator> <name>data_cur</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>myData</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name>attr_len</name> <operator>=</operator> <name>len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				
				<break>break;</break>
			</block_content>}</block>
			
			<default>default:</default>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"formatter_import: unsupported datatype"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>	
		
		<comment type="block">/* add byte length of last attribute to the temporary cursor */</comment>
		<expr_stmt><expr><name>data_cur</name> <operator>+=</operator> <name>attr_len</name></expr>;</expr_stmt>
		
	</block_content>}</block></for>
	<comment type="block">/* ======================================================================= */</comment>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FORMATTER_SET_DATACURSOR</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>data_cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name><name>myData</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name><name>myData</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* hack... pass tuple here. don't free prev tuple - the executor does it  */</comment>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>FormatterData</name><operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>context</name></name><operator>)</operator><operator>-&gt;</operator><name>fmt_tuple</name> <operator>=</operator> <name>tuple</name></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>FORMATTER_RETURN_TUPLE</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
