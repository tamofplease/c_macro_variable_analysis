<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/contrib/intarray/_int_bool.c"><comment type="block">/*
 * contrib/intarray/_int_bool.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_int.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>bqarr_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>bqarr_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>boolop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>rboolop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>querytree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/* parser's states */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAITOPERAND</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAITENDOPERAND</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAITOPERATOR</name></cpp:macro>	<cpp:value>3</cpp:value></cpp:define>

<comment type="block">/*
 * node of query tree, also used
 * for storing polish notation in parser
 */</comment>
<typedef>typedef <type><struct>struct <name>NODE</name>
<block>{
	<decl_stmt><decl><type><name>int32</name></type>		<name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>NODE</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>NODE</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>count</name></decl>;</decl_stmt>
	<comment type="block">/* reverse polish notation in list (for temporary usage) */</comment>
	<decl_stmt><decl><type><name>NODE</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<comment type="block">/* number in str */</comment>
	<decl_stmt><decl><type><name>int32</name></type>		<name>num</name></decl>;</decl_stmt>
}</block></struct></type> <name>WORKSTATE</name>;</typedef>

<comment type="block">/*
 * get token from query string
 */</comment>
<function><type><specifier>static</specifier> <name>int32</name></type>
<name>gettoken</name><parameter_list>(<parameter><decl><type><name>WORKSTATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>nnn</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>innn</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>					<comment type="block">/* default result */</comment>

	<expr_stmt><expr><name>innn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>innn</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nnn</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* buffer overrun =&gt; syntax error */</comment>
		<switch>switch <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>WAITOPERAND</name></expr>:</case>
				<expr_stmt><expr><name>innn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator>
					<operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>WAITENDOPERAND</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>nnn</name><index>[<expr><name>innn</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>
					<return>return <expr><name>OPR</name></expr>;</return>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
					<return>return <expr><name>OPEN</name></expr>;</return>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><name>WAITENDOPERAND</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>nnn</name><index>[<expr><name>innn</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<decl_stmt><decl><type><name>long</name></type>		<name>lval</name></decl>;</decl_stmt>

					<expr_stmt><expr><name><name>nnn</name><index>[<expr><name>innn</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>lval</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>nnn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator> <name>lval</name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>*</operator><name>val</name> <operator>!=</operator> <name>lval</name></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
					<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>WAITOPERATOR</name></expr>;</expr_stmt>
					<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>
						?</condition><then> <expr><name>ERR</name></expr> </then><else>: <expr><name>VAL</name></expr></else></ternary></expr>;</return>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><name>WAITOPERATOR</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>WAITOPERAND</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator> <operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
					<return>return <expr><name>OPR</name></expr>;</return>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
					<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ERR</name></expr> </then><else>: <expr><name>CLOSE</name></expr></else></ternary></expr>;</return>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>ERR</name></expr> </then><else>: <expr><name>END</name></expr></else></ternary></expr>;</return></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
				<break>break;</break>
			<default>default:</default>
				<return>return <expr><name>ERR</name></expr>;</return>
				<break>break;</break>
		</block_content>}</block></switch>
		<expr_stmt><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * push new one in polish notation reverse view
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pushquery</name><parameter_list>(<parameter><decl><type><name>WORKSTATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NODE</name>	   <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>NODE</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACKDEPTH</name></cpp:macro>	<cpp:value>16</cpp:value></cpp:define>

<comment type="block">/*
 * make polish notation of query
 */</comment>
<function><type><specifier>static</specifier> <name>int32</name></type>
<name>makepol</name><parameter_list>(<parameter><decl><type><name>WORKSTATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>val</name></decl>,
				<decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name><name>stack</name><index>[<expr><name>STACKDEPTH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>lenstack</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* since this function recurses, it could be driven to stack overflow */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>gettoken</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>END</name></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>VAL</name></expr>:</case>
				<expr_stmt><expr><call><name>pushquery</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while>while <condition>(<expr><name>lenstack</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>stack</name><index>[<expr><name>lenstack</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'&amp;'</literal> <operator>||</operator>
									<name><name>stack</name><index>[<expr><name>lenstack</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'!'</literal><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>lenstack</name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pushquery</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>OPR</name></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>lenstack</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></while>
				<break>break;</break>
			<case>case <expr><name>OPR</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>lenstack</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'|'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>pushquery</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>OPR</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>lenstack</name> <operator>==</operator> <name>STACKDEPTH</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_STATEMENT_TOO_COMPLEX</name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"statement too complex"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name><name>stack</name><index>[<expr><name>lenstack</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>lenstack</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><name>OPEN</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>makepol</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ERR</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
				<while>while <condition>(<expr><name>lenstack</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>stack</name><index>[<expr><name>lenstack</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'&amp;'</literal> <operator>||</operator>
									<name><name>stack</name><index>[<expr><name>lenstack</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'!'</literal><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>lenstack</name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pushquery</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>OPR</name></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>lenstack</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></while>
				<break>break;</break>
			<case>case <expr><name>CLOSE</name></expr>:</case>
				<while>while <condition>(<expr><name>lenstack</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>lenstack</name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pushquery</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>OPR</name></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>lenstack</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></while><empty_stmt>;</empty_stmt>
				<return>return <expr><name>END</name></expr>;</return>
				<break>break;</break>
			<case>case <expr><name>ERR</name></expr>:</case>
			<default>default:</default>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"syntax error"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>ERR</name></expr>;</return>

		</block_content>}</block></switch>
	</block_content>}</block></while>

	<while>while <condition>(<expr><name>lenstack</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>lenstack</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pushquery</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>OPR</name></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>lenstack</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while><empty_stmt>;</empty_stmt>
	<return>return <expr><name>END</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>arrb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>arre</name></decl>;</decl_stmt>
}</block></struct></type> <name>CHKVAL</name>;</typedef>

<comment type="block">/*
 * is there value 'val' in (sorted) array or not ?
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>checkcondition_arr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checkval</name></decl></parameter>, <parameter><decl><type><name>ITEM</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>StopLow</name> <init>= <expr><operator>(</operator><operator>(</operator><name>CHKVAL</name> <operator>*</operator><operator>)</operator> <name>checkval</name><operator>)</operator><operator>-&gt;</operator><name>arrb</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>StopHigh</name> <init>= <expr><operator>(</operator><operator>(</operator><name>CHKVAL</name> <operator>*</operator><operator>)</operator> <name>checkval</name><operator>)</operator><operator>-&gt;</operator><name>arre</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>StopMiddle</name></decl>;</decl_stmt>

	<comment type="block">/* Loop invariant: StopLow &lt;= val &lt; StopHigh */</comment>

	<while>while <condition>(<expr><name>StopLow</name> <operator>&lt;</operator> <name>StopHigh</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>StopMiddle</name> <operator>=</operator> <name>StopLow</name> <operator>+</operator> <operator>(</operator><name>StopHigh</name> <operator>-</operator> <name>StopLow</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>StopMiddle</name> <operator>==</operator> <name><name>item</name><operator>-&gt;</operator><name>val</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>*</operator><name>StopMiddle</name> <operator>&lt;</operator> <name><name>item</name><operator>-&gt;</operator><name>val</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>StopLow</name> <operator>=</operator> <name>StopMiddle</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>StopHigh</name> <operator>=</operator> <name>StopMiddle</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>checkcondition_bit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checkval</name></decl></parameter>, <parameter><decl><type><name>ITEM</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>GETBIT</name><argument_list>(<argument><expr><name>checkval</name></expr></argument>, <argument><expr><call><name>HASHVAL</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * evaluate boolean expression, using chkcond() to test the primitive cases
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>execute</name><parameter_list>(<parameter><decl><type><name>ITEM</name> <modifier>*</modifier></type><name>curitem</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checkval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>calcnot</name></decl></parameter>,
		<parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>chkcond</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checkval</name></decl></parameter>, <parameter><decl><type><name>ITEM</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* since this function recurses, it could be driven to stack overflow */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>curitem</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VAL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>chkcond</name>) <argument_list>(<argument><expr><name>checkval</name></expr></argument>, <argument><expr><name>curitem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>curitem</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'!'</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><ternary><condition><expr><name>calcnot</name></expr> ?</condition><then>
			<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>execute</name><argument_list>(<argument><expr><name>curitem</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>checkval</name></expr></argument>, <argument><expr><name>calcnot</name></expr></argument>, <argument><expr><name>chkcond</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary><operator>)</operator></expr>
			</then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>curitem</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'&amp;'</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>execute</name><argument_list>(<argument><expr><name>curitem</name> <operator>+</operator> <name><name>curitem</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>checkval</name></expr></argument>, <argument><expr><name>calcnot</name></expr></argument>, <argument><expr><name>chkcond</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>execute</name><argument_list>(<argument><expr><name>curitem</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>checkval</name></expr></argument>, <argument><expr><name>calcnot</name></expr></argument>, <argument><expr><name>chkcond</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>							<comment type="block">/* |-operator */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>execute</name><argument_list>(<argument><expr><name>curitem</name> <operator>+</operator> <name><name>curitem</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>checkval</name></expr></argument>, <argument><expr><name>calcnot</name></expr></argument>, <argument><expr><name>chkcond</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><call><name>execute</name><argument_list>(<argument><expr><name>curitem</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>checkval</name></expr></argument>, <argument><expr><name>calcnot</name></expr></argument>, <argument><expr><name>chkcond</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * signconsistent &amp; execconsistent called by *_consistent
 */</comment>
<function><type><name>bool</name></type>
<name>signconsistent</name><parameter_list>(<parameter><decl><type><name>QUERYTYPE</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>BITVEC</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>calcnot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>execute</name><argument_list>(<argument><expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
				   <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sign</name></expr></argument>, <argument><expr><name>calcnot</name></expr></argument>,
				   <argument><expr><name>checkcondition_bit</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Array must be sorted! */</comment>
<function><type><name>bool</name></type>
<name>execconsistent</name><parameter_list>(<parameter><decl><type><name>QUERYTYPE</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>calcnot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CHKVAL</name></type>		<name>chkval</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECKARRVALID</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chkval</name><operator>.</operator><name>arrb</name></name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chkval</name><operator>.</operator><name>arre</name></name> <operator>=</operator> <name><name>chkval</name><operator>.</operator><name>arrb</name></name> <operator>+</operator> <call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>execute</name><argument_list>(<argument><expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
				   <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>chkval</name></expr></argument>, <argument><expr><name>calcnot</name></expr></argument>,
				   <argument><expr><name>checkcondition_arr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>ITEM</name>	   <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>mapped_check</name></decl>;</decl_stmt>
}</block></struct></type> <name>GinChkVal</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>checkcondition_gin</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checkval</name></decl></parameter>, <parameter><decl><type><name>ITEM</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GinChkVal</name>  <modifier>*</modifier></type><name>gcv</name> <init>= <expr><operator>(</operator><name>GinChkVal</name> <operator>*</operator><operator>)</operator> <name>checkval</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>gcv</name><operator>-&gt;</operator><name>mapped_check</name><index>[<expr><name>item</name> <operator>-</operator> <name><name>gcv</name><operator>-&gt;</operator><name>first</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>gin_bool_consistent</name><parameter_list>(<parameter><decl><type><name>QUERYTYPE</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GinChkVal</name></type>	<name>gcv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ITEM</name>	   <modifier>*</modifier></type><name>items</name> <init>= <expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Set up data for checkcondition_gin.  This must agree with the query
	 * extraction code in ginint4_queryextract.
	 */</comment>
	<expr_stmt><expr><name><name>gcv</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>items</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gcv</name><operator>.</operator><name>mapped_check</name></name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>VAL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>gcv</name><operator>.</operator><name>mapped_check</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>check</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><call><name>execute</name><argument_list>(<argument><expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
				   <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>gcv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
				   <argument><expr><name>checkcondition_gin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>contains_required_value</name><parameter_list>(<parameter><decl><type><name>ITEM</name> <modifier>*</modifier></type><name>curitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* since this function recurses, it could be driven to stack overflow */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>curitem</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VAL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>curitem</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'!'</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Assume anything under a NOT is non-required.  For some cases with
		 * nested NOTs, we could prove there's a required value, but it seems
		 * unlikely to be worth the trouble.
		 */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>curitem</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'&amp;'</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* If either side has a required value, we're good */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>contains_required_value</name><argument_list>(<argument><expr><name>curitem</name> <operator>+</operator> <name><name>curitem</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><call><name>contains_required_value</name><argument_list>(<argument><expr><name>curitem</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>							<comment type="block">/* |-operator */</comment>
		<comment type="block">/* Both sides must have required values */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>contains_required_value</name><argument_list>(<argument><expr><name>curitem</name> <operator>+</operator> <name><name>curitem</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>contains_required_value</name><argument_list>(<argument><expr><name>curitem</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>query_has_required_values</name><parameter_list>(<parameter><decl><type><name>QUERYTYPE</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>contains_required_value</name><argument_list>(<argument><expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * boolean operations
 */</comment>
<function><type><name>Datum</name></type>
<name>rboolop</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* just reverse the operands */</comment>
	<return>return <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>boolop</name></expr></argument>,
							   <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>boolop</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P_COPY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QUERYTYPE</name>  <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>PG_GETARG_QUERYTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CHKVAL</name></type>		<name>chkval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECKARRVALID</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPAREARR</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chkval</name><operator>.</operator><name>arrb</name></name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chkval</name><operator>.</operator><name>arre</name></name> <operator>=</operator> <name><name>chkval</name><operator>.</operator><name>arrb</name></name> <operator>+</operator> <call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>execute</name><argument_list>(<argument><expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
					 <argument><expr><operator>&amp;</operator><name>chkval</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
					 <argument><expr><name>checkcondition_arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>findoprnd</name><parameter_list>(<parameter><decl><type><name>ITEM</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* since this function recurses, it could be driven to stack overflow. */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BS_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>ptr</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>OPR</name><operator>)</operator></expr> ?</condition><then>
		 <expr><literal type="string">"%d  %c"</literal></expr> </then><else>: <expr><literal type="string">"%d  %d"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>*</operator><name>pos</name></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>VAL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ptr</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>ptr</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'!'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ptr</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>findoprnd</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>ITEM</name>	   <modifier>*</modifier></type><name>curitem</name> <init>= <expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>tmp</name> <init>= <expr><operator>*</operator><name>pos</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>findoprnd</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>curitem</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <operator>*</operator><name>pos</name> <operator>-</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>findoprnd</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * input
 */</comment>
<function><type><name>Datum</name></type>
<name>bqarr_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WORKSTATE</name></type>	<name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QUERYTYPE</name>  <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>commonlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ITEM</name>	   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NODE</name>	   <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BS_DEBUG</name></cpp:ifdef>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>pbuf</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>state</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>WAITOPERAND</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* make polish notation (postfix, but in reverse order) */</comment>
	<expr_stmt><expr><call><name>makepol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"empty query"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <name>QUERYTYPEMAXITEMS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"number of query items (%d) exceeds the maximum allowed (%d)"</literal></expr></argument>,
						<argument><expr><name><name>state</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>QUERYTYPEMAXITEMS</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>commonlen</name> <operator>=</operator> <call><name>COMPUTESIZE</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>query</name> <operator>=</operator> <operator>(</operator><name>QUERYTYPE</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>commonlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>commonlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>str</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>str</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>str</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>findoprnd</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BS_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>OPR</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><literal type="string">"%c(%d) "</literal></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"POR: %s"</literal></expr></argument>, <argument><expr><name><name>pbuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>pbuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * out function
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>ITEM</name>	   <modifier>*</modifier></type><name>curpol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>buflen</name></decl>;</decl_stmt>
}</block></struct></type> <name>INFIX</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESIZEBUF</name><parameter_list>(<parameter><type><name>inf</name></type></parameter>,<parameter><type><name>addsize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while( ( (inf)-&gt;cur - (inf)-&gt;buf ) + (addsize) + 1 &gt;= (inf)-&gt;buflen ) { \
	int32 len = inf-&gt;cur - inf-&gt;buf; \
	inf-&gt;buflen *= 2; \
	inf-&gt;buf = (char*) repalloc( (void*)inf-&gt;buf, inf-&gt;buflen ); \
	inf-&gt;cur = inf-&gt;buf + len; \
}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>infix</name><parameter_list>(<parameter><decl><type><name>INFIX</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* since this function recurses, it could be driven to stack overflow. */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VAL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RESIZEBUF</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'!'</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>isopr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>RESIZEBUF</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>=</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name></name><operator>--</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPR</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>isopr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RESIZEBUF</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="string">"( "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>infix</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>isopr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isopr</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>RESIZEBUF</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="string">" )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>op</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name><operator>-&gt;</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>INFIX</name></type>		<name>nrm</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name></name><operator>--</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'|'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>first</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>RESIZEBUF</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="string">"( "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>nrm</name><operator>.</operator><name>curpol</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>curpol</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nrm</name><operator>.</operator><name>buflen</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nrm</name><operator>.</operator><name>cur</name></name> <operator>=</operator> <name><name>nrm</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>nrm</name><operator>.</operator><name>buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* get right operand */</comment>
		<expr_stmt><expr><call><name>infix</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nrm</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* get &amp; print left operand */</comment>
		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name></name> <operator>=</operator> <name><name>nrm</name><operator>.</operator><name>curpol</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>infix</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* print operator &amp; right operand */</comment>
		<expr_stmt><expr><call><name>RESIZEBUF</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name><name>nrm</name><operator>.</operator><name>cur</name></name> <operator>-</operator> <name><name>nrm</name><operator>.</operator><name>buf</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="string">" %c %s"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>nrm</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>nrm</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'|'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>first</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>RESIZEBUF</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="string">" )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>bqarr_out</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QUERYTYPE</name>  <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>PG_GETARG_QUERYTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>INFIX</name></type>		<name>nrm</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"empty query"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>nrm</name><operator>.</operator><name>curpol</name></name> <operator>=</operator> <call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nrm</name><operator>.</operator><name>buflen</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nrm</name><operator>.</operator><name>cur</name></name> <operator>=</operator> <name><name>nrm</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>nrm</name><operator>.</operator><name>buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>nrm</name><operator>.</operator><name>cur</name></name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>infix</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nrm</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name><name>nrm</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* Useless old "debugging" function for a fundamentally wrong algorithm */</comment>
<function><type><name>Datum</name></type>
<name>querytree</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"querytree is no longer implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
