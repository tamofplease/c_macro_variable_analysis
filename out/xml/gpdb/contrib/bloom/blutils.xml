<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/contrib/bloom/blutils.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * blutils.c
 *		Bloom index utilities.
 *
 * Portions Copyright (c) 2016-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1990-1993, Regents of the University of California
 *
 * IDENTIFICATION
 *	  contrib/bloom/blutils.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/amapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/generic_xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/indexfsm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/reloptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/freespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/indexfsm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bloom.h"</cpp:file></cpp:include>

<comment type="block">/* Signature dealing macros - note i is assumed to be of type int */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETWORD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( *( (BloomSignatureWord *)(x) + ( (i) / SIGNWORDBITS ) ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLRBIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>GETWORD(x,i) &amp;= ~( 0x01 &lt;&lt; ( (i) % SIGNWORDBITS ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETBIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>GETWORD(x,i) |=  ( 0x01 &lt;&lt; ( (i) % SIGNWORDBITS ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETBIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (GETWORD(x,i) &gt;&gt; ( (i) % SIGNWORDBITS )) &amp; 0x01 )</cpp:value></cpp:define>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>blhandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Kind of relation options for bloom index */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>relopt_kind</name></type> <name>bl_relopt_kind</name></decl>;</decl_stmt>

<comment type="block">/* parse table for fillRelOptions */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>relopt_parse_elt</name></type> <name><name>bl_relopt_tab</name><index>[<expr><name>INDEX_MAX_KEYS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>myRand</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mySrand</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>seed</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Module initialize function: initialize info about Bloom relation options.
 *
 * Note: keep this in sync with makeDefaultBloomOptions().
 */</comment>
<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bl_relopt_kind</name> <operator>=</operator> <call><name>add_reloption_kind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Option for length of signature */</comment>
	<expr_stmt><expr><call><name>add_int_reloption</name><argument_list>(<argument><expr><name>bl_relopt_kind</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>,
					  <argument><expr><literal type="string">"Length of signature in bits"</literal></expr></argument>,
					  <argument><expr><name>DEFAULT_BLOOM_LENGTH</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAX_BLOOM_LENGTH</name></expr></argument>,
					  <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bl_relopt_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>optname</name> <operator>=</operator> <literal type="string">"length"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bl_relopt_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>opttype</name> <operator>=</operator> <name>RELOPT_TYPE_INT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bl_relopt_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>BloomOptions</name></expr></argument>, <argument><expr><name>bloomLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Number of bits for each possible index column: col1, col2, ... */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>INDEX_MAX_KEYS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"col%d"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_int_reloption</name><argument_list>(<argument><expr><name>bl_relopt_kind</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
						  <argument><expr><literal type="string">"Number of bits generated for each index column"</literal></expr></argument>,
						  <argument><expr><name>DEFAULT_BLOOM_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAX_BLOOM_BITS</name></expr></argument>,
						  <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bl_relopt_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>optname</name> <operator>=</operator> <call><name>MemoryContextStrdup</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
														   <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bl_relopt_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>opttype</name> <operator>=</operator> <name>RELOPT_TYPE_INT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bl_relopt_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>BloomOptions</name></expr></argument>, <argument><expr><name><name>bitSize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Construct a default set of Bloom options.
 */</comment>
<function><type><specifier>static</specifier> <name>BloomOptions</name> <modifier>*</modifier></type>
<name>makeDefaultBloomOptions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BloomOptions</name> <modifier>*</modifier></type><name>opts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>opts</name> <operator>=</operator> <operator>(</operator><name>BloomOptions</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BloomOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Convert DEFAULT_BLOOM_LENGTH from # of bits to # of words */</comment>
	<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>bloomLength</name></name> <operator>=</operator> <operator>(</operator><name>DEFAULT_BLOOM_LENGTH</name> <operator>+</operator> <name>SIGNWORDBITS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>SIGNWORDBITS</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>INDEX_MAX_KEYS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>bitSize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>DEFAULT_BLOOM_BITS</name></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BloomOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>opts</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Bloom handler function: return IndexAmRoutine with access method parameters
 * and callbacks.
 */</comment>
<function><type><name>Datum</name></type>
<name>blhandler</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexAmRoutine</name> <modifier>*</modifier></type><name>amroutine</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>IndexAmRoutine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amstrategies</name></name> <operator>=</operator> <name>BLOOM_NSTRATEGIES</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amsupport</name></name> <operator>=</operator> <name>BLOOM_NPROC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcanorder</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcanorderbyop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcanbackward</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcanunique</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcanmulticol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amoptionalkey</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amsearcharray</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amsearchnulls</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amstorage</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amclusterable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>ampredlocks</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcanparallel</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcaninclude</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amkeytype</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>ambuild</name></name> <operator>=</operator> <name>blbuild</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>ambuildempty</name></name> <operator>=</operator> <name>blbuildempty</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>aminsert</name></name> <operator>=</operator> <name>blinsert</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>ambulkdelete</name></name> <operator>=</operator> <name>blbulkdelete</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amvacuumcleanup</name></name> <operator>=</operator> <name>blvacuumcleanup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcanreturn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcostestimate</name></name> <operator>=</operator> <name>blcostestimate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amoptions</name></name> <operator>=</operator> <name>bloptions</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amproperty</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>ambuildphasename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amvalidate</name></name> <operator>=</operator> <name>blvalidate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>ambeginscan</name></name> <operator>=</operator> <name>blbeginscan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amrescan</name></name> <operator>=</operator> <name>blrescan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amgettuple</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amgetbitmap</name></name> <operator>=</operator> <name>blgetbitmap</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amendscan</name></name> <operator>=</operator> <name>blendscan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>ammarkpos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amrestrpos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amestimateparallelscan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>aminitparallelscan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amparallelrescan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>amroutine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Fill BloomState structure for particular index.
 */</comment>
<function><type><name>void</name></type>
<name>initBloomState</name><parameter_list>(<parameter><decl><type><name>BloomState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>nColumns</name></name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>

	<comment type="block">/* Initialize hash function for each attribute */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fmgr_info_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>hashFn</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>,
					   <argument><expr><call><name>index_getprocinfo</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>BLOOM_HASH_PROC</name></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>collations</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>rd_indcollation</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Initialize amcache if needed with options from metapage */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>index</name><operator>-&gt;</operator><name>rd_amcache</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Buffer</name></type>		<name>buffer</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Page</name></type>		<name>page</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BloomMetaPageData</name> <modifier>*</modifier></type><name>meta</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BloomOptions</name> <modifier>*</modifier></type><name>opts</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>opts</name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>rd_indexcxt</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BloomOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>ReadBuffer</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>BLOOM_METAPAGE_BLKNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_SHARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BloomPageIsMeta</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Relation is not a bloom index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>meta</name> <operator>=</operator> <call><name>BloomPageGetMeta</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>magickNumber</name></name> <operator>!=</operator> <name>BLOOM_MAGICK_NUMBER</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Relation is not a bloom index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>opts</name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>opts</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>UnlockReleaseBuffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>rd_amcache</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>opts</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>opts</name></name></expr></argument>, <argument><expr><name><name>index</name><operator>-&gt;</operator><name>rd_amcache</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>opts</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>sizeOfBloomTuple</name></name> <operator>=</operator> <name>BLOOMTUPLEHDRSZ</name> <operator>+</operator>
		<sizeof>sizeof<argument_list>(<argument><expr><name>BloomSignatureWord</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>bloomLength</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Random generator copied from FreeBSD.  Using own random generator here for
 * two reasons:
 *
 * 1) In this case random numbers are used for on-disk storage.  Usage of
 *	  PostgreSQL number generator would obstruct it from all possible changes.
 * 2) Changing seed of PostgreSQL random generator would be undesirable side
 *	  effect.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int32</name></type> <name>next</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32</name></type>
<name>myRand</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*----------
	 * Compute x = (7^5 * x) mod (2^31 - 1)
	 * without overflowing 31 bits:
	 *		(2^31 - 1) = 127773 * (7^5) + 2836
	 * From "Random number generators: good ones are hard to find",
	 * Park and Miller, Communications of the ACM, vol. 31, no. 10,
	 * October 1988, p. 1195.
	 *----------
	 */</comment>
	<decl_stmt><decl><type><name>int32</name></type>		<name>hi</name></decl>,
				<decl><type ref="prev"/><name>lo</name></decl>,
				<decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

	<comment type="block">/* Must be in [1, 0x7ffffffe] range at this point. */</comment>
	<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>next</name> <operator>/</operator> <literal type="number">127773</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>next</name> <operator>%</operator> <literal type="number">127773</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">16807</literal> <operator>*</operator> <name>lo</name> <operator>-</operator> <literal type="number">2836</literal> <operator>*</operator> <name>hi</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>next</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	<comment type="block">/* Transform to [0, 0x7ffffffd] range. */</comment>
	<return>return <expr><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mySrand</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>next</name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>
	<comment type="block">/* Transform to [1, 0x7ffffffe] range. */</comment>
	<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>(</operator><name>next</name> <operator>%</operator> <literal type="number">0x7ffffffe</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Add bits of given value to the signature.
 */</comment>
<function><type><name>void</name></type>
<name>signValue</name><parameter_list>(<parameter><decl><type><name>BloomState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>BloomSignatureWord</name> <modifier>*</modifier></type><name>sign</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>hashVal</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nBit</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * init generator with "column's" number to get "hashed" seed for new
	 * value. We don't want to map the same numbers from different columns
	 * into the same bits!
	 */</comment>
	<expr_stmt><expr><call><name>mySrand</name><argument_list>(<argument><expr><name>attno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Init hash sequence to map our value into bits. the same values in
	 * different columns will be mapped into different bits because of step
	 * above
	 */</comment>
	<expr_stmt><expr><name>hashVal</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>FunctionCall1Coll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>hashFn</name><index>[<expr><name>attno</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>collations</name><index>[<expr><name>attno</name></expr>]</index></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mySrand</name><argument_list>(<argument><expr><name>hashVal</name> <operator>^</operator> <call><name>myRand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>bitSize</name><index>[<expr><name>attno</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* prevent multiple evaluation in SETBIT macro */</comment>
		<expr_stmt><expr><name>nBit</name> <operator>=</operator> <call><name>myRand</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>bloomLength</name></name> <operator>*</operator> <name>SIGNWORDBITS</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SETBIT</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Make bloom tuple from values.
 */</comment>
<function><type><name>BloomTuple</name> <modifier>*</modifier></type>
<name>BloomFormTuple</name><parameter_list>(<parameter><decl><type><name>BloomState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>iptr</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BloomTuple</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>BloomTuple</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>sizeOfBloomTuple</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>heapPtr</name></name> <operator>=</operator> <operator>*</operator><name>iptr</name></expr>;</expr_stmt>

	<comment type="block">/* Blooming each column */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>nColumns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* skip nulls */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>signValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>sign</name></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Add new bloom tuple to the page.  Returns true if new tuple was successfully
 * added to the page.  Returns false if it doesn't fit on the page.
 */</comment>
<function><type><name>bool</name></type>
<name>BloomPageAddItem</name><parameter_list>(<parameter><decl><type><name>BloomState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>Page</name></type> <name>page</name></decl></parameter>, <parameter><decl><type><name>BloomTuple</name> <modifier>*</modifier></type><name>tuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BloomTuple</name> <modifier>*</modifier></type><name>itup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BloomPageOpaque</name></type> <name>opaque</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>ptr</name></decl>;</decl_stmt>

	<comment type="block">/* We shouldn't be pointed to an invalid page */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>PageIsNew</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>BloomPageIsDeleted</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Does new tuple fit on the page? */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>BloomPageGetFreeSpace</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>sizeOfBloomTuple</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Copy new tuple to the end of page */</comment>
	<expr_stmt><expr><name>opaque</name> <operator>=</operator> <call><name>BloomPageGetOpaque</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>itup</name> <operator>=</operator> <call><name>BloomPageGetTuple</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name><name>opaque</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <name>itup</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <name>tuple</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>sizeOfBloomTuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Adjust maxoff and pd_lower */</comment>
	<expr_stmt><expr><name><name>opaque</name><operator>-&gt;</operator><name>maxoff</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <call><name>BloomPageGetTuple</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name><name>opaque</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>page</name><operator>)</operator><operator>-&gt;</operator><name>pd_lower</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>page</name></expr>;</expr_stmt>

	<comment type="block">/* Assert we didn't overrun available space */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>page</name><operator>)</operator><operator>-&gt;</operator><name>pd_lower</name> <operator>&lt;=</operator> <operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>page</name><operator>)</operator><operator>-&gt;</operator><name>pd_upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Allocate a new page (either by recycling, or by extending the index file)
 * The returned buffer is already pinned and exclusive-locked
 * Caller is responsible for initializing the page by calling BloomInitPage
 */</comment>
<function><type><name>Buffer</name></type>
<name>BloomNewBuffer</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Buffer</name></type>		<name>buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>needLock</name></decl>;</decl_stmt>

	<comment type="block">/* First, try to get a page from FSM */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BlockNumber</name></type> <name>blkno</name> <init>= <expr><call><name>GetFreeIndexPage</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>blkno</name> <operator>==</operator> <name>InvalidBlockNumber</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>ReadBuffer</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * We have to guard against the possibility that someone else already
		 * recycled this page; the buffer may be locked if so.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>ConditionalLockBuffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Page</name></type>		<name>page</name> <init>= <expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>PageIsNew</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>buffer</name></expr>;</return></block_content></block></if></if_stmt>	<comment type="block">/* OK to use, if never initialized */</comment>

			<if_stmt><if>if <condition>(<expr><call><name>BloomPageIsDeleted</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>buffer</name></expr>;</return></block_content></block></if></if_stmt>	<comment type="block">/* OK to use */</comment>

			<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_UNLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Can't use it, so release buffer and try again */</comment>
		<expr_stmt><expr><call><name>ReleaseBuffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Must extend the file */</comment>
	<expr_stmt><expr><name>needLock</name> <operator>=</operator> <operator>!</operator><call><name>RELATION_IS_LOCAL</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>needLock</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>LockRelationForExtension</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>ExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>ReadBuffer</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>P_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>needLock</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>UnlockRelationForExtension</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>ExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize any page of a bloom index.
 */</comment>
<function><type><name>void</name></type>
<name>BloomInitPage</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>page</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BloomPageOpaque</name></type> <name>opaque</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PageInit</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BloomPageOpaqueData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>opaque</name> <operator>=</operator> <call><name>BloomPageGetOpaque</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BloomPageOpaqueData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>opaque</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>opaque</name><operator>-&gt;</operator><name>bloom_page_id</name></name> <operator>=</operator> <name>BLOOM_PAGE_ID</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Fill in metapage for bloom index.
 */</comment>
<function><type><name>void</name></type>
<name>BloomFillMetapage</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>Page</name></type> <name>metaPage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BloomOptions</name> <modifier>*</modifier></type><name>opts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BloomMetaPageData</name> <modifier>*</modifier></type><name>metadata</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Choose the index's options.  If reloptions have been assigned, use
	 * those, otherwise create default options.
	 */</comment>
	<expr_stmt><expr><name>opts</name> <operator>=</operator> <operator>(</operator><name>BloomOptions</name> <operator>*</operator><operator>)</operator> <name><name>index</name><operator>-&gt;</operator><name>rd_options</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opts</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>opts</name> <operator>=</operator> <call><name>makeDefaultBloomOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Initialize contents of meta page, including a copy of the options,
	 * which are now frozen for the life of the index.
	 */</comment>
	<expr_stmt><expr><call><name>BloomInitPage</name><argument_list>(<argument><expr><name>metaPage</name></expr></argument>, <argument><expr><name>BLOOM_META</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>metadata</name> <operator>=</operator> <call><name>BloomPageGetMeta</name><argument_list>(<argument><expr><name>metaPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BloomMetaPageData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>metadata</name><operator>-&gt;</operator><name>magickNumber</name></name> <operator>=</operator> <name>BLOOM_MAGICK_NUMBER</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>metadata</name><operator>-&gt;</operator><name>opts</name></name> <operator>=</operator> <operator>*</operator><name>opts</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>metaPage</name><operator>)</operator><operator>-&gt;</operator><name>pd_lower</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BloomMetaPageData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<comment type="block">/* If this fails, probably FreeBlockNumberArray size calc is wrong: */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>metaPage</name><operator>)</operator><operator>-&gt;</operator><name>pd_lower</name> <operator>&lt;=</operator> <operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>metaPage</name><operator>)</operator><operator>-&gt;</operator><name>pd_upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize metapage for bloom index.
 */</comment>
<function><type><name>void</name></type>
<name>BloomInitMetapage</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Buffer</name></type>		<name>metaBuffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>		<name>metaPage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GenericXLogState</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Make a new page; since it is first page it should be associated with
	 * block number 0 (BLOOM_METAPAGE_BLKNO).
	 */</comment>
	<expr_stmt><expr><name>metaBuffer</name> <operator>=</operator> <call><name>BloomNewBuffer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>BufferGetBlockNumber</name><argument_list>(<argument><expr><name>metaBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BLOOM_METAPAGE_BLKNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize contents of meta page */</comment>
	<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>GenericXLogStart</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>metaPage</name> <operator>=</operator> <call><name>GenericXLogRegisterBuffer</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>metaBuffer</name></expr></argument>,
										 <argument><expr><name>GENERIC_XLOG_FULL_IMAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BloomFillMetapage</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>metaPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GenericXLogFinish</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>UnlockReleaseBuffer</name><argument_list>(<argument><expr><name>metaBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Parse reloptions for bloom index, producing a BloomOptions struct.
 */</comment>
<function><type><name>bytea</name> <modifier>*</modifier></type>
<name>bloptions</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>reloptions</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>validate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>relopt_value</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>numoptions</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BloomOptions</name> <modifier>*</modifier></type><name>rdopts</name></decl>;</decl_stmt>

	<comment type="block">/* Parse the user-given reloptions */</comment>
	<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>parseRelOptions</name><argument_list>(<argument><expr><name>reloptions</name></expr></argument>, <argument><expr><name>validate</name></expr></argument>, <argument><expr><name>bl_relopt_kind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdopts</name> <operator>=</operator> <call><name>allocateReloptStruct</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BloomOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>numoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fillRelOptions</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>rdopts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BloomOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>numoptions</name></expr></argument>,
				   <argument><expr><name>validate</name></expr></argument>, <argument><expr><name>bl_relopt_tab</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>bl_relopt_tab</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Convert signature length from # of bits to # to words, rounding up */</comment>
	<expr_stmt><expr><name><name>rdopts</name><operator>-&gt;</operator><name>bloomLength</name></name> <operator>=</operator> <operator>(</operator><name><name>rdopts</name><operator>-&gt;</operator><name>bloomLength</name></name> <operator>+</operator> <name>SIGNWORDBITS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>SIGNWORDBITS</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <name>rdopts</name></expr>;</return>
</block_content>}</block></function>
</unit>
