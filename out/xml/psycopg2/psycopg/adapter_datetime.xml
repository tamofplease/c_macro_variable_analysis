<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/adapter_datetime.c"><comment type="block">/* adapter_datetime.c - python date/time objects
 *
 * Copyright (C) 2003-2019 Federico Di Gregorio &lt;fog@debian.org&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCOPG_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/psycopg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/adapter_datetime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/microprotocols_proto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;datetime.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<function><type><name>RAISES_NEG</name> <name>int</name></type>
<name>adapter_datetime_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>PyDateTime_IMPORT</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>PyDateTimeAPI</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>, <argument><expr><literal type="string">"datetime initialization failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* datetime_str, datetime_getquoted - return result of quoting */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>_pydatetime_string_date_time</name><parameter_list>(<parameter><decl><type><name>pydatetimeObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>iso</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tz</name></decl>;</decl_stmt>

    <comment type="block">/* Select the right PG type to cast into. */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>PSYCO_DATETIME_TIME</name></expr>:</case>
        <expr_stmt><expr><name>tz</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>wrapped</name></name></expr></argument>, <argument><expr><literal type="string">"tzinfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tz</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>fmt</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>tz</name> <operator>==</operator> <name>Py_None</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"'%s'::time"</literal></expr> </then><else>: <expr><literal type="string">"'%s'::timetz"</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>PSYCO_DATETIME_DATE</name></expr>:</case>
        <expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"'%s'::date"</literal></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>PSYCO_DATETIME_TIMESTAMP</name></expr>:</case>
        <expr_stmt><expr><name>tz</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>wrapped</name></name></expr></argument>, <argument><expr><literal type="string">"tzinfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tz</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>fmt</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>tz</name> <operator>==</operator> <name>Py_None</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"'%s'::timestamp"</literal></expr> </then><else>: <expr><literal type="string">"'%s'::timestamptz"</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>iso</name> <operator>=</operator> <call><name>psyco_ensure_bytes</name><argument_list>(
            <argument><expr><call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>wrapped</name></name></expr></argument>, <argument><expr><literal type="string">"isoformat"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>Bytes_FromFormat</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><call><name>Bytes_AsString</name><argument_list>(<argument><expr><name>iso</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iso</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>

<label><name>error</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>iso</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>_pydatetime_string_delta</name><parameter_list>(<parameter><decl><type><name>pydatetimeObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyDateTime_Delta</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator><name>PyDateTime_Delta</name><operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>wrapped</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><call><name>PyDateTime_DELTA_GET_MICROSECONDS</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">5</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>a</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <return>return <expr><call><name>Bytes_FromFormat</name><argument_list>(<argument><expr><literal type="string">"'%d days %d.%s seconds'::interval"</literal></expr></argument>,
                            <argument><expr><call><name>PyDateTime_DELTA_GET_DAYS</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>PyDateTime_DELTA_GET_SECONDS</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>pydatetime_getquoted</name><parameter_list>(<parameter><decl><type><name>pydatetimeObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;=</operator> <name>PSYCO_DATETIME_TIMESTAMP</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>_pydatetime_string_date_time</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <return>return <expr><call><name>_pydatetime_string_delta</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>pydatetime_str</name><parameter_list>(<parameter><decl><type><name>pydatetimeObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>psyco_ensure_text</name><argument_list>(<argument><expr><call><name>pydatetime_getquoted</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>pydatetime_conform</name><parameter_list>(<parameter><decl><type><name>pydatetimeObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>proto</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>proto</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>proto</name> <operator>==</operator> <operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>isqlquoteType</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name>self</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** the DateTime wrapper object **/</comment>

<comment type="block">/* object member list */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMemberDef</name></name></type> <name><name>pydatetimeObject_members</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"adapted"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>pydatetimeObject</name></expr></argument>, <argument><expr><name>wrapped</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"type"</literal></expr>, <expr><name>T_INT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>pydatetimeObject</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* object method table */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>pydatetimeObject_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"getquoted"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>pydatetime_getquoted</name></expr>, <expr><name>METH_NOARGS</name></expr>,
     <expr><literal type="string">"getquoted() -&gt; wrapped object value as SQL date/time"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"__conform__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>pydatetime_conform</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>  <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* initialization and finalization methods */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pydatetime_setup</name><parameter_list>(<parameter><decl><type><name>pydatetimeObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"pydatetime_setup: init datetime object at %p, refcnt = "</literal>
        <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
        <argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>wrapped</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"pydatetime_setup: good pydatetime object at %p, refcnt = "</literal>
        <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
        <argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pydatetime_dealloc</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pydatetimeObject</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>pydatetimeObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>wrapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"mpydatetime_dealloc: deleted pydatetime object at %p, "</literal>
            <literal type="string">"refcnt = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>tp_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pydatetime_init</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* raise an error if type was not passed! */</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O|i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>pydatetime_setup</name><argument_list>(<argument><expr><operator>(</operator><name>pydatetimeObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>pydatetime_new</name><parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>type</name><operator>-&gt;</operator><name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* object type */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pydatetimeType_doc</name></cpp:macro> \
<cpp:value>"datetime(datetime, type) -&gt; new datetime wrapper object"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>pydatetimeType</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
    <literal type="string">"psycopg2._psycopg.datetime"</literal></expr>,
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>pydatetimeObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><name>pydatetime_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_print*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_repr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_mapping*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_hash */</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_call*/</comment>
    <expr><operator>(</operator><name>reprfunc</name><operator>)</operator><name>pydatetime_str</name></expr>, <comment type="block">/*tp_str*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_buffer*/</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name><operator>|</operator><name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/*tp_flags*/</comment>
    <expr><name>pydatetimeType_doc</name></expr>, <comment type="block">/*tp_doc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_traverse*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_clear*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_richcompare*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_weaklistoffset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iter*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iternext*/</comment>
    <expr><name>pydatetimeObject_methods</name></expr>, <comment type="block">/*tp_methods*/</comment>
    <expr><name>pydatetimeObject_members</name></expr>, <comment type="block">/*tp_members*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_base*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dict*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_get*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_set*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dictoffset*/</comment>
    <expr><name>pydatetime_init</name></expr>, <comment type="block">/*tp_init*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_alloc*/</comment>
    <expr><name>pydatetime_new</name></expr>, <comment type="block">/*tp_new*/</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block" format="doxygen">/** module-level functions **/</comment>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_Date</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>year</name></decl>, <decl><type ref="prev"/><name>month</name></decl>, <decl><type ref="prev"/><name>day</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"iii"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>year</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>month</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>day</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DateType</name></name></expr></argument>,
                                <argument><expr><literal type="string">"iii"</literal></expr></argument>, <argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pydatetimeType</name></expr></argument>,
                                    <argument><expr><literal type="string">"Oi"</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>PSYCO_DATETIME_DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_Time</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tzinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>hours</name></decl>, <decl><type ref="prev"/><name>minutes</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>micro</name></decl>, <decl><type ref="prev"/><name>second</name><init>=<expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"iid|O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hours</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minutes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>second</name></expr></argument>,
                          <argument><expr><operator>&amp;</operator><name>tzinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>micro</name> <operator>=</operator> <operator>(</operator><name>second</name> <operator>-</operator> <call><name>floor</name><argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">1000000.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>second</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>tzinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>TimeType</name></name></expr></argument>, <argument><expr><literal type="string">"iiii"</literal></expr></argument>,
            <argument><expr><name>hours</name></expr></argument>, <argument><expr><name>minutes</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>second</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><name>micro</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
       <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>TimeType</name></name></expr></argument>, <argument><expr><literal type="string">"iiiiO"</literal></expr></argument>,
            <argument><expr><name>hours</name></expr></argument>, <argument><expr><name>minutes</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>second</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><name>micro</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pydatetimeType</name></expr></argument>,
                                    <argument><expr><literal type="string">"Oi"</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>PSYCO_DATETIME_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>_psyco_Timestamp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>month</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>day</name></decl></parameter>,
                 <parameter><decl><type><name>int</name></type> <name>hour</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minute</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>second</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tzinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>micro</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>micro</name> <operator>=</operator> <operator>(</operator><name>second</name> <operator>-</operator> <call><name>floor</name><argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">1000000.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>second</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>tzinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DateTimeType</name></name></expr></argument>,
            <argument><expr><literal type="string">"iiiiiii"</literal></expr></argument>,
            <argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>second</name></expr></argument>,
            <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><name>micro</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DateTimeType</name></name></expr></argument>,
            <argument><expr><literal type="string">"iiiiiiiO"</literal></expr></argument>,
            <argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>second</name></expr></argument>,
            <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><name>micro</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pydatetimeType</name></expr></argument>,
                                    <argument><expr><literal type="string">"Oi"</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>PSYCO_DATETIME_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_Timestamp</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tzinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>year</name></decl>, <decl><type ref="prev"/><name>month</name></decl>, <decl><type ref="prev"/><name>day</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>hour</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>minute</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* default to midnight */</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>second</name><init>=<expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"iii|iidO"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>year</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>month</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>day</name></expr></argument>,
                          <argument><expr><operator>&amp;</operator><name>hour</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minute</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>second</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tzinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>_psyco_Timestamp</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_DateFromTicks</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>ticks</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ticks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>floor</name><argument_list>(<argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"iii"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name><operator>+</operator><literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>args</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>psyco_Date</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>InterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed localtime call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_TimeFromTicks</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>ticks</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ticks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>floor</name><argument_list>(<argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ticks</name> <operator>-=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>t</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"iid"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>,
                          <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>+</operator> <name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>args</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>psyco_Time</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>InterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed localtime call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_TimestampFromTicks</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pydatetimeObject</name> <modifier>*</modifier></type><name>wrapper</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dt_aware</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>ticks</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ticks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>floor</name><argument_list>(<argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ticks</name> <operator>-=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>t</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>InterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed localtime call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Convert the tm to a wrapper containing a naive datetime.datetime */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wrapper</name> <operator>=</operator> <operator>(</operator><name>pydatetimeObject</name> <operator>*</operator><operator>)</operator><call><name>_psyco_Timestamp</name><argument_list>(
            <argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>,
            <argument><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>+</operator> <name>ticks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Localize the datetime and assign it back to the wrapper */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dt_aware</name> <operator>=</operator> <call><name>PyObject_CallMethod</name><argument_list>(
            <argument><expr><name><name>wrapper</name><operator>-&gt;</operator><name>wrapped</name></name></expr></argument>, <argument><expr><literal type="string">"astimezone"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>wrapper</name><operator>-&gt;</operator><name>wrapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wrapper</name><operator>-&gt;</operator><name>wrapped</name></name> <operator>=</operator> <name>dt_aware</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>dt_aware</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* the wrapper is ready to be returned */</comment>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>wrapper</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>wrapper</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>dt_aware</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>wrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_DateFromPy</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O!"</literal></expr></argument>, <argument><expr><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DateType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pydatetimeType</name></expr></argument>, <argument><expr><literal type="string">"Oi"</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
                                 <argument><expr><name>PSYCO_DATETIME_DATE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_TimeFromPy</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O!"</literal></expr></argument>, <argument><expr><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>TimeType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pydatetimeType</name></expr></argument>, <argument><expr><literal type="string">"Oi"</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
                                 <argument><expr><name>PSYCO_DATETIME_TIME</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_TimestampFromPy</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O!"</literal></expr></argument>, <argument><expr><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DateTimeType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pydatetimeType</name></expr></argument>, <argument><expr><literal type="string">"Oi"</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
                                 <argument><expr><name>PSYCO_DATETIME_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_IntervalFromPy</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O!"</literal></expr></argument>, <argument><expr><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DeltaType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pydatetimeType</name></expr></argument>, <argument><expr><literal type="string">"Oi"</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
                                 <argument><expr><name>PSYCO_DATETIME_INTERVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
