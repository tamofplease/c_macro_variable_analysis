<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/typecast_datetime.c"><comment type="block">/* typecast_datetime.c - date and time typecasting functions to python types
 *
 * Copyright (C) 2001-2019 Federico Di Gregorio &lt;fog@debian.org&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datetime.h"</cpp:file></cpp:include>

<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>typecast_datetime_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>PyDateTime_IMPORT</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>PyDateTimeAPI</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>, <argument><expr><literal type="string">"datetime initialization failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** DATE - cast a date into a date python object **/</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>typecast_PYDATE_cast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>curs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"infinity"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"-infinity"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(
                <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DateType</name></name></expr></argument>, <argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(
                <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DateType</name></name></expr></argument>, <argument><expr><literal type="string">"max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>

    <else>else <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>typecast_parse_date</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_PYDATE_cast: "</literal>
                <literal type="string">"n = %d, len = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name> <literal type="string">", "</literal>
                <literal type="string">"y = %d, m = %d, d = %d"</literal></expr></argument>,
                 <argument><expr><name>n</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DataError</name></expr></argument>, <argument><expr><literal type="string">"unable to parse date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(
                <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DateType</name></name></expr></argument>, <argument><expr><literal type="string">"iii"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* convert the strings -infinity and infinity into a datetime with timezone */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>_parse_inftz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>curs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tzinfo_factory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tzinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>replace</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>m</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(
            <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DateTimeType</name></name></expr></argument>,
            <argument><expr><operator>(</operator><ternary><condition><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr> ?</condition><then> <expr><literal type="string">"min"</literal></expr> </then><else>: <expr><literal type="string">"max"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>tzinfo_factory</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>cursorObject</name> <operator>*</operator><operator>)</operator><name>curs</name><operator>)</operator><operator>-&gt;</operator><name>tzinfo_factory</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tzinfo_factory</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>m</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PYPY_VERSION</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>PY_VERSION_HEX</name> <operator>&lt;</operator> <literal type="number">0x03070000</literal></expr></cpp:if>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tzoff</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tzoff</name> <operator>=</operator> <call><name>PyDelta_FromDSU</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>tzinfo</name> <operator>=</operator> <call><name>PyObject_CallFunctionObjArgs</name><argument_list>(<argument><expr><name>tzinfo_factory</name></expr></argument>, <argument><expr><name>tzoff</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tzoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tzinfo</name></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    </block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>tzinfo</name> <operator>=</operator> <name>PyDateTime_TimeZone_UTC</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* m.replace(tzinfo=tzinfo) */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>args</name> <operator>=</operator> <call><name>PyTuple_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>kwargs</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"tzinfo"</literal></expr></argument>, <argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>replace</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"replace"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PyObject_Call</name><argument_list>(<argument><expr><name>replace</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>kwargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>_parse_noninftz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>curs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tzoff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tzinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tzinfo_factory</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>hh</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mm</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ss</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>us</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tzsec</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_PYDATETIMETZ_cast: s = %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>typecast_parse_date</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_PYDATE_cast: tp = %p "</literal>
            <literal type="string">"n = %d, len = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name> <literal type="string">","</literal>
            <literal type="string">" y = %d, m = %d, d = %d"</literal></expr></argument>,
             <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DataError</name></expr></argument>, <argument><expr><literal type="string">"unable to parse date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>typecast_parse_time</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tzsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_PYDATETIMETZ_cast: n = %d,"</literal>
            <literal type="string">" len = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name> <literal type="string">","</literal>
            <literal type="string">" hh = %d, mm = %d, ss = %d, us = %d, tzsec = %d"</literal></expr></argument>,
            <argument><expr><name>n</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>us</name></expr></argument>, <argument><expr><name>tzsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">3</literal> <operator>||</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DataError</name></expr></argument>, <argument><expr><literal type="string">"unable to parse time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>ss</name> <operator>&gt;</operator> <literal type="number">59</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>mm</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ss</name> <operator>-=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>tzinfo_factory</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>cursorObject</name> <operator>*</operator><operator>)</operator><name>curs</name><operator>)</operator><operator>-&gt;</operator><name>tzinfo_factory</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>tzinfo_factory</name> <operator>!=</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* we have a time zone, calculate minutes and create
           appropriate tzinfo object calling the factory */</comment>
        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_PYDATETIMETZ_cast: UTC offset = %ds"</literal></expr></argument>, <argument><expr><name>tzsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> <operator>&lt;</operator> <literal type="number">0x03070000</literal></expr></cpp:if>
        <comment type="block">/* Before Python 3.7 the timezone offset had to be a whole number
         * of minutes, so round the seconds to the closest minute */</comment>
        <expr_stmt><expr><name>tzsec</name> <operator>=</operator> <literal type="number">60</literal> <operator>*</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><name>tzsec</name> <operator>/</operator> <literal type="number">60.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tzoff</name> <operator>=</operator> <call><name>PyDelta_FromDSU</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tzsec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tzinfo</name> <operator>=</operator> <call><name>PyObject_CallFunctionObjArgs</name><argument_list>(
                <argument><expr><name>tzinfo_factory</name></expr></argument>, <argument><expr><name>tzoff</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tzinfo</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_PYDATETIMETZ_cast: tzinfo: %p, refcnt = "</literal>
        <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
        <argument><expr><name>tzinfo</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(
        <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DateTimeType</name></name></expr></argument>, <argument><expr><literal type="string">"iiiiiiiO"</literal></expr></argument>,
        <argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>us</name></expr></argument>, <argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tzoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** DATETIME - cast a timestamp into a datetime python object **/</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>typecast_PYDATETIME_cast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>curs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

    <comment type="block">/* check for infinity */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"infinity"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"-infinity"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>PyObject_GetAttrString</name><argument_list>(
            <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DateTimeType</name></name></expr></argument>,
            <argument><expr><operator>(</operator><ternary><condition><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr> ?</condition><then> <expr><literal type="string">"min"</literal></expr> </then><else>: <expr><literal type="string">"max"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>_parse_noninftz</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>curs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** DATETIMETZ - cast a timestamptz into a datetime python object **/</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>typecast_PYDATETIMETZ_cast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>curs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"infinity"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"-infinity"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>_parse_inftz</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>curs</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>_parse_noninftz</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>curs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** TIME - parse time into a time object **/</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>typecast_PYTIME_cast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>curs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tzoff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tzinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tzinfo_factory</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>hh</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mm</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ss</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>us</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tzsec</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>typecast_parse_time</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>us</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tzsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_PYTIME_cast: n = %d, len = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name> <literal type="string">", "</literal>
            <literal type="string">"hh = %d, mm = %d, ss = %d, us = %d, tzsec = %d"</literal></expr></argument>,
            <argument><expr><name>n</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>us</name></expr></argument>, <argument><expr><name>tzsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">3</literal> <operator>||</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DataError</name></expr></argument>, <argument><expr><literal type="string">"unable to parse time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ss</name> <operator>&gt;</operator> <literal type="number">59</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>mm</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ss</name> <operator>-=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>tzinfo_factory</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>cursorObject</name> <operator>*</operator><operator>)</operator><name>curs</name><operator>)</operator><operator>-&gt;</operator><name>tzinfo_factory</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>tzinfo_factory</name> <operator>!=</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* we have a time zone, calculate seconds and create
           appropriate tzinfo object calling the factory */</comment>
        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_PYTIME_cast: UTC offset = %ds"</literal></expr></argument>, <argument><expr><name>tzsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> <operator>&lt;</operator> <literal type="number">0x03070000</literal></expr></cpp:if>
        <comment type="block">/* Before Python 3.7 the timezone offset had to be a whole number
         * of minutes, so round the seconds to the closest minute */</comment>
        <expr_stmt><expr><name>tzsec</name> <operator>=</operator> <literal type="number">60</literal> <operator>*</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><name>tzsec</name> <operator>/</operator> <literal type="number">60.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tzoff</name> <operator>=</operator> <call><name>PyDelta_FromDSU</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tzsec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tzinfo</name> <operator>=</operator> <call><name>PyObject_CallFunctionObjArgs</name><argument_list>(<argument><expr><name>tzinfo_factory</name></expr></argument>, <argument><expr><name>tzoff</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tzinfo</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>TimeType</name></name></expr></argument>, <argument><expr><literal type="string">"iiiiO"</literal></expr></argument>,
                                <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>us</name></expr></argument>, <argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tzoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Attempt parsing a number as microseconds
 * Redshift is reported returning this stuff, see #558
 *
 * Return a new `timedelta()` object in case of success or NULL and set an error
 */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>interval_from_usecs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pend</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"interval_from_usecs: %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>us</name> <operator>=</operator> <call><name>PyLong_FromString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pend</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"interval_from_usecs: parsing long failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pend</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* there are trailing chars, it's not just micros. Barf. */</comment>
        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"interval_from_usecs: spurious chars %s"</literal></expr></argument>, <argument><expr><name>pend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
            <argument><expr><literal type="string">"expected number of microseconds, got %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(
        <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DeltaType</name></name></expr></argument>, <argument><expr><literal type="string">"iiO"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/** INTERVAL - parse an interval into a timedelta object **/</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>typecast_PYINTERVAL_cast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>curs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>years</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>months</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hours</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>minutes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>micros</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PY_LONG_LONG</name></type> <name>days</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>seconds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>denom</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>part</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_PYINTERVAL_cast: s = %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>
        <switch>switch <condition>(<expr><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>

        <case>case <expr><literal type="char">'-'</literal></expr>:</case>
            <expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
        <case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>v1</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>v1</name> <operator>=</operator> <name>v</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* detect either a rollover, happening if v is really too short,
                 * or too big value. On Win where long == int the 2nd check
                 * is useless. */</comment>
                <if_stmt><if>if <condition>(<expr><macro><name>v1</name></macro> <operator>&lt;</operator> <name>v</name> <operator>||</operator> <name>v1</name> <operator>&gt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>INT_MAX</name></expr>)</condition> <block>{<block_content>
                    <comment type="block">/* uhm, oops... but before giving up, maybe it's redshift
                     * returning microseconds? See #558 */</comment>
                    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>interval_from_usecs</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name>rv</name></expr>;</return>
                    </block_content>}</block></if>
                    <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>

                    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
                        <argument><expr><name>PyExc_OverflowError</name></expr></argument>, <argument><expr><literal type="string">"interval component too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>NULL</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
            </block_content>}</block>
            <if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>denom</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'y'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>years</name> <operator>=</operator> <name>v</name> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>part</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>skip_until_space2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'m'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>part</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>months</name> <operator>=</operator> <name>v</name> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>part</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>skip_until_space2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'d'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>part</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>days</name> <operator>=</operator> <name>v</name> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>part</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>skip_until_space2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">':'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>part</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>hours</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>part</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>part</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>minutes</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>part</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'.'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>seconds</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>part</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'P'</literal></expr>:</case>
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>NotSupportedError</name></expr></argument>,
                <argument><expr><literal type="string">"iso_8601 intervalstyle currently not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>

        <default>default:</default>
            <break>break;</break>
        </block_content>}</block></switch>

        <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* manage last value, be it minutes or seconds or microseconds */</comment>
    <if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>minutes</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>part</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>seconds</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>part</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>micros</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>denom</name> <operator>&lt;</operator> <literal type="number">1000000L</literal></expr>)</condition> <block>{<block_content>
            <do>do <block>{<block_content>
                <expr_stmt><expr><name>micros</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>denom</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><name>denom</name> <operator>&lt;</operator> <literal type="number">1000000L</literal></expr>)</condition>;</do>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>denom</name> <operator>&gt;</operator> <literal type="number">1000000L</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>micros</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>micros</name> <operator>/</operator> <name>denom</name> <operator>*</operator> <literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>part</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Parsing failed, maybe it's just an integer? Assume usecs */</comment>
        <return>return <expr><call><name>interval_from_usecs</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* add hour, minutes, seconds together and include the sign */</comment>
    <expr_stmt><expr><name>seconds</name> <operator>+=</operator> <literal type="number">60</literal> <operator>*</operator> <operator>(</operator><name>PY_LONG_LONG</name><operator>)</operator><name>minutes</name> <operator>+</operator> <literal type="number">3600</literal> <operator>*</operator> <operator>(</operator><name>PY_LONG_LONG</name><operator>)</operator><name>hours</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>seconds</name> <operator>=</operator> <operator>-</operator><name>seconds</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>micros</name> <operator>=</operator> <operator>-</operator><name>micros</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* add the days, months years together - they already include a sign */</comment>
    <expr_stmt><expr><name>days</name> <operator>+=</operator> <literal type="number">30</literal> <operator>*</operator> <operator>(</operator><name>PY_LONG_LONG</name><operator>)</operator><name>months</name> <operator>+</operator> <literal type="number">365</literal> <operator>*</operator> <operator>(</operator><name>PY_LONG_LONG</name><operator>)</operator><name>years</name></expr>;</expr_stmt>

    <return>return <expr><call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DeltaType</name></name></expr></argument>, <argument><expr><literal type="string">"LLl"</literal></expr></argument>,
                                 <argument><expr><name>days</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>, <argument><expr><name>micros</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* psycopg defaults to using python datetime types */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_DATE_cast</name></cpp:macro> <cpp:value>typecast_PYDATE_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_TIME_cast</name></cpp:macro> <cpp:value>typecast_PYTIME_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_INTERVAL_cast</name></cpp:macro> <cpp:value>typecast_PYINTERVAL_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_DATETIME_cast</name></cpp:macro> <cpp:value>typecast_PYDATETIME_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_DATETIMETZ_cast</name></cpp:macro> <cpp:value>typecast_PYDATETIMETZ_cast</cpp:value></cpp:define>
</unit>
