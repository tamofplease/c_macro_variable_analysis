<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/bytes_format.c"><comment type="block">/* bytes_format.c - bytes-oriented version of PyString_Format
 *
 * Copyright (C) 2010-2019 Daniele Varrazzo &lt;daniele.varrazzo@gmail.com&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<comment type="block">/* This implementation is based on the PyString_Format function available in
 * Python 2.7.1. The function is altered to be used with both Python 2 strings
 * and Python 3 bytes and is stripped of the support of formats different than
 * 's'. Original license follows.
 *
 * PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2
 * --------------------------------------------
 *
 * 1. This LICENSE AGREEMENT is between the Python Software Foundation
 * ("PSF"), and the Individual or Organization ("Licensee") accessing and
 * otherwise using this software ("Python") in source or binary form and
 * its associated documentation.
 *
 * 2. Subject to the terms and conditions of this License Agreement, PSF hereby
 * grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
 * analyze, test, perform and/or display publicly, prepare derivative works,
 * distribute, and otherwise use Python alone or in any derivative version,
 * provided, however, that PSF's License Agreement and PSF's notice of copyright,
 * i.e., "Copyright (c) 2001-2019, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
 * Python Software Foundation; All Rights Reserved" are retained in Python alone or
 * in any derivative version prepared by Licensee.
 *
 * 3. In the event Licensee prepares a derivative work that is based on
 * or incorporates Python or any part thereof, and wants to make
 * the derivative work available to others as provided herein, then
 * Licensee hereby agrees to include in any such work a brief summary of
 * the changes made to Python.
 *
 * 4. PSF is making Python available to Licensee on an "AS IS"
 * basis.  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
 * IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND
 * DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
 * FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON WILL NOT
 * INFRINGE ANY THIRD PARTY RIGHTS.
 *
 * 5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
 * FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS
 * A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON,
 * OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
 *
 * 6. This License Agreement will automatically terminate upon a material
 * breach of its terms and conditions.
 *
 * 7. Nothing in this License Agreement shall be deemed to create any
 * relationship of agency, partnership, or joint venture between PSF and
 * Licensee.  This License Agreement does not grant permission to use PSF
 * trademarks or trade name in a trademark sense to endorse or promote
 * products or services of Licensee, or any third party.
 *
 * 8. By copying, installing or otherwise using Python, Licensee
 * agrees to be bound by the terms and conditions of this License
 * Agreement.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCOPG_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/psycopg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pyport.h"</cpp:file></cpp:include>

<comment type="block">/* Helpers for formatstring */</comment>

<function><type><name>BORROWED</name></type> <name>Py_LOCAL_INLINE</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>
getnextarg<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>arglen</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name> <modifier>*</modifier></type><name>p_argidx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>argidx</name> <init>= <expr><operator>*</operator><name>p_argidx</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>argidx</name> <operator>&lt;</operator> <name>arglen</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_argidx</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>arglen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>args</name></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>argidx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                    <argument><expr><literal type="string">"not enough arguments for format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* wrapper around _Bytes_Resize offering normal Python call semantics */</comment>

<macro><name>STEALS</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>Py_LOCAL_INLINE</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro>
<macro><name>resize_bytes</name><argument_list>(<argument>PyObject *b</argument>, <argument>Py_ssize_t newsize</argument>)</argument_list></macro> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>_Bytes_Resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>b</name></expr>;</return>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block>

<comment type="block">/* fmt%(v1,v2,...) is roughly equivalent to sprintf(fmt, v1, v2, ...) */</comment>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>Bytes_Format</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>arglen</name></decl>, <decl><type ref="prev"/><name>argidx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>reslen</name></decl>, <decl><type ref="prev"/><name>rescnt</name></decl>, <decl><type ref="prev"/><name>fmtcnt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>args_owned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>Bytes_Check</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>args</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>, <argument><expr><literal type="string">"bad argument to internal function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fmtcnt</name> <operator>=</operator> <call><name>Bytes_GET_SIZE</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reslen</name> <operator>=</operator> <name>rescnt</name> <operator>=</operator> <name>fmtcnt</name> <operator>+</operator> <literal type="number">100</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Bytes_FromStringAndSize</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><name>reslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>arglen</name> <operator>=</operator> <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>argidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><name>arglen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>argidx</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tp_as_mapping</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>!</operator><call><name>PyObject_TypeCheck</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Bytes_Type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>dict</name> <operator>=</operator> <name>args</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <while>while <condition>(<expr><operator>--</operator><name>fmtcnt</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>fmt</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>--</operator><name>rescnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>rescnt</name> <operator>=</operator> <name>fmtcnt</name> <operator>+</operator> <literal type="number">100</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>reslen</name> <operator>+=</operator> <name>rescnt</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>resize_bytes</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>reslen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>NULL</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>reslen</name> <operator>-</operator> <name>rescnt</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>--</operator><name>rescnt</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><operator>*</operator><name>res</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>fmt</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <comment type="block">/* Got a format specifier */</comment>
            <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>width</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pbuf</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keystart</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>keylen</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>pcount</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                             <argument><expr><literal type="string">"format requires a mapping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>error</name>;</goto>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><operator>++</operator><name>fmt</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>--</operator><name>fmtcnt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>keystart</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
                <comment type="block">/* Skip over balanced parentheses */</comment>
                <while>while <condition>(<expr><name>pcount</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>--</operator><name>fmtcnt</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><operator>--</operator><name>pcount</name></expr>;</expr_stmt></block_content></block></if>
                    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><operator>++</operator><name>pcount</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
                <expr_stmt><expr><name>keylen</name> <operator>=</operator> <name>fmt</name> <operator>-</operator> <name>keystart</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>fmtcnt</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>pcount</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                               <argument><expr><literal type="string">"incomplete format key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>error</name>;</goto>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>Text_FromUTF8AndSize</name><argument_list>(<argument><expr><name>keystart</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>args_owned</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>args_owned</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>PyObject_GetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>args</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <goto>goto <name>error</name>;</goto>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>args_owned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>arglen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>argidx</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <while>while <condition>(<expr><operator>--</operator><name>fmtcnt</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>fmt</name><operator>++</operator></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>fmtcnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                <argument><expr><literal type="string">"incomplete format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'%'</literal></expr>:</case>
                <expr_stmt><expr><name>pbuf</name> <operator>=</operator> <literal type="string">"%"</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'s'</literal></expr>:</case>
                <comment type="block">/* only bytes! */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>v</name> <operator>=</operator> <call><name>getnextarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>arglen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argidx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Bytes_CheckExact</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                                    <argument><expr><literal type="string">"only bytes values expected, got %s"</literal></expr></argument>,
                                    <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>error</name>;</goto>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>temp</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>pbuf</name> <operator>=</operator> <call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>Bytes_GET_SIZE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                  <argument><expr><literal type="string">"unsupported format character '%c' (0x%x) "</literal>
                  <literal type="string">"at index "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
                  <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                  <argument><expr><operator>(</operator><name>Py_ssize_t</name><operator>)</operator><operator>(</operator><name>fmt</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></switch>
            <if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>width</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>rescnt</name> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>reslen</name> <operator>-=</operator> <name>rescnt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>rescnt</name> <operator>=</operator> <name>width</name> <operator>+</operator> <name>fmtcnt</name> <operator>+</operator> <literal type="number">100</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>reslen</name> <operator>+=</operator> <name>rescnt</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>reslen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>args_owned</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>resize_bytes</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>reslen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>args_owned</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <return>return <expr><name>NULL</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call>
                    <operator>+</operator> <name>reslen</name> <operator>-</operator> <name>rescnt</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>Py_MEMCPY</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rescnt</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
            <while>while <condition>(<expr><operator>--</operator><name>width</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>--</operator><name>rescnt</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>res</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>dict</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>argidx</name> <operator>&lt;</operator> <name>arglen</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                           <argument><expr><literal type="string">"not all arguments converted during string formatting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt> <comment type="block">/* '%' */</comment>
    </block_content>}</block></while> <comment type="block">/* until end */</comment>
    <if_stmt><if>if <condition>(<expr><name>argidx</name> <operator>&lt;</operator> <name>arglen</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dict</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                        <argument><expr><literal type="string">"not all arguments converted during string formatting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>args_owned</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>resize_bytes</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>reslen</name> <operator>-</operator> <name>rescnt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>result</name></expr>;</return>

 <label><name>error</name>:</label>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>args_owned</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
