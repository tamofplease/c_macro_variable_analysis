<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/conninfo_type.c"><comment type="block">/* conninfo_type.c - present information about the libpq connection
 *
 * Copyright (C) 2018-2019  Daniele Varrazzo &lt;daniele.varrazzo@gmail.com&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCOPG_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/psycopg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/conninfo.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>connInfoType_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"Details about the native PostgreSQL database connection.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"This class exposes several `informative functions`__ about the status\n"</literal>
<literal type="string">"of the libpq connection.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Objects of this class are exposed as the `connection.info` attribute.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>dbname_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"The database name of the connection.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQdb()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQDB"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>dbname_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQdb</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>conn_text_from_chars</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>user_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"The user name of the connection.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQuser()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQUSER"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>user_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQuser</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>conn_text_from_chars</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>password_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"The password of the connection.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQpass()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQPASS"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>password_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQpass</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>conn_text_from_chars</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>host_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"The server host name of the connection.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"This can be a host name, an IP address, or a directory path if the\n"</literal>
<literal type="string">"connection is via Unix socket. (The path case can be distinguished\n"</literal>
<literal type="string">"because it will always be an absolute path, beginning with ``/``.)\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQhost()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQHOST"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>host_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQhost</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>conn_text_from_chars</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>port_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"The port of the connection.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">":type: `!int`\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQport()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQPORT"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>port_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQport</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name> <operator>||</operator> <operator>!</operator><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>PyInt_FromString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>options_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"The command-line options passed in the connection request.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQoptions()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQOPTIONS"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>options_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQoptions</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>conn_text_from_chars</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>dsn_parameters_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"The effective connection parameters.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">":type: `!dict`\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"The results include values which weren't explicitly set by the connection\n"</literal>
<literal type="string">"string, such as defaults, environment variables, etc.\n"</literal>
<literal type="string">"The *password* parameter is removed from the results.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQconninfo()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/libpq-connect.html"</literal>
    <literal type="string">"#LIBPQ-PQCONNINFO"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>dsn_parameters_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">90300</literal></expr></cpp:if>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PQconninfoOption</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>options</name> <operator>=</operator> <call><name>PQconninfo</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>psyco_dict_from_conninfo_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <comment type="block">/* include_password = */</comment> <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>PQconninfoFree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>res</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>NotSupportedError</name></expr></argument>, <argument><expr><literal type="string">"PQconninfo not available in libpq &lt; 9.3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>status_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"The status of the connection.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">":type: `!int`\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQstatus()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQSTATUS"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>status_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ConnStatusType</name></type> <name>val</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQstatus</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>transaction_status_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"The current in-transaction status of the connection.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Symbolic constants for the values are defined in the module\n"</literal>
<literal type="string">"`psycopg2.extensions`: see :ref:`transaction-status-constants` for the\n"</literal>
<literal type="string">"available values.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">":type: `!int`\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQtransactionStatus()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQTRANSACTIONSTATUS"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>transaction_status_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PGTransactionStatusType</name></type> <name>val</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQtransactionStatus</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>parameter_status_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"Looks up a current parameter setting of the server.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">":param name: The name of the parameter to return.\n"</literal>
<literal type="string">":type name: `!str`\n"</literal>
<literal type="string">":return: The parameter value, `!None` if the parameter is unknown.\n"</literal>
<literal type="string">":rtype: `!str`\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQparameterStatus()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQPARAMETERSTATUS"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>parameter_status</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"name"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQparameterStatus</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <return>return <expr><call><name>conn_text_from_chars</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>protocol_version_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"The frontend/backend protocol being used.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">":type: `!int`\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQprotocolVersion()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQPROTOCOLVERSION"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>protocol_version_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQprotocolVersion</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>server_version_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"Returns an integer representing the server version.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">":type: `!int`\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQserverVersion()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQSERVERVERSION"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>server_version_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQserverVersion</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>error_message_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"The error message most recently generated by an operation on the connection.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"`!None` if there is no current message.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQerrorMessage()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQERRORMESSAGE"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>error_message_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name> <operator>||</operator> <operator>!</operator><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>conn_text_from_chars</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>socket_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"The file descriptor number of the connection socket to the server.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">":type: `!int`\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQsocket()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQSOCKET"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>socket_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQsocket</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>backend_pid_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"The process ID (PID) of the backend process you connected to.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">":type: `!int`\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQbackendPID()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQBACKENDPID"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>backend_pid_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQbackendPID</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>needs_password_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"The connection authentication method required a password, but none was available.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">":type: `!bool`\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQconnectionNeedsPassword()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQCONNECTIONNEEDSPASSWORD"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>needs_password_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><call><name>PQconnectionNeedsPassword</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>used_password_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"The connection authentication method used a password.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">":type: `!bool`\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQconnectionUsedPassword()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQCONNECTIONUSEDPASSWORD"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>used_password_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><call><name>PQconnectionUsedPassword</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ssl_in_use_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"`!True` if the connection uses SSL, `!False` if not.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Only available if psycopg was built with libpq &gt;= 9.5; raise\n"</literal>
<literal type="string">"`~psycopg2.NotSupportedError` otherwise.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">":type: `!bool`\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQsslInUse()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQSSLINUSE"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>ssl_in_use_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">90500</literal></expr></cpp:if>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PyBool_FromLong</name><argument_list>(<argument><expr><call><name>PQsslInUse</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>NotSupportedError</name></expr></argument>,
        <argument><expr><literal type="string">"'ssl_in_use' not available in libpq &lt; 9.5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ssl_attribute_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"Returns SSL-related information about the connection.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">":param name: The name of the attribute to return.\n"</literal>
<literal type="string">":type name: `!str`\n"</literal>
<literal type="string">":return: The attribute value, `!None` if unknown.\n"</literal>
<literal type="string">":rtype: `!str`\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Only available if psycopg was built with libpq &gt;= 9.5; raise\n"</literal>
<literal type="string">"`~psycopg2.NotSupportedError` otherwise.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Valid names are available in `ssl_attribute_names`.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQsslAttribute()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQSSLATTRIBUTE"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>ssl_attribute</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"name"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">90500</literal></expr></cpp:if>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQsslAttribute</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <return>return <expr><call><name>conn_text_from_chars</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>NotSupportedError</name></expr></argument>,
        <argument><expr><literal type="string">"'ssl_attribute()' not available in libpq &lt; 9.5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ssl_attribute_names_doc</name><index>[]</index></name> <init>=
<expr><literal type="string">"The list of the SSL attribute names available.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">":type: `!list` of `!str`\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Only available if psycopg was built with libpq &gt;= 9.5; raise\n"</literal>
<literal type="string">"`~psycopg2.NotSupportedError` otherwise.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">".. seealso:: libpq docs for `PQsslAttributeNames()`__ for details.\n"</literal>
<literal type="string">".. __: https://www.postgresql.org/docs/current/static/libpq-status.html"</literal>
    <literal type="string">"#LIBPQ-PQSSLATTRIBUTENAMES"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>ssl_attribute_names_get</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">90500</literal></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>names</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>names</name> <operator>=</operator> <call><name>PQsslAttributeNames</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>l</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>s</name> <operator>=</operator> <call><name>conn_text_from_chars</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>PyList_Append</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>NotSupportedError</name></expr></argument>,
        <argument><expr><literal type="string">"'ssl_attribute_names not available in libpq &lt; 9.5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyGetSetDef</name></name></type> <name><name>connInfoObject_getsets</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"dbname"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>dbname_get</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dbname_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"user"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>user_get</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>user_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"password"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>password_get</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>password_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"host"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>host_get</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>host_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"port"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>port_get</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>port_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"options"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>options_get</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>options_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dsn_parameters"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>dsn_parameters_get</name></expr>, <expr><name>NULL</name></expr>,
        <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dsn_parameters_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"status"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>status_get</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>status_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"transaction_status"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>transaction_status_get</name></expr>, <expr><name>NULL</name></expr>,
        <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>transaction_status_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"protocol_version"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>protocol_version_get</name></expr>, <expr><name>NULL</name></expr>,
        <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>protocol_version_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"server_version"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>server_version_get</name></expr>, <expr><name>NULL</name></expr>,
        <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>server_version_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"error_message"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>error_message_get</name></expr>, <expr><name>NULL</name></expr>,
        <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>error_message_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"socket"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>socket_get</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>socket_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"backend_pid"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>backend_pid_get</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>backend_pid_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"used_password"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>used_password_get</name></expr>, <expr><name>NULL</name></expr>,
        <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>used_password_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"needs_password"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>needs_password_get</name></expr>, <expr><name>NULL</name></expr>,
        <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>needs_password_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"ssl_in_use"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>ssl_in_use_get</name></expr>, <expr><name>NULL</name></expr>,
        <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ssl_in_use_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"ssl_attribute_names"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>ssl_attribute_names_get</name></expr>, <expr><name>NULL</name></expr>,
        <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ssl_attribute_names_doc</name></expr> }</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMethodDef</name></name></type> <name><name>connInfoObject_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"ssl_attribute"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>ssl_attribute</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>ssl_attribute_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"parameter_status"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>parameter_status</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>parameter_status_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* initialization and finalization methods */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>conninfo_new</name><parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>type</name><operator>-&gt;</operator><name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>conninfo_init</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyObject_TypeCheck</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connectionType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
            <argument><expr><literal type="string">"The argument must be a psycopg2 connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <operator>(</operator><name>connectionObject</name> <operator>*</operator><operator>)</operator><name>conn</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>conninfo_dealloc</name><parameter_list>(<parameter><decl><type><name>connInfoObject</name><modifier>*</modifier></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>tp_free</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* object type */</comment>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>connInfoType</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
    <literal type="string">"psycopg2.extensions.ConnectionInfo"</literal></expr>,
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>connInfoObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><operator>(</operator><name>destructor</name><operator>)</operator><name>conninfo_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_print*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_repr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_mapping*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_hash */</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_call*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_str*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_buffer*/</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name><operator>|</operator><name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/*tp_flags*/</comment>
    <expr><name>connInfoType_doc</name></expr>, <comment type="block">/*tp_doc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_traverse*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_clear*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_richcompare*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_weaklistoffset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iter*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iternext*/</comment>
    <expr><name>connInfoObject_methods</name></expr>, <comment type="block">/*tp_methods*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_members*/</comment>
    <expr><name>connInfoObject_getsets</name></expr>, <comment type="block">/*tp_getset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_base*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dict*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_get*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_set*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dictoffset*/</comment>
    <expr><operator>(</operator><name>initproc</name><operator>)</operator><name>conninfo_init</name></expr>, <comment type="block">/*tp_init*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_alloc*/</comment>
    <expr><name>conninfo_new</name></expr>, <comment type="block">/*tp_new*/</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
