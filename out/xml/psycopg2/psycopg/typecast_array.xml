<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/typecast_array.c"><comment type="block">/* typecast_array.c - array typecasters
 *
 * Copyright (C) 2005-2019 Federico Di Gregorio &lt;fog@debian.org&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DIMENSIONS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** typecast_array_cleanup - remove the horrible [...]= stuff **/</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>typecast_array_cleanup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>depth</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>str</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr> ;</init> <condition><expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <operator>*</operator><name>len</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>str</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>depth</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>str</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>depth</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>str</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>str</name><operator>)</operator><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>*</operator><name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** typecast_array_scan - scan a string looking for array items **/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCAN_ERROR</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCAN_EOF</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCAN_BEGIN</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCAN_END</name></cpp:macro>    <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCAN_TOKEN</name></cpp:macro>  <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCAN_QUOTED</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>typecast_array_tokenize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>strlength</name></decl></parameter>,
                        <parameter><decl><type><name>Py_ssize_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>token</name></decl></parameter>,
                        <parameter><decl><type><name>Py_ssize_t</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>quotes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* FORTRAN glory */</comment>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_array_tokenize: '%s', "</literal>
            <name>FORMAT_CODE_PY_SSIZE_T</name> <literal type="string">"/"</literal> <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name><name>str</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>pos</name></expr></argument>, <argument><expr><name>strlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* we always get called with pos pointing at the start of a token, so a
       fast check is enough for ASCAN_EOF, ASCAN_BEGIN and ASCAN_END */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>==</operator> <name>strlength</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>ASCAN_EOF</name></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>ASCAN_BEGIN</name></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>ASCAN_END</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* now we start looking for the first unquoted ',' or '}', the only two
       tokens that can limit an array element */</comment>
    <expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* if q is odd we're inside quotes */</comment>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* if b is 1 we just encountered a backslash */</comment>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>ASCAN_TOKEN</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>pos</name></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>strlength</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <switch>switch <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'"'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <name>ASCAN_QUOTED</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <comment type="block">/* we're backslashing a backslash */</comment>
                <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'}'</literal></expr>:</case>
        <case>case <expr><literal type="char">','</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>q</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>tokenize</name>;</goto></block_content></block></if></if_stmt>
            <break>break;</break>

        <default>default:</default>
            <comment type="block">/* reset the backslash counter */</comment>
            <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></for>

 <label><name>tokenize</name>:</label>
    <comment type="block">/* remove initial quoting character and calculate raw length */</comment>
    <expr_stmt><expr><operator>*</operator><name>quotes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <name>i</name> <operator>-</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>quotes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>ASCAN_QUOTED</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>j</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>jj</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>ASCAN_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>token</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>str</name> <operator>+</operator> <operator>*</operator><name>pos</name></expr><operator>,</operator> <expr><name>jj</name> <operator>=</operator> <name>j</name> <operator>+</operator> <name>l</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>jj</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>j</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>buffer</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>j</name></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <comment type="block">/* The variable that was used to indicate the size of buffer is of type
         * Py_ssize_t, so a subsegment of buffer couldn't possibly exceed
         * PY_SSIZE_T_MAX: */</comment>
        <expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <operator>(</operator><name>Py_ssize_t</name><operator>)</operator> <operator>(</operator><name>buffer</name> <operator>-</operator> <operator>*</operator><name>token</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>token</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>str</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

    <comment type="block">/* skip the comma and set position to the start of next token */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>typecast_array_scan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>strlength</name></decl></parameter>,
                    <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>curs</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>, <decl><type ref="prev"/><name>quotes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name><name>stack</name><index>[<expr><name>MAX_DIMENSIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>stack_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>token</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>typecast_array_tokenize</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>strlength</name></expr></argument>,
                                    <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>quotes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_array_scan: state = %d,"</literal>
                <literal type="string">" length = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name> <literal type="string">", token = '%s'"</literal></expr></argument>,
                <argument><expr><name>state</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>ASCAN_TOKEN</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>ASCAN_QUOTED</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quotes</name> <operator>&amp;&amp;</operator> <name>length</name> <operator>==</operator> <literal type="number">4</literal>
                <operator>&amp;&amp;</operator> <operator>(</operator><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'U'</literal><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><name><name>token</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name><name>token</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>typecast_cast</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>curs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>typecast_cast</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>curs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="block">/* before anything else we free the memory */</comment>
            <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>ASCAN_QUOTED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>ASCAN_BEGIN</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>sub</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>stack_index</name> <operator>==</operator> <name>MAX_DIMENSIONS</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DataError</name></expr></argument>, <argument><expr><literal type="string">"excessive array dimensions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stack_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>array</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>array</name> <operator>=</operator> <name>sub</name></expr>;</expr_stmt>
        </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>ASCAN_ERROR</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>ASCAN_END</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>stack_index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DataError</name></expr></argument>, <argument><expr><literal type="string">"unbalanced braces in array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>array</name> <operator>=</operator> <name><name>stack</name><index>[<expr><operator>--</operator><name>stack_index</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator>  <name>ASCAN_EOF</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/** GENERIC - a generic typecaster that can be used when no special actions
    have to be taken on the single items **/</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>typecast_GENERIC_ARRAY_cast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>curs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><operator>(</operator><operator>(</operator><name>typecastObject</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>cursorObject</name><operator>*</operator><operator>)</operator><name>curs</name><operator>)</operator><operator>-&gt;</operator><name>caster</name><operator>)</operator><operator>-&gt;</operator><name>bcast</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_GENERIC_ARRAY_cast: str = '%s',"</literal>
            <literal type="string">" len = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>typecast_array_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DataError</name></expr></argument>, <argument><expr><literal type="string">"array does not start with '{'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DataError</name></expr></argument>, <argument><expr><literal type="string">"malformed array: '{'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_GENERIC_ARRAY_cast: str = '%s',"</literal>
            <literal type="string">" len = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>obj</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>

    <comment type="block">/* scan the array skipping the first level of {} */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>typecast_array_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>curs</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** almost all the basic array typecasters are derived from GENERIC **/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_LONGINTEGERARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_INTEGERARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_FLOATARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_DECIMALARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_STRINGARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_UNICODEARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_BYTESARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_BOOLEANARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_DATETIMEARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_DATETIMETZARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_DATEARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_TIMEARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_INTERVALARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_BINARYARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_ROWIDARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
</unit>
