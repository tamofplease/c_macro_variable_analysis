<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/psycopgmodule.c"><comment type="block">/* psycopgmodule.c - psycopg module (will import other C classes)
 *
 * Copyright (C) 2003-2019 Federico Di Gregorio &lt;fog@debian.org&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCOPG_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/psycopg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/replication_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/replication_cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/replication_message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/green.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/column.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/notify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/xid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/typecast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/microprotocols.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/microprotocols_proto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/conninfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/diagnostics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/adapter_qstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/adapter_binary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/adapter_pboolean.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/adapter_pint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/adapter_pfloat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/adapter_pdecimal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/adapter_asis.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/adapter_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/typecast_binary.h"</cpp:file></cpp:include>

<comment type="block">/* some module-level variables, like the datetime module */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;datetime.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/adapter_datetime.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>HIDDEN</name> <name>PyObject</name> <modifier>*</modifier></type><name>psycoEncodings</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HIDDEN</name> <name>PyObject</name> <modifier>*</modifier></type><name>sqlstate_errors</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PSYCOPG_DEBUG</name></cpp:ifdef>
<decl_stmt><decl><type><name>HIDDEN</name> <name>int</name></type> <name>psycopg_debug_enabled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Python representation of SQL NULL */</comment>
<decl_stmt><decl><type><name>HIDDEN</name> <name>PyObject</name> <modifier>*</modifier></type><name>psyco_null</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* macro trick to stringify a macro expansion */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xstr</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>str(s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#s</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** connect module-level function **/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_connect_doc</name></cpp:macro> \
<cpp:value>"_connect(dsn, [connection_factory], [async]) -- New database connection.\n\n"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_connect</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keywds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>factory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dsn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>async</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>async_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"dsn"</literal></expr>, <expr><literal type="string">"connection_factory"</literal></expr>, <expr><literal type="string">"async"</literal></expr>, <expr><literal type="string">"async_"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>keywds</name></expr></argument>, <argument><expr><literal type="string">"s|Oii"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>dsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>factory</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>async</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>async_</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>async_</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>async</name> <operator>=</operator> <name>async_</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psyco_connect: dsn = '%s', async = %d"</literal></expr></argument>, <argument><expr><name>dsn</name></expr></argument>, <argument><expr><name>async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* allocate connection, fill with errors and return it */</comment>
    <if_stmt><if>if <condition>(<expr><name>factory</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>factory</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>factory</name> <operator>=</operator> <operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>connectionType</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Here we are breaking the connection.__init__ interface defined
     * by psycopg2. So, if not requiring an async conn, avoid passing
     * the async parameter. */</comment>
    <comment type="block">/* TODO: would it be possible to avoid an additional parameter
     * to the conn constructor? A subclass? (but it would require mixins
     * to further subclass) Another dsn parameter (but is not really
     * a connection parameter that can be configured) */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>async</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>factory</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><name>dsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>factory</name></expr></argument>, <argument><expr><literal type="string">"si"</literal></expr></argument>, <argument><expr><name>dsn</name></expr></argument>, <argument><expr><name>async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>parse_dsn_doc</name></cpp:macro> \
<cpp:value>"parse_dsn(dsn) -&gt; dict -- parse a connection string into parameters"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>parse_dsn</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PQconninfoOption</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dsn</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"dsn"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dsn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>dsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* for ensure_bytes */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dsn</name> <operator>=</operator> <call><name>psyco_ensure_bytes</name><argument_list>(<argument><expr><name>dsn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>PQconninfoParse</name><argument_list>(<argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>dsn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>options</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>, <argument><expr><literal type="string">"invalid dsn: %s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>OperationalError</name></expr></argument>, <argument><expr><literal type="string">"PQconninfoParse() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>psyco_dict_from_conninfo_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <comment type="block">/* include_password = */</comment> <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>PQconninfoFree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* safe on null */</comment>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>dsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>quote_ident_doc</name></cpp:macro> \
<cpp:value>"quote_ident(str, conn_or_curs) -&gt; str -- wrapper around PQescapeIdentifier\n\n" \
":Parameters:\n" \
"  * `str`: A bytes or unicode object\n" \
"  * `conn_or_curs`: A connection or cursor, required"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>quote_ident</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ident</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>quoted</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"ident"</literal></expr>, <expr><literal type="string">"scope"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"OO"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ident</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>PyObject_TypeCheck</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursorType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>conn</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>cursorObject</name><operator>*</operator><operator>)</operator><name>obj</name><operator>)</operator><operator>-&gt;</operator><name>conn</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>PyObject_TypeCheck</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connectionType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>conn</name> <operator>=</operator> <operator>(</operator><name>connectionObject</name><operator>*</operator><operator>)</operator><name>obj</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                        <argument><expr><literal type="string">"argument 2 must be a connection or a cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* for ensure_bytes */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ident</name> <operator>=</operator> <call><name>psyco_ensure_bytes</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>quoted</name> <operator>=</operator> <call><name>psyco_escape_identifier</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
        <argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Bytes_GET_SIZE</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>conn_text_from_chars</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** type registration **/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>register_type_doc</name></cpp:macro> \
<cpp:value>"register_type(obj, conn_or_curs) -&gt; None -- register obj with psycopg type system\n\n" \
":Parameters:\n" \
"  * `obj`: A type adapter created by `new_type()`\n" \
"  * `conn_or_curs`: A connection, cursor or None"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_from_python_doc</name></cpp:macro> \
<cpp:value>"new_type(oids, name, castobj) -&gt; new type object\n\n" \
"Create a new binding object. The object can be used with the\n" \
"`register_type()` function to bind PostgreSQL objects to python objects.\n\n" \
":Parameters:\n" \
"  * `oids`: Tuple of ``oid`` of the PostgreSQL types to convert.\n" \
"  * `name`: Name for the new type\n" \
"  * `adapter`: Callable to perform type conversion.\n" \
"    It must have the signature ``fun(value, cur)`` where ``value`` is\n" \
"    the string representation returned by PostgreSQL (`!None` if ``NULL``)\n" \
"    and ``cur`` is the cursor from which data are read."</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_array_from_python_doc</name></cpp:macro> \
<cpp:value>"new_array_type(oids, name, baseobj) -&gt; new type object\n\n" \
"Create a new binding object to parse an array.\n\n" \
"The object can be used with `register_type()`.\n\n" \
":Parameters:\n" \
"  * `oids`: Tuple of ``oid`` of the PostgreSQL types to convert.\n" \
"  * `name`: Name for the new type\n" \
"  * `baseobj`: Adapter to perform type conversion of a single array item."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>register_type</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O!|O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>typecastType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>obj</name> <operator>!=</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>PyObject_TypeCheck</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursorType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>dict</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>cursorObject</name><operator>*</operator><operator>)</operator><name>obj</name><operator>)</operator><operator>-&gt;</operator><name>string_types</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>dict</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>dict</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>typecast_add</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>*</operator><name>dict</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>PyObject_TypeCheck</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connectionType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>typecast_add</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>connectionObject</name><operator>*</operator><operator>)</operator><name>obj</name><operator>)</operator><operator>-&gt;</operator><name>string_types</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                <argument><expr><literal type="string">"argument 2 must be a connection, cursor or None"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>typecast_add</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>



<comment type="block">/* Make sure libcrypto thread callbacks are set up. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>libcrypto_threads_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psycopgmodule: configuring libpq libcrypto callbacks "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* importing the ssl module sets up Python's libcrypto callbacks */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"ssl"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="block">/* disable libcrypto setup in libpq, so it won't stomp on the callbacks
           that have already been set up */</comment>
        <expr_stmt><expr><call><name>PQinitOpenSSL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <comment type="block">/* might mean that Python has been compiled without OpenSSL support,
           fall back to relying on libpq's libcrypto locking */</comment>
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Initialize the default adapters map
 *
 * Return 0 on success, else -1 and set an exception.
 */</comment>
<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>adapters_init</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>microprotocols_init</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psycopgmodule: initializing adapters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>microprotocols_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PyFloat_Type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pfloatType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>microprotocols_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PyLong_Type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pintType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>microprotocols_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PyBool_Type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pbooleanType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* strings */</comment>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>microprotocols_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PyUnicode_Type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>qstringType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* binary */</comment>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>microprotocols_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PyBytes_Type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>binaryType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>microprotocols_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PyByteArray_Type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>binaryType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>microprotocols_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PyMemoryView_Type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>binaryType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>microprotocols_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PyList_Type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>listType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* the module has already been initialized, so we can obtain the callable
       objects directly from its dictionary :) */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dict</name> <operator>=</operator> <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>obj</name> <operator>=</operator> <call><name>PyMapping_GetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"DateFromPy"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>microprotocols_add</name><argument_list>(<argument><expr><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DateType</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>obj</name> <operator>=</operator> <call><name>PyMapping_GetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"TimeFromPy"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>microprotocols_add</name><argument_list>(<argument><expr><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>TimeType</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>obj</name> <operator>=</operator> <call><name>PyMapping_GetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"TimestampFromPy"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>microprotocols_add</name><argument_list>(<argument><expr><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DateTimeType</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>obj</name> <operator>=</operator> <call><name>PyMapping_GetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"IntervalFromPy"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>microprotocols_add</name><argument_list>(<argument><expr><name><name>PyDateTimeAPI</name><operator>-&gt;</operator><name>DeltaType</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Success! */</comment>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>libpq_version_doc</name></cpp:macro> <cpp:value>"Query actual libpq version loaded."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>
<name>libpq_version</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>PQlibVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* encrypt_password - Prepare the encrypted password form */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>encrypt_password_doc</name></cpp:macro> \
<cpp:value>"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\n\n"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>encrypt_password</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>encrypted</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>password</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>user</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>scope</name> <init>= <expr><name>Py_None</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>algorithm</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"password"</literal></expr>, <expr><literal type="string">"user"</literal></expr>, <expr><literal type="string">"scope"</literal></expr>, <expr><literal type="string">"algorithm"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"OO|OO"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>password</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scope</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>algorithm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* for ensure_bytes */</comment>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>scope</name> <operator>!=</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>PyObject_TypeCheck</name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursorType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>conn</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>cursorObject</name><operator>*</operator><operator>)</operator><name>scope</name><operator>)</operator><operator>-&gt;</operator><name>conn</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>PyObject_TypeCheck</name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connectionType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>conn</name> <operator>=</operator> <operator>(</operator><name>connectionObject</name><operator>*</operator><operator>)</operator><name>scope</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                <argument><expr><literal type="string">"the scope must be a connection or a cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>user</name> <operator>=</operator> <call><name>psyco_ensure_bytes</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>password</name> <operator>=</operator> <call><name>psyco_ensure_bytes</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>algorithm</name> <operator>!=</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>algorithm</name> <operator>=</operator> <call><name>psyco_ensure_bytes</name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If we have to encrypt md5 we can use the libpq &lt; 10 API */</comment>
    <if_stmt><if>if <condition>(<expr><name>algorithm</name> <operator>!=</operator> <name>Py_None</name> <operator>&amp;&amp;</operator>
            <call><name>strcmp</name><argument_list>(<argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"md5"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>encrypted</name> <operator>=</operator> <call><name>PQencryptPassword</name><argument_list>(
            <argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="block">/* If the algorithm is not md5 we have to use the API available from
     * libpq 10. */</comment>
    <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">100000</literal></expr></cpp:if>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>,
                <argument><expr><literal type="string">"password encryption (other than 'md5' algorithm)"</literal>
                <literal type="string">" requires a connection or cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* TODO: algo = None will block: forbid on async/green conn? */</comment>
        <expr_stmt><expr><name>encrypted</name> <operator>=</operator> <call><name>PQencryptPasswordConn</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>,
            <argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><ternary><condition><expr><name>algorithm</name> <operator>!=</operator> <name>Py_None</name></expr> ?</condition><then> <expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>NotSupportedError</name></expr></argument>,
            <argument><expr><literal type="string">"password encryption (other than 'md5' algorithm)"</literal>
            <literal type="string">" requires libpq 10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>encrypted</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>Text_FromUTF8</name><argument_list>(<argument><expr><name>encrypted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>,
            <argument><expr><literal type="string">"password encryption failed: %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>msg</name></expr> ?</condition><then> <expr><name>msg</name></expr> </then><else>: <expr><literal type="string">"no reason given"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></else></if_stmt>

<label><name>exit</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>encrypted</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>encrypted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Fill the module's postgresql&lt;-&gt;python encoding table */</comment>
<struct><specifier>static</specifier> struct <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pgenc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pyenc</name></decl>;</decl_stmt>
}</block> <decl><name><name>enctable</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"ABC"</literal></expr>,          <expr><literal type="string">"cp1258"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ALT"</literal></expr>,          <expr><literal type="string">"cp866"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"BIG5"</literal></expr>,         <expr><literal type="string">"big5"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"EUC_CN"</literal></expr>,       <expr><literal type="string">"euccn"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"EUC_JIS_2004"</literal></expr>, <expr><literal type="string">"euc_jis_2004"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"EUC_JP"</literal></expr>,       <expr><literal type="string">"euc_jp"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"EUC_KR"</literal></expr>,       <expr><literal type="string">"euc_kr"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"GB18030"</literal></expr>,      <expr><literal type="string">"gb18030"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"GBK"</literal></expr>,          <expr><literal type="string">"gbk"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ISO_8859_1"</literal></expr>,   <expr><literal type="string">"iso8859_1"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ISO_8859_2"</literal></expr>,   <expr><literal type="string">"iso8859_2"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ISO_8859_3"</literal></expr>,   <expr><literal type="string">"iso8859_3"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ISO_8859_5"</literal></expr>,   <expr><literal type="string">"iso8859_5"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ISO_8859_6"</literal></expr>,   <expr><literal type="string">"iso8859_6"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ISO_8859_7"</literal></expr>,   <expr><literal type="string">"iso8859_7"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ISO_8859_8"</literal></expr>,   <expr><literal type="string">"iso8859_8"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ISO_8859_9"</literal></expr>,   <expr><literal type="string">"iso8859_9"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ISO_8859_10"</literal></expr>,  <expr><literal type="string">"iso8859_10"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ISO_8859_13"</literal></expr>,  <expr><literal type="string">"iso8859_13"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ISO_8859_14"</literal></expr>,  <expr><literal type="string">"iso8859_14"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ISO_8859_15"</literal></expr>,  <expr><literal type="string">"iso8859_15"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ISO_8859_16"</literal></expr>,  <expr><literal type="string">"iso8859_16"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"JOHAB"</literal></expr>,        <expr><literal type="string">"johab"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"KOI8"</literal></expr>,         <expr><literal type="string">"koi8_r"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"KOI8R"</literal></expr>,        <expr><literal type="string">"koi8_r"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"KOI8U"</literal></expr>,        <expr><literal type="string">"koi8_u"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LATIN1"</literal></expr>,       <expr><literal type="string">"iso8859_1"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LATIN2"</literal></expr>,       <expr><literal type="string">"iso8859_2"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LATIN3"</literal></expr>,       <expr><literal type="string">"iso8859_3"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LATIN4"</literal></expr>,       <expr><literal type="string">"iso8859_4"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LATIN5"</literal></expr>,       <expr><literal type="string">"iso8859_9"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LATIN6"</literal></expr>,       <expr><literal type="string">"iso8859_10"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LATIN7"</literal></expr>,       <expr><literal type="string">"iso8859_13"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LATIN8"</literal></expr>,       <expr><literal type="string">"iso8859_14"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LATIN9"</literal></expr>,       <expr><literal type="string">"iso8859_15"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"LATIN10"</literal></expr>,      <expr><literal type="string">"iso8859_16"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"Mskanji"</literal></expr>,      <expr><literal type="string">"cp932"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ShiftJIS"</literal></expr>,     <expr><literal type="string">"cp932"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SHIFT_JIS_2004"</literal></expr>, <expr><literal type="string">"shift_jis_2004"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SJIS"</literal></expr>,         <expr><literal type="string">"cp932"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"SQL_ASCII"</literal></expr>,    <expr><literal type="string">"ascii"</literal></expr>}</block></expr>,  <comment type="block">/* XXX this is wrong: SQL_ASCII means "no
                                 *  encoding" we should fix the unicode
                                 *  typecaster to return a str or bytes in Py3
                                 */</comment>
    <expr><block>{<expr><literal type="string">"TCVN"</literal></expr>,         <expr><literal type="string">"cp1258"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TCVN5712"</literal></expr>,     <expr><literal type="string">"cp1258"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"UHC"</literal></expr>,          <expr><literal type="string">"cp949"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"UNICODE"</literal></expr>,      <expr><literal type="string">"utf_8"</literal></expr>}</block></expr>, <comment type="block">/* Not valid in 8.2, backward compatibility */</comment>
    <expr><block>{<expr><literal type="string">"UTF8"</literal></expr>,         <expr><literal type="string">"utf_8"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"VSCII"</literal></expr>,        <expr><literal type="string">"cp1258"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WIN"</literal></expr>,          <expr><literal type="string">"cp1251"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WIN866"</literal></expr>,       <expr><literal type="string">"cp866"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WIN874"</literal></expr>,       <expr><literal type="string">"cp874"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WIN932"</literal></expr>,       <expr><literal type="string">"cp932"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WIN936"</literal></expr>,       <expr><literal type="string">"gbk"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WIN949"</literal></expr>,       <expr><literal type="string">"cp949"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WIN950"</literal></expr>,       <expr><literal type="string">"cp950"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WIN1250"</literal></expr>,      <expr><literal type="string">"cp1250"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WIN1251"</literal></expr>,      <expr><literal type="string">"cp1251"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WIN1252"</literal></expr>,      <expr><literal type="string">"cp1252"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WIN1253"</literal></expr>,      <expr><literal type="string">"cp1253"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WIN1254"</literal></expr>,      <expr><literal type="string">"cp1254"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WIN1255"</literal></expr>,      <expr><literal type="string">"cp1255"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WIN1256"</literal></expr>,      <expr><literal type="string">"cp1256"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WIN1257"</literal></expr>,      <expr><literal type="string">"cp1257"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"WIN1258"</literal></expr>,      <expr><literal type="string">"cp1258"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"Windows932"</literal></expr>,   <expr><literal type="string">"cp932"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"Windows936"</literal></expr>,   <expr><literal type="string">"gbk"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"Windows949"</literal></expr>,   <expr><literal type="string">"cp949"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"Windows950"</literal></expr>,   <expr><literal type="string">"cp950"</literal></expr>}</block></expr>,

<comment type="block">/* those are missing from Python:                */</comment>
<comment type="block">/*    {"EUC_TW", "?"},                           */</comment>
<comment type="block">/*    {"MULE_INTERNAL", "?"},                    */</comment>
    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</struct>

<comment type="block">/* Initialize the encodings table.
 *
 * Return 0 on success, else -1 and set an exception.
 */</comment>
<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>encodings_init</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psycopgmodule: initializing encodings table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>psycoEncodings</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"encodings_init(): already called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>psycoEncodings</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>psycoEncodings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><literal type="string">"encodings"</literal></expr></argument>, <argument><expr><name>psycoEncodings</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>psycoEncodings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>enctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pgenc</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>value</name> <operator>=</operator> <call><name>Text_FromUTF8</name><argument_list>(<argument><expr><name><name>enctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pyenc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyDict_SetItemString</name><argument_list>(
                <argument><expr><name>psycoEncodings</name></expr></argument>, <argument><expr><name><name>enctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pgenc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Initialize the module's exceptions and after that a dictionary with a full
   set of exceptions. */</comment>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>Error</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Warning</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>InterfaceError</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>DatabaseError</name></decl>,
    <decl><type ref="prev"><modifier>*</modifier></type><name>InternalError</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>OperationalError</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ProgrammingError</name></decl>,
    <decl><type ref="prev"><modifier>*</modifier></type><name>IntegrityError</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>DataError</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>NotSupportedError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>QueryCanceledError</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>TransactionRollbackError</name></decl>;</decl_stmt>

<comment type="block">/* mapping between exception names and their PyObject */</comment>
<struct><specifier>static</specifier> struct <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>exc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>docstr</name></decl>;</decl_stmt>
}</block> <decl><name><name>exctable</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"psycopg2.Error"</literal></expr>, <expr><operator>&amp;</operator><name>Error</name></expr>, <expr><name>NULL</name></expr>, <expr><name>Error_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"psycopg2.Warning"</literal></expr>, <expr><operator>&amp;</operator><name>Warning</name></expr>, <expr><name>NULL</name></expr>, <expr><name>Warning_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"psycopg2.InterfaceError"</literal></expr>, <expr><operator>&amp;</operator><name>InterfaceError</name></expr>, <expr><operator>&amp;</operator><name>Error</name></expr>, <expr><name>InterfaceError_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"psycopg2.DatabaseError"</literal></expr>, <expr><operator>&amp;</operator><name>DatabaseError</name></expr>, <expr><operator>&amp;</operator><name>Error</name></expr>, <expr><name>DatabaseError_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"psycopg2.InternalError"</literal></expr>, <expr><operator>&amp;</operator><name>InternalError</name></expr>, <expr><operator>&amp;</operator><name>DatabaseError</name></expr>, <expr><name>InternalError_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"psycopg2.OperationalError"</literal></expr>, <expr><operator>&amp;</operator><name>OperationalError</name></expr>, <expr><operator>&amp;</operator><name>DatabaseError</name></expr>,
        <expr><name>OperationalError_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"psycopg2.ProgrammingError"</literal></expr>, <expr><operator>&amp;</operator><name>ProgrammingError</name></expr>, <expr><operator>&amp;</operator><name>DatabaseError</name></expr>,
        <expr><name>ProgrammingError_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"psycopg2.IntegrityError"</literal></expr>, <expr><operator>&amp;</operator><name>IntegrityError</name></expr>, <expr><operator>&amp;</operator><name>DatabaseError</name></expr>,
        <expr><name>IntegrityError_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"psycopg2.DataError"</literal></expr>, <expr><operator>&amp;</operator><name>DataError</name></expr>, <expr><operator>&amp;</operator><name>DatabaseError</name></expr>, <expr><name>DataError_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"psycopg2.NotSupportedError"</literal></expr>, <expr><operator>&amp;</operator><name>NotSupportedError</name></expr>, <expr><operator>&amp;</operator><name>DatabaseError</name></expr>,
        <expr><name>NotSupportedError_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"psycopg2.extensions.QueryCanceledError"</literal></expr>, <expr><operator>&amp;</operator><name>QueryCanceledError</name></expr>,
      <expr><operator>&amp;</operator><name>OperationalError</name></expr>, <expr><name>QueryCanceledError_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"psycopg2.extensions.TransactionRollbackError"</literal></expr>,
      <expr><operator>&amp;</operator><name>TransactionRollbackError</name></expr>, <expr><operator>&amp;</operator><name>OperationalError</name></expr>,
      <expr><name>TransactionRollbackError_doc</name></expr> }</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>  <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</struct>


<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>basic_errors_init</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* the names of the exceptions here reflect the organization of the
       psycopg2 module and not the fact the original error objects live in
       _psycopg */</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>errmodule</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psycopgmodule: initializing basic exceptions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 'Error' has been defined elsewhere: only init the other classes */</comment>
    <expr_stmt><expr><name>Error</name> <operator>=</operator> <operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>errorType</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dict</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>docstr</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>str</name> <operator>=</operator> <call><name>Text_FromUTF8</name><argument_list>(<argument><expr><name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>docstr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"__doc__"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* can't put PyExc_StandardError in the static exctable:
         * windows build will fail */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exc</name> <operator>=</operator> <call><name>PyErr_NewException</name><argument_list>(
                <argument><expr><name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
                <argument><expr><ternary><condition><expr><name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>base</name></expr> ?</condition><then> <expr><operator>*</operator><name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>base</name></expr> </then><else>: <expr><name>PyExc_StandardError</name></expr></else></ternary></expr></argument>,
                <argument><expr><name>dict</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>errmodule</name> <operator>=</operator> <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"psycopg2.errors"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="block">/* don't inject the exceptions into the errors module */</comment>
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exc</name></expr>)</condition> <block>{<block_content> <continue>continue;</continue> </block_content>}</block></if></if_stmt>

        <comment type="block">/* the name is the part after the last dot */</comment>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><operator>*</operator><name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>*</operator><name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><operator>*</operator><name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>errmodule</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><operator>*</operator><name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>errmodule</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>*</operator><name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><operator>*</operator><name><name>exctable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>errmodule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* mapping between sqlstate and exception name */</comment>
<struct><specifier>static</specifier> struct <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sqlstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block> <decl><name><name>sqlstate_table</name><index>[]</index></name> <init>= <expr><block>{
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlstate_errors.h"</cpp:file></cpp:include>
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>  <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</struct>


<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>sqlstate_errors_init</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>namebuf</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>prefix</name><index>[]</index></name> <init>= <expr><literal type="string">"psycopg2.errors."</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>suffix</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bufsize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>exc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>errmodule</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psycopgmodule: initializing sqlstate exceptions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>sqlstate_errors</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"sqlstate_errors_init(): already called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>errmodule</name> <operator>=</operator> <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"psycopg2.errors"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="block">/* don't inject the exceptions into the errors module */</comment>
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sqlstate_errors</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>sqlstate_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><literal type="string">"sqlstate_errors"</literal></expr></argument>, <argument><expr><name>sqlstate_errors</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>sqlstate_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>suffix</name> <operator>=</operator> <name>namebuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bufsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <comment type="block">/* If this 0 gets deleted the buffer was too small. */</comment>
    <expr_stmt><expr><name><name>namebuf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sqlstate_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlstate</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>base_exception_from_sqlstate</name><argument_list>(<argument><expr><name><name>sqlstate_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>, <argument><expr><name><name>sqlstate_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>namebuf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
                <argument><expr><name>PyExc_SystemError</name></expr></argument>, <argument><expr><literal type="string">"sqlstate_errors_init(): buffer too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>exc</name> <operator>=</operator> <call><name>PyErr_NewException</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyDict_SetItemString</name><argument_list>(
                <argument><expr><name>sqlstate_errors</name></expr></argument>, <argument><expr><name><name>sqlstate_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlstate</name></expr></argument>, <argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Expose the exceptions to psycopg2.errors */</comment>
        <if_stmt><if>if <condition>(<expr><name>errmodule</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyModule_AddObject</name><argument_list>(
                    <argument><expr><name>errmodule</name></expr></argument>, <argument><expr><name><name>sqlstate_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><name>exc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>     <comment type="block">/* ref stolen by the module */</comment>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>errmodule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>add_module_constants</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psycopgmodule: initializing module constants"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyModule_AddStringConstant</name><argument_list>(<argument><expr><name>module</name></expr></argument>,
        <argument><expr><literal type="string">"__version__"</literal></expr></argument>, <argument><expr><call><name>xstr</name><argument_list>(<argument><expr><name>PSYCOPG_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyModule_AddStringConstant</name><argument_list>(<argument><expr><name>module</name></expr></argument>,
        <argument><expr><literal type="string">"__doc__"</literal></expr></argument>, <argument><expr><literal type="string">"psycopg2 PostgreSQL driver"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>module</name></expr></argument>,
        <argument><expr><literal type="string">"__libpq_version__"</literal></expr></argument>, <argument><expr><name>PG_VERSION_NUM</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>module</name></expr></argument>,
        <argument><expr><literal type="string">"apilevel"</literal></expr></argument>, <argument><expr><name>tmp</name> <operator>=</operator> <call><name>Text_FromUTF8</name><argument_list>(<argument><expr><name>APILEVEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>module</name></expr></argument>,
        <argument><expr><literal type="string">"threadsafety"</literal></expr></argument>, <argument><expr><name>tmp</name> <operator>=</operator> <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>THREADSAFETY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>module</name></expr></argument>,
        <argument><expr><literal type="string">"paramstyle"</literal></expr></argument>, <argument><expr><name>tmp</name> <operator>=</operator> <call><name>Text_FromUTF8</name><argument_list>(<argument><expr><name>PARAMSTYLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyModule_AddIntMacro</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>REPLICATION_PHYSICAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyModule_AddIntMacro</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>REPLICATION_LOGICAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<struct><specifier>static</specifier> struct <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
}</block> <decl><name><name>typetable</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"connection"</literal></expr>, <expr><operator>&amp;</operator><name>connectionType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"cursor"</literal></expr>, <expr><operator>&amp;</operator><name>cursorType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"ReplicationConnection"</literal></expr>, <expr><operator>&amp;</operator><name>replicationConnectionType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"ReplicationCursor"</literal></expr>, <expr><operator>&amp;</operator><name>replicationCursorType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"ReplicationMessage"</literal></expr>, <expr><operator>&amp;</operator><name>replicationMessageType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"ISQLQuote"</literal></expr>, <expr><operator>&amp;</operator><name>isqlquoteType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"Column"</literal></expr>, <expr><operator>&amp;</operator><name>columnType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"Notify"</literal></expr>, <expr><operator>&amp;</operator><name>notifyType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"Xid"</literal></expr>, <expr><operator>&amp;</operator><name>xidType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"ConnectionInfo"</literal></expr>, <expr><operator>&amp;</operator><name>connInfoType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"Diagnostics"</literal></expr>, <expr><operator>&amp;</operator><name>diagnosticsType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"AsIs"</literal></expr>, <expr><operator>&amp;</operator><name>asisType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"Binary"</literal></expr>, <expr><operator>&amp;</operator><name>binaryType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"Boolean"</literal></expr>, <expr><operator>&amp;</operator><name>pbooleanType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"Decimal"</literal></expr>, <expr><operator>&amp;</operator><name>pdecimalType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"Int"</literal></expr>, <expr><operator>&amp;</operator><name>pintType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"Float"</literal></expr>, <expr><operator>&amp;</operator><name>pfloatType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"List"</literal></expr>, <expr><operator>&amp;</operator><name>listType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"QuotedString"</literal></expr>, <expr><operator>&amp;</operator><name>qstringType</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"lobject"</literal></expr>, <expr><operator>&amp;</operator><name>lobjectType</name></expr> }</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>  <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</struct>

<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>add_module_types</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psycopgmodule: initializing module types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>typetable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name><name>typetable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>Py_SET_TYPE</name><argument_list>(<argument><expr><name><name>typetable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PyType_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyType_Ready</name><argument_list>(<argument><expr><name><name>typetable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name><name>typetable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>datetime_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psycopgmodule: initializing datetime module"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* import python builtin datetime module, if available */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dt</name> <operator>=</operator> <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"datetime"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Initialize the PyDateTimeAPI everywhere is used */</comment>
    <expr_stmt><expr><name>PyDateTime_IMPORT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>adapter_datetime_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>repl_curs_datetime_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>replmsg_datetime_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Py_SET_TYPE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pydatetimeType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PyType_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyType_Ready</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pydatetimeType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** method table and module initialization **/</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>psycopgMethods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"_connect"</literal></expr>,  <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_connect</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>psyco_connect_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"parse_dsn"</literal></expr>,  <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>parse_dsn</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>parse_dsn_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"quote_ident"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>quote_ident</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>quote_ident_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"adapt"</literal></expr>,  <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_microprotocols_adapt</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_microprotocols_adapt_doc</name></expr>}</block></expr>,

    <expr><block>{<expr><literal type="string">"register_type"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>register_type</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>register_type_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"new_type"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>typecast_from_python</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>typecast_from_python_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"new_array_type"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>typecast_array_from_python</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>typecast_array_from_python_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"libpq_version"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>libpq_version</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>libpq_version_doc</name></expr>}</block></expr>,

    <expr><block>{<expr><literal type="string">"Date"</literal></expr>,  <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_Date</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_Date_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"Time"</literal></expr>,  <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_Time</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_Time_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"Timestamp"</literal></expr>,  <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_Timestamp</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_Timestamp_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"DateFromTicks"</literal></expr>,  <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_DateFromTicks</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_DateFromTicks_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TimeFromTicks"</literal></expr>,  <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_TimeFromTicks</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_TimeFromTicks_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TimestampFromTicks"</literal></expr>,  <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_TimestampFromTicks</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_TimestampFromTicks_doc</name></expr>}</block></expr>,

    <expr><block>{<expr><literal type="string">"DateFromPy"</literal></expr>,  <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_DateFromPy</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_DateFromPy_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TimeFromPy"</literal></expr>,  <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_TimeFromPy</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_TimeFromPy_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"TimestampFromPy"</literal></expr>,  <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_TimestampFromPy</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_TimestampFromPy_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"IntervalFromPy"</literal></expr>,  <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_IntervalFromPy</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_IntervalFromPy_doc</name></expr>}</block></expr>,

    <expr><block>{<expr><literal type="string">"set_wait_callback"</literal></expr>,  <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_set_wait_callback</name></expr>,
     <expr><name>METH_O</name></expr>, <expr><name>psyco_set_wait_callback_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"get_wait_callback"</literal></expr>,  <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_get_wait_callback</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_get_wait_callback_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"encrypt_password"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>encrypt_password</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>encrypt_password_doc</name></expr>}</block></expr>,

    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>        <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyModuleDef</name></name></type> <name>psycopgmodule</name> <init>= <expr><block>{
        <expr><name>PyModuleDef_HEAD_INIT</name></expr>,
        <expr><literal type="string">"_psycopg"</literal></expr>,
        <expr><name>NULL</name></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><name>psycopgMethods</name></expr>,
        <expr><name>NULL</name></expr>,
        <expr><name>NULL</name></expr>,
        <expr><name>NULL</name></expr>,
        <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PyMODINIT_FUNC</name></cpp:ifndef>	<comment type="block">/* declarations for DLL import/export */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMODINIT_FUNC</name></cpp:macro> <cpp:value>void</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>PyMODINIT_FUNC</name>
<name>INIT_MODULE</name></type>(<name>_psycopg</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>module</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PSYCOPG_DEBUG</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PSYCOPG_DEBUG"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>psycopg_debug_enabled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psycopgmodule: initializing psycopg %s"</literal></expr></argument>, <argument><expr><call><name>xstr</name><argument_list>(<argument><expr><name>PSYCOPG_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* initialize libcrypto threading callbacks */</comment>
    <expr_stmt><expr><call><name>libcrypto_threads_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* initialize types and objects not exposed to the module */</comment>
    <expr_stmt><expr><call><name>Py_SET_TYPE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>typecastType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PyType_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyType_Ready</name><argument_list>(<argument><expr><operator>&amp;</operator><name>typecastType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Py_SET_TYPE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chunkType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PyType_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyType_Ready</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chunkType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Py_SET_TYPE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errorType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PyType_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>errorType</name><operator>.</operator><name>tp_base</name></name> <operator>=</operator> <operator>(</operator><name>PyTypeObject</name> <operator>*</operator><operator>)</operator><name>PyExc_StandardError</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>PyType_Ready</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errorType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>psyco_null</name> <operator>=</operator> <call><name>Bytes_FromString</name><argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <comment type="block">/* initialize the module */</comment>
    <expr_stmt><expr><name>module</name> <operator>=</operator> <call><name>PyModule_Create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psycopgmodule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>module</name></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>add_module_constants</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>add_module_types</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>datetime_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>encodings_init</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>typecast_init</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>adapters_init</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>basic_errors_init</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>sqlstate_errors_init</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psycopgmodule: module initialization complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <return>return <expr><name>module</name></expr>;</return>
</block_content>}</block></function>
</unit>
