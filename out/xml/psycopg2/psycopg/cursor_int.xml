<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/cursor_int.c"><comment type="block">/* cursor_int.c - code used by the cursor object
 *
 * Copyright (C) 2003-2019 Federico Di Gregorio &lt;fog@debian.org&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCOPG_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/psycopg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/pqpath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/typecast.h"</cpp:file></cpp:include>

<comment type="block">/* curs_get_cast - return the type caster for an oid.
 *
 * Return the most specific type caster, from cursor to connection to global.
 * If no type caster is found, return the default one.
 *
 * Return a borrowed reference.
 */</comment>

<function><type><name>BORROWED</name> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_get_cast</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>cast</name></decl>;</decl_stmt>

    <comment type="block">/* cursor lookup */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>string_types</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>string_types</name></name> <operator>!=</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cast</name> <operator>=</operator> <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>string_types</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_get_cast:        per-cursor dict: %p"</literal></expr></argument>, <argument><expr><name>cast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>cast</name></expr>)</condition> <block>{<block_content> <return>return <expr><name>cast</name></expr>;</return> </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* connection lookup */</comment>
    <expr_stmt><expr><name>cast</name> <operator>=</operator> <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>string_types</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_get_cast:        per-connection dict: %p"</literal></expr></argument>, <argument><expr><name>cast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cast</name></expr>)</condition> <block>{<block_content> <return>return <expr><name>cast</name></expr>;</return> </block_content>}</block></if></if_stmt>

    <comment type="block">/* global lookup */</comment>
    <expr_stmt><expr><name>cast</name> <operator>=</operator> <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>psyco_types</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_get_cast:        global dict: %p"</literal></expr></argument>, <argument><expr><name>cast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cast</name></expr>)</condition> <block>{<block_content> <return>return <expr><name>cast</name></expr>;</return> </block_content>}</block></if></if_stmt>

    <comment type="block">/* fallback */</comment>
    <return>return <expr><name>psyco_default_cast</name></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<comment type="block">/* curs_reset - reset the cursor to a clean state */</comment>

<function><type><name>void</name></type>
<name>curs_reset</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* initialize some variables to default values */</comment>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>notuples</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>casts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* Return 1 if `obj` is a `psycopg2.sql.Composable` instance, else 0
 * Set an exception and return -1 in case of error.
 */</comment>
<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>_curs_is_composible</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>m</name> <operator>=</operator> <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"psycopg2.sql"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>comp</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"Composable"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<comment type="block">/* Performs very basic validation on an incoming SQL string.
 * Returns a new reference to a str instance on success; NULL on failure,
 * after having set an exception.
 */</comment>
<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>curs_validate_sql_basic</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iscomp</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sql</name> <operator>||</operator> <operator>!</operator><call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>psyco_set_error</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>, <argument><expr><name>self</name></expr></argument>,
                         <argument><expr><literal type="string">"can't execute an empty query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Bytes_Check</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Necessary for ref-count symmetry with the unicode case: */</comment>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>conn_encode</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator><name>iscomp</name> <operator>=</operator> <call><name>_curs_is_composible</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>iscomp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>comp</name> <operator>=</operator> <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"as_string"</literal></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>Bytes_Check</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>comp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>comp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>conn_encode</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                <argument><expr><literal type="string">"as_string() should return a string: got %s instead"</literal></expr></argument>,
                <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <comment type="block">/* the  is not unicode or string, raise an error */</comment>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
            <argument><expr><literal type="string">"argument 1 must be a string or unicode object: got %s instead"</literal></expr></argument>,
            <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></else></if_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>curs_set_result</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>pgres</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name> <operator>=</operator> <name>pgres</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
