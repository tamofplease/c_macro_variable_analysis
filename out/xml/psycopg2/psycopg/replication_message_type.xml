<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/replication_message_type.c"><comment type="block">/* replication_message_type.c - python interface to ReplcationMessage objects
 *
 * Copyright (C) 2003-2019 Federico Di Gregorio &lt;fog@debian.org&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCOPG_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/psycopg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/replication_message.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datetime.h"</cpp:file></cpp:include>

<function><type><name>RAISES_NEG</name> <name>int</name></type>
<name>replmsg_datetime_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>PyDateTime_IMPORT</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>PyDateTimeAPI</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>, <argument><expr><literal type="string">"datetime initialization failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>replmsg_repr</name><parameter_list>(<parameter><decl><type><name>replicationMessageObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyString_FromFormat</name><argument_list>(
        <argument><expr><literal type="string">"&lt;ReplicationMessage object at %p; data_size: %d; "</literal>
        <literal type="string">"data_start: "</literal><name>XLOGFMTSTR</name><literal type="string">"; wal_end: "</literal><name>XLOGFMTSTR</name><literal type="string">"; send_time: %ld&gt;"</literal></expr></argument>,
        <argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>, <argument><expr><call><name>XLOGFMTARGS</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>data_start</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XLOGFMTARGS</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>wal_end</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>send_time</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>replmsg_init</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>replicationMessageObject</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>replicationMessageObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(
            <argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O!O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursorType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>payload</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <operator>(</operator><name>cursorObject</name> <operator>*</operator><operator>)</operator><name>cur</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>payload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>wal_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>send_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>replmsg_traverse</name><parameter_list>(<parameter><decl><type><name>replicationMessageObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>visitproc</name></type> <name>visit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>payload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>replmsg_clear</name><parameter_list>(<parameter><decl><type><name>replicationMessageObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>payload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>replmsg_dealloc</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replmsg_clear</name><argument_list>(<argument><expr><operator>(</operator><name>replicationMessageObject</name><operator>*</operator><operator>)</operator> <name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>tp_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>replmsg_send_time_doc</name></cpp:macro> \
<cpp:value>"send_time - Timestamp of the replication message departure from the server."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>replmsg_get_send_time</name><parameter_list>(<parameter><decl><type><name>replicationMessageObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tval</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>t</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>send_time</name></name> <operator>/</operator> <name>USECS_PER_SEC</name> <operator>+</operator>
        <operator>(</operator><operator>(</operator><name>POSTGRES_EPOCH_JDATE</name> <operator>-</operator> <name>UNIX_EPOCH_JDATE</name><operator>)</operator> <operator>*</operator> <name>SECS_PER_DAY</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>tval</name> <operator>=</operator> <call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(d)"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tval</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PyDateTime_FromTimestamp</name><argument_list>(<argument><expr><name>tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSETOF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(replicationMessageObject, x)</cpp:value></cpp:define>

<comment type="block">/* object member list */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMemberDef</name></name></type> <name><name>replicationMessageObject_members</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"cursor"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"Related ReplcationCursor object."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"payload"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"The actual message data."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"data_size"</literal></expr>, <expr><name>T_INT</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"Raw size of the message data in bytes."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"data_start"</literal></expr>, <expr><name>T_ULONGLONG</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>data_start</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"LSN position of the start of this message."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"wal_end"</literal></expr>, <expr><name>T_ULONGLONG</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>wal_end</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"LSN position of the current end of WAL on the server."</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyGetSetDef</name></name></type> <name><name>replicationMessageObject_getsets</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"send_time"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>replmsg_get_send_time</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>replmsg_send_time_doc</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* object type */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>replicationMessageType_doc</name></cpp:macro> \
<cpp:value>"A replication protocol message."</cpp:value></cpp:define>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>replicationMessageType</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
    <literal type="string">"psycopg2.extensions.ReplicationMessage"</literal></expr>,
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>replicationMessageObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><name>replmsg_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_print*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr><operator>(</operator><name>reprfunc</name><operator>)</operator><name>replmsg_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_mapping*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_hash */</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_call*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_str*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_buffer*/</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name> <operator>|</operator> <name>Py_TPFLAGS_BASETYPE</name> <operator>|</operator>
      <name>Py_TPFLAGS_HAVE_GC</name></expr>, <comment type="block">/*tp_flags*/</comment>
    <expr><name>replicationMessageType_doc</name></expr>, <comment type="block">/*tp_doc*/</comment>
    <expr><operator>(</operator><name>traverseproc</name><operator>)</operator><name>replmsg_traverse</name></expr>, <comment type="block">/*tp_traverse*/</comment>
    <expr><operator>(</operator><name>inquiry</name><operator>)</operator><name>replmsg_clear</name></expr>, <comment type="block">/*tp_clear*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_richcompare*/</comment>
    <expr><literal type="number">0</literal></expr>, <comment type="block">/*tp_weaklistoffset*/</comment>
    <expr><literal type="number">0</literal></expr>, <comment type="block">/*tp_iter*/</comment>
    <expr><literal type="number">0</literal></expr>, <comment type="block">/*tp_iternext*/</comment>
    <expr><literal type="number">0</literal></expr>, <comment type="block">/*tp_methods*/</comment>
    <expr><name>replicationMessageObject_members</name></expr>, <comment type="block">/*tp_members*/</comment>
    <expr><name>replicationMessageObject_getsets</name></expr>, <comment type="block">/*tp_getset*/</comment>
    <expr><literal type="number">0</literal></expr>, <comment type="block">/*tp_base*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dict*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_get*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_set*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dictoffset*/</comment>
    <expr><name>replmsg_init</name></expr>, <comment type="block">/*tp_init*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_alloc*/</comment>
    <expr><name>PyType_GenericNew</name></expr>, <comment type="block">/*tp_new*/</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
