<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/replication_cursor_type.c"><comment type="block">/* replication_cursor_type.c - python interface to replication cursor objects
 *
 * Copyright (C) 2015-2019 Daniele Varrazzo &lt;daniele.varrazzo@gmail.com&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCOPG_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/psycopg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/replication_cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/replication_message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/green.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/pqpath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* python */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datetime.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>void</name></type> <name>set_status_interval</name><parameter_list>(<parameter><decl><type><name>replicationCursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>status_interval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>status_interval</name><operator>.</operator><name>tv_sec</name></name>  <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>status_interval</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>status_interval</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name>status_interval</name> <operator>-</operator> <name><name>self</name><operator>-&gt;</operator><name>status_interval</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator><operator>*</operator><literal type="number">1.0e6</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>start_replication_expert_doc</name></cpp:macro> \
<cpp:value>"start_replication_expert(command, decode=False, status_interval=10) -- Start replication with a given command."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>start_replication_expert</name><parameter_list>(<parameter><decl><type><name>replicationCursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
                                         <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>curs</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>command</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>status_interval</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>decode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"command"</literal></expr>, <expr><literal type="string">"decode"</literal></expr>, <expr><literal type="string">"status_interval"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"O|ld"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status_interval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>curs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_GREEN</name><argument_list>(<argument><expr><name>start_replication_expert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>start_replication_expert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>command</name> <operator>=</operator> <call><name>curs_validate_sql_basic</name><argument_list>(<argument><expr><operator>(</operator><name>cursorObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>status_interval</name> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>psyco_set_error</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>, <argument><expr><name>curs</name></expr></argument>, <argument><expr><literal type="string">"status_interval must be &gt;= 1 (sec)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"start_replication_expert: '%s'; decode: %ld"</literal></expr></argument>,
        <argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pq_execute</name><argument_list>(<argument><expr><name>curs</name></expr></argument>, <argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name></name></expr></argument>,
            <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* no_result */</comment>, <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* no_begin */</comment>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>set_status_interval</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>status_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>decode</name></name> <operator>=</operator> <name>decode</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>last_io</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>consume_stream_doc</name></cpp:macro> \
<cpp:value>"consume_stream(consumer, keepalive_interval=None) -- Consume replication stream."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>consume_stream</name><parameter_list>(<parameter><decl><type><name>replicationCursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
                               <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>curs</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>consume</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>interval</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>keepalive_interval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"consume"</literal></expr>, <expr><literal type="string">"keepalive_interval"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"O|O"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>consume</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>interval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>curs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CURS_ASYNC</name><argument_list>(<argument><expr><name>curs</name></expr></argument>, <argument><expr><name>consume_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_GREEN</name><argument_list>(<argument><expr><name>consume_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>conn</name></name></expr></argument>, <argument><expr><name>consume_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"consume_stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>interval</name> <operator>&amp;&amp;</operator> <name>interval</name> <operator>!=</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><call><name>PyFloat_Check</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>keepalive_interval</name> <operator>=</operator> <call><name>PyFloat_AsDouble</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>keepalive_interval</name> <operator>=</operator> <call><name>PyLong_AsDouble</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>keepalive_interval</name> <operator>=</operator> <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>psyco_set_error</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>, <argument><expr><name>curs</name></expr></argument>, <argument><expr><literal type="string">"keepalive_interval must be int or float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>keepalive_interval</name> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>psyco_set_error</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>, <argument><expr><name>curs</name></expr></argument>, <argument><expr><literal type="string">"keepalive_interval must be &gt;= 1 (sec)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>consuming</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>,
                        <argument><expr><literal type="string">"consume_stream cannot be used when already in the consume loop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>curs</name><operator>-&gt;</operator><name>pgres</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name><name>curs</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_COPY_BOTH</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>,
                        <argument><expr><literal type="string">"consume_stream: not replicating, call start_replication first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>CLEARPGRES</name><argument_list>(<argument><expr><name><name>curs</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>consuming</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>keepalive_interval</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>set_status_interval</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>keepalive_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pq_copy_both</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>consume</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>consuming</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_message_doc</name></cpp:macro> \
<cpp:value>"read_message() -- Try reading a replication message from the server (non-blocking)."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>read_message</name><parameter_list>(<parameter><decl><type><name>replicationCursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>curs</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>replicationMessageObject</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>curs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_GREEN</name><argument_list>(<argument><expr><name>read_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>conn</name></name></expr></argument>, <argument><expr><name>read_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pq_read_replication_message</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>msg</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>send_feedback_doc</name></cpp:macro> \
<cpp:value>"send_feedback(write_lsn=0, flush_lsn=0, apply_lsn=0, reply=False, force=False) -- Update a replication feedback, optionally request a reply or force sending a feedback message regardless of the timeout."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>send_feedback</name><parameter_list>(<parameter><decl><type><name>replicationCursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
                              <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>curs</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>write_lsn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>flush_lsn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>apply_lsn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>reply</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>force</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"write_lsn"</literal></expr>, <expr><literal type="string">"flush_lsn"</literal></expr>, <expr><literal type="string">"apply_lsn"</literal></expr>, <expr><literal type="string">"reply"</literal></expr>, <expr><literal type="string">"force"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>curs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"|KKKii"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>write_lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flush_lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>apply_lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>force</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>write_lsn</name> <operator>&gt;</operator> <name><name>self</name><operator>-&gt;</operator><name>write_lsn</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>write_lsn</name></name> <operator>=</operator> <name>write_lsn</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flush_lsn</name> <operator>&gt;</operator> <name><name>self</name><operator>-&gt;</operator><name>explicitly_flushed_lsn</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>explicitly_flushed_lsn</name></name> <operator>=</operator> <name>flush_lsn</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flush_lsn</name> <operator>&gt;</operator> <name><name>self</name><operator>-&gt;</operator><name>flush_lsn</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>flush_lsn</name></name> <operator>=</operator> <name>flush_lsn</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>apply_lsn</name> <operator>&gt;</operator> <name><name>self</name><operator>-&gt;</operator><name>apply_lsn</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>apply_lsn</name></name> <operator>=</operator> <name>apply_lsn</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>force</name> <operator>||</operator> <name>reply</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>pq_send_replication_feedback</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>RAISES_NEG</name> <name>int</name></type>
<name>repl_curs_datetime_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>PyDateTime_IMPORT</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>PyDateTimeAPI</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>, <argument><expr><literal type="string">"datetime initialization failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repl_curs_io_timestamp_doc</name></cpp:macro> \
<cpp:value>"io_timestamp -- the timestamp of latest IO with the server"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>repl_curs_get_io_timestamp</name><parameter_list>(<parameter><decl><type><name>replicationCursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>curs</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tval</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>seconds</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>curs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>seconds</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>last_io</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <name><name>self</name><operator>-&gt;</operator><name>last_io</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1.0e6</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>tval</name> <operator>=</operator> <call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(d)"</literal></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tval</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PyDateTime_FromTimestamp</name><argument_list>(<argument><expr><name>tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repl_curs_feedback_timestamp_doc</name></cpp:macro> \
<cpp:value>"feedback_timestamp -- the timestamp of the latest feedback message sent to the server"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>repl_curs_get_feedback_timestamp</name><parameter_list>(<parameter><decl><type><name>replicationCursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>curs</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tval</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>seconds</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>curs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>seconds</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>last_feedback</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <name><name>self</name><operator>-&gt;</operator><name>last_feedback</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1.0e6</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>tval</name> <operator>=</operator> <call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(d)"</literal></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tval</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PyDateTime_FromTimestamp</name><argument_list>(<argument><expr><name>tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* object member list */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSETOF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(replicationCursorObject, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMemberDef</name></name></type> <name><name>replicationCursorObject_members</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"wal_end"</literal></expr>, <expr><name>T_ULONGLONG</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>wal_end</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"LSN position of the current end of WAL on the server."</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* object method list */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMethodDef</name></name></type> <name><name>replicationCursorObject_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"start_replication_expert"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>start_replication_expert</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>start_replication_expert_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"consume_stream"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>consume_stream</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>consume_stream_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"read_message"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>read_message</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>read_message_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"send_feedback"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>send_feedback</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>send_feedback_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* object calculated member list */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyGetSetDef</name></name></type> <name><name>replicationCursorObject_getsets</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"io_timestamp"</literal></expr>,
      <expr><operator>(</operator><name>getter</name><operator>)</operator><name>repl_curs_get_io_timestamp</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>repl_curs_io_timestamp_doc</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"feedback_timestamp"</literal></expr>,
      <expr><operator>(</operator><name>getter</name><operator>)</operator><name>repl_curs_get_feedback_timestamp</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>repl_curs_feedback_timestamp_doc</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>replicationCursor_init</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>replicationCursorObject</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>replicationCursorObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>consuming</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>decode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>wal_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>write_lsn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>flush_lsn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>apply_lsn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return <expr><call><name><name>cursorType</name><operator>.</operator><name>tp_init</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>replicationCursor_repr</name><parameter_list>(<parameter><decl><type><name>replicationCursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyString_FromFormat</name><argument_list>(
        <argument><expr><literal type="string">"&lt;ReplicationCursor object at %p; closed: %d&gt;"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>closed</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>replicationCursorType_traverse</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>visitproc</name></type> <name>visit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>cursorType</name><operator>.</operator><name>tp_traverse</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>visit</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* object type */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>replicationCursorType_doc</name></cpp:macro> \
<cpp:value>"A database replication cursor."</cpp:value></cpp:define>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>replicationCursorType</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
    <literal type="string">"psycopg2.extensions.ReplicationCursor"</literal></expr>,
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>replicationCursorObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dealloc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_print*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr><operator>(</operator><name>reprfunc</name><operator>)</operator><name>replicationCursor_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_mapping*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_hash*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_call*/</comment>
    <expr><operator>(</operator><name>reprfunc</name><operator>)</operator><name>replicationCursor_repr</name></expr>, <comment type="block">/*tp_str*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_buffer*/</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name> <operator>|</operator> <name>Py_TPFLAGS_BASETYPE</name> <operator>|</operator> <name>Py_TPFLAGS_HAVE_ITER</name> <operator>|</operator>
      <name>Py_TPFLAGS_HAVE_GC</name></expr>, <comment type="block">/*tp_flags*/</comment>
    <expr><name>replicationCursorType_doc</name></expr>, <comment type="block">/*tp_doc*/</comment>
    <expr><name>replicationCursorType_traverse</name></expr>, <comment type="block">/*tp_traverse*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_clear*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_richcompare*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_weaklistoffset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iter*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iternext*/</comment>
    <expr><name>replicationCursorObject_methods</name></expr>, <comment type="block">/*tp_methods*/</comment>
    <expr><name>replicationCursorObject_members</name></expr>, <comment type="block">/*tp_members*/</comment>
    <expr><name>replicationCursorObject_getsets</name></expr>, <comment type="block">/*tp_getset*/</comment>
    <expr><operator>&amp;</operator><name>cursorType</name></expr>, <comment type="block">/*tp_base*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dict*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_get*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_set*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dictoffset*/</comment>
    <expr><name>replicationCursor_init</name></expr>, <comment type="block">/*tp_init*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_alloc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_new*/</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
