<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/connection_type.c"><comment type="block">/* connection_type.c - python interface to connection objects
 *
 * Copyright (C) 2003-2019 Federico Di Gregorio &lt;fog@debian.org&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCOPG_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/psycopg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/pqpath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/conninfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/green.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/xid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>HIDDEN</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>srv_isolevels</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>HIDDEN</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>srv_readonly</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>HIDDEN</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>srv_deferrable</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>HIDDEN</name> <specifier>const</specifier> <name>int</name></type> <name>SRV_STATE_UNCHANGED</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** DBAPI methods **/</comment>

<comment type="block">/* cursor method - allocate a new cursor */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_cursor_doc</name></cpp:macro> \
<cpp:value>"cursor(name=None, cursor_factory=extensions.cursor, withhold=False) -- new cursor\n\n"     \
"Return a new cursor.\n\nThe ``cursor_factory`` argument can be used to\n"  \
"create non-standard cursors by passing a class different from the\n"       \
"default. Note that the new class *should* be a sub-class of\n"             \
"`extensions.cursor`.\n\n"                                                  \
":rtype: `extensions.cursor`"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_cursor</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>factory</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>withhold</name> <init>= <expr><name>Py_False</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>scrollable</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{
        <expr><literal type="string">"name"</literal></expr>, <expr><literal type="string">"cursor_factory"</literal></expr>, <expr><literal type="string">"withhold"</literal></expr>, <expr><literal type="string">"scrollable"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(
            <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"|OOOO"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>factory</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>withhold</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scrollable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>factory</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>cursor_factory</name></name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>cursor_factory</name></name> <operator>!=</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>factory</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>cursor_factory</name></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name>factory</name> <operator>=</operator> <operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cursorType</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>CONN_STATUS_READY</name> <operator>&amp;&amp;</operator>
        <name><name>self</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>CONN_STATUS_BEGIN</name> <operator>&amp;&amp;</operator>
        <name><name>self</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>CONN_STATUS_PREPARED</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>OperationalError</name></expr></argument>,
                        <argument><expr><literal type="string">"asynchronous connection attempt underway"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>Py_None</name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>async</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>,
                        <argument><expr><literal type="string">"asynchronous connections "</literal>
                        <literal type="string">"cannot produce named cursors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psyco_conn_cursor: new %s cursor for connection at %p"</literal></expr></argument>,
        <argument><expr><operator>(</operator><ternary><condition><expr><name>name</name> <operator>==</operator> <name>Py_None</name></expr> ?</condition><then> <expr><literal type="string">"unnamed"</literal></expr> </then><else>: <expr><literal type="string">"named"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>obj</name> <operator>=</operator> <call><name>PyObject_CallFunctionObjArgs</name><argument_list>(<argument><expr><name>factory</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cursorType</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
            <argument><expr><literal type="string">"cursor factory must be subclass of psycopg2.extensions.cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>curs_withhold_set</name><argument_list>(<argument><expr><operator>(</operator><name>cursorObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></argument>, <argument><expr><name>withhold</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>curs_scrollable_set</name><argument_list>(<argument><expr><operator>(</operator><name>cursorObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></argument>, <argument><expr><name>scrollable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psyco_conn_cursor: new cursor at %p: refcnt = "</literal>
        <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
        <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* close method - close the connection and all related cursors */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_close_doc</name></cpp:macro> <cpp:value>"close() -- Close the connection."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_close</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psyco_conn_close: closing connection at %p"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>conn_close</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psyco_conn_close: connection at %p closed"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* commit method - commit all changes to the database */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_commit_doc</name></cpp:macro> <cpp:value>"commit() -- Commit all changes to database."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_commit</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CONN_ASYNC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_BEGIN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>conn_commit</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* rollback method - roll back all changes done to the database */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_rollback_doc</name></cpp:macro> \
<cpp:value>"rollback() -- Roll back all changes done to database."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_rollback</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CONN_ASYNC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_BEGIN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>conn_rollback</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_xid_doc</name></cpp:macro> \
<cpp:value>"xid(format_id, gtrid, bqual) -- create a transaction identifier."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_xid</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_NOT_SUPPORTED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>PyObject_Call</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>xidType</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_tpc_begin_doc</name></cpp:macro> \
<cpp:value>"tpc_begin(xid) -- begin a TPC transaction with given transaction ID xid."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_tpc_begin</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>xidObject</name> <modifier>*</modifier></type><name>xid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>oxid</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CONN_ASYNC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tpc_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_NOT_SUPPORTED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_IN_TRANSACTION</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tpc_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>xid</name> <operator>=</operator> <call><name>xid_ensure</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* two phase commit and autocommit make no point */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>autocommit</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>,
            <argument><expr><literal type="string">"tpc_begin can't be called in autocommit mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>conn_tpc_begin</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_tpc_prepare_doc</name></cpp:macro> \
<cpp:value>"tpc_prepare() -- perform the first phase of a two-phase transaction."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_tpc_prepare</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CONN_ASYNC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tpc_prepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tpc_prepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>self</name><operator>-&gt;</operator><name>tpc_xid</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>,
            <argument><expr><literal type="string">"prepare must be called inside a two-phase transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>conn_tpc_command</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"PREPARE TRANSACTION"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>tpc_xid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* transaction prepared: set the state so that no operation
     * can be performed until commit. */</comment>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONN_STATUS_PREPARED</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* the type of conn_commit/conn_rollback */</comment>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>_finish_f</name>)<parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* Implement tpc_commit/tpc_rollback.
 *
 * This is a common framework performing the chechs and state manipulation
 * common to the two functions.
 *
 * Parameters are:
 * - self, args: passed by Python
 * - opc_f: the function to call in case of one-phase commit/rollback
 *          one of conn_commit/conn_rollback
 * - tpc_cmd: the command to execute for a two-phase commit/rollback
 *
 * The function can be called in three cases:
 * - If xid is specified, the status must be "ready";
 *   issue the commit/rollback prepared.
 * - if xid is not specified and status is "begin" with a xid,
 *   issue a normal commit/rollback.
 * - if xid is not specified and status is "prepared",
 *   issue the commit/rollback prepared.
 */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>_psyco_conn_tpc_finish</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
    <parameter><decl><type><name>_finish_f</name></type> <name>opc_f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tpc_cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>oxid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>xidObject</name> <modifier>*</modifier></type><name>xid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"|O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>oxid</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>xid</name> <operator>=</operator> <call><name>xid_ensure</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>xid</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* committing/aborting a recovered transaction. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>CONN_STATUS_READY</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>,
                <argument><expr><literal type="string">"tpc_commit/tpc_rollback with a xid "</literal>
                <literal type="string">"must be called outside a transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>conn_tpc_command</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tpc_cmd</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* committing/aborting our own transaction. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>tpc_xid</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>,
                <argument><expr><literal type="string">"tpc_commit/tpc_rollback with no parameter "</literal>
                <literal type="string">"must be called in a two-phase transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <switch>switch <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
          <case>case <expr><name>CONN_STATUS_BEGIN</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>opc_f</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
            <break>break;</break>

          <case>case <expr><name>CONN_STATUS_PREPARED</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>conn_tpc_command</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tpc_cmd</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>tpc_xid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

          <default>default:</default>
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>InterfaceError</name></expr></argument>,
                <argument><expr><literal type="string">"unexpected state in tpc_commit/tpc_rollback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></switch>

        <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tpc_xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* connection goes ready */</comment>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONN_STATUS_READY</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_tpc_commit_doc</name></cpp:macro> \
<cpp:value>"tpc_commit([xid]) -- commit a transaction previously prepared."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_tpc_commit</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CONN_ASYNC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tpc_commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_NOT_SUPPORTED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>_psyco_conn_tpc_finish</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>,
                                  <argument><expr><name>conn_commit</name></expr></argument>, <argument><expr><literal type="string">"COMMIT PREPARED"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_tpc_rollback_doc</name></cpp:macro> \
<cpp:value>"tpc_rollback([xid]) -- abort a transaction previously prepared."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_tpc_rollback</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CONN_ASYNC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tpc_rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_NOT_SUPPORTED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>_psyco_conn_tpc_finish</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>,
                                  <argument><expr><name>conn_rollback</name></expr></argument>, <argument><expr><literal type="string">"ROLLBACK PREPARED"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_tpc_recover_doc</name></cpp:macro> \
<cpp:value>"tpc_recover() -- returns a list of pending transaction IDs."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_tpc_recover</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CONN_ASYNC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tpc_recover</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tpc_recover</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_NOT_SUPPORTED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>conn_tpc_recover</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_enter_doc</name></cpp:macro> \
<cpp:value>"__enter__ -&gt; self"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_enter</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>entered</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>,
            <argument><expr><literal type="string">"the connection cannot be re-entered recursively"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>entered</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_exit_doc</name></cpp:macro> \
<cpp:value>"__exit__ -- commit if no exception, else roll back"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_exit</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"OOO"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* even if there will be an error, consider ourselves out */</comment>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>entered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>, <argument><expr><literal type="string">"rollback"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* success (of the commit or rollback, there may have been an exception in
     * the block). Return None to avoid swallowing the exception */</comment>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* parse a python object into one of the possible isolation level values */</comment>

<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>_psyco_conn_parse_isolevel</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pyval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>level</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* for ensure_bytes */</comment>

    <comment type="block">/* None is default. This is only used when setting the property, because
     * set_session() has None used as "don't change" */</comment>
    <if_stmt><if>if <condition>(<expr><name>pyval</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>ISOLATION_LEVEL_DEFAULT</name></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="block">/* parse from one of the level constants */</comment>
    <if type="elseif">else if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>level</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>level</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                <argument><expr><literal type="string">"isolation_level must be between 1 and 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="block">/* parse from the string -- this includes "default" */</comment>
    <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pyval</name> <operator>=</operator> <call><name>psyco_ensure_bytes</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><expr><name>level</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>level</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>srv_isolevels</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>ISOLATION_LEVEL_DEFAULT</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                <argument><expr><literal type="string">"bad value for isolation_level: '%s'"</literal></expr></argument>, <argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* convert False/True/"default" -&gt; 0/1/2 */</comment>

<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>_psyco_conn_parse_onoff</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pyval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* for ensure_bytes */</comment>

    <if_stmt><if>if <condition>(<expr><name>pyval</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>STATE_DEFAULT</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>PyUnicode_CheckExact</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>Bytes_CheckExact</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pyval</name> <operator>=</operator> <call><name>psyco_ensure_bytes</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>STATE_DEFAULT</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                <argument><expr><literal type="string">"the only string accepted is 'default'; got %s"</literal></expr></argument>,
                <argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>istrue</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <operator>(</operator><name>istrue</name> <operator>=</operator> <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <ternary><condition><expr><name>istrue</name></expr> ?</condition><then> <expr><name>STATE_ON</name></expr> </then><else>: <expr><name>STATE_OFF</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_set_session_checks</name><parameter_list>(<parameter><type><name>self</name></type></parameter>,<parameter><type><name>what</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
    EXC_IF_CONN_CLOSED(self); \
    EXC_IF_CONN_ASYNC(self, what); \
    EXC_IF_IN_TRANSACTION(self, what); \
    EXC_IF_TPC_PREPARED(self, what); \
} while(0)</cpp:value></cpp:define>

<comment type="block">/* set_session - set default transaction characteristics */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_set_session_doc</name></cpp:macro> \
<cpp:value>"set_session(...) -- Set one or more parameters for the next transactions.\n\n" \
"Accepted arguments are 'isolation_level', 'readonly', 'deferrable', 'autocommit'."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_set_session</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>isolevel</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>readonly</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>deferrable</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>autocommit</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>c_isolevel</name> <init>= <expr><name>SRV_STATE_UNCHANGED</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c_readonly</name> <init>= <expr><name>SRV_STATE_UNCHANGED</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c_deferrable</name> <init>= <expr><name>SRV_STATE_UNCHANGED</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c_autocommit</name> <init>= <expr><name>SRV_STATE_UNCHANGED</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>=
        <expr><block>{<expr><literal type="string">"isolation_level"</literal></expr>, <expr><literal type="string">"readonly"</literal></expr>, <expr><literal type="string">"deferrable"</literal></expr>, <expr><literal type="string">"autocommit"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>_set_session_checks</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>set_session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"|OOOO"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>isolevel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readonly</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>deferrable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>autocommit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>Py_None</name> <operator>!=</operator> <name>isolevel</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <operator>(</operator><name>c_isolevel</name> <operator>=</operator> <call><name>_psyco_conn_parse_isolevel</name><argument_list>(<argument><expr><name>isolevel</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>Py_None</name> <operator>!=</operator> <name>readonly</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <operator>(</operator><name>c_readonly</name> <operator>=</operator> <call><name>_psyco_conn_parse_onoff</name><argument_list>(<argument><expr><name>readonly</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>Py_None</name> <operator>!=</operator> <name>deferrable</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <operator>(</operator><name>c_deferrable</name> <operator>=</operator> <call><name>_psyco_conn_parse_onoff</name><argument_list>(<argument><expr><name>deferrable</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>Py_None</name> <operator>!=</operator> <name>autocommit</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name>c_autocommit</name> <operator>=</operator> <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>autocommit</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>conn_set_session</name><argument_list>(
                <argument><expr><name>self</name></expr></argument>, <argument><expr><name>c_autocommit</name></expr></argument>, <argument><expr><name>c_isolevel</name></expr></argument>, <argument><expr><name>c_readonly</name></expr></argument>, <argument><expr><name>c_deferrable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* autocommit - return or set the current autocommit status */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_autocommit_doc</name></cpp:macro> \
<cpp:value>"Set or return the autocommit status."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_autocommit_get</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>autocommit</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>BORROWED</name> <specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>_psyco_set_session_check_setter_wrapper</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* wrapper to use the EXC_IF macros.
     * return NULL in case of error, else whatever */</comment>
    <expr_stmt><expr><call><name>_set_session_checks</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>set_session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>Py_None</name></expr>;</return>     <comment type="block">/* borrowed */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>psyco_conn_autocommit_set</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pyvalue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_psyco_set_session_check_setter_wrapper</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name>value</name> <operator>=</operator> <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>pyvalue</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>conn_set_session</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
                <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>, <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>, <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* isolation_level - return or set the current isolation level */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_isolation_level_doc</name></cpp:macro> \
<cpp:value>"Set or return the connection transaction isolation level."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_isolation_level_get</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>isolevel</name></name> <operator>==</operator> <name>ISOLATION_LEVEL_DEFAULT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>isolevel</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>psyco_conn_isolation_level_set</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pyvalue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_psyco_set_session_check_setter_wrapper</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <operator>(</operator><name>value</name> <operator>=</operator> <call><name>_psyco_conn_parse_isolevel</name><argument_list>(<argument><expr><name>pyvalue</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>conn_set_session</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>,
                <argument><expr><name>value</name></expr></argument>, <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>, <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* set_isolation_level method - switch connection isolation level */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_set_isolation_level_doc</name></cpp:macro> \
<cpp:value>"set_isolation_level(level) -- Switch isolation level to ``level``."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_set_isolation_level</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pyval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CONN_ASYNC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"isolation_level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"isolation_level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pyval</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pyval</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>level</name> <operator>=</operator> <name>ISOLATION_LEVEL_DEFAULT</name></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="block">/* parse from one of the level constants */</comment>
    <if type="elseif">else if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>pyval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>level</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>level</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
                <argument><expr><literal type="string">"isolation level must be between 0 and 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>conn_rollback</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>conn_set_session</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>, <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>, <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>conn_set_session</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                <argument><expr><name>level</name></expr></argument>, <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>, <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* readonly - return or set the current read-only status */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_readonly_doc</name></cpp:macro> \
<cpp:value>"Set or return the connection read-only status."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_readonly_get</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>readonly</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>STATE_OFF</name></expr>:</case>
            <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>Py_False</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>STATE_ON</name></expr>:</case>
            <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>Py_True</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>STATE_DEFAULT</name></expr>:</case>
            <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>InternalError</name></expr></argument>,
                <argument><expr><literal type="string">"bad internal value for readonly: %d"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>readonly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>psyco_conn_readonly_set</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pyvalue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_psyco_set_session_check_setter_wrapper</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <operator>(</operator><name>value</name> <operator>=</operator> <call><name>_psyco_conn_parse_onoff</name><argument_list>(<argument><expr><name>pyvalue</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>conn_set_session</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>,
                <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* deferrable - return or set the current deferrable status */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_deferrable_doc</name></cpp:macro> \
<cpp:value>"Set or return the connection deferrable status."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_deferrable_get</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>deferrable</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>STATE_OFF</name></expr>:</case>
            <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>Py_False</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>STATE_ON</name></expr>:</case>
            <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>Py_True</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>STATE_DEFAULT</name></expr>:</case>
            <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>InternalError</name></expr></argument>,
                <argument><expr><literal type="string">"bad internal value for deferrable: %d"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>deferrable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>psyco_conn_deferrable_set</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pyvalue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_psyco_set_session_check_setter_wrapper</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <operator>(</operator><name>value</name> <operator>=</operator> <call><name>_psyco_conn_parse_onoff</name><argument_list>(<argument><expr><name>pyvalue</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>conn_set_session</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>,
                <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>, <argument><expr><name>SRV_STATE_UNCHANGED</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* psyco_get_native_connection - expose PGconn* as a Python capsule */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_get_native_connection_doc</name></cpp:macro> \
<cpp:value>"get_native_connection() -- Return the internal PGconn* as a Python Capsule."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_get_native_connection</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>PyCapsule_New</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><literal type="string">"psycopg2.connection.native_connection"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* set_client_encoding method - set client encoding */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_set_client_encoding_doc</name></cpp:macro> \
<cpp:value>"set_client_encoding(encoding) -- Set client encoding to ``encoding``."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_set_client_encoding</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CONN_ASYNC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>set_client_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>set_client_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>conn_set_client_encoding</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* get_transaction_status method - Get backend transaction status */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_get_transaction_status_doc</name></cpp:macro> \
<cpp:value>"get_transaction_status() -- Get backend transaction status."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_get_transaction_status</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>PQtransactionStatus</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* get_parameter_status method - Get server parameter status */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_get_parameter_status_doc</name></cpp:macro> \
<cpp:value>"get_parameter_status(parameter) -- Get backend parameter status.\n\n" \
"Potential values for ``parameter``:\n" \
"  server_version, server_encoding, client_encoding, is_superuser,\n" \
"  session_authorization, DateStyle, TimeZone, integer_datetimes,\n" \
"  and standard_conforming_strings\n" \
"If server did not report requested parameter, None is returned.\n\n" \
"See libpq docs for PQparameterStatus() for further details."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_get_parameter_status</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQparameterStatus</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>conn_text_from_chars</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* get_dsn_parameters method - Get connection parameters */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_get_dsn_parameters_doc</name></cpp:macro> \
<cpp:value>"get_dsn_parameters() -- Get effective connection parameters.\n\n"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_get_dsn_parameters</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">90300</literal></expr></cpp:if>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PQconninfoOption</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>options</name> <operator>=</operator> <call><name>PQconninfo</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>psyco_dict_from_conninfo_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <comment type="block">/* include_password = */</comment> <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>PQconninfoFree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>res</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>NotSupportedError</name></expr></argument>, <argument><expr><literal type="string">"PQconninfo not available in libpq &lt; 9.3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<comment type="block">/* lobject method - allocate a new lobject */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_lobject_doc</name></cpp:macro> \
<cpp:value>"lobject(oid=0, mode=0, new_oid=0, new_file=None,\n"                        \
"       lobject_factory=extensions.lobject) -- new lobject\n\n"             \
"Return a new lobject.\n\nThe ``lobject_factory`` argument can be used\n"   \
"to create non-standard lobjects by passing a class different from the\n"   \
"default. Note that the new class *should* be a sub-class of\n"             \
"`extensions.lobject`.\n\n"                                                 \
":rtype: `extensions.lobject`"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_lobject</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keywds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Oid</name></type> <name>oid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>, <decl><type ref="prev"/><name>new_oid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>smode</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>factory</name> <init>= <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>lobjectType</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"oid"</literal></expr>, <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"new_oid"</literal></expr>, <expr><literal type="string">"new_file"</literal></expr>,
                             <expr><literal type="string">"lobject_factory"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>keywds</name></expr></argument>, <argument><expr><literal type="string">"|IzIzO"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_file</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>factory</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CONN_ASYNC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>lobject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_GREEN</name><argument_list>(<argument><expr><name>lobject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>lobject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psyco_conn_lobject: new lobject for connection at %p"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psyco_conn_lobject:     parameters: oid = %u, mode = %s"</literal></expr></argument>,
            <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>smode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psyco_conn_lobject:     parameters: new_oid = %u, new_file = %s"</literal></expr></argument>,
            <argument><expr><name>new_oid</name></expr></argument>, <argument><expr><name>new_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>new_file</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>factory</name></expr></argument>, <argument><expr><literal type="string">"OIsIs"</literal></expr></argument>,
            <argument><expr><name>self</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>smode</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>, <argument><expr><name>new_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>factory</name></expr></argument>, <argument><expr><literal type="string">"OIsI"</literal></expr></argument>,
            <argument><expr><name>self</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>smode</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>lobjectType</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
            <argument><expr><literal type="string">"lobject factory must be subclass of psycopg2.extensions.lobject"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psyco_conn_lobject: new lobject at %p: refcnt = "</literal>
            <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
            <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* get the current backend pid */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_get_backend_pid_doc</name></cpp:macro> \
<cpp:value>"get_backend_pid() -- Get backend process id."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_get_backend_pid</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>PQbackendPID</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* get info about the connection */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_info_doc</name></cpp:macro> \
<cpp:value>"info -- Get connection info."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_info_get</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyObject_CallFunctionObjArgs</name><argument_list>(
        <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>connInfoType</name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* return the pointer to the PGconn structure */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_pgconn_ptr_doc</name></cpp:macro> \
<cpp:value>"pgconn_ptr -- Get the PGconn structure pointer."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_pgconn_ptr_get</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>pgconn</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>PyLong_FromVoidPtr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/* reset the currect connection */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_reset_doc</name></cpp:macro> \
<cpp:value>"reset() -- Reset current connection to defaults."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_reset</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CONN_ASYNC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pq_reset</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>conn_setup</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_get_exception</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>exception</name> <init>= <expr><operator>*</operator><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>closure</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>exception</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_poll_doc</name></cpp:macro> \
<cpp:value>"poll() -&gt; int -- Advance the connection or query process without blocking."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_poll</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>conn_poll</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>PSYCO_POLL_ERROR</name> <operator>||</operator> <operator>!</operator><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* There is an error and an exception is already in place */</comment>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_fileno_doc</name></cpp:macro> \
<cpp:value>"fileno() -&gt; int -- Return file descriptor associated to database connection."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_fileno</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>socket</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>socket</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>int</name><operator>)</operator><call><name>PQsocket</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>socket</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_isexecuting_doc</name></cpp:macro>                           \
<cpp:value>"isexecuting() -&gt; bool -- Return True if the connection is " \
 "executing an asynchronous operation."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_isexecuting</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* synchronous connections will always return False */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>async</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_FALSE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* check if the connection is still being built */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>CONN_STATUS_READY</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_TRUE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* check if there is a query being executed */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>async_cursor</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_TRUE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* otherwise it's not executing */</comment>
    <expr_stmt><expr><name>Py_RETURN_FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_conn_cancel_doc</name></cpp:macro>                           \
<cpp:value>"cancel() -- cancel the current operation"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_conn_cancel</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CONN_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>cancel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* do not allow cancellation while the connection is being built */</comment>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psyco_conn_cancel: cancelling with key %p"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>CONN_STATUS_READY</name> <operator>&amp;&amp;</operator>
        <name><name>self</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>CONN_STATUS_BEGIN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>OperationalError</name></expr></argument>,
                        <argument><expr><literal type="string">"asynchronous connection attempt underway"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>PQcancel</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>cancel</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psyco_conn_cancel: cancelling failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>OperationalError</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/** the connection object **/</comment>


<comment type="block">/* object method list */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMethodDef</name></name></type> <name><name>connectionObject_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"cursor"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_cursor</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>psyco_conn_cursor_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"close"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_close</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_conn_close_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"commit"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_commit</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_conn_commit_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"rollback"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_rollback</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_conn_rollback_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"xid"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_xid</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>psyco_conn_xid_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"tpc_begin"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_tpc_begin</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_conn_tpc_begin_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"tpc_prepare"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_tpc_prepare</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_conn_tpc_prepare_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"tpc_commit"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_tpc_commit</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_conn_tpc_commit_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"tpc_rollback"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_tpc_rollback</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_conn_tpc_rollback_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"tpc_recover"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_tpc_recover</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_conn_tpc_recover_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"__enter__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_enter</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_conn_enter_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"__exit__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_exit</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_conn_exit_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"set_session"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_set_session</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>psyco_conn_set_session_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"set_isolation_level"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_set_isolation_level</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_conn_set_isolation_level_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"set_client_encoding"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_set_client_encoding</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_conn_set_client_encoding_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"get_transaction_status"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_get_transaction_status</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_conn_get_transaction_status_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"get_parameter_status"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_get_parameter_status</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_conn_get_parameter_status_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"get_dsn_parameters"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_get_dsn_parameters</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_conn_get_dsn_parameters_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"get_backend_pid"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_get_backend_pid</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_conn_get_backend_pid_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"lobject"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_lobject</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>psyco_conn_lobject_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"reset"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_reset</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_conn_reset_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"poll"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_poll</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_conn_poll_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"fileno"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_fileno</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_conn_fileno_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"isexecuting"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_isexecuting</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_conn_isexecuting_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"cancel"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_conn_cancel</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_conn_cancel_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"get_native_connection"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_get_native_connection</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_get_native_connection_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* object member list */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMemberDef</name></name></type> <name><name>connectionObject_members</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"closed"</literal></expr>, <expr><name>T_LONG</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>connectionObject</name></expr></argument>, <argument><expr><name>closed</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"True if the connection is closed."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"encoding"</literal></expr>, <expr><name>T_STRING</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>connectionObject</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"The current client encoding."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"notices"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>connectionObject</name></expr></argument>, <argument><expr><name>notice_list</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"notifies"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>connectionObject</name></expr></argument>, <argument><expr><name>notifies</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"dsn"</literal></expr>, <expr><name>T_STRING</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>connectionObject</name></expr></argument>, <argument><expr><name>dsn</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"The current connection string."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"async"</literal></expr>, <expr><name>T_LONG</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>connectionObject</name></expr></argument>, <argument><expr><name>async</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"True if the connection is asynchronous."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"async_"</literal></expr>, <expr><name>T_LONG</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>connectionObject</name></expr></argument>, <argument><expr><name>async</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"True if the connection is asynchronous."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"status"</literal></expr>, <expr><name>T_INT</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>connectionObject</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"The current transaction status."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"cursor_factory"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>connectionObject</name></expr></argument>, <argument><expr><name>cursor_factory</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>,
        <expr><literal type="string">"Default cursor_factory for cursor()."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"string_types"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>connectionObject</name></expr></argument>, <argument><expr><name>string_types</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"A set of typecasters to convert textual values."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"binary_types"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>connectionObject</name></expr></argument>, <argument><expr><name>binary_types</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"A set of typecasters to convert binary values."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"protocol_version"</literal></expr>, <expr><name>T_INT</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>connectionObject</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"Protocol version used for this connection. Currently always 3."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"server_version"</literal></expr>, <expr><name>T_INT</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>connectionObject</name></expr></argument>, <argument><expr><name>server_version</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"Server version."</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXCEPTION_GETTER</name><parameter_list>(<parameter><type><name>exc</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>{ #exc, psyco_conn_get_exception, NULL, exc ## _doc, &amp;exc }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyGetSetDef</name></name></type> <name><name>connectionObject_getsets</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>EXCEPTION_GETTER</name><argument_list>(<argument><expr><name>Error</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>EXCEPTION_GETTER</name><argument_list>(<argument><expr><name>Warning</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>EXCEPTION_GETTER</name><argument_list>(<argument><expr><name>InterfaceError</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>EXCEPTION_GETTER</name><argument_list>(<argument><expr><name>DatabaseError</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>EXCEPTION_GETTER</name><argument_list>(<argument><expr><name>InternalError</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>EXCEPTION_GETTER</name><argument_list>(<argument><expr><name>OperationalError</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>EXCEPTION_GETTER</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>EXCEPTION_GETTER</name><argument_list>(<argument><expr><name>IntegrityError</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>EXCEPTION_GETTER</name><argument_list>(<argument><expr><name>DataError</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>EXCEPTION_GETTER</name><argument_list>(<argument><expr><name>NotSupportedError</name></expr></argument>)</argument_list></call></expr>,
    <expr><block>{ <expr><literal type="string">"autocommit"</literal></expr>,
        <expr><operator>(</operator><name>getter</name><operator>)</operator><name>psyco_conn_autocommit_get</name></expr>,
        <expr><operator>(</operator><name>setter</name><operator>)</operator><name>psyco_conn_autocommit_set</name></expr>,
        <expr><name>psyco_conn_autocommit_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"isolation_level"</literal></expr>,
        <expr><operator>(</operator><name>getter</name><operator>)</operator><name>psyco_conn_isolation_level_get</name></expr>,
        <expr><operator>(</operator><name>setter</name><operator>)</operator><name>psyco_conn_isolation_level_set</name></expr>,
        <expr><name>psyco_conn_isolation_level_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"readonly"</literal></expr>,
        <expr><operator>(</operator><name>getter</name><operator>)</operator><name>psyco_conn_readonly_get</name></expr>,
        <expr><operator>(</operator><name>setter</name><operator>)</operator><name>psyco_conn_readonly_set</name></expr>,
        <expr><name>psyco_conn_readonly_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"deferrable"</literal></expr>,
        <expr><operator>(</operator><name>getter</name><operator>)</operator><name>psyco_conn_deferrable_get</name></expr>,
        <expr><operator>(</operator><name>setter</name><operator>)</operator><name>psyco_conn_deferrable_set</name></expr>,
        <expr><name>psyco_conn_deferrable_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"info"</literal></expr>,
        <expr><operator>(</operator><name>getter</name><operator>)</operator><name>psyco_conn_info_get</name></expr>, <expr><name>NULL</name></expr>,
        <expr><name>psyco_conn_info_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"pgconn_ptr"</literal></expr>,
        <expr><operator>(</operator><name>getter</name><operator>)</operator><name>psyco_conn_pgconn_ptr_get</name></expr>, <expr><name>NULL</name></expr>,
        <expr><name>psyco_conn_pgconn_ptr_doc</name></expr> }</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EXCEPTION_GETTER</name></cpp:undef>

<comment type="block">/* initialization and finalization methods */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>connection_setup</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dsn</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>int</name></type> <name>async</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"connection_setup: init connection object at %p, "</literal>
	    <literal type="string">"async %ld, refcnt = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
            <argument><expr><name>self</name></expr></argument>, <argument><expr><name>async</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>dsn</name></name> <operator>=</operator> <call><name>conn_obscure_password</name><argument_list>(<argument><expr><name>dsn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>notice_list</name></name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>notifies</name></name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>async</name></name> <operator>=</operator> <name>async</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONN_STATUS_SETUP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>async_status</name></name> <operator>=</operator> <name>ASYNC_DONE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>string_types</name></name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>binary_types</name></name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>isolevel</name></name> <operator>=</operator> <name>ISOLATION_LEVEL_DEFAULT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>readonly</name></name> <operator>=</operator> <name>STATE_DEFAULT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>deferrable</name></name> <operator>=</operator> <name>STATE_DEFAULT</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONN_CHECK_PID</name></cpp:ifdef>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>procpid</name></name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* other fields have been zeroed by tp_alloc */</comment>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>InternalError</name></expr></argument>, <argument><expr><literal type="string">"lock initialization failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>conn_connect</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>dsn</name></expr></argument>, <argument><expr><name>async</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"connection_init: FAILED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"connection_setup: good connection object at %p, refcnt = "</literal>
        <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
        <argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>connection_clear</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tpc_xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>async_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>notice_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>notifies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>string_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>binary_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>cursor_factory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pyencoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pydecoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>connection_dealloc</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>connectionObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Make sure to untrack the connection before calling conn_close, which may
     * allow a different thread to try and dealloc the connection again,
     * resulting in a double-free segfault (ticket #166). */</comment>
    <expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* close the connection only if this is the same process it was created
     * into, otherwise using multiprocessing we may close the connection
     * belonging to another process. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONN_CHECK_PID</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>procpid</name></name> <operator>==</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
        <expr_stmt><expr><call><name>conn_close</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>weakreflist</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyObject_ClearWeakRefs</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>conn_notice_clean</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>dsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>cancel</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PQfreeCancel</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>connection_clear</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"connection_dealloc: deleted connection object at %p, refcnt = "</literal>
        <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
        <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>tp_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>connection_init</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dsn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>async</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>async_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"dsn"</literal></expr>, <expr><literal type="string">"async"</literal></expr>, <expr><literal type="string">"async_"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr><literal type="string">"s|ll"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>dsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>async</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>async_</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>async_</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>async</name> <operator>=</operator> <name>async_</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>connection_setup</name><argument_list>(<argument><expr><operator>(</operator><name>connectionObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></argument>, <argument><expr><name>dsn</name></expr></argument>, <argument><expr><name>async</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>connection_new</name><parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>type</name><operator>-&gt;</operator><name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>connection_repr</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyString_FromFormat</name><argument_list>(
        <argument><expr><literal type="string">"&lt;connection object at %p; dsn: '%s', closed: %ld&gt;"</literal></expr></argument>,
        <argument><expr><name>self</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>dsn</name></name></expr> ?</condition><then> <expr><name><name>self</name><operator>-&gt;</operator><name>dsn</name></name></expr> </then><else>: <expr><literal type="string">"&lt;unintialized&gt;"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>closed</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>connection_traverse</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>visitproc</name></type> <name>visit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>tpc_xid</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>async_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>notice_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>notifies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>string_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>binary_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>cursor_factory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pyencoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pydecoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* object type */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>connectionType_doc</name></cpp:macro> \
<cpp:value>"connection(dsn, ...) -&gt; new connection object\n\n" \
":Groups:\n" \
"  * `DBAPI-2.0 errors`: Error, Warning, InterfaceError,\n" \
"    DatabaseError, InternalError, OperationalError,\n" \
"    ProgrammingError, IntegrityError, DataError, NotSupportedError"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>connectionType</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
    <literal type="string">"psycopg2.extensions.connection"</literal></expr>,
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>connectionObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><name>connection_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_print*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr><operator>(</operator><name>reprfunc</name><operator>)</operator><name>connection_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_mapping*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_hash */</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_call*/</comment>
    <expr><operator>(</operator><name>reprfunc</name><operator>)</operator><name>connection_repr</name></expr>, <comment type="block">/*tp_str*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_buffer*/</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name> <operator>|</operator> <name>Py_TPFLAGS_BASETYPE</name> <operator>|</operator> <name>Py_TPFLAGS_HAVE_GC</name> <operator>|</operator>
        <name>Py_TPFLAGS_HAVE_WEAKREFS</name></expr>,
                <comment type="block">/*tp_flags*/</comment>
    <expr><name>connectionType_doc</name></expr>, <comment type="block">/*tp_doc*/</comment>
    <expr><operator>(</operator><name>traverseproc</name><operator>)</operator><name>connection_traverse</name></expr>, <comment type="block">/*tp_traverse*/</comment>
    <expr><operator>(</operator><name>inquiry</name><operator>)</operator><name>connection_clear</name></expr>, <comment type="block">/*tp_clear*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_richcompare*/</comment>
    <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>connectionObject</name></expr></argument>, <argument><expr><name>weakreflist</name></expr></argument>)</argument_list></call></expr>, <comment type="block">/* tp_weaklistoffset */</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iter*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iternext*/</comment>
    <expr><name>connectionObject_methods</name></expr>, <comment type="block">/*tp_methods*/</comment>
    <expr><name>connectionObject_members</name></expr>, <comment type="block">/*tp_members*/</comment>
    <expr><name>connectionObject_getsets</name></expr>, <comment type="block">/*tp_getset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_base*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dict*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_get*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_set*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dictoffset*/</comment>
    <expr><name>connection_init</name></expr>, <comment type="block">/*tp_init*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_alloc*/</comment>
    <expr><name>connection_new</name></expr>, <comment type="block">/*tp_new*/</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
