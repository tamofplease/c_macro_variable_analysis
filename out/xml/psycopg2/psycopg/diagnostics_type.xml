<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/diagnostics_type.c"><comment type="block">/* diagnostics.c - present information from libpq error responses
 *
 * Copyright (C) 2013-2019 Matthew Woodcraft &lt;matthew@woodcraft.me.uk&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCOPG_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/psycopg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/diagnostics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/error.h"</cpp:file></cpp:include>


<comment type="block">/* These constants are defined in src/include/postgres_ext.h but some may not
 * be available with the libpq we currently support at compile time. */</comment>

<comment type="block">/* Available from PG 9.3 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_DIAG_SCHEMA_NAME</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_DIAG_SCHEMA_NAME</name></cpp:macro>     <cpp:value>'s'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_DIAG_TABLE_NAME</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_DIAG_TABLE_NAME</name></cpp:macro>      <cpp:value>'t'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_DIAG_COLUMN_NAME</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_DIAG_COLUMN_NAME</name></cpp:macro>     <cpp:value>'c'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_DIAG_DATATYPE_NAME</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_DIAG_DATATYPE_NAME</name></cpp:macro>   <cpp:value>'d'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_DIAG_CONSTRAINT_NAME</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_DIAG_CONSTRAINT_NAME</name></cpp:macro> <cpp:value>'n'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Available from PG 9.6 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_DIAG_SEVERITY_NONLOCALIZED</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_DIAG_SEVERITY_NONLOCALIZED</name></cpp:macro> <cpp:value>'V'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* Retrieve an error string from the exception's cursor.
 *
 * If the cursor or its result isn't available, return None.
 */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>diagnostics_get_field</name><parameter_list>(<parameter><decl><type><name>diagnosticsObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errortext</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>err</name><operator>-&gt;</operator><name>pgres</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>errortext</name> <operator>=</operator> <call><name>PQresultErrorField</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>err</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Py_intptr_t</name><operator>)</operator><name>closure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>error_text_from_chars</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><name>errortext</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* object calculated member list */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyGetSetDef</name></name></type> <name><name>diagnosticsObject_getsets</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"severity"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_SEVERITY</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"severity_nonlocalized"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_SEVERITY_NONLOCALIZED</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sqlstate"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_SQLSTATE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"message_primary"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_MESSAGE_PRIMARY</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"message_detail"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_MESSAGE_DETAIL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"message_hint"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_MESSAGE_HINT</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"statement_position"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_STATEMENT_POSITION</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"internal_position"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_INTERNAL_POSITION</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"internal_query"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_INTERNAL_QUERY</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"context"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_CONTEXT</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"schema_name"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_SCHEMA_NAME</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"table_name"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_TABLE_NAME</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"column_name"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_COLUMN_NAME</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"datatype_name"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_DATATYPE_NAME</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"constraint_name"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_CONSTRAINT_NAME</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"source_file"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_SOURCE_FILE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"source_line"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_SOURCE_LINE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"source_function"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>diagnostics_get_field</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>PG_DIAG_SOURCE_FUNCTION</name></expr> }</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* initialization and finalization methods */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>diagnostics_new</name><parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>type</name><operator>-&gt;</operator><name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>diagnostics_init</name><parameter_list>(<parameter><decl><type><name>diagnosticsObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyObject_TypeCheck</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errorType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
            <argument><expr><literal type="string">"The argument must be a psycopg2.Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <operator>(</operator><name>errorObject</name> <operator>*</operator><operator>)</operator><name>err</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>diagnostics_dealloc</name><parameter_list>(<parameter><decl><type><name>diagnosticsObject</name><modifier>*</modifier></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>tp_free</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* object type */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>diagnosticsType_doc</name><index>[]</index></name> <init>=
    <expr><literal type="string">"Details from a database error report.\n\n"</literal>
    <literal type="string">"The object is returned by the `~psycopg2.Error.diag` attribute of the\n"</literal>
    <literal type="string">"`!Error` object.\n"</literal>
    <literal type="string">"All the information available from the |PQresultErrorField|_ function\n"</literal>
    <literal type="string">"are exposed as attributes by the object, e.g. the `!severity` attribute\n"</literal>
    <literal type="string">"returns the `!PG_DIAG_SEVERITY` code. "</literal>
    <literal type="string">"Please refer to the `PostgreSQL documentation`__ for the meaning of all"</literal>
        <literal type="string">" the attributes.\n\n"</literal>
    <literal type="string">".. |PQresultErrorField| replace:: `!PQresultErrorField()`\n"</literal>
    <literal type="string">".. _PQresultErrorField: https://www.postgresql.org/docs/current/static/"</literal>
        <literal type="string">"libpq-exec.html#LIBPQ-PQRESULTERRORFIELD\n"</literal>
    <literal type="string">".. __: PQresultErrorField_\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>diagnosticsType</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
    <literal type="string">"psycopg2.extensions.Diagnostics"</literal></expr>,
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>diagnosticsObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><operator>(</operator><name>destructor</name><operator>)</operator><name>diagnostics_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_print*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_repr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_mapping*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_hash */</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_call*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_str*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_buffer*/</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name><operator>|</operator><name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/*tp_flags*/</comment>
    <expr><name>diagnosticsType_doc</name></expr>, <comment type="block">/*tp_doc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_traverse*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_clear*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_richcompare*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_weaklistoffset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iter*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iternext*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_methods*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_members*/</comment>
    <expr><name>diagnosticsObject_getsets</name></expr>, <comment type="block">/*tp_getset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_base*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dict*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_get*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_set*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dictoffset*/</comment>
    <expr><operator>(</operator><name>initproc</name><operator>)</operator><name>diagnostics_init</name></expr>, <comment type="block">/*tp_init*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_alloc*/</comment>
    <expr><name>diagnostics_new</name></expr>, <comment type="block">/*tp_new*/</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
