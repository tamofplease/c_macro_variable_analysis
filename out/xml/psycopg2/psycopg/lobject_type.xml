<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/lobject_type.c"><comment type="block">/* lobject_type.c - python interface to lobject objects
 *
 * Copyright (C) 2006-2019 Federico Di Gregorio &lt;fog@debian.org&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCOPG_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/psycopg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/microprotocols.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/microprotocols_proto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/pqpath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<comment type="block" format="doxygen">/** public methods **/</comment>

<comment type="block">/* close method - close the lobject */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_lobj_close_doc</name></cpp:macro> \
<cpp:value>"close() -- Close the lobject."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_lobj_close</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* file-like objects can be closed multiple times and remember that
       closing the current transaction is equivalent to close all the
       opened large objects */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lobject_is_closed</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>
        <operator>&amp;&amp;</operator> <operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>autocommit</name></name>
        <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>mark</name></name> <operator>==</operator> <name><name>self</name><operator>-&gt;</operator><name>mark</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"psyco_lobj_close: closing lobject at %p"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>lobject_close</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* write method - write data to the lobject */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_lobj_write_doc</name></cpp:macro> \
<cpp:value>"write(str) -- Write a string to the large object."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_lobj_write</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_LOBJ_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_LOBJ_LEVEL0</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_LOBJ_UNMARKED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Bytes_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>data</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>data</name> <operator>=</operator> <call><name>conn_encode</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
            <argument><expr><literal type="string">"lobject.write requires a string; got %s instead"</literal></expr></argument>,
            <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>Bytes_AsStringAndSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <operator>(</operator><name>res</name> <operator>=</operator> <call><name>lobject_write</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><operator>(</operator><name>Py_ssize_t</name><operator>)</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* read method - read data from the lobject */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_lobj_read_doc</name></cpp:macro> \
<cpp:value>"read(size=-1) -- Read at most size bytes or to the end of the large object."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_lobj_read</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>where</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"|n"</literal></expr></argument>,  <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_LOBJ_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_LOBJ_LEVEL0</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_LOBJ_UNMARKED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>where</name> <operator>=</operator> <call><name>lobject_tell</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>end</name> <operator>=</operator> <call><name>lobject_seek</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>lobject_seek</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>where</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>buffer</name> <operator>=</operator> <call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <call><name>lobject_read</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>LOBJECT_BINARY</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>Bytes_FromStringAndSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>conn_decode</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* seek method - seek in the lobject */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_lobj_seek_doc</name></cpp:macro> \
<cpp:value>"seek(offset, whence=0) -- Set the lobject's current position."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_lobj_seek</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>pos</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>whence</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"n|i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>whence</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_LOBJ_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_LOBJ_LEVEL0</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_LOBJ_UNMARKED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LO64</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><name>INT_MIN</name> <operator>||</operator> <name>offset</name></expr></argument> &gt;</argument_list></name> <name>INT_MAX</name><operator>)</operator>
            <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>server_version</name></name> <operator>&lt;</operator> <literal type="number">90300</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>NotSupportedError</name></expr></argument>,
            <argument><expr><literal type="string">"offset out of range (%ld): server version %d "</literal>
            <literal type="string">"does not support the lobject 64 API"</literal></expr></argument>,
            <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>server_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><name>INT_MIN</name> <operator>||</operator> <name>offset</name></expr></argument> &gt;</argument_list></name> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>InterfaceError</name></expr></argument>,
            <argument><expr><literal type="string">"offset out of range ("</literal> <name>FORMAT_CODE_PY_SSIZE_T</name> <literal type="string">"): "</literal>
            <literal type="string">"this psycopg version was not built with lobject 64 API support"</literal></expr></argument>,
            <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name>lobject_seek</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* tell method - tell current position in the lobject */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_lobj_tell_doc</name></cpp:macro> \
<cpp:value>"tell() -- Return the lobject's current position."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_lobj_tell</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_LOBJ_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_LOBJ_LEVEL0</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_LOBJ_UNMARKED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name>lobject_tell</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* unlink method - unlink (destroy) the lobject */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_lobj_unlink_doc</name></cpp:macro> \
<cpp:value>"unlink() -- Close and then remove the lobject."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_lobj_unlink</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>lobject_unlink</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* export method - export lobject's content to given file */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_lobj_export_doc</name></cpp:macro> \
<cpp:value>"export(filename) -- Export large object to given file."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_lobj_export</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_LOBJ_LEVEL0</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>lobject_export</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_lobj_get_closed</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><call><name>lobject_is_closed</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psyco_lobj_truncate_doc</name></cpp:macro> \
<cpp:value>"truncate(len=0) -- Truncate large object to given size."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>psyco_lobj_truncate</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"|n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_LOBJ_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_LOBJ_LEVEL0</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_LOBJ_UNMARKED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LO64</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>server_version</name></name> <operator>&lt;</operator> <literal type="number">90300</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>NotSupportedError</name></expr></argument>,
            <argument><expr><literal type="string">"len out of range ("</literal> <name>FORMAT_CODE_PY_SSIZE_T</name> <literal type="string">"): "</literal>
            <literal type="string">"server version %d does not support the lobject 64 API"</literal></expr></argument>,
            <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>server_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>InterfaceError</name></expr></argument>,
            <argument><expr><literal type="string">"len out of range ("</literal> <name>FORMAT_CODE_PY_SSIZE_T</name> <literal type="string">"): "</literal>
            <literal type="string">"this psycopg version was not built with lobject 64 API support"</literal></expr></argument>,
            <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><call><name>lobject_truncate</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/** the lobject object **/</comment>

<comment type="block">/* object method list */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMethodDef</name></name></type> <name><name>lobjectObject_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"read"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_lobj_read</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_lobj_read_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"write"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_lobj_write</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_lobj_write_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"seek"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_lobj_seek</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_lobj_seek_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"tell"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_lobj_tell</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_lobj_tell_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"close"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_lobj_close</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_lobj_close_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"unlink"</literal></expr>,<expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_lobj_unlink</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>psyco_lobj_unlink_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"export"</literal></expr>,<expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_lobj_export</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_lobj_export_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"truncate"</literal></expr>,<expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>psyco_lobj_truncate</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>psyco_lobj_truncate_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* object member list */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMemberDef</name></name></type> <name><name>lobjectObject_members</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"oid"</literal></expr>, <expr><name>T_OID</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>lobjectObject</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"The backend OID associated to this lobject."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"mode"</literal></expr>, <expr><name>T_STRING</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>lobjectObject</name></expr></argument>, <argument><expr><name>smode</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"Open mode."</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* object getset list */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyGetSetDef</name></name></type> <name><name>lobjectObject_getsets</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"closed"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>psyco_lobj_get_closed</name></expr>, <expr><name>NULL</name></expr>,
     <expr><literal type="string">"The if the large object is closed (no file-like methods)."</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* initialization and finalization methods */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>lobject_setup</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
              <parameter><decl><type><name>Oid</name></type> <name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>smode</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>new_oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"lobject_setup: init lobject object at %p"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>autocommit</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>psyco_set_error</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><literal type="string">"can't use a lobject outside of transactions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>mark</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>oid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>lobject_open</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>smode</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>, <argument><expr><name>new_file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

   <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"lobject_setup: good lobject object at %p, refcnt = "</literal>
           <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"lobject_setup:    oid = %u, fd = %d"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>lobject_dealloc</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>lobjectObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>lobject_close</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>smode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"lobject_dealloc: deleted lobject object at %p, refcnt = "</literal>
            <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>tp_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>lobject_init</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Oid</name></type> <name>oid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>, <decl><type ref="prev"/><name>new_oid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>smode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O!|IzIz"</literal></expr></argument>,
         <argument><expr><operator>&amp;</operator><name>connectionType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>,
         <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>smode</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>smode</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><call><name>lobject_setup</name><argument_list>(<argument><expr><operator>(</operator><name>lobjectObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></argument>,
        <argument><expr><operator>(</operator><name>connectionObject</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>smode</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>, <argument><expr><name>new_file</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>lobject_new</name><parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>type</name><operator>-&gt;</operator><name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>lobject_repr</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyString_FromFormat</name><argument_list>(
        <argument><expr><literal type="string">"&lt;lobject object at %p; closed: %d&gt;"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>lobject_is_closed</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* object type */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lobjectType_doc</name></cpp:macro> \
<cpp:value>"A database large object."</cpp:value></cpp:define>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>lobjectType</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
    <literal type="string">"psycopg2.extensions.lobject"</literal></expr>,
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>lobjectObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><name>lobject_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_print*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr><operator>(</operator><name>reprfunc</name><operator>)</operator><name>lobject_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_mapping*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_hash */</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_call*/</comment>
    <expr><operator>(</operator><name>reprfunc</name><operator>)</operator><name>lobject_repr</name></expr>, <comment type="block">/*tp_str*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_buffer*/</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name><operator>|</operator><name>Py_TPFLAGS_BASETYPE</name><operator>|</operator><name>Py_TPFLAGS_HAVE_ITER</name></expr>, <comment type="block">/*tp_flags*/</comment>
    <expr><name>lobjectType_doc</name></expr>, <comment type="block">/*tp_doc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_traverse*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_clear*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_richcompare*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_weaklistoffset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iter*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iternext*/</comment>
    <expr><name>lobjectObject_methods</name></expr>, <comment type="block">/*tp_methods*/</comment>
    <expr><name>lobjectObject_members</name></expr>, <comment type="block">/*tp_members*/</comment>
    <expr><name>lobjectObject_getsets</name></expr>, <comment type="block">/*tp_getset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_base*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dict*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_get*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_set*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dictoffset*/</comment>
    <expr><name>lobject_init</name></expr>, <comment type="block">/*tp_init*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_alloc*/</comment>
    <expr><name>lobject_new</name></expr>, <comment type="block">/*tp_new*/</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
