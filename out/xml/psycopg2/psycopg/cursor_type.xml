<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/cursor_type.c"><comment type="block">/* cursor_type.c - python interface to cursor objects
 *
 * Copyright (C) 2003-2019 Federico Di Gregorio &lt;fog@debian.org&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCOPG_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/psycopg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/green.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/pqpath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/typecast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/microprotocols.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/microprotocols_proto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>


<comment type="block" format="doxygen">/** DBAPI methods **/</comment>

<comment type="block">/* close method - close the cursor */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_close_doc</name></cpp:macro> \
<cpp:value>"close() -- Close the cursor."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_close</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>qname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PGTransactionStatusType</name></type> <name>status</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>EXC_IF_ASYNC_IN_PROGRESS</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>close_named</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>PQtransactionStatus</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <name>PQTRANS_UNKNOWN</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>PQTRANS_UNKNOWN</name> <operator>||</operator> <name>status</name> <operator>==</operator> <name>PQTRANS_INERROR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"skipping named curs close because tx status %d"</literal></expr></argument>,
                <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>close</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* We should close a server-side cursor only if exists, or we get an
         * error (#716). If we execute()d the cursor should exist alright, but
         * if we didn't there is still the expectation that the cursor is
         * closed (#746).
         *
         * So if we didn't execute() check for the cursor existence before
         * closing it (the view exists since PG 8.2 according to docs).
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>query</name></name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>server_version</name></name> <operator>&gt;=</operator> <literal type="number">80200</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lname</name> <operator>=</operator> <call><name>psyco_escape_string</name><argument_list>(
                    <argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                <argument><expr><literal type="string">"SELECT 1 FROM pg_catalog.pg_cursors where name = %s"</literal></expr></argument>,
                <argument><expr><name>lname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>pq_execute</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"skipping named cursor close because not existing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>close</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>EXC_IF_NO_MARK</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"CLOSE %s"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>qname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>pq_execute</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

<label><name>close</name>:</label>
    <expr_stmt><expr><call><name>CLEARPGRES</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_close: cursor at %p closed"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>lname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* execute method - executes a query */</comment>

<comment type="block">/* mogrify a query string and build argument array or dict */</comment>

<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>_mogrify</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>curs</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>d</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>kind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* from now on we'll use n and replace its value in *new only at the end,
       just before returning. we also init *new to NULL to exit with an error
       if we can't complete the mogrification */</comment>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>*</operator><name>new</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>Bytes_AsString</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>(<expr><operator>*</operator><name>c</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name><operator>++</operator> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* a regular character */</comment>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <switch>switch <condition>(<expr><operator>*</operator><name>c</name></expr>)</condition> <block>{<block_content>

        <comment type="block">/* handle plain percent symbol in format string */</comment>
        <case>case <expr><literal type="char">'%'</literal></expr>:</case>
            <expr_stmt><expr><operator>++</operator><name>c</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>force</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>

        <comment type="block">/* if we find '%(' then this is a dictionary, we:
           1/ find the matching ')' and extract the key name
           2/ locate the value in the dictionary (or return an error)
           3/ mogrify the value into something useful (quoting)...
           4/ ...and add it to the new dictionary to be used as argument
        */</comment>
        <case>case <expr><literal type="char">'('</literal></expr>:</case>
            <comment type="block">/* check if some crazy guy mixed formats */</comment>
            <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>psyco_set_error</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>, <argument><expr><name>curs</name></expr></argument>,
                   <argument><expr><literal type="string">"argument formats can't be mixed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <comment type="block">/* let's have d point the end of the argument */</comment>
            <for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>d</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>d</name> <operator>!=</operator> <literal type="char">')'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>d</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>d</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>key</name> <operator>=</operator> <call><name>Text_FromUTF8AndSize</name><argument_list>(<argument><expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>Py_ssize_t</name><operator>)</operator><operator>(</operator><name>d</name><operator>-</operator><name>c</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/*  if value is NULL we did not find the key (or this is not a
                    dictionary): let python raise a KeyError */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>value</name> <operator>=</operator> <call><name>PyObject_GetItem</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* destroy key */</comment>
                    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* destroy n */</comment>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <comment type="block">/* key has refcnt 1, value the original value + 1 */</comment>

                <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"_mogrify: value refcnt: "</literal>
                  <name>FORMAT_CODE_PY_SSIZE_T</name> <literal type="string">" (+1)"</literal></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>PyDict_Contains</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                    <comment type="block">/* None is always converted to NULL; this is an
                       optimization over the adapting code and can go away in
                       the future if somebody finds a None adapter useful. */</comment>
                    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>psyco_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>t</name> <operator>=</operator> <name>psyco_null</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="block">/* t is a new object, refcnt = 1, key is at 2 */</comment>
                    </block_content>}</block></if>
                    <else>else <block>{<block_content>
                        <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>microprotocol_getquoted</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>curs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="block">/* both key and t refcnt +1, key is at 2 now */</comment>
                        </block_content>}</block></if>
                        <else>else <block>{<block_content>
                            <comment type="block">/* no adapter found, raise a BIG exception */</comment>
                            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></else></if_stmt>

                    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* t dies here */</comment>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* key has the original refcnt now */</comment>
                <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"_mogrify: after value refcnt: "</literal>
                    <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <comment type="block">/* we found %( but not a ) */</comment>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>psyco_set_error</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>, <argument><expr><name>curs</name></expr></argument>,
                   <argument><expr><literal type="string">"incomplete placeholder: '%(' without ')'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* after the ) */</comment>
            <break>break;</break>

        <default>default:</default>
            <comment type="block">/* this is a format that expects a tuple; it is much easier,
               because we don't need to check the old/new dictionary for
               keys */</comment>

            <comment type="block">/* check if some crazy guy mixed formats */</comment>
            <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>psyco_set_error</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>, <argument><expr><name>curs</name></expr></argument>,
                  <argument><expr><literal type="string">"argument formats can't be mixed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* value has refcnt inc'ed by 1 here */</comment>

            <comment type="block">/*  if value is NULL this is not a sequence or the index is wrong;
                anyway we let python set its own exception */</comment>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>=</operator> <call><name>PyTuple_New</name><argument_list>(<argument><expr><call><name>PyObject_Length</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* let's have d point just after the '%' */</comment>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>psyco_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>psyco_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>microprotocol_getquoted</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>curs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>force</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>PyTuple_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>new</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Merge together a query string and its arguments.
 *
 * The arguments have been already adapted to SQL.
 *
 * Return a new reference to a string with the merged query,
 * NULL and set an exception if any happened.
 */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>_psyco_curs_merge_query_args</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
                             <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>fquery</name></decl>;</decl_stmt>

    <comment type="block">/* if PyString_Format() return NULL an error occurred: if the error is
       a TypeError we need to check the exception.args[0] string for the
       values:

           "not enough arguments for format string"
           "not all arguments converted"

       and return the appropriate ProgrammingError. we do that by grabbing
       the current exception (we will later restore it if the type or the
       strings do not match.) */</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fquery</name> <operator>=</operator> <call><name>Bytes_Format</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>err</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>arg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>trace</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>PyErr_Fetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&amp;&amp;</operator> <call><name>PyErr_GivenExceptionMatches</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>PyExc_TypeError</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_execute: TypeError exception caught"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PyErr_NormalizeException</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"args"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"args"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_execute:     -&gt; %s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"not enough arguments for format string"</literal></expr></argument>)</argument_list></call>
                  <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"not all arguments converted"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_execute:     -&gt; got a match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>psyco_set_error</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>pe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* if we did not manage our own exception, restore old one */</comment>
        <if_stmt><if>if <condition>(<expr><name>pe</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_Restore</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>fquery</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_execute_doc</name></cpp:macro> \
<cpp:value>"execute(query, vars=None) -- Execute query with bound vars."</cpp:value></cpp:define>

<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>_psyco_curs_execute</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
                    <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>vars</name></decl></parameter>,
                    <parameter><decl><type><name>long</name> <name>int</name></type> <name>async</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>no_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>fquery</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cvt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* query becomes NULL or refcount +1, so good to XDECREF at the end */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>query</name> <operator>=</operator> <call><name>curs_validate_sql_basic</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>CLEARPGRES</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_execute: starting execution of new query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* here we are, and we have a sequence or a dictionary filled with
       objects to be substituted (bound variables). we try to be smart and do
       the right thing (i.e., what the user expects) */</comment>
    <if_stmt><if>if <condition>(<expr><name>vars</name> <operator>&amp;&amp;</operator> <name>vars</name> <operator>!=</operator> <name>Py_None</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>_mogrify</name><argument_list>(<argument><expr><name>vars</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cvt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Merge the query to the arguments if needed */</comment>
    <if_stmt><if>if <condition>(<expr><name>cvt</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fquery</name> <operator>=</operator> <call><name>_psyco_curs_merge_query_args</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>cvt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fquery</name> <operator>=</operator> <name>query</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>qname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scroll</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>scrollable</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
                <expr_stmt><expr><name>scroll</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">0</literal></expr>:</case>
                <expr_stmt><expr><name>scroll</name> <operator>=</operator> <literal type="string">"NO SCROLL "</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <expr_stmt><expr><name>scroll</name> <operator>=</operator> <literal type="string">"SCROLL "</literal></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>InternalError</name></expr></argument>, <argument><expr><literal type="string">"unexpected scrollable value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></switch>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <call><name>Bytes_FromFormat</name><argument_list>(
                <argument><expr><literal type="string">"DECLARE %s %sCURSOR %s HOLD FOR %s"</literal></expr></argument>,
                <argument><expr><name><name>self</name><operator>-&gt;</operator><name>qname</name></name></expr></argument>,
                <argument><expr><name>scroll</name></expr></argument>,
                <argument><expr><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>withhold</name></name></expr> ?</condition><then> <expr><literal type="string">"WITH"</literal></expr> </then><else>: <expr><literal type="string">"WITHOUT"</literal></expr></else></ternary></expr></argument>,
                <argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>fquery</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>query</name></name></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <comment type="block">/* Transfer ownership */</comment>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>fquery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <name>fquery</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* At this point, the SQL statement must be str, not unicode */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>pq_execute</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>async</name></expr></argument>, <argument><expr><name>no_result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_execute: res = %d, pgres = %p"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* Success */</comment>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>fquery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>cvt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_execute</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>vars</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>operation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"query"</literal></expr>, <expr><literal type="string">"vars"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"O|O"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>operation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vars</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>query</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>psyco_set_error</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>, <argument><expr><name>self</name></expr></argument>,
                <argument><expr><literal type="string">"can't call .execute() on named cursors more than once"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>autocommit</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>withhold</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>psyco_set_error</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>, <argument><expr><name>self</name></expr></argument>,
                <argument><expr><literal type="string">"can't use a named cursor outside of transactions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>EXC_IF_NO_MARK</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_ASYNC_IN_PROGRESS</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>execute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>execute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>_psyco_curs_execute</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>async</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* success */</comment>
    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_executemany_doc</name></cpp:macro> \
<cpp:value>"executemany(query, vars_list) -- Execute many queries with bound vars."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_executemany</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>operation</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vars</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>v</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>rowcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"query"</literal></expr>, <expr><literal type="string">"vars_list"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="block">/* reset rowcount to -1 to avoid setting it when an exception is raised */</comment>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"OO"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>operation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vars</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CURS_ASYNC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>executemany</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>executemany</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>psyco_set_error</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>, <argument><expr><name>self</name></expr></argument>,
                <argument><expr><literal type="string">"can't call .executemany() on named cursors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyIter_Check</name><argument_list>(<argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>vars</name> <operator>=</operator> <name>iter</name> <operator>=</operator> <call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>vars</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>_psyco_curs_execute</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>rowcount</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>rowcount</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>rowcount</name> <operator>+=</operator> <name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name> <operator>=</operator> <name>rowcount</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_mogrify_doc</name></cpp:macro> \
<cpp:value>"mogrify(query, vars=None) -&gt; str -- Return query after vars binding."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>_psyco_curs_mogrify</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
                   <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>vars</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>fquery</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cvt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>operation</name> <operator>=</operator> <call><name>curs_validate_sql_basic</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>operation</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_mogrify: starting mogrify"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* here we are, and we have a sequence or a dictionary filled with
       objects to be substituted (bound variables). we try to be smart and do
       the right thing (i.e., what the user expects) */</comment>

    <if_stmt><if>if <condition>(<expr><name>vars</name> <operator>&amp;&amp;</operator> <name>vars</name> <operator>!=</operator> <name>Py_None</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>_mogrify</name><argument_list>(<argument><expr><name>vars</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cvt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>vars</name> <operator>&amp;&amp;</operator> <name>cvt</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fquery</name> <operator>=</operator> <call><name>_psyco_curs_merge_query_args</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>cvt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_mogrify: cvt-&gt;refcnt = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name>
            <literal type="string">", fquery-&gt;refcnt = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
            <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>cvt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>fquery</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><name>fquery</name> <operator>=</operator> <name>operation</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>fquery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>cvt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>fquery</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_mogrify</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>vars</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>operation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"query"</literal></expr>, <expr><literal type="string">"vars"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"O|O"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>operation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vars</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>_psyco_curs_mogrify</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* cast method - convert an oid/string into a Python object */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_cast_doc</name></cpp:macro> \
<cpp:value>"cast(oid, s) -&gt; value\n\n" \
"Convert the string s to a Python object according to its oid.\n\n" \
"Look for a typecaster first in the cursor, then in its connection," \
"then in the global register. If no suitable typecaster is found," \
"leave the value as a string."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_cast</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>cast</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"OO"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>cast</name> <operator>=</operator> <call><name>curs_get_cast</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>PyObject_CallFunctionObjArgs</name><argument_list>(<argument><expr><name>cast</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* fetchone method - fetch one row of results */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_fetchone_doc</name></cpp:macro> \
<cpp:value>"fetchone() -&gt; tuple or None\n\n" \
"Return the next row of a query result set in the form of a tuple (by\n" \
"default) or using the sequence factory previously set in the\n" \
"`row_factory` attribute. Return `!None` when no more data is available.\n"</cpp:value></cpp:define>

<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>_psyco_curs_prefetch</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"_psyco_curs_prefetch: trying to fetch data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>pq_fetch</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"_psycopg_curs_prefetch: result = %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>;</do>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"_psyco_curs_prefetch: result = %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>_psyco_curs_buildrow_fill</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>istuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>PQgetisnull</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>PQgetlength</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"_psyco_curs_buildrow: row %ld, element %d, len %d"</literal></expr></argument>,
                <argument><expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>val</name> <operator>=</operator> <call><name>typecast_cast</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>casts</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
                            <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"_psyco_curs_buildrow: val-&gt;refcnt = "</literal>
            <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
            <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>istuple</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>PySequence_SetItem</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>_psyco_curs_buildrow</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>istuple</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>PQnfields</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>istuple</name> <operator>=</operator> <operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>tuple_factory</name></name> <operator>==</operator> <name>Py_None</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>istuple</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>PyTuple_New</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>PyObject_CallFunctionObjArgs</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tuple_factory</name></name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <call><name>_psyco_curs_buildrow_fill</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>istuple</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_fetchone</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>_psyco_curs_prefetch</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>EXC_IF_NO_TUPLES</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>qname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>EXC_IF_NO_MARK</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXC_IF_ASYNC_IN_PROGRESS</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>fetchone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>fetchone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"FETCH FORWARD 1 FROM %s"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>qname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>pq_execute</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>withhold</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>_psyco_curs_prefetch</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_fetchone: fetching row %ld"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_fetchone: rowcount = %ld"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name> <operator>&gt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* we exhausted available data: return None */</comment>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_psyco_curs_buildrow</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* move the counter to next line */</comment>

    <comment type="block">/* if the query was async aggresively free pgres, to allow
       successive requests to reallocate it */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name> <operator>&gt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name>
        <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>async_cursor</name></name>
        <operator>&amp;&amp;</operator> <call><name>PyWeakref_GetObject</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>async_cursor</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name>self</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>CLEARPGRES</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Efficient cursor.next() implementation for named cursors.
 *
 * Fetch several records at time. Return NULL when the cursor is exhausted.
 */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_next_named</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_next_named"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_ASYNC_IN_PROGRESS</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>_psyco_curs_prefetch</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>EXC_IF_NO_TUPLES</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>EXC_IF_NO_MARK</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_next_named: row %ld"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_next_named: rowcount = %ld"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name> <operator>&gt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"FETCH FORWARD %ld FROM %s"</literal></expr></argument>,
            <argument><expr><name><name>self</name><operator>-&gt;</operator><name>itersize</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>qname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>pq_execute</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>withhold</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>_psyco_curs_prefetch</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* We exhausted the data: return NULL to stop iteration. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name> <operator>&gt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_psyco_curs_buildrow</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* move the counter to next line */</comment>

    <comment type="block">/* if the query was async aggresively free pgres, to allow
       successive requests to reallocate it */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name> <operator>&gt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name>
        <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>async_cursor</name></name>
        <operator>&amp;&amp;</operator> <call><name>PyWeakref_GetObject</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>async_cursor</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name>self</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>CLEARPGRES</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* fetch many - fetch some results */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_fetchmany_doc</name></cpp:macro> \
<cpp:value>"fetchmany(size=self.arraysize) -&gt; list of tuple\n\n" \
"Return the next `size` rows of a query result set in the form of a list\n" \
"of tuples (by default) or using the sequence factory previously set in\n" \
"the `row_factory` attribute.\n\n" \
"Return an empty list when no more data is available.\n"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_fetchmany</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwords</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pysize</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>size</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>arraysize</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"size"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="block">/* allow passing None instead of omitting the *size* argument,
     * or using the method from subclasses would be a problem */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwords</name></expr></argument>, <argument><expr><literal type="string">"|O"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pysize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pysize</name> <operator>&amp;&amp;</operator> <name>pysize</name> <operator>!=</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>pysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>_psyco_curs_prefetch</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>EXC_IF_NO_TUPLES</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>qname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>EXC_IF_NO_MARK</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXC_IF_ASYNC_IN_PROGRESS</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>fetchmany</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>fetchone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"FETCH FORWARD %d FROM %s"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>qname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>pq_execute</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>withhold</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>_psyco_curs_prefetch</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* make sure size is not &gt; than the available number of rows */</comment>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name> <operator>-</operator> <name><name>self</name><operator>-&gt;</operator><name>row</name></name> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name> <operator>-</operator> <name><name>self</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_fetchmany: size = %ld"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>list</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>_psyco_curs_buildrow</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name><operator>++</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>row</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* if the query was async aggresively free pgres, to allow
       successive requests to reallocate it */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name> <operator>&gt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name>
        <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>async_cursor</name></name>
        <operator>&amp;&amp;</operator> <call><name>PyWeakref_GetObject</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>async_cursor</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name>self</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>CLEARPGRES</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* success */</comment>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* fetch all - fetch all results */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_fetchall_doc</name></cpp:macro> \
<cpp:value>"fetchall() -&gt; list of tuple\n\n" \
"Return all the remaining rows of a query result set.\n\n" \
"Rows are returned in the form of a list of tuples (by default) or using\n" \
"the sequence factory previously set in the `row_factory` attribute.\n" \
"Return `!None` when no more data is available.\n"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_fetchall</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>_psyco_curs_prefetch</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>EXC_IF_NO_TUPLES</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>qname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>EXC_IF_NO_MARK</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXC_IF_ASYNC_IN_PROGRESS</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>fetchall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>fetchall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"FETCH FORWARD ALL FROM %s"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>qname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>pq_execute</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>withhold</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>_psyco_curs_prefetch</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name> <operator>-</operator> <name><name>self</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>list</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>_psyco_curs_buildrow</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>row</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* if the query was async aggresively free pgres, to allow
       successive requests to reallocate it */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name> <operator>&gt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name>
        <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>async_cursor</name></name>
        <operator>&amp;&amp;</operator> <call><name>PyWeakref_GetObject</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>async_cursor</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name>self</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>CLEARPGRES</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* success */</comment>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* callproc method - execute a stored procedure */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_callproc_doc</name></cpp:macro> \
<cpp:value>"callproc(procname, parameters=None) -- Execute stored procedure."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_callproc</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>procname_len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>nparameters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>parameters</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>operation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>using_dict</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pnames</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pvals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cpname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>scpnames</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"s#|O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>procname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>procname_len</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>parameters</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_ASYNC_IN_PROGRESS</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>callproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>callproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>psyco_set_error</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>, <argument><expr><name>self</name></expr></argument>,
                <argument><expr><literal type="string">"can't call .callproc() on named cursors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>parameters</name> <operator>!=</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name>nparameters</name> <operator>=</operator> <call><name>PyObject_Length</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>using_dict</name> <operator>=</operator> <name>nparameters</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>PyDict_Check</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* a Dict is complicated; the parameter names go into the query */</comment>
    <if_stmt><if>if <condition>(<expr><name>using_dict</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pnames</name> <operator>=</operator> <call><name>PyDict_Keys</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pvals</name> <operator>=</operator> <call><name>PyDict_Values</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>sl</name> <operator>=</operator> <name>procname_len</name> <operator>+</operator> <literal type="number">17</literal> <operator>+</operator> <name>nparameters</name> <operator>*</operator> <literal type="number">5</literal> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>nparameters</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>scpnames</name> <operator>=</operator> <call><name>PyMem_New</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>nparameters</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>scpnames</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nparameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* each parameter has to be processed; it's a few steps. */</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparameters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <comment type="block">/* all errors are RuntimeErrors as they should never occur */</comment>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pname</name> <operator>=</operator> <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>pnames</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* was borrowed */</comment>

            <comment type="block">/* this also makes a check for keys being strings */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pname</name> <operator>=</operator> <call><name>psyco_ensure_bytes</name><argument_list>(<argument><expr><name>pname</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cpname</name> <operator>=</operator> <call><name>Bytes_AsString</name><argument_list>(<argument><expr><name>pname</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>scpnames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>psyco_escape_identifier</name><argument_list>(
                    <argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>cpname</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>sl</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>scpnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sql</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM %s("</literal></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparameters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name><name>scpnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">":=%s,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>sql</name><index>[<expr><name>sl</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sql</name><index>[<expr><name>sl</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="block">/* a list (or None, or empty data structure) is a little bit simpler */</comment>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pvals</name> <operator>=</operator> <name>parameters</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>sl</name> <operator>=</operator> <name>procname_len</name> <operator>+</operator> <literal type="number">17</literal> <operator>+</operator> <name>nparameters</name> <operator>*</operator> <literal type="number">3</literal> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>nparameters</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>sql</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>sql</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM %s("</literal></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparameters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"%s,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>sql</name><index>[<expr><name>sl</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sql</name><index>[<expr><name>sl</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>operation</name> <operator>=</operator> <call><name>Bytes_FromString</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <call><name>_psyco_curs_execute</name><argument_list>(
            <argument><expr><name>self</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>pvals</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>async</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* The dict case is outside DBAPI scope anyway, so simply return None */</comment>
        <if_stmt><if>if <condition>(<expr><name>using_dict</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <name>pvals</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<label><name>exit</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>scpnames</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparameters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>scpnames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name><name>scpnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>scpnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>pnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>pvals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* nextset method - return the next set of data (not supported) */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_nextset_doc</name></cpp:macro> \
<cpp:value>"nextset() -- Skip to next set of data.\n\n" \
"This method is not supported (PostgreSQL does not have multiple data \n" \
"sets) and will raise a NotSupportedError exception."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_nextset</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>NotSupportedError</name></expr></argument>, <argument><expr><literal type="string">"not supported by PostgreSQL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* setinputsizes - predefine memory areas for execute (does nothing) */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_setinputsizes_doc</name></cpp:macro> \
<cpp:value>"setinputsizes(sizes) -- Set memory areas before execute.\n\n" \
"This method currently does nothing but it is safe to call it."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_setinputsizes</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>sizes</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sizes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* setoutputsize - predefine memory areas for execute (does nothing) */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_setoutputsize_doc</name></cpp:macro> \
<cpp:value>"setoutputsize(size, column=None) -- Set column buffer size.\n\n" \
"This method currently does nothing but it is safe to call it."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_setoutputsize</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>column</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"l|l"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* scroll - scroll position in result list */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_scroll_doc</name></cpp:macro> \
<cpp:value>"scroll(value, mode='relative') -- Scroll to new position according to mode."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_scroll</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>newpos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><literal type="string">"relative"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"value"</literal></expr>, <expr><literal type="string">"mode"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"i|s"</literal></expr></argument>,
                                     <argument><expr><name>kwlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* if the cursor is not named we have the full result set and we can do
       our own calculations to scroll; else we just delegate the scrolling
       to the MOVE SQL statement */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>qname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"relative"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>newpos</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>row</name></name> <operator>+</operator> <name>value</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>( <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"absolute"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>newpos</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>psyco_set_error</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>, <argument><expr><name>self</name></expr></argument>,
                <argument><expr><literal type="string">"scroll mode must be 'relative' or 'absolute'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>newpos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>newpos</name> <operator>&gt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name></expr> )</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>psyco_set_error</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>, <argument><expr><name>self</name></expr></argument>,
                             <argument><expr><literal type="string">"scroll destination out of bounds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <name>newpos</name></expr>;</expr_stmt>
    </block_content>}</block></if>

    <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>EXC_IF_NO_MARK</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXC_IF_ASYNC_IN_PROGRESS</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>scroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>scroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"absolute"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"MOVE ABSOLUTE %d FROM %s"</literal></expr></argument>,
                <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>qname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"MOVE %d FROM %s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>qname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>pq_execute</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>withhold</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>_psyco_curs_prefetch</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_enter_doc</name></cpp:macro> \
<cpp:value>"__enter__ -&gt; self"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_enter</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_exit_doc</name></cpp:macro> \
<cpp:value>"__exit__ -- close the cursor"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_exit</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* don't care about the arguments here: don't need to parse them */</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* success (of curs.close()).
     * Return None to avoid swallowing the exception */</comment>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Return a newly allocated buffer containing the list of columns to be
 * copied. On error return NULL and set an exception.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>_psyco_curs_copy_columns</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>columns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>col</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>coliter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>columnlist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>bufsize</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>columns</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>columns</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>columnlist</name> <operator>=</operator> <call><name>PyMem_Malloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>error</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>columnlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>coliter</name> <operator>=</operator> <call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>columnlist</name> <operator>=</operator> <call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>bufsize</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>coliter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>columnlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'('</literal></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>col</name> <operator>=</operator> <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>coliter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>collen</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>colname</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>quoted_colname</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>col</name> <operator>=</operator> <call><name>psyco_ensure_bytes</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>coliter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>error</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>Bytes_AsStringAndSize</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>collen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>quoted_colname</name> <operator>=</operator> <call><name>psyco_escape_identifier</name><argument_list>(
                <argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>colname</name></expr></argument>, <argument><expr><name>collen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>coliter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>error</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>collen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>quoted_colname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr><name>offset</name> <operator>+</operator> <name>collen</name> <operator>&gt;</operator> <name>bufsize</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>bufsize</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>PyMem_Realloc</name><argument_list>(<argument><expr><name>columnlist</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>quoted_colname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>coliter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>columnlist</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>columnlist</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><name>quoted_colname</name></expr></argument>, <argument><expr><name>collen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>collen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>columnlist</name><index>[<expr><name>offset</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>quoted_colname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>coliter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Error raised by the coliter generator */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>columnlist</name><index>[<expr><name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>columnlist</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></else></if_stmt>

<label><name>error</name>:</label>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>columnlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>columnlist</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <return>return <expr><name>columnlist</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* extension: copy_from - implements COPY FROM */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_copy_from_doc</name></cpp:macro> \
<cpp:value>"copy_from(file, table, sep='\\t', null='\\\\N', size=8192, columns=None) -- Copy table from file."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_copy_from</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="string">"file"</literal></expr>, <expr><literal type="string">"table"</literal></expr>, <expr><literal type="string">"sep"</literal></expr>, <expr><literal type="string">"null"</literal></expr>, <expr><literal type="string">"size"</literal></expr>, <expr><literal type="string">"columns"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><literal type="string">"\t"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>null</name> <init>= <expr><literal type="string">"\\N"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name> <init>=
        <expr><literal type="string">"COPY %s%s FROM stdin WITH DELIMITER AS %s NULL AS %s"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>query_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>columnlist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>quoted_delimiter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>quoted_null</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>quoted_table_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table_name</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>bufsize</name> <init>= <expr><name>DEFAULT_COPYBUFF</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>file</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>columns</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(
            <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"Os|ssnO"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>columns</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
            <argument><expr><literal type="string">"argument 1 must have a .read() method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CURS_ASYNC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>copy_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_GREEN</name><argument_list>(<argument><expr><name>copy_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>copy_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>columnlist</name> <operator>=</operator> <call><name>_psyco_curs_copy_columns</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>quoted_delimiter</name> <operator>=</operator> <call><name>psyco_escape_string</name><argument_list>(
            <argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>quoted_null</name> <operator>=</operator> <call><name>psyco_escape_string</name><argument_list>(
            <argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>quoted_table_name</name> <operator>=</operator> <call><name>psyco_escape_identifier</name><argument_list>(
            <argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>query_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>quoted_table_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>columnlist</name></expr></argument>)</argument_list></call>
        <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>quoted_delimiter</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>quoted_null</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>query</name> <operator>=</operator> <call><name>PyMem_New</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>query_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>query_size</name></expr></argument>, <argument><expr><name>command</name></expr></argument>,
        <argument><expr><name>quoted_table_name</name></expr></argument>, <argument><expr><name>columnlist</name></expr></argument>, <argument><expr><name>quoted_delimiter</name></expr></argument>, <argument><expr><name>quoted_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_copy_from: query = %s"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <call><name>Bytes_FromString</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* This routine stores a borrowed reference.  Although it is only held
     * for the duration of curs_copy_from, nested invocations of
     * Py_BEGIN_ALLOW_THREADS could surrender control to another thread,
     * which could invoke the garbage collector.  We thus need an
     * INCREF/DECREF pair if we store this pointer in a GC object, such as
     * a cursorObject */</comment>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>copysize</name></name> <operator>=</operator> <name>bufsize</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>copyfile</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pq_execute</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>copyfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>quoted_table_name</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>quoted_table_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>columnlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>quoted_delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>quoted_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* extension: copy_to - implements COPY TO */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_copy_to_doc</name></cpp:macro> \
<cpp:value>"copy_to(file, table, sep='\\t', null='\\\\N', columns=None) -- Copy table to file."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_copy_to</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"file"</literal></expr>, <expr><literal type="string">"table"</literal></expr>, <expr><literal type="string">"sep"</literal></expr>, <expr><literal type="string">"null"</literal></expr>, <expr><literal type="string">"columns"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><literal type="string">"\t"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>null</name> <init>= <expr><literal type="string">"\\N"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name> <init>=
        <expr><literal type="string">"COPY %s%s TO stdout WITH DELIMITER AS %s NULL AS %s"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>query_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>columnlist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>quoted_delimiter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>quoted_null</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>quoted_table_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>columns</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(
            <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"Os|ssO"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>columns</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
            <argument><expr><literal type="string">"argument 1 must have a .write() method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CURS_ASYNC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>copy_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_GREEN</name><argument_list>(<argument><expr><name>copy_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>copy_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>quoted_table_name</name> <operator>=</operator> <call><name>psyco_escape_identifier</name><argument_list>(
            <argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>columnlist</name> <operator>=</operator> <call><name>_psyco_curs_copy_columns</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>quoted_delimiter</name> <operator>=</operator> <call><name>psyco_escape_string</name><argument_list>(
            <argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>quoted_null</name> <operator>=</operator> <call><name>psyco_escape_string</name><argument_list>(
            <argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>query_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>quoted_table_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>columnlist</name></expr></argument>)</argument_list></call>
        <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>quoted_delimiter</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>quoted_null</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>query</name> <operator>=</operator> <call><name>PyMem_New</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>query_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>query_size</name></expr></argument>, <argument><expr><name>command</name></expr></argument>,
        <argument><expr><name>quoted_table_name</name></expr></argument>, <argument><expr><name>columnlist</name></expr></argument>, <argument><expr><name>quoted_delimiter</name></expr></argument>, <argument><expr><name>quoted_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"curs_copy_to: query = %s"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <call><name>Bytes_FromString</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>copysize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>copyfile</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pq_execute</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>copyfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>quoted_table_name</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>quoted_table_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>columnlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>quoted_delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>quoted_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* extension: copy_expert - implements extended COPY FROM/TO

   This method supports both COPY FROM and COPY TO with user-specifiable
   SQL statement, rather than composing the statement from parameters.
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_copy_expert_doc</name></cpp:macro> \
<cpp:value>"copy_expert(sql, file, size=8192) -- Submit a user-composed COPY statement.\n" \
"`file` must be an open, readable file for COPY FROM or an open, writable\n"   \
"file for COPY TO. The optional `size` argument, when specified for a COPY\n"   \
"FROM statement, will be passed to file's read method to control the read\n"    \
"buffer size."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_copy_expert</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>bufsize</name> <init>= <expr><name>DEFAULT_COPYBUFF</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>sql</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>file</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"sql"</literal></expr>, <expr><literal type="string">"file"</literal></expr>, <expr><literal type="string">"size"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>,
        <argument><expr><literal type="string">"OO|n"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufsize</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_CURS_ASYNC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>copy_expert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_GREEN</name><argument_list>(<argument><expr><name>copy_expert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXC_IF_TPC_PREPARED</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>copy_expert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>sql</name> <operator>=</operator> <call><name>curs_validate_sql_basic</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Any failure from here forward should 'goto exit' rather than
       'return NULL' directly. */</comment>

    <if_stmt><if>if <condition>(<expr><name>sql</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <comment type="block">/* This validation of file is rather weak, in that it doesn't enforce the
       association between "COPY FROM" -&gt; "read" and "COPY TO" -&gt; "write".
       However, the error handling in _pq_copy_[in|out] must be able to handle
       the case where the attempt to call file.read|write fails, so no harm
       done. */</comment>

    <if_stmt><if>if <condition>(   <expr><operator>!</operator><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call>
        <operator>&amp;&amp;</operator> <operator>!</operator><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>
      )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr><literal type="string">"file must be a readable file-like"</literal>
            <literal type="string">" object for COPY FROM; a writable file-like object for COPY TO."</literal></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>copysize</name></name> <operator>=</operator> <name>bufsize</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>copyfile</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>

    <comment type="block">/* At this point, the SQL statement must be str, not unicode */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pq_execute</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>copyfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* extension: closed - return true if cursor is closed */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_closed_doc</name></cpp:macro> \
<cpp:value>"True if cursor is closed, False if cursor is open"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_closed_get</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>closed</name></name> <operator>||</operator> <operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name></name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>closed</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* extension: withhold - get or set "WITH HOLD" for named cursors */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_withhold_doc</name></cpp:macro> \
<cpp:value>"Set or return cursor use of WITH HOLD"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_withhold_get</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>withhold</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>RAISES_NEG</name> <name>int</name></type>
<name>curs_withhold_set</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pyvalue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>pyvalue</name> <operator>!=</operator> <name>Py_False</name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>,
            <argument><expr><literal type="string">"trying to set .withhold on unnamed cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>=</operator> <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>pyvalue</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>withhold</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_scrollable_doc</name></cpp:macro> \
<cpp:value>"Set or return cursor use of SCROLL"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_scrollable_get</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>scrollable</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>Py_False</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>Py_True</name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>InternalError</name></expr></argument>, <argument><expr><literal type="string">"unexpected scrollable value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RAISES_NEG</name> <name>int</name></type>
<name>curs_scrollable_set</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pyvalue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>pyvalue</name> <operator>!=</operator> <name>Py_None</name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ProgrammingError</name></expr></argument>,
            <argument><expr><literal type="string">"trying to set .scrollable on unnamed cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pyvalue</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>value</name> <operator>=</operator> <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>pyvalue</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>scrollable</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curs_pgresult_ptr_doc</name></cpp:macro> \
<cpp:value>"pgresult_ptr -- Get the PGresult structure pointer."</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>curs_pgresult_ptr_get</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>PyLong_FromVoidPtr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/** the cursor object **/</comment>

<comment type="block">/* iterator protocol */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>cursor_iter</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>EXC_IF_CURS_CLOSED</name><argument_list>(<argument><expr><operator>(</operator><name>cursorObject</name><operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>cursor_next</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>cursorObject</name><operator>*</operator><operator>)</operator><name>self</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* we don't parse arguments: curs_fetchone will do that for us */</comment>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curs_fetchone</name><argument_list>(<argument><expr><operator>(</operator><name>cursorObject</name><operator>*</operator><operator>)</operator><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* convert a None to NULL to signal the end of iteration */</comment>
        <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;&amp;</operator> <name>res</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curs_next_named</name><argument_list>(<argument><expr><operator>(</operator><name>cursorObject</name><operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* object method list */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMethodDef</name></name></type> <name><name>cursorObject_methods</name><index>[]</index></name> <init>= <expr><block>{
    <comment type="block">/* DBAPI-2.0 core */</comment>
    <expr><block>{<expr><literal type="string">"close"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_close</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>curs_close_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"execute"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_execute</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>curs_execute_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"executemany"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_executemany</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>curs_executemany_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"fetchone"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_fetchone</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>curs_fetchone_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"fetchmany"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_fetchmany</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>curs_fetchmany_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"fetchall"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_fetchall</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>curs_fetchall_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"callproc"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_callproc</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>curs_callproc_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"nextset"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_nextset</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>curs_nextset_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"setinputsizes"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_setinputsizes</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>curs_setinputsizes_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"setoutputsize"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_setoutputsize</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>curs_setoutputsize_doc</name></expr>}</block></expr>,
    <comment type="block">/* DBAPI-2.0 extensions */</comment>
    <expr><block>{<expr><literal type="string">"scroll"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_scroll</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>curs_scroll_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"__enter__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_enter</name></expr>,
     <expr><name>METH_NOARGS</name></expr>, <expr><name>curs_enter_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"__exit__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_exit</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>curs_exit_doc</name></expr>}</block></expr>,
    <comment type="block">/* psycopg extensions */</comment>
    <expr><block>{<expr><literal type="string">"cast"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_cast</name></expr>,
     <expr><name>METH_VARARGS</name></expr>, <expr><name>curs_cast_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"mogrify"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_mogrify</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>curs_mogrify_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"copy_from"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_copy_from</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>curs_copy_from_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"copy_to"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_copy_to</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>curs_copy_to_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"copy_expert"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>curs_copy_expert</name></expr>,
     <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><name>curs_copy_expert_doc</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* object member list */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSETOF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(cursorObject, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMemberDef</name></name></type> <name><name>cursorObject_members</name><index>[]</index></name> <init>= <expr><block>{
    <comment type="block">/* DBAPI-2.0 basics */</comment>
    <expr><block>{<expr><literal type="string">"rowcount"</literal></expr>, <expr><name>T_LONG</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>rowcount</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"Number of rows read from the backend in the last command."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"arraysize"</literal></expr>, <expr><name>T_LONG</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>arraysize</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>,
        <expr><literal type="string">"Number of records `fetchmany()` must fetch if not explicitly "</literal> \
        <literal type="string">"specified."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"itersize"</literal></expr>, <expr><name>T_LONG</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>itersize</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>,
        <expr><literal type="string">"Number of records ``iter(cur)`` must fetch per network roundtrip."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"description"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"Cursor description as defined in DBAPI-2.0."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"lastrowid"</literal></expr>, <expr><name>T_OID</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>lastoid</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"The ``oid`` of the last row inserted by the cursor."</literal></expr>}</block></expr>,
    <comment type="block">/* DBAPI-2.0 extensions */</comment>
    <expr><block>{<expr><literal type="string">"rownumber"</literal></expr>, <expr><name>T_LONG</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"The current row position."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"connection"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"The connection where the cursor comes from."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"name"</literal></expr>, <expr><name>T_STRING</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"statusmessage"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>pgstatus</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"The return message of the last command."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"query"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
        <expr><literal type="string">"The last query text sent to the backend."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"row_factory"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>tuple_factory</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"tzinfo_factory"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>tzinfo_factory</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"typecaster"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>caster</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"string_types"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>string_types</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"binary_types"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>binary_types</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* object calculated member list */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyGetSetDef</name></name></type> <name><name>cursorObject_getsets</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"closed"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>curs_closed_get</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>curs_closed_doc</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"withhold"</literal></expr>,
      <expr><operator>(</operator><name>getter</name><operator>)</operator><name>curs_withhold_get</name></expr>,
      <expr><operator>(</operator><name>setter</name><operator>)</operator><name>curs_withhold_set</name></expr>,
      <expr><name>curs_withhold_doc</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"scrollable"</literal></expr>,
      <expr><operator>(</operator><name>getter</name><operator>)</operator><name>curs_scrollable_get</name></expr>,
      <expr><operator>(</operator><name>setter</name><operator>)</operator><name>curs_scrollable_set</name></expr>,
      <expr><name>curs_scrollable_doc</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"pgresult_ptr"</literal></expr>,
      <expr><operator>(</operator><name>getter</name><operator>)</operator><name>curs_pgresult_ptr_get</name></expr>, <expr><name>NULL</name></expr>,
      <expr><name>curs_pgresult_ptr_doc</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* initialization and finalization methods */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cursor_setup</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"cursor_setup: init cursor object at %p"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"cursor_setup: parameters: name = %s, conn = %p"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>psyco_strdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>qname</name></name> <operator>=</operator> <call><name>psyco_escape_identifier</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* FIXME: why does this raise an exception on the _next_ line of code?
    if (PyObject_IsInstance((PyObject*)conn,
                             (PyObject *)&amp;connectionType) == 0) {
        PyErr_SetString(PyExc_TypeError,
            "argument 1 must be subclass of psycopg2.extensions.connection");
        return -1;
    } */</comment>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>mark</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>notuples</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>arraysize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>itersize</name></name> <operator>=</operator> <literal type="number">2000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>rowcount</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>lastoid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>tuple_factory</name></name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>

    <comment type="block">/* default tzinfo factory */</comment>
    <block>{<block_content>
        <comment type="block">/* The datetime api doesn't seem to have a constructor to make a
         * datetime.timezone, so use the Python interface. */</comment>
        <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"datetime"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>tzinfo_factory</name></name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"timezone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>tzinfo_factory</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"cursor_setup: good cursor object at %p, refcnt = "</literal>
        <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
        <argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cursor_clear</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgstatus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>casts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>caster</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>copyfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tuple_factory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tzinfo_factory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>string_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>binary_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cursor_dealloc</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>cursorObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>weakreflist</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyObject_ClearWeakRefs</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>cursor_clear</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>qname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CLEARPGRES</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"cursor_dealloc: deleted cursor object at %p, refcnt = "</literal>
        <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
        <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>tp_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cursor_init</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>bname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"conn"</literal></expr>, <expr><literal type="string">"name"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"O!|O"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>connectionType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* for ensure_bytes */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bname</name> <operator>=</operator> <call><name>psyco_ensure_bytes</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <comment type="block">/* name has had a ref stolen */</comment>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cname</name> <operator>=</operator> <call><name>Bytes_AsString</name><argument_list>(<argument><expr><name>bname</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>cursor_setup</name><argument_list>(<argument><expr><operator>(</operator><name>cursorObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><name>connectionObject</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>bname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>cursor_new</name><parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>type</name><operator>-&gt;</operator><name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>cursor_repr</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyString_FromFormat</name><argument_list>(
        <argument><expr><literal type="string">"&lt;cursor object at %p; closed: %d&gt;"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>closed</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cursor_traverse</name><parameter_list>(<parameter><decl><type><name>cursorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>visitproc</name></type> <name>visit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgstatus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>casts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>caster</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>copyfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tuple_factory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tzinfo_factory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>string_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>binary_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* object type */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cursorType_doc</name></cpp:macro> \
<cpp:value>"A database cursor."</cpp:value></cpp:define>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>cursorType</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
    <literal type="string">"psycopg2.extensions.cursor"</literal></expr>,
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>cursorObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><name>cursor_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_print*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr><operator>(</operator><name>reprfunc</name><operator>)</operator><name>cursor_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_mapping*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_hash */</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_call*/</comment>
    <expr><operator>(</operator><name>reprfunc</name><operator>)</operator><name>cursor_repr</name></expr>, <comment type="block">/*tp_str*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_buffer*/</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name> <operator>|</operator> <name>Py_TPFLAGS_BASETYPE</name> <operator>|</operator> <name>Py_TPFLAGS_HAVE_ITER</name> <operator>|</operator>
      <name>Py_TPFLAGS_HAVE_GC</name> <operator>|</operator> <name>Py_TPFLAGS_HAVE_WEAKREFS</name></expr> ,
                <comment type="block">/*tp_flags*/</comment>
    <expr><name>cursorType_doc</name></expr>, <comment type="block">/*tp_doc*/</comment>
    <expr><operator>(</operator><name>traverseproc</name><operator>)</operator><name>cursor_traverse</name></expr>, <comment type="block">/*tp_traverse*/</comment>
    <expr><operator>(</operator><name>inquiry</name><operator>)</operator><name>cursor_clear</name></expr>, <comment type="block">/*tp_clear*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_richcompare*/</comment>
    <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>cursorObject</name></expr></argument>, <argument><expr><name>weakreflist</name></expr></argument>)</argument_list></call></expr>, <comment type="block">/*tp_weaklistoffset*/</comment>
    <expr><name>cursor_iter</name></expr>, <comment type="block">/*tp_iter*/</comment>
    <expr><name>cursor_next</name></expr>, <comment type="block">/*tp_iternext*/</comment>
    <expr><name>cursorObject_methods</name></expr>, <comment type="block">/*tp_methods*/</comment>
    <expr><name>cursorObject_members</name></expr>, <comment type="block">/*tp_members*/</comment>
    <expr><name>cursorObject_getsets</name></expr>, <comment type="block">/*tp_getset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_base*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dict*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_get*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_set*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dictoffset*/</comment>
    <expr><name>cursor_init</name></expr>, <comment type="block">/*tp_init*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_alloc*/</comment>
    <expr><name>cursor_new</name></expr>, <comment type="block">/*tp_new*/</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
