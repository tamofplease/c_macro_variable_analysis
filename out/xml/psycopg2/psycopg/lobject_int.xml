<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/lobject_int.c"><comment type="block">/* lobject_int.c - code used by the lobject object
 *
 * Copyright (C) 2006-2019 Federico Di Gregorio &lt;fog@debian.org&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCOPG_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/psycopg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/pqpath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>collect_error</name><parameter_list>(<parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>conn_set_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* Check if the mode passed to the large object is valid.
 * In case of success return a value &gt;= 0
 * On error return a value &lt; 0 and set an exception.
 *
 * Valid mode are [r|w|rw|n][t|b]
 */</comment>
<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>_lobject_parse_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"rw"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rv</name> <operator>|=</operator> <name>LOBJECT_READ</name> <operator>|</operator> <name>LOBJECT_WRITE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <switch>switch <condition>(<expr><name><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'r'</literal></expr>:</case>
            <expr_stmt><expr><name>rv</name> <operator>|=</operator> <name>LOBJECT_READ</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="char">'w'</literal></expr>:</case>
            <expr_stmt><expr><name>rv</name> <operator>|=</operator> <name>LOBJECT_WRITE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="char">'n'</literal></expr>:</case>
            <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>rv</name> <operator>|=</operator> <name>LOBJECT_READ</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <switch>switch <condition>(<expr><name><name>mode</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'t'</literal></expr>:</case>
            <expr_stmt><expr><name>rv</name> <operator>|=</operator> <name>LOBJECT_TEXT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="char">'b'</literal></expr>:</case>
            <expr_stmt><expr><name>rv</name> <operator>|=</operator> <name>LOBJECT_BINARY</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>rv</name> <operator>|=</operator> <name>LOBJECT_TEXT</name></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
            <argument><expr><literal type="string">"bad mode for lobject: '%s'"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Return a string representing the lobject mode.
 *
 * The return value is a new string allocated on the Python heap.
 *
 * The function must be called holding the GIL.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>_lobject_unparse_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

    <comment type="block">/* the longest is 'rwt' */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>=</operator> <name>buf</name> <operator>=</operator> <call><name>PyMem_Malloc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>LOBJECT_READ</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>c</name><operator>++</operator> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>LOBJECT_WRITE</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>c</name><operator>++</operator> <operator>=</operator> <literal type="char">'w'</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* neither read nor write */</comment>
        <expr_stmt><expr><operator>*</operator><name>c</name><operator>++</operator> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>LOBJECT_TEXT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>c</name><operator>++</operator> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>c</name><operator>++</operator> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* lobject_open - create a new/open an existing lo */</comment>

<function><type><name>RAISES_NEG</name> <name>int</name></type>
<name>lobject_open</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>connectionObject</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
              <parameter><decl><type><name>Oid</name></type> <name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>smode</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>new_oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>retvalue</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pgmode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <operator>(</operator><name>mode</name> <operator>=</operator> <call><name>_lobject_parse_mode</name><argument_list>(<argument><expr><name>smode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <call><name>pq_begin_locked</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retvalue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* if the oid is InvalidOid we create a new lob before opening it
       or we import a file from the FS, depending on the value of
       new_file */</comment>
    <if_stmt><if>if <condition>(<expr><name>oid</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>new_file</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>oid</name></name> <operator>=</operator> <call><name>lo_import</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name>new_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else <block>{<block_content>
            <comment type="block">/* Use lo_creat when possible to be more middleware-friendly.
               See ticket #88. */</comment>
            <if_stmt><if>if <condition>(<expr><name>new_oid</name> <operator>!=</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>oid</name></name> <operator>=</operator> <call><name>lo_create</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>oid</name></name> <operator>=</operator> <call><name>lo_creat</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name>INV_READ</name> <operator>|</operator> <name>INV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"lobject_open: large object created with oid = %u"</literal></expr></argument>,
                <argument><expr><name><name>self</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>oid</name></name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>collect_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <goto>goto <name>end</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>mode</name> <operator>&amp;</operator> <operator>~</operator><name>LOBJECT_READ</name><operator>)</operator> <operator>|</operator> <name>LOBJECT_WRITE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>oid</name></name> <operator>=</operator> <name>oid</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* if the oid is a real one we try to open with the given mode */</comment>
    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>LOBJECT_READ</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>pgmode</name> <operator>|=</operator> <name>INV_READ</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>LOBJECT_WRITE</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>pgmode</name> <operator>|=</operator> <name>INV_WRITE</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pgmode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>lo_open</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>pgmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"lobject_open: large object opened with mode = %i fd = %d"</literal></expr></argument>,
            <argument><expr><name>pgmode</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>collect_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <goto>goto <name>end</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* set the mode for future reference */</comment>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>Py_BLOCK_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>smode</name></name> <operator>=</operator> <call><name>_lobject_unparse_mode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>Py_UNBLOCK_THREADS</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>self</name><operator>-&gt;</operator><name>smode</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* exception already set */</comment>
        <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

 <label><name>end</name>:</label>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>Py_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>retvalue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pq_complete_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* if retvalue &gt; 0, an exception is already set */</comment>

    <return>return <expr><name>retvalue</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* lobject_close - close an existing lo */</comment>

<function><type><name>RAISES_NEG</name> <specifier>static</specifier> <name>int</name></type>
<name>lobject_close_locked</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>retvalue</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"lobject_close_locked: conn-&gt;closed %ld"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>closed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
        <comment type="block">/* Connection is open, go ahead */</comment>
        <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
        <comment type="block">/* Connection is closed, return a success */</comment>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>conn_set_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="string">"the connection is broken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>autocommit</name></name> <operator>||</operator>
        <name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>mark</name></name> <operator>!=</operator> <name><name>self</name><operator>-&gt;</operator><name>mark</name></name> <operator>||</operator>
        <name><name>self</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <call><name>lo_close</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retvalue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>collect_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>retvalue</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RAISES_NEG</name> <name>int</name></type>
<name>lobject_close</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>retvalue</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <call><name>lobject_close_locked</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>Py_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>retvalue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pq_complete_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>retvalue</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* lobject_unlink - remove an lo from database */</comment>

<function><type><name>RAISES_NEG</name> <name>int</name></type>
<name>lobject_unlink</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>retvalue</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <call><name>pq_begin_locked</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retvalue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* first we make sure the lobject is closed and then we unlink */</comment>
    <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <call><name>lobject_close_locked</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retvalue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <call><name>lo_unlink</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retvalue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>collect_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

 <label><name>end</name>:</label>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>Py_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>retvalue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pq_complete_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>retvalue</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* lobject_write - write bytes to a lo */</comment>

<function><type><name>RAISES_NEG</name> <name>Py_ssize_t</name></type>
<name>lobject_write</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>written</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"lobject_writing: fd = %d, len = "</literal> <name>FORMAT_CODE_SIZE_T</name></expr></argument>,
            <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>lo_write</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>collect_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>Py_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pq_complete_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>written</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* lobject_read - read bytes from a lo */</comment>

<function><type><name>RAISES_NEG</name> <name>Py_ssize_t</name></type>
<name>lobject_read</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n_read</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>n_read</name> <operator>=</operator> <call><name>lo_read</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>n_read</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>collect_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>Py_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>n_read</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pq_complete_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>n_read</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* lobject_seek - move the current position in the lo */</comment>

<function><type><name>RAISES_NEG</name> <name>Py_ssize_t</name></type>
<name>lobject_seek</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>where</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"lobject_seek: fd = %d, pos = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name> <literal type="string">", whence = %d"</literal></expr></argument>,
            <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LO64</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>server_version</name></name> <operator>&lt;</operator> <literal type="number">90300</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>where</name> <operator>=</operator> <operator>(</operator><name>Py_ssize_t</name><operator>)</operator><call><name>lo_lseek</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pos</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>where</name> <operator>=</operator> <operator>(</operator><name>Py_ssize_t</name><operator>)</operator><call><name>lo_lseek64</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>where</name> <operator>=</operator> <operator>(</operator><name>Py_ssize_t</name><operator>)</operator><call><name>lo_lseek</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pos</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"lobject_seek: where = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>where</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>collect_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>Py_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>where</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pq_complete_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>where</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* lobject_tell - tell the current position in the lo */</comment>

<function><type><name>RAISES_NEG</name> <name>Py_ssize_t</name></type>
<name>lobject_tell</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>where</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"lobject_tell: fd = %d"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LO64</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>server_version</name></name> <operator>&lt;</operator> <literal type="number">90300</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>where</name> <operator>=</operator> <operator>(</operator><name>Py_ssize_t</name><operator>)</operator><call><name>lo_tell</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>where</name> <operator>=</operator> <operator>(</operator><name>Py_ssize_t</name><operator>)</operator><call><name>lo_tell64</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>where</name> <operator>=</operator> <operator>(</operator><name>Py_ssize_t</name><operator>)</operator><call><name>lo_tell</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"lobject_tell: where = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>where</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>collect_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>Py_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>where</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pq_complete_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>where</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* lobject_export - export to a local file */</comment>

<function><type><name>RAISES_NEG</name> <name>int</name></type>
<name>lobject_export</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>retvalue</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <call><name>pq_begin_locked</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retvalue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <call><name>lo_export</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retvalue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>collect_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

 <label><name>end</name>:</label>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>Py_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>retvalue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pq_complete_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>retvalue</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RAISES_NEG</name> <name>int</name></type>
<name>lobject_truncate</name><parameter_list>(<parameter><decl><type><name>lobjectObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>retvalue</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"lobject_truncate: fd = %d, len = "</literal> <name>FORMAT_CODE_SIZE_T</name></expr></argument>,
            <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LO64</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>server_version</name></name> <operator>&lt;</operator> <literal type="number">90300</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <call><name>lo_truncate</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <call><name>lo_truncate64</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <call><name>lo_truncate</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>pgconn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"lobject_truncate: result = %d"</literal></expr></argument>, <argument><expr><name>retvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retvalue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>collect_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>Py_END_ALLOW_THREADS</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>retvalue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pq_complete_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>retvalue</name></expr>;</return>

</block_content>}</block></function>
</unit>
