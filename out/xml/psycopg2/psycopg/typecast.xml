<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/typecast.c"><comment type="block">/* typecast.c - basic utility functions related to typecasting
 *
 * Copyright (C) 2003-2019 Federico Di Gregorio &lt;fog@debian.org&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCOPG_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/psycopg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/typecast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/cursor.h"</cpp:file></cpp:include>

<comment type="block">/* useful function used by some typecasters */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>skip_until_space2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <while>while <condition>(<expr><operator>*</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>typecast_parse_date</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>,
                     <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>month</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>day</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>acc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>cz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_parse_date: len = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name> <literal type="string">", s = %s"</literal></expr></argument>,
      <argument><expr><operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name><name>cz</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>len</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
        <switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'-'</literal></expr>:</case>
        <case>case <expr><literal type="char">' '</literal></expr>:</case>
        <case>case <expr><literal type="char">'T'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>year</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>month</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>day</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>cz</name><operator>++</operator></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>acc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>acc</name><operator>*</operator><literal type="number">10</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>s</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>

        <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>acc</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>day</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cz</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Is this a BC date?  If so, adjust the year value.  However
     * Python datetime module does not support BC dates, so this will raise
     * an exception downstream. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><operator>*</operator><name>len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><operator>*</operator><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>year</name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>*</operator><name>year</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>cz</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>typecast_parse_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>,
                     <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>hh</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>mm</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>ss</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>us</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>tz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>acc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>cz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tzsign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>tzhh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tzmm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tzss</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>usd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* sets microseconds and timezone to 0 because they may be missing */</comment>
    <expr_stmt><expr><operator>*</operator><name>us</name> <operator>=</operator> <operator>*</operator><name>tz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_parse_time: len = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name> <literal type="string">", s = %s"</literal></expr></argument>,
      <argument><expr><operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name><name>cz</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">7</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>len</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
        <switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">':'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>hh</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>mm</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ss</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>us</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tzhh</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tzmm</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>cz</name><operator>++</operator></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="char">'.'</literal></expr>:</case>
            <comment type="block">/* we expect seconds and if we don't get them we return an error */</comment>
            <if_stmt><if>if <condition>(<expr><name>cz</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><operator>*</operator><name>ss</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>cz</name><operator>++</operator></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="char">'+'</literal></expr>:</case>
        <case>case <expr><literal type="char">'-'</literal></expr>:</case>
            <comment type="block">/* seconds or microseconds here, anything else is an error */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>cz</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>cz</name></expr></argument> &gt;</argument_list></name> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tzsign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if      <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ss</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>us</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>cz</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="char">' '</literal></expr>:</case>
        <case>case <expr><literal type="char">'B'</literal></expr>:</case>
        <case>case <expr><literal type="char">'C'</literal></expr>:</case>
            <comment type="block">/* Ignore the " BC" suffix, if passed -- it is handled
             * when parsing the date portion. */</comment>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>acc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>acc</name><operator>*</operator><literal type="number">10</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>s</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>usd</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block></switch>

        <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>acc</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>      <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>hh</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt> <expr_stmt><expr><name>cz</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>mm</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt> <expr_stmt><expr><name>cz</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>ss</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt> <expr_stmt><expr><name>cz</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>us</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt> <expr_stmt><expr><name>cz</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>tzhh</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt> <expr_stmt><expr><name>cz</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>tzmm</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt> <expr_stmt><expr><name>cz</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>cz</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tzss</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>tz</name> <operator>=</operator> <name>tzsign</name> <operator>*</operator> <operator>(</operator><literal type="number">3600</literal> <operator>*</operator> <name>tzhh</name> <operator>+</operator> <literal type="number">60</literal> <operator>*</operator> <name>tzmm</name> <operator>+</operator> <name>tzss</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>us</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <while>while <condition>(<expr><name>usd</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>us</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></while>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* 24:00:00 -&gt; 00:00:00 (ticket #278) */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>hh</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>hh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

    <return>return <expr><name>cz</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** include casting objects **/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/typecast_basic.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/typecast_binary.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/typecast_datetime.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/typecast_array.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name> <name>int</name></type> <name><name>typecast_default_DEFAULT</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>typecastObject_initlist</name></type> <name>typecast_default</name> <init>= <expr><block>{
    <expr><literal type="string">"DEFAULT"</literal></expr>, <expr><name>typecast_default_DEFAULT</name></expr>, <expr><name>typecast_STRING_cast</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>typecast_UNKNOWN_cast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>curs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_UNKNOWN_cast: str = '%s',"</literal>
            <literal type="string">" len = "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>typecast_default</name><operator>.</operator><name>cast</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>curs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/typecast_builtins.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_PYDATETIMEARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_PYDATETIMETZARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_PYDATEARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_PYTIMEARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typecast_PYINTERVALARRAY_cast</name></cpp:macro> <cpp:value>typecast_GENERIC_ARRAY_cast</cpp:value></cpp:define>

<comment type="block">/* a list of initializers, used to make the typecasters accessible anyway */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>typecastObject_initlist</name></type> <name><name>typecast_pydatetime</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"PYDATETIME"</literal></expr>, <expr><name>typecast_DATETIME_types</name></expr>, <expr><name>typecast_PYDATETIME_cast</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PYDATETIMETZ"</literal></expr>, <expr><name>typecast_DATETIMETZ_types</name></expr>, <expr><name>typecast_PYDATETIMETZ_cast</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PYTIME"</literal></expr>, <expr><name>typecast_TIME_types</name></expr>, <expr><name>typecast_PYTIME_cast</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PYDATE"</literal></expr>, <expr><name>typecast_DATE_types</name></expr>, <expr><name>typecast_PYDATE_cast</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PYINTERVAL"</literal></expr>, <expr><name>typecast_INTERVAL_types</name></expr>, <expr><name>typecast_PYINTERVAL_cast</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PYDATETIMEARRAY"</literal></expr>, <expr><name>typecast_DATETIMEARRAY_types</name></expr>, <expr><name>typecast_PYDATETIMEARRAY_cast</name></expr>, <expr><literal type="string">"PYDATETIME"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PYDATETIMETZARRAY"</literal></expr>, <expr><name>typecast_DATETIMETZARRAY_types</name></expr>, <expr><name>typecast_PYDATETIMETZARRAY_cast</name></expr>, <expr><literal type="string">"PYDATETIMETZ"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PYTIMEARRAY"</literal></expr>, <expr><name>typecast_TIMEARRAY_types</name></expr>, <expr><name>typecast_PYTIMEARRAY_cast</name></expr>, <expr><literal type="string">"PYTIME"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PYDATEARRAY"</literal></expr>, <expr><name>typecast_DATEARRAY_types</name></expr>, <expr><name>typecast_PYDATEARRAY_cast</name></expr>, <expr><literal type="string">"PYDATE"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"PYINTERVALARRAY"</literal></expr>, <expr><name>typecast_INTERVALARRAY_types</name></expr>, <expr><name>typecast_PYINTERVALARRAY_cast</name></expr>, <expr><literal type="string">"PYINTERVAL"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block" format="doxygen">/** the type dictionary and associated functions **/</comment>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>psyco_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>psyco_default_cast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>psyco_binary_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>psyco_default_binary_cast</name></decl>;</decl_stmt>


<comment type="block">/* typecast_init - initialize the dictionary and create default types */</comment>

<function><type><name>RAISES_NEG</name> <name>int</name></type>
<name>typecast_init</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>typecastObject</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dict</name> <operator>=</operator> <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <comment type="block">/* create type dictionary and put it in module namespace */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>psyco_types</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"string_types"</literal></expr></argument>, <argument><expr><name>psyco_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>psyco_binary_types</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"binary_types"</literal></expr></argument>, <argument><expr><name>psyco_binary_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* insert the cast types into the 'types' dictionary and register them in
       the module dictionary */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>typecast_builtins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>typecastObject</name> <operator>*</operator><operator>)</operator><call><name>typecast_from_c</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>typecast_builtins</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>typecast_add</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* export binary object */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>typecast_builtins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>values</name> <operator>==</operator> <name>typecast_BINARY_types</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>psyco_default_binary_cast</name> <operator>=</operator> <operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>t</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* create and save a default cast object (but do not register it) */</comment>
    <expr_stmt><expr><name>psyco_default_cast</name> <operator>=</operator> <call><name>typecast_from_c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>typecast_default</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* register the date/time typecasters with their original names */</comment>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>typecast_datetime_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>typecast_pydatetime</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>typecastObject</name> <operator>*</operator><operator>)</operator><call><name>typecast_from_c</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>typecast_pydatetime</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* typecast_add - add a type object to the dictionary */</comment>
<function><type><name>RAISES_NEG</name> <name>int</name></type>
<name>typecast_add</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>binary</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>typecastObject</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><operator>(</operator><name>typecastObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>dict</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>binary</name></expr> ?</condition><then> <expr><name>psyco_binary_types</name></expr> </then><else>: <expr><name>psyco_types</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/** typecast type **/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSETOF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(typecastObject, x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>typecast_cmp</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj1</name></decl></parameter>, <parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>obj2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>typecastObject</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>typecastObject</name><operator>*</operator><operator>)</operator><name>obj1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>typecastObject</name> <modifier>*</modifier></type><name>other</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>number</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>PyObject_TypeCheck</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typecastType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>other</name> <operator>=</operator> <operator>(</operator><name>typecastObject</name><operator>*</operator><operator>)</operator><name>obj2</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>PyNumber_Int</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"typecast_cmp: other = %p, number = %p"</literal></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>PyObject_Length</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>val</name> <init>= <expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>other</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>PyObject_Length</name><argument_list>(<argument><expr><name><name>other</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name><name>other</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>val</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><name>number</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>val</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>
<name>typecast_richcompare</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj1</name></decl></parameter>, <parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>obj2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>typecast_cmp</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>opid</name> <operator>==</operator> <name>Py_EQ</name> <operator>&amp;&amp;</operator> <name>res</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>opid</name> <operator>!=</operator> <name>Py_EQ</name> <operator>&amp;&amp;</operator> <name>res</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMemberDef</name></name></type> <name><name>typecastObject_members</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"name"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"values"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFFSETOF</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>typecast_clear</name><parameter_list>(<parameter><decl><type><name>typecastObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pcast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>bcast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>typecast_dealloc</name><parameter_list>(<parameter><decl><type><name>typecastObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>typecast_clear</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>tp_free</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>typecast_traverse</name><parameter_list>(<parameter><decl><type><name>typecastObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>visitproc</name></type> <name>visit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pcast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>bcast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>typecast_repr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><operator>(</operator><operator>(</operator><name>typecastObject</name> <operator>*</operator><operator>)</operator><name>self</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>name</name> <operator>=</operator> <call><name>psyco_ensure_bytes</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PyString_FromFormat</name><argument_list>(<argument><expr><literal type="string">"&lt;%s '%s' at %p&gt;"</literal></expr></argument>,
        <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tp_name</name></expr></argument>, <argument><expr><call><name>Bytes_AS_STRING</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>typecast_call</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"z#O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// If the string is not a string but a None value we're being called</comment>
    <comment type="line">// from a Python-defined caster.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>string</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>typecast_cast</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>typecastType</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
    <literal type="string">"psycopg2._psycopg.type"</literal></expr>,
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>typecastObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><operator>(</operator><name>destructor</name><operator>)</operator><name>typecast_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_print*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_reserved*/</comment>
    <expr><name>typecast_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_mapping*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_hash */</comment>
    <expr><name>typecast_call</name></expr>, <comment type="block">/*tp_call*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_str*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_buffer*/</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name> <operator>|</operator> <name>Py_TPFLAGS_HAVE_RICHCOMPARE</name> <operator>|</operator>
      <name>Py_TPFLAGS_HAVE_GC</name></expr>, <comment type="block">/*tp_flags*/</comment>
    <expr><literal type="string">"psycopg type-casting object"</literal></expr>, <comment type="block">/*tp_doc*/</comment>
    <expr><operator>(</operator><name>traverseproc</name><operator>)</operator><name>typecast_traverse</name></expr>, <comment type="block">/*tp_traverse*/</comment>
    <expr><operator>(</operator><name>inquiry</name><operator>)</operator><name>typecast_clear</name></expr>, <comment type="block">/*tp_clear*/</comment>
    <expr><name>typecast_richcompare</name></expr>, <comment type="block">/*tp_richcompare*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_weaklistoffset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iter*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iternext*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_methods*/</comment>
    <expr><name>typecastObject_members</name></expr>, <comment type="block">/*tp_members*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_base*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dict*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_get*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_set*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dictoffset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_init*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_alloc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_new*/</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>typecast_new</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>cast</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>typecastObject</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>PyObject_GC_New</name><argument_list>(<argument><expr><name>typecastObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typecastType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <name>values</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>pcast</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>ccast</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>bcast</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>bcast</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>bcast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* FIXME: raise an exception when None is passed as Python caster */</comment>
    <if_stmt><if>if <condition>(<expr><name>cast</name> <operator>&amp;&amp;</operator> <name>cast</name> <operator>!=</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>cast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>pcast</name></name> <operator>=</operator> <name>cast</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>PyObject_GC_Track</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>typecast_from_python</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keywds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>v</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cast</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"values"</literal></expr>, <expr><literal type="string">"name"</literal></expr>, <expr><literal type="string">"castobj"</literal></expr>, <expr><literal type="string">"baseobj"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>keywds</name></expr></argument>, <argument><expr><literal type="string">"O!|O!OO"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>PyTuple_Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>Text_Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>cast</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>typecast_new</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>cast</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>typecast_array_from_python</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keywds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>values</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>typecastObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"values"</literal></expr>, <expr><literal type="string">"name"</literal></expr>, <expr><literal type="string">"baseobj"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>keywds</name></expr></argument>, <argument><expr><literal type="string">"O!O!O!"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>PyTuple_Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>values</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>Text_Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>typecastType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>obj</name> <operator>=</operator> <operator>(</operator><name>typecastObject</name> <operator>*</operator><operator>)</operator><call><name>typecast_new</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>ccast</name></name> <operator>=</operator> <name>typecast_GENERIC_ARRAY_cast</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>pcast</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>typecast_from_c</name><parameter_list>(<parameter><decl><type><name>typecastObject_initlist</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>values</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>typecastObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* before doing anything else we look for the base */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* NOTE: base is a borrowed reference! */</comment>
        <expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>Error</name></expr></argument>, <argument><expr><literal type="string">"typecast base not found: %s"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>end</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>Text_FromUTF8</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

    <while>while <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

    <expr_stmt><expr><name>values</name> <operator>=</operator> <call><name>PyTuple_New</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>values</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>typecastObject</name> <operator>*</operator><operator>)</operator><call><name>typecast_new</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>ccast</name></name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>cast</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>pcast</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

 <label><name>end</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>typecast_cast</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>curs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>old</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>typecastObject</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>typecastObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>cursorObject</name><operator>*</operator><operator>)</operator><name>curs</name><operator>)</operator><operator>-&gt;</operator><name>caster</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>cursorObject</name><operator>*</operator><operator>)</operator><name>curs</name><operator>)</operator><operator>-&gt;</operator><name>caster</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>ccast</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>self</name><operator>-&gt;</operator><name>ccast</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>curs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>pcast</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
        <comment type="block">/* XXX we have bytes in the adapters and strings in the typecasters.
         * are you sure this is ok?
         * Notice that this way it is about impossible to create a python
         * typecaster on a binary type. */</comment>
        <if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>conn_decode</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>cursorObject</name> <operator>*</operator><operator>)</operator><name>curs</name><operator>)</operator><operator>-&gt;</operator><name>conn</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PyObject_CallFunctionObjArgs</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pcast</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>curs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>Error</name></expr></argument>, <argument><expr><literal type="string">"internal error: no casting function found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>cursorObject</name><operator>*</operator><operator>)</operator><name>curs</name><operator>)</operator><operator>-&gt;</operator><name>caster</name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
