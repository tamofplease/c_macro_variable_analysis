<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/adapter_qstring.c"><comment type="block">/* adapter_qstring.c - QuotedString objects
 *
 * Copyright (C) 2003-2019 Federico Di Gregorio &lt;fog@debian.org&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCOPG_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/psycopg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/adapter_qstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/microprotocols_proto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_encoding</name> <init>= <expr><literal type="string">"latin1"</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* qstring_quote - do the quote process on plain and unicode strings */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>qstring_quote</name><parameter_list>(<parameter><decl><type><name>qstringObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>qlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encoding</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>wrapped</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>str</name> <operator>=</operator> <call><name>conn_encode</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>wrapped</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name>encoding</name> <operator>=</operator> <ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>encoding</name></name></expr> ?</condition><then> <expr><name><name>self</name><operator>-&gt;</operator><name>encoding</name></name></expr> </then><else>: <expr><name>default_encoding</name></expr></else></ternary></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>str</name> <operator>=</operator> <call><name>PyUnicode_AsEncodedString</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>wrapped</name></name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>

    <comment type="block">/* if the wrapped object is a binary string, we don't know how to
       (re)encode it, so we pass it as-is */</comment>
    <if type="elseif">else if <condition>(<expr><call><name>Bytes_Check</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>wrapped</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>wrapped</name></name></expr>;</expr_stmt>
        <comment type="block">/* INCREF to make it ref-wise identical to unicode one */</comment>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="block">/* if the wrapped object is not a string, this is an error */</comment>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr><literal type="string">"can't quote non-string object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* encode the string into buffer */</comment>
    <expr_stmt><expr><call><name>Bytes_AsStringAndSize</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buffer</name> <operator>=</operator> <call><name>psyco_escape_string</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qlen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>qlen</name> <operator>&gt;</operator> <name>PY_SSIZE_T_MAX</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,
            <argument><expr><literal type="string">"PG buffer too large to fit in Python buffer."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>Bytes_FromStringAndSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* qstring_str, qstring_getquoted - return result of quoting */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>qstring_getquoted</name><parameter_list>(<parameter><decl><type><name>qstringObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>qstring_quote</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>self</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>qstring_str</name><parameter_list>(<parameter><decl><type><name>qstringObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>psyco_ensure_text</name><argument_list>(<argument><expr><call><name>qstring_getquoted</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>qstring_prepare</name><parameter_list>(<parameter><decl><type><name>qstringObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O!"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>connectionType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <operator>(</operator><name>connectionObject</name> <operator>*</operator><operator>)</operator><name>conn</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>qstring_conform</name><parameter_list>(<parameter><decl><type><name>qstringObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>proto</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>proto</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>proto</name> <operator>==</operator> <operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>isqlquoteType</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name>self</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>qstring_get_encoding</name><parameter_list>(<parameter><decl><type><name>qstringObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>conn_pgenc_to_pyenc</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <return>return <expr><call><name>Text_FromUTF8</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>encoding</name></name></expr> ?</condition><then> <expr><name><name>self</name><operator>-&gt;</operator><name>encoding</name></name></expr> </then><else>: <expr><name>default_encoding</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>qstring_set_encoding</name><parameter_list>(<parameter><decl><type><name>qstringObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pyenc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cenc</name></decl>;</decl_stmt>

    <comment type="block">/* get a C copy of the encoding (which may come from unicode) */</comment>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>pyenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pyenc</name> <operator>=</operator> <call><name>psyco_ensure_bytes</name><argument_list>(<argument><expr><name>pyenc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>Bytes_AsString</name><argument_list>(<argument><expr><name>pyenc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>psyco_strdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cenc</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"qstring_set_encoding: encoding set to %s"</literal></expr></argument>, <argument><expr><name>cenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>cenc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>pyenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** the QuotedString object **/</comment>

<comment type="block">/* object member list */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMemberDef</name></name></type> <name><name>qstringObject_members</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"adapted"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>qstringObject</name></expr></argument>, <argument><expr><name>wrapped</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"buffer"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>qstringObject</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* object method table */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>qstringObject_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"getquoted"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>qstring_getquoted</name></expr>, <expr><name>METH_NOARGS</name></expr>,
     <expr><literal type="string">"getquoted() -&gt; wrapped object value as SQL-quoted string"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"prepare"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>qstring_prepare</name></expr>, <expr><name>METH_VARARGS</name></expr>,
     <expr><literal type="string">"prepare(conn) -&gt; set encoding to conn-&gt;encoding and store conn"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"__conform__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>qstring_conform</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>  <comment type="block">/* Sentinel */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>qstringObject_getsets</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"encoding"</literal></expr>,
        <expr><operator>(</operator><name>getter</name><operator>)</operator><name>qstring_get_encoding</name></expr>,
        <expr><operator>(</operator><name>setter</name><operator>)</operator><name>qstring_set_encoding</name></expr>,
        <expr><literal type="string">"current encoding of the adapter"</literal></expr> }</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* initialization and finalization methods */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>qstring_setup</name><parameter_list>(<parameter><decl><type><name>qstringObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"qstring_setup: init qstring object at %p, refcnt = "</literal>
        <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
        <argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>wrapped</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"qstring_setup: good qstring object at %p, refcnt = "</literal>
        <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
        <argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>qstring_dealloc</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>qstringObject</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>qstringObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>wrapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"qstring_dealloc: deleted qstring object at %p, refcnt = "</literal>
        <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
        <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>tp_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>qstring_init</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>qstring_setup</name><argument_list>(<argument><expr><operator>(</operator><name>qstringObject</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>qstring_new</name><parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>type</name><operator>-&gt;</operator><name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* object type */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>qstringType_doc</name></cpp:macro> \
<cpp:value>"QuotedString(str) -&gt; new quoted object"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>qstringType</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
    <literal type="string">"psycopg2.extensions.QuotedString"</literal></expr>,
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>qstringObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><name>qstring_dealloc</name></expr>, <comment type="block">/*tp_dealloc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_print*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_repr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_mapping*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_hash */</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_call*/</comment>
    <expr><operator>(</operator><name>reprfunc</name><operator>)</operator><name>qstring_str</name></expr>, <comment type="block">/*tp_str*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_buffer*/</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name><operator>|</operator><name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/*tp_flags*/</comment>
    <expr><name>qstringType_doc</name></expr>, <comment type="block">/*tp_doc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_traverse*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_clear*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_richcompare*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_weaklistoffset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iter*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iternext*/</comment>
    <expr><name>qstringObject_methods</name></expr>, <comment type="block">/*tp_methods*/</comment>
    <expr><name>qstringObject_members</name></expr>, <comment type="block">/*tp_members*/</comment>
    <expr><name>qstringObject_getsets</name></expr>, <comment type="block">/*tp_getset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_base*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dict*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_get*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_set*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dictoffset*/</comment>
    <expr><name>qstring_init</name></expr>, <comment type="block">/*tp_init*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_alloc*/</comment>
    <expr><name>qstring_new</name></expr>, <comment type="block">/*tp_new*/</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
