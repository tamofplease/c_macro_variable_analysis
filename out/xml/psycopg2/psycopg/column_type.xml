<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/column_type.c"><comment type="block">/* column_type.c - python interface to cursor.description objects
 *
 * Copyright (C) 2018-2019  Daniele Varrazzo &lt;daniele.varrazzo@gmail.com&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCOPG_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/psycopg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/column.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>column_doc</name><index>[]</index></name> <init>=
    <expr><literal type="string">"Description of a column returned by a query.\n\n"</literal>
    <literal type="string">"The DBAPI demands this object to be a 7-items sequence. This object\n"</literal>
    <literal type="string">"respects this interface, but adds names for the exposed attributes\n"</literal>
    <literal type="string">"and adds attribute not requested by the DBAPI."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>name_doc</name><index>[]</index></name> <init>=
    <expr><literal type="string">"The name of the column returned."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>type_code_doc</name><index>[]</index></name> <init>=
    <expr><literal type="string">"The PostgreSQL OID of the column.\n\n"</literal>
    <literal type="string">"You can use the pg_type system table to get more informations about the\n"</literal>
    <literal type="string">"type. This is the value used by Psycopg to decide what Python type use\n"</literal>
    <literal type="string">"to represent the value"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>display_size_doc</name><index>[]</index></name> <init>=
    <expr><literal type="string">"The actual length of the column in bytes.\n\n"</literal>
    <literal type="string">"Obtaining this value is computationally intensive, so it is always None"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>internal_size_doc</name><index>[]</index></name> <init>=
    <expr><literal type="string">"The size in bytes of the column associated to this column on the server.\n\n"</literal>
    <literal type="string">"Set to a negative value for variable-size types."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>precision_doc</name><index>[]</index></name> <init>=
    <expr><literal type="string">"Total number of significant digits in columns of type NUMERIC.\n\n"</literal>
    <literal type="string">"None for other types."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>scale_doc</name><index>[]</index></name> <init>=
    <expr><literal type="string">"Count of decimal digits in the fractional part in columns of type NUMERIC.\n\n"</literal>
    <literal type="string">"None for other types."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>null_ok_doc</name><index>[]</index></name> <init>=
    <expr><literal type="string">"Always none."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>table_oid_doc</name><index>[]</index></name> <init>=
    <expr><literal type="string">"The OID of the table from which the column was fetched.\n\n"</literal>
    <literal type="string">"None if not available"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>table_column_doc</name><index>[]</index></name> <init>=
    <expr><literal type="string">"The number (within its table) of the column making up the result\n\n"</literal>
    <literal type="string">"None if not available. Note that PostgreSQL column numbers start at 1"</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>column_members</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"name"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>columnObject</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"type_code"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>columnObject</name></expr></argument>, <argument><expr><name>type_code</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>type_code_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"display_size"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>columnObject</name></expr></argument>, <argument><expr><name>display_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>display_size_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"internal_size"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>columnObject</name></expr></argument>, <argument><expr><name>internal_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>internal_size_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"precision"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>columnObject</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>precision_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"scale"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>columnObject</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>scale_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"null_ok"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>columnObject</name></expr></argument>, <argument><expr><name>null_ok</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>null_ok_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"table_oid"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>columnObject</name></expr></argument>, <argument><expr><name>table_oid</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>table_oid_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"table_column"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>columnObject</name></expr></argument>, <argument><expr><name>table_column</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>table_column_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>column_new</name><parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>type</name><operator>-&gt;</operator><name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>column_init</name><parameter_list>(<parameter><decl><type><name>columnObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>type_code</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>display_size</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>internal_size</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>precision</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>scale</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>null_ok</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>table_oid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>table_column</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{
        <expr><literal type="string">"name"</literal></expr>, <expr><literal type="string">"type_code"</literal></expr>, <expr><literal type="string">"display_size"</literal></expr>, <expr><literal type="string">"internal_size"</literal></expr>,
        <expr><literal type="string">"precision"</literal></expr>, <expr><literal type="string">"scale"</literal></expr>, <expr><literal type="string">"null_ok"</literal></expr>, <expr><literal type="string">"table_oid"</literal></expr>, <expr><literal type="string">"table_column"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"|OOOOOOOOO"</literal></expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type_code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>display_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>internal_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>precision</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>scale</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null_ok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_column</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>type_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>type_code</name></name> <operator>=</operator> <name>type_code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>display_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>display_size</name></name> <operator>=</operator> <name>display_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>internal_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>internal_size</name></name> <operator>=</operator> <name>internal_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>null_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>null_ok</name></name> <operator>=</operator> <name>null_ok</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>table_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>table_oid</name></name> <operator>=</operator> <name>table_oid</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>table_column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>table_column</name></name> <operator>=</operator> <name>table_column</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>column_dealloc</name><parameter_list>(<parameter><decl><type><name>columnObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>type_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>display_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>internal_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>null_ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>table_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>table_column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>tp_free</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>
<name>column_repr</name><parameter_list>(<parameter><decl><type><name>columnObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>format</name> <operator>=</operator> <call><name>Text_FromUTF8</name><argument_list>(<argument><expr><literal type="string">"Column(name=%r, type_code=%r)"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>args</name> <operator>=</operator> <call><name>PyTuple_New</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr> ?</condition><then> <expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>Py_None</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>type_code</name></name></expr> ?</condition><then> <expr><name><name>self</name><operator>-&gt;</operator><name>type_code</name></name></expr> </then><else>: <expr><name>Py_None</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>Text_Format</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>column_richcompare</name><parameter_list>(<parameter><decl><type><name>columnObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>other</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tself</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tself</name> <operator>=</operator> <call><name>PyObject_CallFunctionObjArgs</name><argument_list>(
            <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>PyTuple_Type</name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PyObject_RichCompare</name><argument_list>(<argument><expr><name>tself</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tself</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* column description can be accessed as a 7 items tuple for DBAPI compatibility */</comment>

<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>column_len</name><parameter_list>(<parameter><decl><type><name>columnObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><literal type="number">7</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>column_getitem</name><parameter_list>(<parameter><decl><type><name>columnObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>item</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>item</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <switch>switch <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>type_code</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>display_size</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><literal type="number">3</literal></expr>:</case>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>internal_size</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><literal type="number">4</literal></expr>:</case>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><literal type="number">5</literal></expr>:</case>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>scale</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><literal type="number">6</literal></expr>:</case>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>null_ok</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>, <argument><expr><literal type="string">"index out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rv</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>
<name>column_subscript</name><parameter_list>(<parameter><decl><type><name>columnObject</name><modifier>*</modifier></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* t = tuple(self) */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>t</name> <operator>=</operator> <call><name>PyObject_CallFunctionObjArgs</name><argument_list>(
            <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>PyTuple_Type</name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* rv = t[item] */</comment>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PyObject_GetItem</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>column_mapping</name> <init>= <expr><block>{
    <expr><operator>(</operator><name>lenfunc</name><operator>)</operator><name>column_len</name></expr>,            <comment type="block">/* mp_length */</comment>
    <expr><operator>(</operator><name>binaryfunc</name><operator>)</operator><name>column_subscript</name></expr>,   <comment type="block">/* mp_subscript */</comment>
    <expr><literal type="number">0</literal></expr>                               <comment type="block">/* mp_ass_subscript */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>column_sequence</name> <init>= <expr><block>{
    <expr><operator>(</operator><name>lenfunc</name><operator>)</operator><name>column_len</name></expr>,       <comment type="block">/* sq_length */</comment>
    <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* sq_concat */</comment>
    <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* sq_repeat */</comment>
    <expr><operator>(</operator><name>ssizeargfunc</name><operator>)</operator><name>column_getitem</name></expr>, <comment type="block">/* sq_item */</comment>
    <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* sq_slice */</comment>
    <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* sq_ass_item */</comment>
    <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* sq_ass_slice */</comment>
    <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* sq_contains */</comment>
    <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* sq_inplace_concat */</comment>
    <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* sq_inplace_repeat */</comment>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>column_getstate</name><parameter_list>(<parameter><decl><type><name>columnObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyObject_CallFunctionObjArgs</name><argument_list>(
        <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>PyTuple_Type</name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>column_setstate</name><parameter_list>(<parameter><decl><type><name>columnObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr><literal type="string">"state is not a tuple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>type_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>type_code</name></name> <operator>=</operator> <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>type_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>display_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>display_size</name></name> <operator>=</operator> <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>display_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>internal_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>internal_size</name></name> <operator>=</operator> <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>internal_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>null_ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>null_ok</name></name> <operator>=</operator> <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>null_ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>table_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>table_oid</name></name> <operator>=</operator> <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>table_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>table_column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>table_column</name></name> <operator>=</operator> <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>table_column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>column_methods</name><index>[]</index></name> <init>= <expr><block>{
    <comment type="block">/* Make Column picklable. */</comment>
    <expr><block>{<expr><literal type="string">"__getstate__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>column_getstate</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
    <expr><block>{<expr><literal type="string">"__setstate__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>column_setstate</name></expr>, <expr><name>METH_O</name></expr> }</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>columnType</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
    <literal type="string">"psycopg2.extensions.Column"</literal></expr>,
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>columnObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><operator>(</operator><name>destructor</name><operator>)</operator><name>column_dealloc</name></expr>, <comment type="block">/* tp_dealloc */</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_print*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr><operator>(</operator><name>reprfunc</name><operator>)</operator><name>column_repr</name></expr>, <comment type="block">/*tp_repr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr><operator>&amp;</operator><name>column_sequence</name></expr>, <comment type="block">/*tp_as_sequence*/</comment>
    <expr><operator>&amp;</operator><name>column_mapping</name></expr>,  <comment type="block">/*tp_as_mapping*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_hash */</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_call*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_str*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_buffer*/</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name><operator>|</operator><name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/*tp_flags*/</comment>
    <expr><name>column_doc</name></expr>, <comment type="block">/*tp_doc*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_traverse*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_clear*/</comment>
    <expr><operator>(</operator><name>richcmpfunc</name><operator>)</operator><name>column_richcompare</name></expr>, <comment type="block">/*tp_richcompare*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_weaklistoffset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iter*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iternext*/</comment>
    <expr><name>column_methods</name></expr>, <comment type="block">/*tp_methods*/</comment>
    <expr><name>column_members</name></expr>, <comment type="block">/*tp_members*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_base*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dict*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_get*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_set*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dictoffset*/</comment>
    <expr><operator>(</operator><name>initproc</name><operator>)</operator><name>column_init</name></expr>, <comment type="block">/*tp_init*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_alloc*/</comment>
    <expr><name>column_new</name></expr>, <comment type="block">/*tp_new*/</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
