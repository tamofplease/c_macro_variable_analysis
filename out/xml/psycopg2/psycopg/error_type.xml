<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/error_type.c"><comment type="block">/* error_type.c - python interface to the Error objects
 *
 * Copyright (C) 2013-2019  Daniele Varrazzo &lt;daniele.varrazzo@gmail.com&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCOPG_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/psycopg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/diagnostics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psycopg/pqpath.h"</cpp:file></cpp:include>


<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>error_text_from_chars</name><parameter_list>(<parameter><decl><type><name>errorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>psyco_text_from_chars_safe</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>pydecoder</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Return the Python exception corresponding to an SQLSTATE error
 * code.  A list of error codes can be found at:
 * https://www.postgresql.org/docs/current/static/errcodes-appendix.html
 */</comment>
<function><type><name>BORROWED</name> <name>PyObject</name> <modifier>*</modifier></type>
<name>exception_from_sqlstate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqlstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>exc</name></decl>;</decl_stmt>

    <comment type="block">/* First look up an exception of the proper class */</comment>
    <expr_stmt><expr><name>exc</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>sqlstate_errors</name></expr></argument>, <argument><expr><name>sqlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>exc</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>exc</name></expr>;</return>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>base_exception_from_sqlstate</name><argument_list>(<argument><expr><name>sqlstate</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>BORROWED</name> <name>PyObject</name> <modifier>*</modifier></type>
<name>base_exception_from_sqlstate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqlstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name><name>sqlstate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'0'</literal></expr>:</case>
        <switch>switch <condition>(<expr><name><name>sqlstate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'8'</literal></expr>:</case> <comment type="block">/* Class 08 - Connection Exception */</comment>
            <return>return <expr><name>OperationalError</name></expr>;</return>
        <case>case <expr><literal type="char">'A'</literal></expr>:</case> <comment type="block">/* Class 0A - Feature Not Supported */</comment>
            <return>return <expr><name>NotSupportedError</name></expr>;</return>
        </block_content>}</block></switch>
        <break>break;</break>
    <case>case <expr><literal type="char">'2'</literal></expr>:</case>
        <switch>switch <condition>(<expr><name><name>sqlstate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'0'</literal></expr>:</case> <comment type="block">/* Class 20 - Case Not Found */</comment>
        <case>case <expr><literal type="char">'1'</literal></expr>:</case> <comment type="block">/* Class 21 - Cardinality Violation */</comment>
            <return>return <expr><name>ProgrammingError</name></expr>;</return>
        <case>case <expr><literal type="char">'2'</literal></expr>:</case> <comment type="block">/* Class 22 - Data Exception */</comment>
            <return>return <expr><name>DataError</name></expr>;</return>
        <case>case <expr><literal type="char">'3'</literal></expr>:</case> <comment type="block">/* Class 23 - Integrity Constraint Violation */</comment>
            <return>return <expr><name>IntegrityError</name></expr>;</return>
        <case>case <expr><literal type="char">'4'</literal></expr>:</case> <comment type="block">/* Class 24 - Invalid Cursor State */</comment>
        <case>case <expr><literal type="char">'5'</literal></expr>:</case> <comment type="block">/* Class 25 - Invalid Transaction State */</comment>
            <return>return <expr><name>InternalError</name></expr>;</return>
        <case>case <expr><literal type="char">'6'</literal></expr>:</case> <comment type="block">/* Class 26 - Invalid SQL Statement Name */</comment>
        <case>case <expr><literal type="char">'7'</literal></expr>:</case> <comment type="block">/* Class 27 - Triggered Data Change Violation */</comment>
        <case>case <expr><literal type="char">'8'</literal></expr>:</case> <comment type="block">/* Class 28 - Invalid Authorization Specification */</comment>
            <return>return <expr><name>OperationalError</name></expr>;</return>
        <case>case <expr><literal type="char">'B'</literal></expr>:</case> <comment type="block">/* Class 2B - Dependent Privilege Descriptors Still Exist */</comment>
        <case>case <expr><literal type="char">'D'</literal></expr>:</case> <comment type="block">/* Class 2D - Invalid Transaction Termination */</comment>
        <case>case <expr><literal type="char">'F'</literal></expr>:</case> <comment type="block">/* Class 2F - SQL Routine Exception */</comment>
            <return>return <expr><name>InternalError</name></expr>;</return>
        </block_content>}</block></switch>
        <break>break;</break>
    <case>case <expr><literal type="char">'3'</literal></expr>:</case>
        <switch>switch <condition>(<expr><name><name>sqlstate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'4'</literal></expr>:</case> <comment type="block">/* Class 34 - Invalid Cursor Name */</comment>
            <return>return <expr><name>OperationalError</name></expr>;</return>
        <case>case <expr><literal type="char">'8'</literal></expr>:</case> <comment type="block">/* Class 38 - External Routine Exception */</comment>
        <case>case <expr><literal type="char">'9'</literal></expr>:</case> <comment type="block">/* Class 39 - External Routine Invocation Exception */</comment>
        <case>case <expr><literal type="char">'B'</literal></expr>:</case> <comment type="block">/* Class 3B - Savepoint Exception */</comment>
            <return>return <expr><name>InternalError</name></expr>;</return>
        <case>case <expr><literal type="char">'D'</literal></expr>:</case> <comment type="block">/* Class 3D - Invalid Catalog Name */</comment>
        <case>case <expr><literal type="char">'F'</literal></expr>:</case> <comment type="block">/* Class 3F - Invalid Schema Name */</comment>
            <return>return <expr><name>ProgrammingError</name></expr>;</return>
        </block_content>}</block></switch>
        <break>break;</break>
    <case>case <expr><literal type="char">'4'</literal></expr>:</case>
        <switch>switch <condition>(<expr><name><name>sqlstate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'0'</literal></expr>:</case> <comment type="block">/* Class 40 - Transaction Rollback */</comment>
            <return>return <expr><name>TransactionRollbackError</name></expr>;</return>
        <case>case <expr><literal type="char">'2'</literal></expr>:</case> <comment type="block">/* Class 42 - Syntax Error or Access Rule Violation */</comment>
        <case>case <expr><literal type="char">'4'</literal></expr>:</case> <comment type="block">/* Class 44 - WITH CHECK OPTION Violation */</comment>
            <return>return <expr><name>ProgrammingError</name></expr>;</return>
        </block_content>}</block></switch>
        <break>break;</break>
    <case>case <expr><literal type="char">'5'</literal></expr>:</case>
        <comment type="block">/* Class 53 - Insufficient Resources
           Class 54 - Program Limit Exceeded
           Class 55 - Object Not In Prerequisite State
           Class 57 - Operator Intervention
           Class 58 - System Error (errors external to PostgreSQL itself) */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><literal type="string">"57014"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>QueryCanceledError</name></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><name>OperationalError</name></expr>;</return></block_content></block></else></if_stmt>
    <case>case <expr><literal type="char">'F'</literal></expr>:</case> <comment type="block">/* Class F0 - Configuration File Error */</comment>
        <return>return <expr><name>InternalError</name></expr>;</return>
    <case>case <expr><literal type="char">'H'</literal></expr>:</case> <comment type="block">/* Class HV - Foreign Data Wrapper Error (SQL/MED) */</comment>
        <return>return <expr><name>OperationalError</name></expr>;</return>
    <case>case <expr><literal type="char">'P'</literal></expr>:</case> <comment type="block">/* Class P0 - PL/pgSQL Error */</comment>
        <return>return <expr><name>InternalError</name></expr>;</return>
    <case>case <expr><literal type="char">'X'</literal></expr>:</case> <comment type="block">/* Class XX - Internal Error */</comment>
        <return>return <expr><name>InternalError</name></expr>;</return>
    </block_content>}</block></switch>
    <comment type="block">/* return DatabaseError as a fallback */</comment>
    <return>return <expr><name>DatabaseError</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pgerror_doc</name><index>[]</index></name> <init>=
    <expr><literal type="string">"The error message returned by the backend, if available, else None"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pgcode_doc</name><index>[]</index></name> <init>=
    <expr><literal type="string">"The error code returned by the backend, if available, else None"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>cursor_doc</name><index>[]</index></name> <init>=
    <expr><literal type="string">"The cursor that raised the exception, if available, else None"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>diag_doc</name><index>[]</index></name> <init>=
    <expr><literal type="string">"A Diagnostics object to get further information about the error"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>error_members</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"pgerror"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>errorObject</name></expr></argument>, <argument><expr><name>pgerror</name></expr></argument>)</argument_list></call></expr>,
        <expr><name>READONLY</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pgerror_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"pgcode"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>errorObject</name></expr></argument>, <argument><expr><name>pgcode</name></expr></argument>)</argument_list></call></expr>,
        <expr><name>READONLY</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pgcode_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"cursor"</literal></expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>errorObject</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>,
        <expr><name>READONLY</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cursor_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>error_new</name><parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>PyTypeObject</name> <operator>*</operator><operator>)</operator><name>PyExc_StandardError</name><operator>)</operator><operator>-&gt;</operator><call><name>tp_new</name><argument_list>(
            <argument><expr><name>type</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>error_init</name><parameter_list>(<parameter><decl><type><name>errorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>PyTypeObject</name> <operator>*</operator><operator>)</operator><name>PyExc_StandardError</name><operator>)</operator><operator>-&gt;</operator><call><name>tp_init</name><argument_list>(
            <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>error_traverse</name><parameter_list>(<parameter><decl><type><name>errorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>visitproc</name></type> <name>visit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pydecoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><operator>(</operator><name>PyTypeObject</name> <operator>*</operator><operator>)</operator><name>PyExc_StandardError</name><operator>)</operator><operator>-&gt;</operator><call><name>tp_traverse</name><argument_list>(
        <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>, <argument><expr><name>visit</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>error_clear</name><parameter_list>(<parameter><decl><type><name>errorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pydecoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><operator>(</operator><name>PyTypeObject</name> <operator>*</operator><operator>)</operator><name>PyExc_StandardError</name><operator>)</operator><operator>-&gt;</operator><call><name>tp_clear</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>error_dealloc</name><parameter_list>(<parameter><decl><type><name>errorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>error_clear</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CLEARPGRES</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>tp_free</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>error_get_diag</name><parameter_list>(<parameter><decl><type><name>errorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyObject_CallFunctionObjArgs</name><argument_list>(
        <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>diagnosticsType</name></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyGetSetDef</name></name></type> <name><name>error_getsets</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"diag"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>error_get_diag</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>diag_doc</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* Error.__reduce__
 *
 * The method is required to make exceptions picklable: set the cursor
 * attribute to None. Only working from Py 2.5: previous versions
 * would require implementing __getstate__, and as of 2012 it's a little
 * bit too late to care. */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>error_reduce</name><parameter_list>(<parameter><decl><type><name>errorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>meth</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>meth</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><literal type="string">"__reduce__"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tuple</name> <operator>=</operator> <call><name>PyObject_CallFunctionObjArgs</name><argument_list>(<argument><expr><name>meth</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* tuple is (type, args): convert it to (type, args, dict)
     * with our extra items in the dict.
     *
     * If these checks fail, we can still return a valid object. Pickle
     * will likely fail downstream, but there's nothing else we can do here */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <goto>goto <name>exit</name>;</goto> </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dict</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>pgerror</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"pgerror"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgerror</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <goto>goto <name>error</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>pgcode</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"pgcode"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgcode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <goto>goto <name>error</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <block>{<block_content>
        <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>newtuple</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newtuple</name> <operator>=</operator> <call><name>PyTuple_Pack</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,
                <argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>dict</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>error</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tuple</name> <operator>=</operator> <name>newtuple</name></expr>;</expr_stmt>
    </block_content>}</block>

<label><name>exit</name>:</label>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>tuple</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tuple</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>error</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>meth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>error_setstate</name><parameter_list>(<parameter><decl><type><name>errorObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* we don't call the StandartError's setstate as it would try to load the
     * dict content as attributes */</comment>

    <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyDict_Check</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr><literal type="string">"state is not a dictionary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* load the dict content in the structure */</comment>
    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pgerror</name></name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"pgerror"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pgcode</name></name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"pgcode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>pgcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* We never expect a cursor in the state as it's not picklable.
     * at most there could be a None here, coming from Psycopg &lt; 2.5 */</comment>

<label><name>exit</name>:</label>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>error_methods</name><index>[]</index></name> <init>= <expr><block>{
    <comment type="block">/* Make Error and all its subclasses picklable. */</comment>
    <expr><block>{<expr><literal type="string">"__reduce__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>error_reduce</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
    <expr><block>{<expr><literal type="string">"__setstate__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>error_setstate</name></expr>, <expr><name>METH_O</name></expr> }</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>errorType</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
    <literal type="string">"psycopg2.Error"</literal></expr>,
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>errorObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><operator>(</operator><name>destructor</name><operator>)</operator><name>error_dealloc</name></expr>, <comment type="block">/* tp_dealloc */</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_print*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_compare*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_repr*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_number*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_sequence*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_mapping*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_hash */</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_call*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_str*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_getattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_setattro*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_as_buffer*/</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name><operator>|</operator><name>Py_TPFLAGS_BASETYPE</name><operator>|</operator><name>Py_TPFLAGS_HAVE_GC</name></expr>, <comment type="block">/*tp_flags*/</comment>
    <expr><name>Error_doc</name></expr>, <comment type="block">/*tp_doc*/</comment>
    <expr><operator>(</operator><name>traverseproc</name><operator>)</operator><name>error_traverse</name></expr>, <comment type="block">/*tp_traverse*/</comment>
    <expr><operator>(</operator><name>inquiry</name><operator>)</operator><name>error_clear</name></expr>, <comment type="block">/*tp_clear*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_richcompare*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_weaklistoffset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iter*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_iternext*/</comment>
    <expr><name>error_methods</name></expr>, <comment type="block">/*tp_methods*/</comment>
    <expr><name>error_members</name></expr>, <comment type="block">/*tp_members*/</comment>
    <expr><name>error_getsets</name></expr>, <comment type="block">/*tp_getset*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_base Will be set to StandardError in module init */</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dict*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_get*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_descr_set*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_dictoffset*/</comment>
    <expr><operator>(</operator><name>initproc</name><operator>)</operator><name>error_init</name></expr>, <comment type="block">/*tp_init*/</comment>
    <expr><literal type="number">0</literal></expr>,          <comment type="block">/*tp_alloc*/</comment>
    <expr><name>error_new</name></expr>, <comment type="block">/*tp_new*/</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
