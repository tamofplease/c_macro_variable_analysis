<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/psycopg2/psycopg/typecast_binary.c"><comment type="block">/* typecast_binary.c - binary typecasting functions to python types
 *
 * Copyright (C) 2001-2019 Federico Di Gregorio &lt;fog@debian.org&gt;
 * Copyright (C) 2020-2021 The Psycopg Team
 *
 * This file is part of psycopg.
 *
 * psycopg2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link this program with the OpenSSL library (or with
 * modified versions of OpenSSL that use the same license as OpenSSL),
 * and distribute linked combinations including the two.
 *
 * You must obey the GNU Lesser General Public License in all respects for
 * all of the code used other than OpenSSL.
 *
 * psycopg2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"typecast_binary.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>


<comment type="block">/* Python object holding a memory chunk. The memory is deallocated when
   the object is destroyed. This type is used to let users directly access
   memory chunks holding unescaped binary data through the buffer interface.
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_dealloc</name><parameter_list>(<parameter><decl><type><name>chunkObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Dprintf</name><argument_list>(<argument><expr><literal type="string">"chunk_dealloc: deallocating memory at %p, size "</literal>
        <name>FORMAT_CODE_PY_SSIZE_T</name></expr></argument>,
        <argument><expr><name><name>self</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>len</name></name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>tp_free</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>chunk_repr</name><parameter_list>(<parameter><decl><type><name>chunkObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PyString_FromFormat</name><argument_list>(
        <argument><expr><literal type="string">"&lt;memory chunk at %p size "</literal> <name>FORMAT_CODE_PY_SSIZE_T</name> <literal type="string">"&gt;"</literal></expr></argument>,
        <argument><expr><name><name>self</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>len</name></name></expr></argument>
      )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 3.0 buffer interface */</comment>
<function><type><name>int</name></type> <name>chunk_getbuffer</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>, <parameter><decl><type><name>Py_buffer</name> <modifier>*</modifier></type><name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>chunkObject</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>chunkObject</name><operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PyBuffer_FillInfo</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>_self</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>view</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <literal type="string">"c"</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyBufferProcs</name></type> <name>chunk_as_buffer</name> <init>=
<expr><block>{
    <expr><name>chunk_getbuffer</name></expr>,
    <expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chunk_doc</name></cpp:macro> <cpp:value>"memory chunk"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>chunkType</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
    <literal type="string">"psycopg2._psycopg.chunk"</literal></expr>,
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>chunkObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><operator>(</operator><name>destructor</name><operator>)</operator> <name>chunk_dealloc</name></expr>, <comment type="block">/* tp_dealloc*/</comment>
    <expr><literal type="number">0</literal></expr>,                          <comment type="block">/* tp_print */</comment>
    <expr><literal type="number">0</literal></expr>,                          <comment type="block">/* tp_getattr */</comment>
    <expr><literal type="number">0</literal></expr>,                          <comment type="block">/* tp_setattr */</comment>
    <expr><literal type="number">0</literal></expr>,                          <comment type="block">/* tp_compare */</comment>
    <expr><operator>(</operator><name>reprfunc</name><operator>)</operator> <name>chunk_repr</name></expr>,      <comment type="block">/* tp_repr */</comment>
    <expr><literal type="number">0</literal></expr>,                          <comment type="block">/* tp_as_number */</comment>
    <expr><literal type="number">0</literal></expr>,                          <comment type="block">/* tp_as_sequence */</comment>
    <expr><literal type="number">0</literal></expr>,                          <comment type="block">/* tp_as_mapping */</comment>
    <expr><literal type="number">0</literal></expr>,                          <comment type="block">/* tp_hash */</comment>
    <expr><literal type="number">0</literal></expr>,                          <comment type="block">/* tp_call */</comment>
    <expr><literal type="number">0</literal></expr>,                          <comment type="block">/* tp_str */</comment>
    <expr><literal type="number">0</literal></expr>,                          <comment type="block">/* tp_getattro */</comment>
    <expr><literal type="number">0</literal></expr>,                          <comment type="block">/* tp_setattro */</comment>
    <expr><operator>&amp;</operator><name>chunk_as_buffer</name></expr>,           <comment type="block">/* tp_as_buffer */</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name><operator>|</operator><name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/* tp_flags */</comment>
    <expr><name>chunk_doc</name></expr>                   <comment type="block">/* tp_doc */</comment>
}</block></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_hex</name><parameter_list>(
        <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bufin</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>sizein</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name> <modifier>*</modifier></type><name>sizeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_escape</name><parameter_list>(
        <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bufin</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>sizein</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name> <modifier>*</modifier></type><name>sizeout</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* The function is not static and not hidden as we use ctypes to test it. */</comment>
<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>typecast_BINARY_cast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>curs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>chunkObject</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* This is a buffer escaped in hex format: libpq before 9.0 can't
         * parse it and we can't detect reliably the libpq version at runtime.
         * So the only robust option is to parse it ourselves - luckily it's
         * an easy format.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>buffer</name> <operator>=</operator> <call><name>parse_hex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <comment type="block">/* This is a buffer in the classic bytea format. So we can handle it
         * to the PQunescapeBytea to have it parsed, right? ...Wrong. We
         * could, but then we'd have to record whether buffer was allocated by
         * Python or by the libpq to dispose it properly. Furthermore the
         * PQunescapeBytea interface is not the most brilliant as it wants a
         * null-terminated string even if we have known its length thus
         * requiring a useless memcpy and strlen.
         * So we'll just have our better integrated parser, let's finish this
         * story.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>buffer</name> <operator>=</operator> <call><name>parse_escape</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>chunk</name> <operator>=</operator> <operator>(</operator><name>chunkObject</name> <operator>*</operator><operator>)</operator> <call><name>PyObject_New</name><argument_list>(<argument><expr><name>chunkObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chunkType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>chunk</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* **Transfer** ownership of buffer's memory to the chunkObject: */</comment>
    <expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>Py_ssize_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>PyMemoryView_FromObject</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name>chunk</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>hex_lut</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
     <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Parse a bytea output buffer encoded in 'hex' format.
 *
 * the format is described in
 * https://www.postgresql.org/docs/current/static/datatype-binary.html
 *
 * Parse the buffer in 'bufin', whose length is 'sizein'.
 * Return a new buffer allocated by PyMem_Malloc and set 'sizeout' to its size.
 * In case of error set an exception and return NULL.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>parse_hex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bufin</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>sizein</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name> <modifier>*</modifier></type><name>sizeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bufend</name> <init>= <expr><name>bufin</name> <operator>+</operator> <name>sizein</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pi</name> <init>= <expr><name>bufin</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>     <comment type="block">/* past the \x */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>po</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>po</name> <operator>=</operator> <name>bufout</name> <operator>=</operator> <call><name>PyMem_Malloc</name><argument_list>(<argument><expr><operator>(</operator><name>sizein</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* output size upper bound */</comment>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>bufout</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Implementation note: we call this function upon database response, not
     * user input (because we are parsing the output format of a buffer) so we
     * don't expect errors. On bad input we reserve the right to return a bad
     * output, not an error.
     */</comment>
    <while>while <condition>(<expr><name>pi</name> <operator>&lt;</operator> <name>bufend</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name>c</name> <operator>=</operator> <name><name>hex_lut</name><index>[<expr><operator>*</operator><name>pi</name><operator>++</operator> <operator>&amp;</operator> <literal type="char">'\x7f'</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>pi</name> <operator>&gt;=</operator> <name>bufend</name></expr>)</condition> <block>{<block_content> <goto>goto <name>endloop</name>;</goto> </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><operator>*</operator><name>po</name> <operator>=</operator> <name>c</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

        <while>while <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name>c</name> <operator>=</operator> <name><name>hex_lut</name><index>[<expr><operator>*</operator><name>pi</name><operator>++</operator> <operator>&amp;</operator> <literal type="char">'\x7f'</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>pi</name> <operator>&gt;=</operator> <name>bufend</name></expr>)</condition> <block>{<block_content> <goto>goto <name>endloop</name>;</goto> </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><operator>*</operator><name>po</name><operator>++</operator> <operator>|=</operator> <name>c</name></expr>;</expr_stmt>
    </block_content>}</block></while>
<label><name>endloop</name>:</label>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>bufout</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>sizeout</name> <operator>=</operator> <name>po</name> <operator>-</operator> <name>bufout</name></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Parse a bytea output buffer encoded in 'escape' format.
 *
 * the format is described in
 * https://www.postgresql.org/docs/current/static/datatype-binary.html
 *
 * Parse the buffer in 'bufin', whose length is 'sizein'.
 * Return a new buffer allocated by PyMem_Malloc and set 'sizeout' to its size.
 * In case of error set an exception and return NULL.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>parse_escape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bufin</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>sizein</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name> <modifier>*</modifier></type><name>sizeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bufend</name> <init>= <expr><name>bufin</name> <operator>+</operator> <name>sizein</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pi</name> <init>= <expr><name>bufin</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>po</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>po</name> <operator>=</operator> <name>bufout</name> <operator>=</operator> <call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>sizein</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* output size upper bound */</comment>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>bufout</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><name>pi</name> <operator>&lt;</operator> <name>bufend</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pi</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Unescaped char */</comment>
            <expr_stmt><expr><operator>*</operator><name>po</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pi</name><operator>++</operator></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>pi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'3'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><name><name>pi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>pi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'7'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><name><name>pi</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>pi</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'7'</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Escaped octal value */</comment>
            <expr_stmt><expr><operator>*</operator><name>po</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>pi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>
                    <operator>(</operator><operator>(</operator><name><name>pi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator>
                    <operator>(</operator><operator>(</operator><name><name>pi</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>pi</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <comment type="block">/* Escaped char */</comment>
            <expr_stmt><expr><operator>*</operator><name>po</name><operator>++</operator> <operator>=</operator> <name><name>pi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pi</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>bufout</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>sizeout</name> <operator>=</operator> <name>po</name> <operator>-</operator> <name>bufout</name></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
