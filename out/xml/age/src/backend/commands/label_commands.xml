<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/age/src/backend/commands/label_commands.c"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/dependency.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/objectaddress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class_d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/sequence.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/tablecmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/parsenodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/plannodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/primnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lockdefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/dest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/ag_graph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/ag_label.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/label_commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ag_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/agtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/graphid.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Relation name doesn't have to be label name but the same name is used so
 * that users can find the backed relation for a label only by its name.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gen_label_relation_name</name><parameter_list>(<parameter><type><name>label_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(label_name)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>create_table_for_label</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name</name></decl></parameter>,
                                   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl></parameter>,
                                   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_name</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>label_type</name></decl></parameter>,
                                   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>parents</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// common</comment>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>create_edge_table_elements</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name</name></decl></parameter>,
                                        <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl></parameter>,
                                        <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>create_vertex_table_elements</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name</name></decl></parameter>,
                                          <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl></parameter>,
                                          <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>create_sequence_for_label</name><parameter_list>(<parameter><decl><type><name>RangeVar</name> <modifier>*</modifier></type><name>seq_range_var</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Constraint</name> <modifier>*</modifier></type><name>build_pk_constraint</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Constraint</name> <modifier>*</modifier></type><name>build_id_default</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name</name></decl></parameter>,
                                    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FuncCall</name> <modifier>*</modifier></type><name>build_id_default_func_expr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name</name></decl></parameter>,
                                            <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Constraint</name> <modifier>*</modifier></type><name>build_not_null_constraint</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Constraint</name> <modifier>*</modifier></type><name>build_properties_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>alter_sequence_owned_by_for_label</name><parameter_list>(<parameter><decl><type><name>RangeVar</name> <modifier>*</modifier></type><name>seq_range_var</name></decl></parameter>,
                                              <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>get_new_label_id</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>graph_oid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>nsp_id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>change_label_id_default</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name</name></decl></parameter>,
                                    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_name</name></decl></parameter>,
                                    <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// drop</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>remove_relation</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>qname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>range_var_callback_for_remove_relation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RangeVar</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
                                                   <parameter><decl><type><name>Oid</name></type> <name>rel_oid</name></decl></parameter>,
                                                   <parameter><decl><type><name>Oid</name></type> <name>odl_rel_oid</name></decl></parameter>,
                                                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>create_vlabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * This is a callback function
 * This function will be called when the user will call SELECT create_vlabel.
 * The function takes two parameters
 * 1. Graph name
 * 2. Label Name
 * Function will create a vertex label
 * Function returns an error if graph or label names or not provided
*/</comment>

<function><type><name>Datum</name></type> <name>create_vlabel</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Name</name></type> <name>graph_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name_str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>graph_oid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>RangeVar</name> <modifier>*</modifier></type><name>rv</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Name</name></type> <name>label_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name_str</name></decl>;</decl_stmt>

    <comment type="line">// checking if user has not provided the graph name</comment>
    <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"graph name must not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// checking if user has not provided the label name</comment>
    <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"label name must not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>graph_name</name> <operator>=</operator> <call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>label_name</name> <operator>=</operator> <call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>graph_name_str</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>label_name_str</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>label_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check if graph does not exist</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>graph_exists</name><argument_list>(<argument><expr><name>graph_name_str</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_SCHEMA</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"graph \"%s\" does not exist."</literal></expr></argument>, <argument><expr><name>graph_name_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>graph_oid</name> <operator>=</operator> <call><name>get_graph_oid</name><argument_list>(<argument><expr><name>graph_name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check if label with the input name already exists</comment>
    <if_stmt><if>if <condition>(<expr><call><name>label_exists</name><argument_list>(<argument><expr><name>label_name_str</name></expr></argument>, <argument><expr><name>graph_oid</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_SCHEMA</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"label \"%s\" already exists"</literal></expr></argument>, <argument><expr><name>label_name_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//Create the default label tables</comment>
    <expr_stmt><expr><name>graph</name> <operator>=</operator> <name><name>graph_name</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>label_name</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>get_label_range_var</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>graph_oid</name></expr></argument>, <argument><expr><name>AG_DEFAULT_LABEL_VERTEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>create_label</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>LABEL_TYPE_VERTEX</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
            <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"VLabel \"%s\" has been created"</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>label_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>create_elabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * This is a callback function
 * This function will be called when the user will call SELECT create_elabel.
 * The function takes two parameters
 * 1. Graph name
 * 2. Label Name
 * Function will create an edge label
 * Function returns an error if graph or label names or not provided
*/</comment>

<function><type><name>Datum</name></type> <name>create_elabel</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Name</name></type> <name>graph_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name_str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>graph_oid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>RangeVar</name> <modifier>*</modifier></type><name>rv</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Name</name></type> <name>label_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name_str</name></decl>;</decl_stmt>

    <comment type="line">// checking if user has not provided the graph name</comment>
    <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"graph name must not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// checking if user has not provided the label name</comment>
    <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"label name must not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>graph_name</name> <operator>=</operator> <call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>label_name</name> <operator>=</operator> <call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>graph_name_str</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>label_name_str</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>label_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check if graph does not exist</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>graph_exists</name><argument_list>(<argument><expr><name>graph_name_str</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_SCHEMA</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"graph \"%s\" does not exist."</literal></expr></argument>, <argument><expr><name>graph_name_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>graph_oid</name> <operator>=</operator> <call><name>get_graph_oid</name><argument_list>(<argument><expr><name>graph_name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check if label with the input name already exists</comment>
    <if_stmt><if>if <condition>(<expr><call><name>label_exists</name><argument_list>(<argument><expr><name>label_name_str</name></expr></argument>, <argument><expr><name>graph_oid</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_SCHEMA</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"label \"%s\" already exists"</literal></expr></argument>, <argument><expr><name>label_name_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//Create the default label tables</comment>
    <expr_stmt><expr><name>graph</name> <operator>=</operator> <name><name>graph_name</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>label_name</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>get_label_range_var</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>graph_oid</name></expr></argument>, <argument><expr><name>AG_DEFAULT_LABEL_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>create_label</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>LABEL_TYPE_EDGE</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
            <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ELabel \"%s\" has been created"</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>label_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * For the new label, create an entry in ag_catalog.ag_label, create a
 * new table and sequence. Returns the oid from the new tuple in
 * ag_catalog.ag_label.
 */</comment>
<function><type><name>Oid</name></type> <name>create_label</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>label_type</name></decl></parameter>,
                 <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>parents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>graph_cache_data</name> <modifier>*</modifier></type><name>cache_data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>graph_oid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>nsp_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RangeVar</name> <modifier>*</modifier></type><name>seq_range_var</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>label_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>relation_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>label_oid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cache_data</name> <operator>=</operator> <call><name>search_graph_name_cache</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache_data</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_SCHEMA</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"graph \"%s\" does not exist"</literal></expr></argument>, <argument><expr><name>graph_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>graph_oid</name> <operator>=</operator> <name><name>cache_data</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsp_id</name> <operator>=</operator> <name><name>cache_data</name><operator>-&gt;</operator><name>namespace</name></name></expr>;</expr_stmt>

    <comment type="line">// create a sequence for the new label to generate unique IDs for vertices</comment>
    <expr_stmt><expr><name>schema_name</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name>nsp_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rel_name</name> <operator>=</operator> <call><name>gen_label_relation_name</name><argument_list>(<argument><expr><name>label_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>seq_name</name> <operator>=</operator> <call><name>ChooseRelationName</name><argument_list>(<argument><expr><name>rel_name</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"seq"</literal></expr></argument>, <argument><expr><name>nsp_id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>seq_range_var</name> <operator>=</operator> <call><name>makeRangeVar</name><argument_list>(<argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>seq_name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>create_sequence_for_label</name><argument_list>(<argument><expr><name>seq_range_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// create a table for the new label</comment>
    <expr_stmt><expr><call><name>create_table_for_label</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>, <argument><expr><name>label_name</name></expr></argument>, <argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>rel_name</name></expr></argument>,
                           <argument><expr><name>seq_name</name></expr></argument>, <argument><expr><name>label_type</name></expr></argument>, <argument><expr><name>parents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// record the new label in ag_label</comment>
    <expr_stmt><expr><name>relation_id</name> <operator>=</operator> <call><name>get_relname_relid</name><argument_list>(<argument><expr><name>rel_name</name></expr></argument>, <argument><expr><name>nsp_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If a label has parents, switch the parents id default, with its own.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>parents</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>change_label_id_default</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>, <argument><expr><name>label_name</name></expr></argument>, <argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>seq_name</name></expr></argument>,
                                <argument><expr><name>relation_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// associate the sequence with the "id" column</comment>
    <expr_stmt><expr><call><name>alter_sequence_owned_by_for_label</name><argument_list>(<argument><expr><name>seq_range_var</name></expr></argument>, <argument><expr><name>rel_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// get a new "id" for the new label</comment>
    <expr_stmt><expr><name>label_id</name> <operator>=</operator> <call><name>get_new_label_id</name><argument_list>(<argument><expr><name>graph_oid</name></expr></argument>, <argument><expr><name>nsp_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>label_oid</name> <operator>=</operator> <call><name>insert_label</name><argument_list>(<argument><expr><name>label_name</name></expr></argument>, <argument><expr><name>graph_oid</name></expr></argument>, <argument><expr><name>label_id</name></expr></argument>, <argument><expr><name>label_type</name></expr></argument>,
                             <argument><expr><name>relation_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>label_oid</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// CREATE TABLE `schema_name`.`rel_name` (</comment>
<comment type="line">//   "id" graphid PRIMARY KEY DEFAULT "ag_catalog"."_graphid"(...),</comment>
<comment type="line">//   "start_id" graphid NOT NULL note: only for edge labels</comment>
<comment type="line">//   "end_id" graphid NOT NULL  note: only for edge labels</comment>
<comment type="line">//   "properties" agtype NOT NULL DEFAULT "ag_catalog"."agtype_build_map"()</comment>
<comment type="line">// )</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>create_table_for_label</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name</name></decl></parameter>,
                                   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl></parameter>,
                                   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_name</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>label_type</name></decl></parameter>,
                                   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>parents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CreateStmt</name> <modifier>*</modifier></type><name>create_stmt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>wrapper</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>create_stmt</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>CreateStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// relpersistence is set to RELPERSISTENCE_PERMANENT by makeRangeVar()</comment>
    <expr_stmt><expr><name><name>create_stmt</name><operator>-&gt;</operator><name>relation</name></name> <operator>=</operator> <call><name>makeRangeVar</name><argument_list>(<argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>rel_name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * When a new table has parents, do not create a column definition list.
     * Use the parents' column definition list instead, via Postgres'
     * inheritance system.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>parents</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>create_stmt</name><operator>-&gt;</operator><name>tableElts</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>label_type</name> <operator>==</operator> <name>LABEL_TYPE_EDGE</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>create_stmt</name><operator>-&gt;</operator><name>tableElts</name></name> <operator>=</operator> <call><name>create_edge_table_elements</name><argument_list>(
            <argument><expr><name>graph_name</name></expr></argument>, <argument><expr><name>label_name</name></expr></argument>, <argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>rel_name</name></expr></argument>, <argument><expr><name>seq_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>label_type</name> <operator>==</operator> <name>LABEL_TYPE_VERTEX</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>create_stmt</name><operator>-&gt;</operator><name>tableElts</name></name> <operator>=</operator> <call><name>create_vertex_table_elements</name><argument_list>(
            <argument><expr><name>graph_name</name></expr></argument>, <argument><expr><name>label_name</name></expr></argument>, <argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>rel_name</name></expr></argument>, <argument><expr><name>seq_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"undefined label type \'%c\'"</literal></expr></argument>, <argument><expr><name>label_type</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name><name>create_stmt</name><operator>-&gt;</operator><name>inhRelations</name></name> <operator>=</operator> <name>parents</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>create_stmt</name><operator>-&gt;</operator><name>partbound</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>create_stmt</name><operator>-&gt;</operator><name>ofTypename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>create_stmt</name><operator>-&gt;</operator><name>constraints</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>create_stmt</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>create_stmt</name><operator>-&gt;</operator><name>oncommit</name></name> <operator>=</operator> <name>ONCOMMIT_NOOP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>create_stmt</name><operator>-&gt;</operator><name>tablespacename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>create_stmt</name><operator>-&gt;</operator><name>if_not_exists</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>wrapper</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>PlannedStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wrapper</name><operator>-&gt;</operator><name>commandType</name></name> <operator>=</operator> <name>CMD_UTILITY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wrapper</name><operator>-&gt;</operator><name>canSetTag</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wrapper</name><operator>-&gt;</operator><name>utilityStmt</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>create_stmt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wrapper</name><operator>-&gt;</operator><name>stmt_location</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wrapper</name><operator>-&gt;</operator><name>stmt_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ProcessUtility</name><argument_list>(<argument><expr><name>wrapper</name></expr></argument>, <argument><expr><literal type="string">"(generated CREATE TABLE command)"</literal></expr></argument>,
                   <argument><expr><name>PROCESS_UTILITY_SUBCOMMAND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>None_Receiver</name></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// CommandCounterIncrement() is called in ProcessUtility()</comment>
</block_content>}</block></function>

<comment type="line">// CREATE TABLE `schema_name`.`rel_name` (</comment>
<comment type="line">//   "id" graphid PRIMARY KEY DEFAULT "ag_catalog"."_graphid"(...),</comment>
<comment type="line">//   "start_id" graphid NOT NULL</comment>
<comment type="line">//   "end_id" graphid NOT NULL</comment>
<comment type="line">//   "properties" agtype NOT NULL DEFAULT "ag_catalog"."agtype_build_map"()</comment>
<comment type="line">// )</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>create_edge_table_elements</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name</name></decl></parameter>,
                                        <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl></parameter>,
                                        <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ColumnDef</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ColumnDef</name> <modifier>*</modifier></type><name>start_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ColumnDef</name> <modifier>*</modifier></type><name>end_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ColumnDef</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>

    <comment type="line">// "id" graphid PRIMARY KEY DEFAULT "ag_catalog"."_graphid"(...)</comment>
    <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>makeColumnDef</name><argument_list>(<argument><expr><name>AG_EDGE_COLNAME_ID</name></expr></argument>, <argument><expr><name>GRAPHIDOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>constraints</name></name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><call><name>build_pk_constraint</name><argument_list>()</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>build_id_default</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>, <argument><expr><name>label_name</name></expr></argument>,
                                                  <argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>seq_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// "start_id" graphid NOT NULL</comment>
    <expr_stmt><expr><name>start_id</name> <operator>=</operator> <call><name>makeColumnDef</name><argument_list>(<argument><expr><name>AG_EDGE_COLNAME_START_ID</name></expr></argument>, <argument><expr><name>GRAPHIDOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                             <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>start_id</name><operator>-&gt;</operator><name>constraints</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>build_not_null_constraint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// "end_id" graphid NOT NULL</comment>
    <expr_stmt><expr><name>end_id</name> <operator>=</operator> <call><name>makeColumnDef</name><argument_list>(<argument><expr><name>AG_EDGE_COLNAME_END_ID</name></expr></argument>, <argument><expr><name>GRAPHIDOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>end_id</name><operator>-&gt;</operator><name>constraints</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>build_not_null_constraint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// "properties" agtype NOT NULL DEFAULT "ag_catalog"."agtype_build_map"()</comment>
    <expr_stmt><expr><name>props</name> <operator>=</operator> <call><name>makeColumnDef</name><argument_list>(<argument><expr><name>AG_EDGE_COLNAME_PROPERTIES</name></expr></argument>, <argument><expr><name>AGTYPEOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                          <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>constraints</name></name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><call><name>build_not_null_constraint</name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>build_properties_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>list_make4</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>start_id</name></expr></argument>, <argument><expr><name>end_id</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// CREATE TABLE `schema_name`.`rel_name` (</comment>
<comment type="line">//   "id" graphid PRIMARY KEY DEFAULT "ag_catalog"."_graphid"(...),</comment>
<comment type="line">//   "properties" agtype NOT NULL DEFAULT "ag_catalog"."agtype_build_map"()</comment>
<comment type="line">// )</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>create_vertex_table_elements</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name</name></decl></parameter>,
                                          <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl></parameter>,
                                          <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ColumnDef</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ColumnDef</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>

    <comment type="line">// "id" graphid PRIMARY KEY DEFAULT "ag_catalog"."_graphid"(...)</comment>
    <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>makeColumnDef</name><argument_list>(<argument><expr><name>AG_VERTEX_COLNAME_ID</name></expr></argument>, <argument><expr><name>GRAPHIDOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>constraints</name></name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><call><name>build_pk_constraint</name><argument_list>()</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>build_id_default</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>, <argument><expr><name>label_name</name></expr></argument>,
                                                  <argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>seq_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// "properties" agtype NOT NULL DEFAULT "ag_catalog"."agtype_build_map"()</comment>
    <expr_stmt><expr><name>props</name> <operator>=</operator> <call><name>makeColumnDef</name><argument_list>(<argument><expr><name>AG_VERTEX_COLNAME_PROPERTIES</name></expr></argument>, <argument><expr><name>AGTYPEOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                          <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>constraints</name></name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><call><name>build_not_null_constraint</name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>build_properties_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>list_make2</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// CREATE SEQUENCE `seq_range_var` MAXVALUE `LOCAL_ID_MAX`</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>create_sequence_for_label</name><parameter_list>(<parameter><decl><type><name>RangeVar</name> <modifier>*</modifier></type><name>seq_range_var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CreateSeqStmt</name> <modifier>*</modifier></type><name>seq_stmt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// greater than MAXINT8LEN+1</comment>
    <decl_stmt><decl><type><name>DefElem</name> <modifier>*</modifier></type><name>maxvalue</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pstate</name> <operator>=</operator> <call><name>make_parsestate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_sourcetext</name></name> <operator>=</operator> <literal type="string">"(generated CREATE SEQUENCE command)"</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>seq_stmt</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>CreateSeqStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_stmt</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>seq_range_var</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pg_lltoa</name><argument_list>(<argument><expr><name>ENTRY_ID_MAX</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxvalue</name> <operator>=</operator> <call><name>makeDefElem</name><argument_list>(<argument><expr><literal type="string">"maxvalue"</literal></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeFloat</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_stmt</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>maxvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_stmt</name><operator>-&gt;</operator><name>ownerId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_stmt</name><operator>-&gt;</operator><name>for_identity</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_stmt</name><operator>-&gt;</operator><name>if_not_exists</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>DefineSequence</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>seq_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Builds the primary key constraint for when a table is created.
 */</comment>
<function><type><specifier>static</specifier> <name>Constraint</name> <modifier>*</modifier></type><name>build_pk_constraint</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Constraint</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pk</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>Constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>contype</name></name> <operator>=</operator> <name>CONSTR_PRIMARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>keys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>indexname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>indexspace</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>pk</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Construct a FuncCall node that will create the default logic for the label's
 * id.
 */</comment>
<function><type><specifier>static</specifier> <name>FuncCall</name> <modifier>*</modifier></type><name>build_id_default_func_expr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name</name></decl></parameter>,
                                            <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>label_id_func_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>A_Const</name> <modifier>*</modifier></type><name>graph_name_const</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>A_Const</name> <modifier>*</modifier></type><name>label_name_const</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>label_id_func_args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FuncCall</name> <modifier>*</modifier></type><name>label_id_func</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>nextval_func_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>qualified_seq_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>A_Const</name> <modifier>*</modifier></type><name>qualified_seq_name_const</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TypeCast</name> <modifier>*</modifier></type><name>regclass_cast</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>nextval_func_args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FuncCall</name> <modifier>*</modifier></type><name>nextval_func</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>graphid_func_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>graphid_func_args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FuncCall</name> <modifier>*</modifier></type><name>graphid_func</name></decl>;</decl_stmt>

    <comment type="line">// Build a node that gets the label id</comment>
    <expr_stmt><expr><name>label_id_func_name</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"ag_catalog"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"_label_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>graph_name_const</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>A_Const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>graph_name_const</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_String</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>graph_name_const</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>graph_name</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>graph_name_const</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>label_name_const</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>A_Const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>label_name_const</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_String</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>label_name_const</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>label_name</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>label_name_const</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>label_id_func_args</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>graph_name_const</name></expr></argument>, <argument><expr><name>label_name_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>label_id_func</name> <operator>=</operator> <call><name>makeFuncCall</name><argument_list>(<argument><expr><name>label_id_func_name</name></expr></argument>, <argument><expr><name>label_id_func_args</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//Build a node that will get the next val from the label's sequence</comment>
    <expr_stmt><expr><name>nextval_func_name</name> <operator>=</operator> <call><name>SystemFuncName</name><argument_list>(<argument><expr><literal type="string">"nextval"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>qualified_seq_name</name> <operator>=</operator> <call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>seq_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>qualified_seq_name_const</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>A_Const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qualified_seq_name_const</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_String</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qualified_seq_name_const</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>qualified_seq_name</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qualified_seq_name_const</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>regclass_cast</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>TypeCast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>regclass_cast</name><operator>-&gt;</operator><name>typeName</name></name> <operator>=</operator> <call><name>SystemTypeName</name><argument_list>(<argument><expr><literal type="string">"regclass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>regclass_cast</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>qualified_seq_name_const</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>regclass_cast</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nextval_func_args</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>regclass_cast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nextval_func</name> <operator>=</operator> <call><name>makeFuncCall</name><argument_list>(<argument><expr><name>nextval_func_name</name></expr></argument>, <argument><expr><name>nextval_func_args</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Build a node that contructs the graphid from the label id function
     * and the next val function for the given sequence.
     */</comment>
    <expr_stmt><expr><name>graphid_func_name</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"ag_catalog"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"_graphid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>graphid_func_args</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>label_id_func</name></expr></argument>, <argument><expr><name>nextval_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>graphid_func</name> <operator>=</operator> <call><name>makeFuncCall</name><argument_list>(<argument><expr><name>graphid_func_name</name></expr></argument>, <argument><expr><name>graphid_func_args</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>graphid_func</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Construct a default constraint on the id column for a newly created table
 */</comment>
<function><type><specifier>static</specifier> <name>Constraint</name> <modifier>*</modifier></type><name>build_id_default</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name</name></decl></parameter>,
                                    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FuncCall</name> <modifier>*</modifier></type><name>graphid_func</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Constraint</name> <modifier>*</modifier></type><name>id_default</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>graphid_func</name> <operator>=</operator> <call><name>build_id_default_func_expr</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>, <argument><expr><name>label_name</name></expr></argument>,
                                              <argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>seq_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>id_default</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>Constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>id_default</name><operator>-&gt;</operator><name>contype</name></name> <operator>=</operator> <name>CONSTR_DEFAULT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>id_default</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>id_default</name><operator>-&gt;</operator><name>raw_expr</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>graphid_func</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>id_default</name><operator>-&gt;</operator><name>cooked_expr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>id_default</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// NOT NULL</comment>
<function><type><specifier>static</specifier> <name>Constraint</name> <modifier>*</modifier></type><name>build_not_null_constraint</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Constraint</name> <modifier>*</modifier></type><name>not_null</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>not_null</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>Constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>not_null</name><operator>-&gt;</operator><name>contype</name></name> <operator>=</operator> <name>CONSTR_NOTNULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>not_null</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <return>return <expr><name>not_null</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// DEFAULT "ag_catalog"."agtype_build_map"()</comment>
<function><type><specifier>static</specifier> <name>Constraint</name> <modifier>*</modifier></type><name>build_properties_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>func_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FuncCall</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Constraint</name> <modifier>*</modifier></type><name>props_default</name></decl>;</decl_stmt>

    <comment type="line">// "ag_catalog"."agtype_build_map"()</comment>
    <expr_stmt><expr><name>func_name</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"ag_catalog"</literal></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"agtype_build_map"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>makeFuncCall</name><argument_list>(<argument><expr><name>func_name</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>props_default</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>Constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>props_default</name><operator>-&gt;</operator><name>contype</name></name> <operator>=</operator> <name>CONSTR_DEFAULT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>props_default</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>props_default</name><operator>-&gt;</operator><name>raw_expr</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>func</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>props_default</name><operator>-&gt;</operator><name>cooked_expr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>props_default</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Alter the default constraint on the label's id to the use the given
 * sequence.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>change_label_id_default</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name</name></decl></parameter>,
                                    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_name</name></decl></parameter>,
                                    <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AlterTableStmt</name> <modifier>*</modifier></type><name>tbl_stmt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AlterTableCmd</name> <modifier>*</modifier></type><name>tbl_cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RangeVar</name> <modifier>*</modifier></type><name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FuncCall</name> <modifier>*</modifier></type><name>func_call</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>func_call</name> <operator>=</operator> <call><name>build_id_default_func_expr</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>, <argument><expr><name>label_name</name></expr></argument>, <argument><expr><name>schema_name</name></expr></argument>,
                                           <argument><expr><name>seq_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>makeRangeVar</name><argument_list>(<argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>label_name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pstate</name> <operator>=</operator> <call><name>make_parsestate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_sourcetext</name></name> <operator>=</operator> <literal type="string">"(generated ALTER TABLE command)"</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>tbl_stmt</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>AlterTableStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tbl_stmt</name><operator>-&gt;</operator><name>relation</name></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tbl_stmt</name><operator>-&gt;</operator><name>missing_ok</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>tbl_cmd</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>AlterTableCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tbl_cmd</name><operator>-&gt;</operator><name>subtype</name></name> <operator>=</operator> <name>AT_ColumnDefault</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tbl_cmd</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"id"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tbl_cmd</name><operator>-&gt;</operator><name>def</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>func_call</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tbl_stmt</name><operator>-&gt;</operator><name>cmds</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>tbl_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>AlterTable</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>, <argument><expr><name>tbl_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// CREATE SEQUENCE `seq_range_var` OWNED BY `schema_name`.`rel_name`."id"</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>alter_sequence_owned_by_for_label</name><parameter_list>(<parameter><decl><type><name>RangeVar</name> <modifier>*</modifier></type><name>seq_range_var</name></decl></parameter>,
                                              <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AlterSeqStmt</name> <modifier>*</modifier></type><name>seq_stmt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DefElem</name> <modifier>*</modifier></type><name>owned_by</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pstate</name> <operator>=</operator> <call><name>make_parsestate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_sourcetext</name></name> <operator>=</operator> <literal type="string">"(generated ALTER SEQUENCE command)"</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>seq_stmt</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>AlterSeqStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_stmt</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>seq_range_var</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>schema_name</name> <operator>=</operator> <name><name>seq_range_var</name><operator>-&gt;</operator><name>schemaname</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>list_make3</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name>schema_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name>rel_name</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>owned_by</name> <operator>=</operator> <call><name>makeDefElem</name><argument_list>(<argument><expr><literal type="string">"owned_by"</literal></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>id</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_stmt</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>owned_by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_stmt</name><operator>-&gt;</operator><name>for_identity</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_stmt</name><operator>-&gt;</operator><name>missing_ok</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>AlterSequence</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>seq_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32</name></type> <name>get_new_label_id</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>graph_oid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>nsp_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Oid</name></type> <name>seq_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>

    <comment type="line">// get the OID of the sequence</comment>
    <expr_stmt><expr><name>seq_id</name> <operator>=</operator> <call><name>get_relname_relid</name><argument_list>(<argument><expr><name>LABEL_ID_SEQ_NAME</name></expr></argument>, <argument><expr><name>nsp_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>seq_id</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_TABLE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"sequence \"%s\" does not exists"</literal></expr></argument>,
                               <argument><expr><name>LABEL_ID_SEQ_NAME</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <name>LABEL_ID_MIN</name></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;=</operator> <name>LABEL_ID_MAX</name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64</name></type> <name>label_id</name></decl>;</decl_stmt>

        <comment type="line">// the data type of the sequence is integer (int4)</comment>
        <expr_stmt><expr><name>label_id</name> <operator>=</operator> <call><name>nextval_internal</name><argument_list>(<argument><expr><name>seq_id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>label_id_is_valid</name><argument_list>(<argument><expr><name>label_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>label_id_exists</name><argument_list>(<argument><expr><name>graph_oid</name></expr></argument>, <argument><expr><name>label_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>(</operator><name>int32</name><operator>)</operator><name>label_id</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
                    <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"no more new labels are available"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                    <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"The maximum number of labels in a graph is %d"</literal></expr></argument>,
                            <argument><expr><name>LABEL_ID_MAX</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>drop_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type> <name>drop_label</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Name</name></type> <name>graph_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Name</name></type> <name>label_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>force</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name_str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>graph_cache_data</name> <modifier>*</modifier></type><name>cache_data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>graph_oid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>nsp_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name_str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>label_relation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>qname</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"graph name must not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"label name must not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>graph_name</name> <operator>=</operator> <call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>label_name</name> <operator>=</operator> <call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>force</name> <operator>=</operator> <call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>graph_name_str</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cache_data</name> <operator>=</operator> <call><name>search_graph_name_cache</name><argument_list>(<argument><expr><name>graph_name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache_data</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_SCHEMA</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"graph \"%s\" does not exist"</literal></expr></argument>, <argument><expr><name>graph_name_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>graph_oid</name> <operator>=</operator> <name><name>cache_data</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsp_id</name> <operator>=</operator> <name><name>cache_data</name><operator>-&gt;</operator><name>namespace</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>label_name_str</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>label_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>label_relation</name> <operator>=</operator> <call><name>get_label_relation</name><argument_list>(<argument><expr><name>label_name_str</name></expr></argument>, <argument><expr><name>graph_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>label_relation</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_TABLE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"label \"%s\" does not exist"</literal></expr></argument>, <argument><expr><name>label_name_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>force</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"force option is not supported yet"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>schema_name</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name>nsp_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rel_name</name> <operator>=</operator> <call><name>get_rel_name</name><argument_list>(<argument><expr><name>label_relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>qname</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name>schema_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name>rel_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>remove_relation</name><argument_list>(<argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// CommandCounterIncrement() is called in performDeletion()</comment>

    <comment type="line">// delete_label() will be called in object_access()</comment>

    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"label \"%s\".\"%s\" has been dropped"</literal></expr></argument>,
                            <argument><expr><name>graph_name_str</name></expr></argument>, <argument><expr><name>label_name_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// See RemoveRelations() for more details.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_relation</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>qname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>RangeVar</name> <modifier>*</modifier></type><name>rel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>rel_oid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>qname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// concurrent is false so lockmode is AccessExclusiveLock</comment>

    <comment type="line">// relkind is RELKIND_RELATION</comment>

    <expr_stmt><expr><call><name>AcceptInvalidationMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>makeRangeVarFromNameList</name><argument_list>(<argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rel_oid</name> <operator>=</operator> <call><name>RangeVarGetRelidExtended</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>,
                                       <argument><expr><name>RVR_MISSING_OK</name></expr></argument>,
                                       <argument><expr><name>range_var_callback_for_remove_relation</name></expr></argument>,
                                       <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>rel_oid</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * before calling this function, this condition is already checked in
         * drop_graph()
         */</comment>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ag_label catalog is corrupted"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Table \"%s\".\"%s\" does not exist"</literal></expr></argument>,
                                <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>schemaname</name></name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// concurent is false</comment>

    <expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>RelationRelationId</name></expr></argument>, <argument><expr><name>rel_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * set PERFORM_DELETION_INTERNAL flag so that object_access_hook can ignore
     * this deletion
     */</comment>
    <expr_stmt><expr><call><name>performDeletion</name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><name>DROP_RESTRICT</name></expr></argument>, <argument><expr><name>PERFORM_DELETION_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// See RangeVarCallbackForDropRelation() for more details.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>range_var_callback_for_remove_relation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RangeVar</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
                                                   <parameter><decl><type><name>Oid</name></type> <name>rel_oid</name></decl></parameter>,
                                                   <parameter><decl><type><name>Oid</name></type> <name>odl_rel_oid</name></decl></parameter>,
                                                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * arg is NULL because relkind is always RELKIND_RELATION, heapOid is
     * always InvalidOid, partParentOid is always InvalidOid, and concurrent is
     * always false. See RemoveRelations() for more details.
     */</comment>

    <comment type="line">// heapOid is always InvalidOid</comment>

    <comment type="line">// partParentOid is always InvalidOid</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>rel_oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// classform-&gt;relkind is always RELKIND_RELATION</comment>

    <comment type="line">// relkind == expected_relkind</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_class_ownercheck</name><argument_list>(<argument><expr><name>rel_oid</name></expr></argument>, <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>!</operator><call><name>pg_namespace_ownercheck</name><argument_list>(<argument><expr><call><name>get_rel_namespace</name><argument_list>(<argument><expr><name>rel_oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>,
                       <argument><expr><call><name>get_relkind_objtype</name><argument_list>(<argument><expr><call><name>get_rel_relkind</name><argument_list>(<argument><expr><name>rel_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// the target relation is not system class</comment>

    <comment type="line">// relkind is always RELKIND_RELATION</comment>

    <comment type="line">// is_partition is false</comment>
</block_content>}</block></function>
</unit>
