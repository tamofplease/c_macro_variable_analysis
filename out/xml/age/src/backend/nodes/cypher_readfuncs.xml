<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/age/src/backend/nodes/cypher_readfuncs.c"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/readfuncs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/cypher_readfuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/cypher_nodes.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Copied From Postgres
 *
 * Macros for declaring appropriate local variables.
 */</comment>
<comment type="line">// Declare the extensible node and local fields for the pg_strtok</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_LOCALS</name><parameter_list>(<parameter><type><name>nodeTypeName</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>nodeTypeName *local_node = (nodeTypeName *)node; \
        char *token; \
        int  length;</cpp:value></cpp:define>

<comment type="block">/*
 * The READ_*_FIELD defines first skips the :fildname token (key) part of the string
 * and then converts the next token (value) to the correct data type.
 *
 * pg_strtok will split the passed string by whitespace, skipping whitespace in
 * strings. We do not setup pg_strtok. That is for the the caller to do. By default
 * that is the responsibility of Postgres' nodeRead function. We assume that was setup
 * correctly.
 */</comment>

<comment type="line">// Read an integer field (anything written as ":fldname %d")</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_INT_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length); \
        token = pg_strtok(&amp;length); \
        local_node-&gt;fldname = atoi(token)</cpp:value></cpp:define>

<comment type="line">// Read an unsigned integer field (anything written as ":fldname %u")</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_UINT_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length); \
        token = pg_strtok(&amp;length); \
        local_node-&gt;fldname = atoui(token)</cpp:value></cpp:define>
<comment type="line">// Read an unsigned integer field (anything written using UINT64_FORMAT)</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_UINT64_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length); \
        token = pg_strtok(&amp;length); \
        local_node-&gt;fldname = pg_strtouint64(token, NULL, 10)</cpp:value></cpp:define>

<comment type="line">// Read a long integer field (anything written as ":fldname %ld")</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_LONG_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length); \
        token = pg_strtok(&amp;length); \
        local_node-&gt;fldname = atol(token)</cpp:value></cpp:define>

<comment type="line">// Read an OID field (don't hard-wire assumption that OID is same as uint)</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_OID_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length); \
        token = pg_strtok(&amp;length); \
        local_node-&gt;fldname = atooid(token)</cpp:value></cpp:define>

<comment type="line">// Read a char field (ie, one ascii character)</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_CHAR_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length); \
        token = pg_strtok(&amp;length); \
        <comment type="block">/* avoid overhead of calling debackslash() for one char */</comment> \
        local_node-&gt;fldname = (length == 0) ? '\0' : (token[0] == '\\' ? token[1] : token[0])</cpp:value></cpp:define>

<comment type="line">// Read an enumerated-type field that was written as an integer code</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_ENUM_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>, <parameter><type><name>enumtype</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length); \
        token = pg_strtok(&amp;length); \
        local_node-&gt;fldname = (enumtype) atoi(token)</cpp:value></cpp:define>

<comment type="line">// Read a float field</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_FLOAT_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length); \
        token = pg_strtok(&amp;length); \
        local_node-&gt;fldname = atof(token)</cpp:value></cpp:define>

<comment type="line">// Read a boolean field</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_BOOL_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length); \
        token = pg_strtok(&amp;length); \
        local_node-&gt;fldname = strtobool(token)</cpp:value></cpp:define>

<comment type="line">// Read a character-string field</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_STRING_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length); \
        token = pg_strtok(&amp;length); \
        local_node-&gt;fldname = non_nullable_string(token, length)</cpp:value></cpp:define>

<comment type="line">// Read a parse location field (and throw away the value, per notes above)</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_LOCATION_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length); \
        token = pg_strtok(&amp;length); \
        (void) token; \
        local_node-&gt;fldname = -1</cpp:value></cpp:define>

<comment type="line">// Read a Node field</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_NODE_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length);  \
        (void) token; \
        local_node-&gt;fldname = nodeRead(NULL, 0)</cpp:value></cpp:define>

<comment type="line">// Read a bitmapset field</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_BITMAPSET_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length); \
        (void) token; \
        local_node-&gt;fldname = _readBitmapset()</cpp:value></cpp:define>

<comment type="line">// Read an attribute number array</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_ATTRNUMBER_ARRAY</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length); \
        local_node-&gt;fldname = readAttrNumberCols(len);</cpp:value></cpp:define>

<comment type="line">// Read an oid array</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_OID_ARRAY</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length); \
        local_node-&gt;fldname = readOidCols(len);</cpp:value></cpp:define>

<comment type="line">// Read an int array</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_INT_ARRAY</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length); \
        local_node-&gt;fldname = readIntCols(len);</cpp:value></cpp:define>

<comment type="line">// Read a bool array</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_BOOL_ARRAY</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>token = pg_strtok(&amp;length); \
        local_node-&gt;fldname = readBoolCols(len);</cpp:value></cpp:define>

<comment type="block">/*
 * NOTE: use atoi() to read values written with %d, or atoui() to read
 * values written with %u in outfuncs.c.  An exception is OID values,
 * for which use atooid().  (As of 7.1, outfuncs.c writes OIDs as %u,
 * but this will probably change in the future.)
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atoui</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((unsigned int) strtoul((x), NULL, 10))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtobool</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((*(x) == 't') ? true : false)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nullable_string</name><parameter_list>(<parameter><type><name>token</name></type></parameter>,<parameter><type><name>length</name></type></parameter>)</parameter_list></cpp:macro>  \
        <cpp:value>((length) == 0 ? NULL : debackslash(token, length))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>non_nullable_string</name><parameter_list>(<parameter><type><name>token</name></type></parameter>,<parameter><type><name>length</name></type></parameter>)</parameter_list></cpp:macro>  \
        <cpp:value>((length) == 0 ? "" : debackslash(token, length))</cpp:value></cpp:define>

<comment type="block">/*
 * Default read function for cypher nodes. For most nodes, we don't expect
 * the node to ever be read (deserialized). So throw an error.
 */</comment>
<function><type><name>void</name></type> <name>read_ag_node</name><parameter_list>(<parameter><decl><type><name>ExtensibleNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected parseNodeString() for ag_node"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Deserialize a string representing the cypher_create_target_nodes
 * data structure.
 */</comment>
<function><type><name>void</name></type> <name>read_cypher_create_target_nodes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ExtensibleNode</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>READ_LOCALS</name><argument_list>(<argument><expr><name>cypher_create_target_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>READ_NODE_FIELD</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_INT_FIELD</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_OID_FIELD</name><argument_list>(<argument><expr><name>graph_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Deserialize a string representing the cypher_create_path
 * data structure.
 */</comment>
<function><type><name>void</name></type> <name>read_cypher_create_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ExtensibleNode</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>READ_LOCALS</name><argument_list>(<argument><expr><name>cypher_create_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>READ_NODE_FIELD</name><argument_list>(<argument><expr><name>target_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_INT_FIELD</name><argument_list>(<argument><expr><name>path_attr_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_STRING_FIELD</name><argument_list>(<argument><expr><name>var_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Deserialize a string representing the cypher_target_node
 * data structure.
 */</comment>
<function><type><name>void</name></type> <name>read_cypher_target_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ExtensibleNode</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>READ_LOCALS</name><argument_list>(<argument><expr><name>cypher_target_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>READ_CHAR_FIELD</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_INT_FIELD</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_ENUM_FIELD</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>cypher_rel_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_NODE_FIELD</name><argument_list>(<argument><expr><name>id_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_NODE_FIELD</name><argument_list>(<argument><expr><name>id_expr_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_NODE_FIELD</name><argument_list>(<argument><expr><name>prop_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_NODE_FIELD</name><argument_list>(<argument><expr><name>prop_expr_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_INT_FIELD</name><argument_list>(<argument><expr><name>prop_attr_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_NODE_FIELD</name><argument_list>(<argument><expr><name>resultRelInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_NODE_FIELD</name><argument_list>(<argument><expr><name>elemTupleSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_OID_FIELD</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_STRING_FIELD</name><argument_list>(<argument><expr><name>label_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_STRING_FIELD</name><argument_list>(<argument><expr><name>variable_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_INT_FIELD</name><argument_list>(<argument><expr><name>tuple_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Deserialize a string representing the cypher_update_information
 * data structure.
 */</comment>
<function><type><name>void</name></type> <name>read_cypher_update_information</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ExtensibleNode</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>READ_LOCALS</name><argument_list>(<argument><expr><name>cypher_update_information</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>READ_NODE_FIELD</name><argument_list>(<argument><expr><name>set_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_INT_FIELD</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_INT_FIELD</name><argument_list>(<argument><expr><name>tuple_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_STRING_FIELD</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_STRING_FIELD</name><argument_list>(<argument><expr><name>clause_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Deserialize a string representing the cypher_update_item
 * data structure.
 */</comment>
<function><type><name>void</name></type> <name>read_cypher_update_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ExtensibleNode</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>READ_LOCALS</name><argument_list>(<argument><expr><name>cypher_update_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>READ_INT_FIELD</name><argument_list>(<argument><expr><name>prop_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_INT_FIELD</name><argument_list>(<argument><expr><name>entity_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_STRING_FIELD</name><argument_list>(<argument><expr><name>var_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_STRING_FIELD</name><argument_list>(<argument><expr><name>prop_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_NODE_FIELD</name><argument_list>(<argument><expr><name>qualified_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_BOOL_FIELD</name><argument_list>(<argument><expr><name>remove_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Deserialize a string representing the cypher_delete_information
 * data structure.
 */</comment>
<function><type><name>void</name></type> <name>read_cypher_delete_information</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ExtensibleNode</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>READ_LOCALS</name><argument_list>(<argument><expr><name>cypher_delete_information</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>READ_NODE_FIELD</name><argument_list>(<argument><expr><name>delete_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_INT_FIELD</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_STRING_FIELD</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_OID_FIELD</name><argument_list>(<argument><expr><name>graph_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_BOOL_FIELD</name><argument_list>(<argument><expr><name>detach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Deserialize a string representing the cypher_delete_item
 * data structure.
 */</comment>
<function><type><name>void</name></type> <name>read_cypher_delete_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ExtensibleNode</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>READ_LOCALS</name><argument_list>(<argument><expr><name>cypher_delete_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>READ_NODE_FIELD</name><argument_list>(<argument><expr><name>entity_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_STRING_FIELD</name><argument_list>(<argument><expr><name>var_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Deserialize a string representing the cypher_merge_information
 * data structure.
 */</comment>
<function><type><name>void</name></type> <name>read_cypher_merge_information</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ExtensibleNode</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>READ_LOCALS</name><argument_list>(<argument><expr><name>cypher_merge_information</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>READ_INT_FIELD</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_OID_FIELD</name><argument_list>(<argument><expr><name>graph_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_INT_FIELD</name><argument_list>(<argument><expr><name>merge_function_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>READ_NODE_FIELD</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
