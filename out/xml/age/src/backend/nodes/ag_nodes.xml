<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/age/src/backend/nodes/ag_nodes.c"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/extensible.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/ag_nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/cypher_copyfuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/cypher_outfuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/cypher_readfuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/cypher_nodes.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>equal_ag_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExtensibleNode</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ExtensibleNode</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// This list must match ag_node_tag.</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>node_names</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"ag_node_invalid"</literal></expr>,
    <expr><literal type="string">"cypher_return"</literal></expr>,
    <expr><literal type="string">"cypher_with"</literal></expr>,
    <expr><literal type="string">"cypher_match"</literal></expr>,
    <expr><literal type="string">"cypher_create"</literal></expr>,
    <expr><literal type="string">"cypher_set"</literal></expr>,
    <expr><literal type="string">"cypher_set_item"</literal></expr>,
    <expr><literal type="string">"cypher_delete"</literal></expr>,
    <expr><literal type="string">"cypher_unwind"</literal></expr>,
    <expr><literal type="string">"cypher_merge"</literal></expr>,
    <expr><literal type="string">"cypher_path"</literal></expr>,
    <expr><literal type="string">"cypher_node"</literal></expr>,
    <expr><literal type="string">"cypher_relationship"</literal></expr>,
    <expr><literal type="string">"cypher_bool_const"</literal></expr>,
    <expr><literal type="string">"cypher_param"</literal></expr>,
    <expr><literal type="string">"cypher_map"</literal></expr>,
    <expr><literal type="string">"cypher_list"</literal></expr>,
    <expr><literal type="string">"cypher_string_match"</literal></expr>,
    <expr><literal type="string">"cypher_typecast"</literal></expr>,
    <expr><literal type="string">"cypher_integer_const"</literal></expr>,
    <expr><literal type="string">"cypher_sub_pattern"</literal></expr>,
    <expr><literal type="string">"cypher_call"</literal></expr>,
    <expr><literal type="string">"cypher_create_target_nodes"</literal></expr>,
    <expr><literal type="string">"cypher_create_path"</literal></expr>,
    <expr><literal type="string">"cypher_target_node"</literal></expr>,
    <expr><literal type="string">"cypher_update_information"</literal></expr>,
    <expr><literal type="string">"cypher_update_item"</literal></expr>,
    <expr><literal type="string">"cypher_delete_information"</literal></expr>,
    <expr><literal type="string">"cypher_delete_item"</literal></expr>,
    <expr><literal type="string">"cypher_merge_information"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Each node defined with this will have
 * an out function defined, but copy, equal,
 * and read will throw errors.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_NODE_METHODS</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>{ \
        CppAsString(type), \
        sizeof(type), \
        copy_ag_node, \
        equal_ag_node, \
        CppConcat(out_, type), \
        read_ag_node \
    }</cpp:value></cpp:define>

<comment type="block">/*
 *  Each node defined with this will have a
 *  copy, read, and write function defined.
 *  Equal will still throw an error.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_NODE_METHODS_EXTENDED</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>{ \
        CppAsString(type), \
        sizeof(type), \
        CppConcat(copy_, type), \
        equal_ag_node, \
        CppConcat(out_, type), \
        CppConcat(read_, type) \
    }</cpp:value></cpp:define>

<comment type="line">// This list must match ag_node_tag.</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>ExtensibleNodeMethods</name></type> <name><name>node_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_return</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_with</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_match</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_create</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_set</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_set_item</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_delete</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_unwind</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_merge</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_path</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_node</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_relationship</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_bool_const</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_param</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_map</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_list</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_string_match</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_typecast</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_integer_const</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_sub_pattern</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS</name><argument_list>(<argument><expr><name>cypher_call</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS_EXTENDED</name><argument_list>(<argument><expr><name>cypher_create_target_nodes</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS_EXTENDED</name><argument_list>(<argument><expr><name>cypher_create_path</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS_EXTENDED</name><argument_list>(<argument><expr><name>cypher_target_node</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS_EXTENDED</name><argument_list>(<argument><expr><name>cypher_update_information</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS_EXTENDED</name><argument_list>(<argument><expr><name>cypher_update_item</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS_EXTENDED</name><argument_list>(<argument><expr><name>cypher_delete_information</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DEFINE_NODE_METHODS_EXTENDED</name><argument_list>(<argument><expr><name>cypher_delete_item</name></expr></argument>)</argument_list></call></expr>,
    <macro><name>DEFINE_NODE_METHODS_EXTENDED</name><argument_list>(<argument>cypher_merge_information</argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>equal_ag_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExtensibleNode</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ExtensibleNode</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected equal() over ag_node's"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>register_ag_nodes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>initialized</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>node_methods</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>RegisterExtensibleNodeMethods</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node_methods</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><name>initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ExtensibleNode</name> <modifier>*</modifier></type><name>_new_ag_node</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>ag_node_tag</name></type> <name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ExtensibleNode</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>ExtensibleNode</name> <operator>*</operator><operator>)</operator><call><name>palloc0fast</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>T_ExtensibleNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>extnodename</name></name> <operator>=</operator> <name><name>node_names</name><index>[<expr><name>tag</name></expr>]</index></name></expr>;</expr_stmt>

    <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
</unit>
