<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/age/src/backend/nodes/cypher_copyfuncs.c"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/bitmapset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/extensible.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/palloc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/cypher_copyfuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/cypher_nodes.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Copied From Postgres
 *
 * Macros to simplify copying of different kinds of fields.  Use these
 * wherever possible to reduce the chance for silly typos.  Note that these
 * hard-wire the convention that the local variables in a Copy routine are
 * named 'extended_newnode' and 'extended_from'.
 */</comment>

<comment type="line">// Declare the local fields needed to copy extensible nodes</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_LOCALS</name><parameter_list>(<parameter><type><name>nodeTypeName</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>nodeTypeName *extended_newnode = (nodeTypeName *)newnode; \
    nodeTypeName *extended_from = (nodeTypeName *)from; \
    Assert(is_ag_node(newnode, nodeTypeName)); \
    Assert(is_ag_node(from, nodeTypeName));</cpp:value></cpp:define>


<comment type="line">// Copy a simple scalar field (int, float, bool, enum, etc)</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_SCALAR_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>(extended_newnode-&gt;fldname = extended_from-&gt;fldname)</cpp:value></cpp:define>

<comment type="line">// Copy a field that is a pointer to some kind of Node or Node tree</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_NODE_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>(extended_newnode-&gt;fldname = copyObject(extended_from-&gt;fldname))</cpp:value></cpp:define>

<comment type="line">// Copy a field that is a pointer to a Bitmapset</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_BITMAPSET_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>(extended_newnode-&gt;fldname = bms_copy(extended_from-&gt;fldname))</cpp:value></cpp:define>

<comment type="line">// Copy a field that is a pointer to a C string, or perhaps NULL</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_STRING_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>(extended_newnode-&gt;fldname = extended_from-&gt;fldname ? \
            pstrdup(extended_from-&gt;fldname) : (char *) NULL)</cpp:value></cpp:define>

<comment type="block">/*
 * Default copy function for cypher nodes. For most nodes, we don't expect
 * the node to ever be copied. So throw an error.
 */</comment>
<function><type><name>void</name></type> <name>copy_ag_node</name><parameter_list>(<parameter><decl><type><name>ExtensibleNode</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>ExtensibleNode</name> <modifier>*</modifier></type><name>oldnode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected copyObject() over ag_node"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// copy function for cypher_create_target_nodes</comment>
<function><type><name>void</name></type> <name>copy_cypher_create_target_nodes</name><parameter_list>(<parameter><decl><type><name>ExtensibleNode</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ExtensibleNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>COPY_LOCALS</name><argument_list>(<argument><expr><name>cypher_create_target_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>graph_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// copy function for cypher_create_path</comment>
<function><type><name>void</name></type> <name>copy_cypher_create_path</name><parameter_list>(<parameter><decl><type><name>ExtensibleNode</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ExtensibleNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>COPY_LOCALS</name><argument_list>(<argument><expr><name>cypher_create_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>path_attr_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>var_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>target_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// copy function for cypher_target_node</comment>
<function><type><name>void</name></type> <name>copy_cypher_target_node</name><parameter_list>(<parameter><decl><type><name>ExtensibleNode</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ExtensibleNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>COPY_LOCALS</name><argument_list>(<argument><expr><name>cypher_target_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>prop_attr_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tuple_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>label_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>variable_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>id_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>id_expr_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>prop_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>prop_expr_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>resultRelInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>elemTupleSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// copy function for cypher_update_information</comment>
<function><type><name>void</name></type> <name>copy_cypher_update_information</name><parameter_list>(<parameter><decl><type><name>ExtensibleNode</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ExtensibleNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>COPY_LOCALS</name><argument_list>(<argument><expr><name>cypher_update_information</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>set_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tuple_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>clause_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// copy function for cypher_update_item</comment>
<function><type><name>void</name></type> <name>copy_cypher_update_item</name><parameter_list>(<parameter><decl><type><name>ExtensibleNode</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ExtensibleNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>COPY_LOCALS</name><argument_list>(<argument><expr><name>cypher_update_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>prop_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>entity_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>var_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>prop_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>qualified_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>remove_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// copy function for cypher_delete_information</comment>
<function><type><name>void</name></type> <name>copy_cypher_delete_information</name><parameter_list>(<parameter><decl><type><name>ExtensibleNode</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ExtensibleNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>COPY_LOCALS</name><argument_list>(<argument><expr><name>cypher_delete_information</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>delete_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>graph_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>detach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// copy function for cypher_delete_item</comment>
<function><type><name>void</name></type> <name>copy_cypher_delete_item</name><parameter_list>(<parameter><decl><type><name>ExtensibleNode</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ExtensibleNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>COPY_LOCALS</name><argument_list>(<argument><expr><name>cypher_delete_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>entity_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>var_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// copy function for cypher_merge_information</comment>
<function><type><name>void</name></type> <name>copy_cypher_merge_information</name><parameter_list>(<parameter><decl><type><name>ExtensibleNode</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ExtensibleNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>COPY_LOCALS</name><argument_list>(<argument><expr><name>cypher_merge_information</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>graph_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>merge_function_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
